//=================================================================
// console.cs
//=================================================================
// Thetis is a C# implementation of a Software Defined Radio.
// Copyright (C) 2004-2009  FlexRadio Systems 
// Copyright (C) 2010-2018  Doug Wigley
// Credit is given to Sizenko Alexander of Style-7 (http://www.styleseven.com/) for the Digital-7 font.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// You may contact us via email at: sales@flex-radio.com.
// Paper mail may be sent to: 
//    FlexRadio Systems
//    8900 Marybank Dr.
//    Austin, TX 78750
//    USA
//=================================================================
// Modifications to support the Behringer Midi controllers
// by Chris Codella, W2PA, May 2017.  Indicated by //-W2PA comment lines. 
// Modifications for using the new database import function.  W2PA, 29 May 2017
// Support QSK, possible with Protocol-2 firmware v1.7 (Orion-MkI and Orion-MkII), and later.  W2PA, 5 April 2019 

using Midi2Cat.Data; //-W2PA Necessary for Behringer MIDI changes


namespace Thetis 
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Drawing;
    using System.Drawing.Drawing2D;
    using System.Drawing.Text;
    using System.Globalization;
    using System.IO;
    using System.IO.Ports;
    using System.Net;
    using System.Net.Sockets;
    using System.Reflection;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Text;
    using System.Windows.Forms;
    using System.Xml;
    using System.Xml.Linq;
    using System.Timers;
    using System.Linq;
    using System.Speech.Synthesis;

    #region Enums

    public enum FocusMasterMode
    {
        None = 0,
        Logger,
        Click,
        Title,
    }

    public enum FWCATUMode
    {
        FIRST = -1,
        Bypass,
        SemiAutomatic,
        Automatic,
        LAST,
    }

    public enum AntMode
    {
        Simple = 0,
        Expert,
    }

    public enum Window
    {
        FIRST = -1,
        RECTANGULAR,
        HANNING,
        WELCH,
        PARZEN,
        BARTLETT,
        HAMMING,
        BLACKMAN2,
        BLACKMAN3,
        BLACKMAN4,
        EXPONENTIAL,
        RIEMANN,
        BLKHARRIS,
        LAST,
    }

    public enum FWCAnt
    {
        NC = 0,
        ANT1,
        ANT2,
        ANT3,
        RX1IN,
        RX2IN,
        RX1TAP,
        SIG_GEN,
    }

    public enum RenderType
    {
        HARDWARE = 0,
        SOFTWARE,
        NONE,
    }

    public enum ColorSheme
    {
        original = 0,
        enhanced,
        SPECTRAN,
        BLACKWHITE,
        LinLog,
        LinRad,
        LinAuto,
        off,
    }

    public enum MultiMeterDisplayMode
    {
        Original = 0,
        Edge,
        Analog,
    }

    public enum FilterWidthMode
    {
        Linear = 0,
        Log,
        Log10,
    }

    public enum DisplayEngine
    {
        GDI_PLUS = 0,
        DIRECT_X,
    }

    public enum Model
    {
        HPSDR = 0,
        HERMES,
        ANAN10,
        ANAN10E,
        ANAN100,
        ANAN100B,
        ANAN100D,
        ANAN200D,
        ORIONMKII,
        ANAN7000D,
        ANAN8000D
    }

    public enum HPSDRModel
    {
        FIRST = -1,
        HPSDR,
        HERMES,
        ANAN10,
        ANAN10E,
        ANAN100,
        ANAN100B,
        ANAN100D,
        ANAN200D,
        ORIONMKII,
        ANAN7000D,
        ANAN8000D,
        LAST
    }

    public enum BPFBand
    {
        NONE = -1,
        B160,
        B60,
        B20,
        B40,
        B10,
        B6,
    }

    public enum RFELPFBand
    {
        NONE = -1,
        AUX,
        B6,
        B60,
        B20,
        B30,
        B40,
        B1210,
        B80,
        B1715,
        B160,
    }

    public enum PAFBand
    {
        NONE = 0,
        B1210,
        B1715,
        B3020,
        B6040,
        B80,
        B160,
    }

    public enum XVTRTRMode
    {
        NEGATIVE = 0,	// DEMI144-28FRS
        POSITIVE,		// 25W DEMI
        NONE,			// For Elecraft or similar XVTR
    }

    public enum DisplayMode
    {
        FIRST = -1,
        SPECTRUM,
        PANADAPTER,
        SCOPE,
        SCOPE2,
        PHASE,
        PHASE2,
        WATERFALL,
        HISTOGRAM,
        PANAFALL,
        PANASCOPE,
        SPECTRASCOPE,
        OFF,
        LAST,
    }

    public enum AGCMode
    {
        FIRST = -1,
        FIXD,
        LONG,
        SLOW,
        MED,
        FAST,
        CUSTOM,
        LAST,
    }

    public enum MeterRXMode
    {
        FIRST = -1,
        SIGNAL_STRENGTH,
        SIGNAL_AVERAGE,
        ADC_L,
        ADC_R,
        ADC2_L,
        ADC2_R,
        OFF,
        LAST,
    }

    public enum MeterTXMode
    {
        FIRST = -1,
        FORWARD_POWER,
        REVERSE_POWER,
        SWR_POWER,
        MIC,
        EQ,
        LEVELER,
        LVL_G,
        CFC_PK,
        CFC_G,
        COMP,
        ALC,
        ALC_G,
        SWR,
        OFF,
        LAST,
    }

    public enum KeyerLine
    {
        None = 0,
        DTR,
        RTS,
    }

    public enum DateTimeMode
    {
        OFF = 0,
        LOCAL,
        UTC,
        LAST,
    }

    public enum FRSRegion
    {
        FIRST = -1,
        US = 0,
        Spain = 1,
        Europe = 2,
        UK = 3,
        Italy_Plus = 4,
        Japan = 5,
        Australia = 6,
        Norway = 7,
        Denmark = 8,
        Latvia = 9,
        Slovakia = 10,
        Bulgaria = 11,
        Greece = 12,
        Hungary = 13,
        Netherlands = 14,
        France = 15,
        Russia = 16,
        Israel = 17,
        Extended = 18,
        India = 19,
        Sweden = 20,
        LAST,
    }

    public enum PreampMode
    {
        FIRST = -1,
        HPSDR_OFF,
        HPSDR_ON,
        HPSDR_MINUS10,
        HPSDR_MINUS20,
        HPSDR_MINUS30,
        HPSDR_MINUS40,
        HPSDR_MINUS50,
        SA_MINUS10,
        SA_MINUS30,
        // STEP_ATTEN,
        LAST,
    }

    public enum StatusPin
    {
        PIN_12 = 0x08,		//S3
        Dash = 0x10,		//S4
        Dot = 0x20,		//S5
        PA_DATA = 0x40,		//S6
        PIN_11 = 0x80,		//S7\
    }

    public enum ATUTuneMode
    {
        FIRST = -1,
        BYPASS,
        MEMORY,
        FULL,
        LAST,
    }

    public enum DSPMode
    {
        FIRST = -1,
        LSB,
        USB,
        DSB,
        CWL,
        CWU,
        FM,
        AM,
        DIGU,
        SPEC,
        DIGL,
        SAM,
        DRM,
        AM_LSB,
        AM_USB,
        LAST,
    }

    public enum Band
    {
        FIRST = -1,
        GEN,
        B160M,
        B80M,
        B60M,
        B40M,
        B30M,
        B20M,
        B17M,
        B15M,
        B12M,
        B10M,
        B6M,
        B2M,
        WWV,

        VHF0,
        VHF1,
        VHF2,
        VHF3,
        VHF4,
        VHF5,
        VHF6,
        VHF7,
        VHF8,
        VHF9,
        VHF10,
        VHF11,
        VHF12,
        VHF13,

        BLMF, // ke9ns move down below vhf
        B120M,
        B90M,
        B61M,
        B49M,
        B41M,
        B31M,
        B25M,
        B22M,
        B19M,
        B16M,
        B14M,
        B13M,
        B11M,

        LAST,
    }

    public enum Filter
    {
        FIRST = -1,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        VAR1,
        VAR2,
        NONE,
        LAST,
    }

    public enum PTTMode
    {
        FIRST = -1,
        NONE,
        MANUAL,
        MIC,
        CW,
        X2,
        CAT,
        VOX,
        SPACE,
        LAST,
    }

    public enum DisplayLabelAlignment
    {
        FIRST = -1,
        LEFT,
        CENTER,
        RIGHT,
        AUTO,
        OFF,
        LAST,
    }

    public enum ClickTuneMode
    {
        Off = 0,
        VFOA,
        VFOB,
        //VFOAC,
    }

    public enum FMTXMode
    {
        // Order is chosen carefully here for memory form -- take care before rearranging
        High = 0,   // +
        Simplex,    // S
        Low,        // -     
    }

    public enum HPSDRHW
    {
        Atlas = 0,
        Hermes = 1,
        HermesII = 2, // ANAN-10E ANAN-100B HeremesII
        Angelia = 3,  // ANAN-100D
        Orion = 4,    // ANAN-200D
        OrionMKII = 5 // AMAM-7000DLE 7000DLEMkII ANAN-8000DLE OrionMkII
    }

    public enum DSPFilterType
    {
        Linear_Phase = 0,
        Low_Latency = 1,
    }

    public enum DisplayRegion
    {
        freqScalePanadapterRegion,
        panadapterRegion,
        dBmScalePanadapterRegion,
        waterfallRegion,
        filterRegion,
        filterRegionLow,
        filterRegionHigh,
        agcButtonRegion,
        agcThresholdLine,
        agcHangLine,
        agcFixedGainLine,
        //lockedPanButtonRegion,
        //vfoToMidButtonRegion,
        //midToVfoButtonRegion,
        //clickVfoButtonRegion,
        elsewhere
    }

    #endregion

    unsafe public partial class Console : System.Windows.Forms.Form
    {

        //==================================================================================
        //==================================================================================
        // ke9ns add (copied from cwx precision multimedia msec timer)
        //       everything below

        #region Win32 Multimedia Timer Functions

        //  private int tel;            // time of one element in ms

        // Represents the method that is called by Windows when a timer event occurs.
        private delegate void TimeProc(int id, int msg, int user, int param1, int param2);

        // Specifies constants for multimedia timer event types.

        public enum TimerMode
        {
            OneShot,    // Timer event occurs once.
            Periodic    // Timer event occurs periodically.
        };

        // Represents information about the timer's capabilities.
        [StructLayout(LayoutKind.Sequential)]
        public struct TimerCaps
        {
            public int periodMin;   // Minimum supported period in milliseconds.
            public int periodMax;   // Maximum supported period in milliseconds.
        }

        // Gets timer capabilities.
        [DllImport("winmm.dll")]
        private static extern int timeGetDevCaps(ref TimerCaps caps, int sizeOfTimerCaps);

        // Creates and starts the timer.
        [DllImport("winmm.dll")]
        private static extern int timeSetEvent(int delay, int resolution, TimeProc proc, int user, int mode);


        // Stops and destroys the timer.
        [DllImport("winmm.dll")]
        private static extern int timeKillEvent(int id);

        // Indicates that the operation was successful.
        private const int TIMERR_NOERROR = 0;

        // Timer identifier.
        private int timerID;

        private TimeProc timeProcPeriodic;   // ke9ns add to use windows based multimedia timer
        SpeechSynthesizer speaker = new SpeechSynthesizer(); // ke9ns add 
        // HidDevice.PowerMate powerMate = new HidDevice.PowerMate();  // ke9ns add link back to PowerMate.cpp and PowerMate.h
        public int KBON = 0; // ke9ns add 1=knob present 0=knob not present
        public int speed = 0; // ke9ns add speed of knob freq change
        public int lastvalue = 0; // ke9ns add knob

        public CheckBoxTS chkRX1MUTE;  // ke9ns add allow RX1 mute of flex radio audio but not vac stream audio
        //  private Label label2;    // ke9ns add label for chkrx1mute


        private TextBoxTS txtNOAA2;    // ke9ns add for space weather on main console screen
        private TextBoxTS txtNOAA;    // ke9ns add for space weather on main console screen
        //  private LabelTS labelTS2;
        //  private LabelTS labelTS1;
        //   public NumericUpDownTS udTXFilterLow;
        // public NumericUpDownTS udTXFilterHigh;
        public CheckBoxTS chkBoxMuteSpk;
        public CheckBoxTS chkBoxDrive;
        //  private LabelTS labelTS5;

        //   Stopwatch WATCH1 = new Stopwatch();
        //    Stopwatch WATCH2 = new Stopwatch();


        #endregion

        #region Variable Declarations
        // ======================================================
        // Variable Declarations
        // ======================================================
        static private PrivateFontCollection fonts = null;
        Font LEDLFont = null;
        Font LEDSFont = null;
        Font LEDMFont = null;

        public PSForm psform;
        private DigiMode rx1dm;
        private DigiMode rx2dm;

        public Radio radio;
        public SpecRX specRX;
        public Midi2CatCommands Midi2Cat;

        private SIOListenerII siolisten = null;
        private SIO2ListenerII sio2listen = null;
        private SIO3ListenerII sio3listen = null;
        private SIO4ListenerII sio4listen = null;

        private System.Timers.Timer n1mm_delay;             // timer for setting delay on focus
        private Thread draw_display_thread;					// draws the main display 
        private Thread multimeter_thread;					// updates the rx1/tx meter data
        private Thread rx2_meter_thread;					// updates the rx2 meter data
        private Thread poll_ptt_thread;						// polls the PTT line on the parallel port
        private Thread poll_cw_thread;
        private Thread poll_pa_pwr_thread;					// polls the FWD and REV power if the PA is installed
        private Thread poll_tx_inhibit_thead;
        private Thread display_volts_amps_thead;            // calculate and display volts and amps for ANAN-8000DLE
        private Thread sql_update_thread;					// polls the RX signal strength
        private Thread rx2_sql_update_thread;				// polls the RX2 signal strength
        private Thread vox_update_thread;					// polls the mic input
        private Thread noise_gate_update_thread;			// polls the mic input during TX
        public bool pause_DisplayThread;// = false;
        private bool calibration_running = false;
        private bool displaydidit = false;
        public Mutex calibration_mutex = new Mutex();

        public Http httpFile;                           // ke9ns add
        public HttpServer httpServer = null;           // rn3kk add

        public Setup SetupForm;
        public CWX CWXForm;
        public XVTRForm XVTRForm;
        public EQForm EQForm;
        public FilterForm filterRX1Form;
        public FilterForm filterRX2Form;
        public DiversityForm diversityForm;
        public RAForm raForm;
        public Path_Illustrator path_Illustrator;
        // public RadioInfo radio_info;
        // public ContactInfo contact_info;
        public MemoryForm memoryForm;
        public MemoryList MemoryList { get; private set; }
        public WaveControl WaveForm;

        public SpotControl SpotForm;                       // ke9ns add DX spotter function
        public ScanControl ScanForm;                       // ke9ns add freq Scanner function
        public StackControl StackForm;                     // ke9ns add band stack form
        public SwlControl SwlForm;                         // ke9ns add band swl form

        //====================================================================================

        private DXMemList dxmemList; // ke9ns add
        public DXMemList DXMemList // ke9ns add
        {
            get { return dxmemList; }
        }

        //=======================================================================================

        private int rx1_squelch_threshold_scroll = -160;
        private int rx2_squelch_threshold_scroll = -160;
        private bool rx1_squelch_on = false;
        private bool rx2_squelch_on = false;
        private bool rx1_fm_squelch_on = true;
        private bool rx2_fm_squelch_on = true;
        private int rx1_fm_squelch_threshold_scroll = 0;
        private int rx2_fm_squelch_threshold_scroll = 0;
        private bool whatisVHF = false;  //w3sz true if VHF panel is being displayed
        private bool whatisHF = true;   //w3sz true if HF panel is being displayed
        private bool whatisGEN = false;   //w3sz true if SWL panel is being displayed
        private bool iscollapsed = false;  //w3sz true if collapsed panel is being displayed
        private bool isexpanded = true;   //w3sz true if expanded panel is being displayed
        public bool resetForAutoMerge = false;

        private bool run_setup_wizard = false;

        public int band_160m_index;						// These band indexes are used to keep track of which
        public int band_80m_index;				    	// location in the bandstack was last saved/recalled
        public int band_60m_index;
        public int band_40m_index;
        public int band_30m_index;
        public int band_20m_index;
        public int band_17m_index;
        public int band_15m_index;
        public int band_12m_index;
        public int band_10m_index;
        public int band_6m_index;
        public int band_2m_index;
        public int band_wwv_index;
        public int band_gen_index;

        public int band_LMF_index; // ke9ns add
        public int band_120m_index;
        public int band_90m_index;
        public int band_61m_index;
        public int band_49m_index;
        public int band_41m_index;
        public int band_31m_index;
        public int band_25m_index;
        public int band_22m_index;
        public int band_19m_index;
        public int band_16m_index;
        public int band_14m_index;
        public int band_13m_index;
        public int band_11m_index;

        public int band_vhf0_index;
        public int band_vhf1_index;
        public int band_vhf2_index;
        public int band_vhf3_index;
        public int band_vhf4_index;
        public int band_vhf5_index;
        public int band_vhf6_index;
        public int band_vhf7_index;
        public int band_vhf8_index;
        public int band_vhf9_index;
        public int band_vhf10_index;
        public int band_vhf11_index;
        public int band_vhf12_index;
        public int band_vhf13_index;

        public int band_160m_register;						// These integers are the number of band stack registers
        public int band_80m_register;						// found in the database for each band
        public int band_60m_register;
        public int band_40m_register;
        public int band_30m_register;
        public int band_20m_register;
        public int band_17m_register;
        public int band_15m_register;
        public int band_12m_register;
        public int band_10m_register;
        public int band_6m_register;
        public int band_2m_register;
        public int band_wwv_register;
        public int band_gen_register;

        public int band_LMF_register; // ke9ns add
        public int band_120m_register;
        public int band_90m_register;
        public int band_61m_register;
        public int band_49m_register;
        public int band_41m_register;
        public int band_31m_register;
        public int band_25m_register;
        public int band_22m_register;
        public int band_19m_register;
        public int band_16m_register;
        public int band_14m_register;
        public int band_13m_register;
        public int band_11m_register;

        public int band_vhf0_register;
        public int band_vhf1_register;
        public int band_vhf2_register;
        public int band_vhf3_register;
        public int band_vhf4_register;
        public int band_vhf5_register;
        public int band_vhf6_register;
        public int band_vhf7_register;
        public int band_vhf8_register;
        public int band_vhf9_register;
        public int band_vhf10_register;
        public int band_vhf11_register;
        public int band_vhf12_register;
        public int band_vhf13_register;

        private RadioButtonTS[] vhf_text;

        private bool was_panadapter = false;				// used to restore panadater when switching to spectrum DSP mode
        private bool was_waterfall = false;					// used to restore waterfall when switching to spectrum DSP mode

        public float[] rx1_preamp_offset;					// offset values for each preamp mode in dB
        public float[] rx2_preamp_offset;					// offset values for each preamp mode in dB
        public float rx1_meter_cal_offset;					// multimeter calibration offset per volume setting in dB
        public float rx2_meter_cal_offset;					// multimeter calibration offset per volume setting in dB
        public float[] rx_meter_cal_offset_by_radio;
        public float[] rx_display_cal_offset_by_radio;
        private int[] rx1_step_attenuator_by_band;
        private int[] rx2_step_attenuator_by_band;
        private int[] tx_step_attenuator_by_band;
        private bool[] diversity_rx1_ref_by_band;
        private bool[] diversity_rx2_ref_by_band;

        private bool rx1_above30;
        private bool rx2_above30;
        private bool meter_data_ready;						// used to synchronize the new DSP data with the multimeter
        private float new_meter_data;						// new data for the multimeter from the DSP
        private float current_meter_data;					// current data for the multimeter
        private int meter_peak_count;						// Counter for peak hold on multimeter
        private int meter_peak_value;						// Value for peak hold on multimeter
        private float[] meter_text_history;					// Array used to output the peak power over a period of time
        private int meter_text_history_index;				// index used with above variable to do peak power
        private float new_swrmeter_data;						// new data for the multimeter from the DSP
        private float current_swrmeter_data;					// current data for the multimeter

        private bool rx2_meter_data_ready;					// used to synchronize the new DSP data with the multimeter
        private float rx2_meter_new_data;					// new data for the multimeter from the DSP
        private float rx2_meter_current_data;				// current data for the multimeter
        private int rx2_meter_peak_count;					// Counter for peak hold on multimeter
        private int rx2_meter_peak_value;					// Value for peak hold on multimeter
        public int pa_fwd_power;							// forward power as read by the ADC on the PA
        public int pa_rev_power;							// reverse power as read by the ADC on the PA
        private bool tuning;								// true when the TUN button is active
        public float[][] rx1_level_table;					// table used to store RX1 Level cal settings
        public float[][] rx2_level_table;					// table used to store RX2 Level cal settings

        public double[] CTCSS_array =  {
            67.0 , 69.3 , 71.9 , 74.4 , 77.0 , 79.7 , 82.5 , 85.4 , 88.5 , 91.5 ,
            94.8 , 97.4 , 100.0, 103.5, 107.2, 110.9, 114.8, 118.8, 123.0, 127.3,
            131.8, 136.5, 141.3, 146.2, 151.4, 156.7, 159.8, 162.2, 165.5, 167.9,
            171.3, 173.8, 177.3, 179.9, 183.5, 186.2, 189.9, 192.8, 199.5, 203.5,
            206.5, 210.7, 218.1, 225.7, 229.1, 233.6, 241.8, 250.3, 254.1};

        public double[] FM_deviation_array = { 5000, 2500 };

        private bool shift_down;							// used to modify tuning rate
        private bool calibrating;							// true if running a calibration routine
        private bool manual_mox;							// True if the MOX button was clicked on (not PTT)		

        private DSPMode vfob_dsp_mode;						// Saves control pointer for last mode used on VFO B 
        private Filter vfob_filter;							// Saves control pointer for last filter used on VFO B
        private int vfo_char_width;							// Used to calibrate mousewheel tuning
        private int vfo_char_space;							// Used to calibrate mousewheel tuning
        private int vfo_small_char_width;					// Used to calibrate mousewheel tuning
        private int vfo_small_char_space;					// Used to calibrate mousewheel tuning
        private int vfo_decimal_width;						// Used to calibrate mousewheel tuning
        private int vfo_decimal_space;						// Used to calibrate mousewheel tuning		
        private int vfo_sub_char_width;						// Used to calibrate mousewheel tuning
        private int vfo_sub_char_space;						// Used to calibrate mousewheel tuning
        private int vfo_sub_decimal_width;					// Used to calibrate mousewheel tuning
        private int vfo_sub_decimal_space;					// Used to calibrate mousewheel tuning	
        private int vfo_pixel_offset;						// Used to calibrate mousewheel tuning
        private int vfoa_hover_digit;						// Digit for hover display
        private int vfo_sub_pixel_offset;
        private int vfoa_sub_hover_digit;					// Digit for VFOA sub hover display
        private int vfob_hover_digit;						// Digit for hover display
        public string last_band;							// Used in bandstacking algorithm

        private DSPMode quick_save_mode;					// Quick Save Mode
        private Filter quick_save_filter;					// Quick Save Filter

        private string separator;							// contains the locations specific decimal separator

        private int last_filter_shift;						// VK6APH
        private int last_var1_shift;						// VK6APH 
        private int last_var2_shift;						// VK6APH

        public string[] CmdLineArgs;

        private double rx1_avg_last_ddsfreq = 0;				// Used to move the display average when tuning
        private double rx1_avg_last_dttsp_osc = 0;
        private double rx1_last_bin_shift_leftover = 0;

        private double rx2_avg_last_ddsfreq = 0;				// Used to move the display average when tuning
        private double rx2_avg_last_dttsp_osc = 0;
        private double rx2_last_bin_shift_leftover = 0;

        private HiPerfTimer break_in_timer;
        public double avg_vox_pwr = 0.0;

        public float alex_fwd = 0;
        public float alex_rev = 0;
        public float drivepwr = 0.0f;
        public float calfwdpower = 0.0f;
        public float alex_swr = 0.0f;
        private float average_drivepwr = 0.0f;
        private float average_revadc = 0.0f;
        private float average_fwdadc = 0.0f;
        private float average_drvadc = 0.0f;
        private float volts_138 = 0.0f;

        private static MemoryStream msgrab = new MemoryStream(Properties.Resources.grab);
        private static MemoryStream msgrabbing = new MemoryStream(Properties.Resources.grabbing);
        NumberFormatInfo nfi = NumberFormatInfo.InvariantInfo;  // so we are region independent in terms of ',' and '.' for floats

        // BT 11/05/2007
        // public Thetis.RemoteProfiles ProfileForm;
        private string machineName = System.Environment.MachineName;

        //EHR 25Mar08
        // private TDxInput.Device TDxDevice;
        // private TDxInput.Sensor TDxSensor;

        public bool initializing = true;
        public bool booting = false;

        private int h_delta = 0;		//k6jca 1/15/08
        private int v_delta = 0;		//k6jca 1/15/08

        private int previous_delta = 0;  //k6jca

        private Size console_basis_size = new Size(100, 100);		//k6jca
        private Point gr_filter_basis_location = new Point(100, 100);		//k6jca
        private Point gr_Multimeter_basis_location = new Point(100, 100);		//k6jca
        private Point gr_BandHF_basis_location = new Point(100, 100);		//k6jca
        private Point gr_BandGEN_basis_location = new Point(100, 100);
        private Point gr_BandVHF_basis_location = new Point(100, 100);		//k6jca
        private Point gr_Mode_basis_location = new Point(100, 100);		//k6jca
        private Point gr_VFOB_basis_location = new Point(100, 100);		//k6jca
        private Point gr_VFOA_basis_location = new Point(100, 100);		//k6jca
        private Point gr_ModePhone_basis_location = new Point(100, 100);		//k6jca
        private Point gr_ModeCW_basis_location = new Point(100, 100);		//k6jca
        private Point gr_ModeDig_basis_location = new Point(100, 100);		//k6jca
        private Point gr_ModeFM_basis_location = new Point(100, 100);  // anonymous
        private Point gr_VFO_basis_location = new Point(100, 100);		//k6jca
        private Point gr_vfobetween_basis_location = new Point(100, 100);		//k6jca
        private Point btn_display_pan_center_basis = new Point(100, 100);		//k6jca
        private Point tb_display_pan_basis = new Point(100, 100);		//k6jca
        private Size tb_display_pan_size_basis = new Size(100, 100);		//k6jca
        private Point btn_display_zoom_4x_basis = new Point(100, 100);		//k6jca
        private Point btn_display_zoom_2x_basis = new Point(100, 100);		//k6jca
        private Point btn_display_zoom_1x_basis = new Point(100, 100);		//k6jca
        private Point btn_display_zoom_05_basis = new Point(100, 100);		//k6jca
        private Point tb_display_zoom_basis = new Point(100, 100);		//k6jca
        private Point txt_display_peak_freq_basis = new Point(100, 100);		//k6jca
        private Point txt_display_peak_power_basis = new Point(100, 100);		//k6jca
        private Point txt_display_peak_offset_basis = new Point(100, 100);		//k6jca
        private Point lbl_display_zoom_basis = new Point(100, 100);		//k6jca
        private Size gr_display_size_basis = new Size(100, 100);		//k6jca
        private Size pic_display_size_basis = new Size(100, 100);		//k6jca
        private Size pic_waterfall_size_basis = new Size(100, 100);
        private Size txtOverload_size_basis = new Size(100, 100);		//k6jca
        private Point txtOverload_basis = new Point(100, 100);		//k6jca
        private Point gr_display2_basis = new Point(100, 100);		//k6jca
        private Point gr_dsp_basis = new Point(100, 100);		//k6jca
        private Point tb_displaypan_basis = new Point(100, 100);		//k6jca
        private Point lbl_displaypan_basis = new Point(100, 100);		//k6jca
        private Point txt_display_cursor_freq_basis = new Point(100, 100);		//k6jca
        private Point txt_display_cursor_power_basis = new Point(100, 100);		//k6jca
        private Point txt_display_cursor_offset_basis = new Point(100, 100);		//k6jca

        private Point txt_display_orion_mkii_pa_volts_basis = new Point(100, 100);		//k6jca
        private Point txt_display_orion_mkii_blank_basis = new Point(100, 100);		//k6jca
        private Point txt_display_orion_mkii_pa_amps_basis = new Point(100, 100);		//k6jca

        private Point gr_multirx_basis = new Point(100, 100);		//k6jca

        private Point pan_rx2_divider_basis = new Point(100, 100);
        private Size pan_rx2_divider_size_basis = new Size(100, 100);

        private Point gr_display_split_basis = new Point(100, 100); // KE5DTO
        private Point gr_options_basis = new Point(100, 100);		//k6jca
        private Point gr_sound_controls_basis = new Point(100, 100);		//k6jca
        private Point chk_squelch_basis = new Point(100, 100);		//k6jca
        private Point ud_squelch_basis = new Point(100, 100);		//k6jca
        private Point pic_sql_basis = new Point(100, 100);		//k6jca
        private Point tb_sql_basis = new Point(100, 100);		//k6jca
        private Point gr_antenna_basis = new Point(100, 100);		//k6jca
        private Point chk_bci_basis = new Point(100, 100);		//k6jca
        private Point button1_basis = new Point(100, 100);		//k6jca
        private Point gr_date_time_basis = new Point(100, 100);		//k6jca
        //private Point lbl_cpu_meter_basis = new Point (100,100);		//k6jca

        private Point gr_rx2_meter_basis = new Point(100, 100);
        private Point gr_rx2_filter_basis = new Point(100, 100);
        private Point gr_rx2_mode_basis = new Point(100, 100);
        private Point gr_rx2_display_basis = new Point(100, 100);
        private Point gr_rx2_dsp_basis = new Point(100, 100);

        private Point lbl_rx2_rf_basis = new Point(100, 100);
        private Point ud_rx2_rf_basis = new Point(100, 100);
        private Point tb_rx2_rf_basis = new Point(100, 100);
        private Point gr_rx2_rf_basis = new Point(100, 100);

        private Point chk_rx2_squelch_basis = new Point(100, 100);
        private Point ud_rx2_squelch_basis = new Point(100, 100);
        private Point tb_rx2_squelch_basis = new Point(100, 100);
        private Point pic_rx2_squelch_basis = new Point(100, 100);

        private Point gr_rx2_mixer_basis = new Point(100, 100);
        private Point gr_rx2_enable_basis = new Point(100, 100);
        private Point chk_rx2_enable_basis = new Point(100, 100);
        private Point combo_rx2_preamp_basis = new Point(100, 100);
        private Point lbl_rx2_band_basis = new Point(100, 100);
        private Point combo_rx2_band_basis = new Point(100, 100);
        public bool si570_used = false; // modif F8CHK

        // :W1CEG:
        private Size gr_multi_meter_size_basis = new Size(100, 100);
        private Point pic_multi_meter_digital_basis = new Point(100, 100);
        private Size pic_multi_meter_size_basis = new Size(100, 100);
        private Point pic_rx2meter_basis = new Point(100, 100);
        private Size pic_rx2meter_size_basis = new Size(100, 100);
        private Point lbl_multi_smeter_basis = new Point(100, 100);
        private Size lbl_multi_smeter_size_basis = new Size(100, 100);
        private Point lbl_rx2meter_basis = new Point(100, 100);
        private Size lbl_rx2meter_size_basis = new Size(100, 100);
        private Point txt_multi_text_basis = new Point(100, 100);
        private Point txt_rx2meter_basis = new Point(100, 100);
        private Point chk_power_basis = new Point(100, 100);		//k6jca
        private Point gr_power_basis = new Point(100, 100);		//k6jca
        private Size gr_options_size_basis = new Size(100, 100);
        private Point chk_mon_basis = new Point(100, 100);
        private Point chk_mut_basis = new Point(100, 100);
        private Point chk_mox_basis = new Point(100, 100);
        private Point chk_tun_basis = new Point(100, 100);
        private Point chk_vox_basis = new Point(100, 100);
        private Point chk_dup_basis = new Point(100, 100);
        private Point chk_ctun_basis = new Point(100, 100);
        private Point chk_x2tr_basis = new Point(100, 100);
        // private Point lbl_af_basis = new Point(100, 100);
        private Point tb_af_basis = new Point(100, 100);
        private Point tb_rf_basis = new Point(100, 100);
        private Point tb_pwr_basis = new Point(100, 100);
        // private Point gp_rx2rf_basis = new Point(100, 100);
        // private Point tb_rx2rf_basis = new Point(100, 100);
        private Point tb_rx1af_basis = new Point(100, 100);
        private Point tb_rx2af_basis = new Point(100, 100);
        private Point gr_display_basis = new Point(100, 100);
        private Point pic_display_basis = new Point(100, 100);
        private Point pic_waterfall_basis = new Point(100, 100);
        private Point combo_display_mode_basis = new Point(100, 100);
        private Point combo_agc_basis = new Point(100, 100);
        private Point combo_preamp_basis = new Point(100, 100);
        private Point combo_rx2agc_basis = new Point(100, 100);
        private Point combo_meter_rxmode_basis = new Point(100, 100);
        private Point combo_rx2meter_mode_basis = new Point(100, 100);
        private Point combo_meter_txmode_basis = new Point(100, 100);
        private Point ud_rx1_step_att_present_data_basis = new Point(100, 100);
        private Point ud_rx2_step_att_present_data_basis = new Point(100, 100);
        private Size tb_display_zoom_size_basis = new Size(100, 100);
        private Size gr_BandHF_basis_size = new Size(100, 100);
        private Size gr_BandGEN_basis_size = new Size(100, 100);
        private Size gr_BandVHF_basis_size = new Size(100, 100);
        private Size gr_Mode_basis_size = new Size(100, 100);
        private Point rad_band160_basis = new Point(100, 100);
        private Point rad_band80_basis = new Point(100, 100);
        private Point rad_band60_basis = new Point(100, 100);
        private Point rad_band40_basis = new Point(100, 100);
        private Point rad_band30_basis = new Point(100, 100);
        private Point rad_band20_basis = new Point(100, 100);
        private Point rad_band17_basis = new Point(100, 100);
        private Point rad_band15_basis = new Point(100, 100);
        private Point rad_band12_basis = new Point(100, 100);
        private Point rad_band10_basis = new Point(100, 100);
        private Point rad_band6_basis = new Point(100, 100);
        private Point rad_band2_basis = new Point(100, 100);
        private Point rad_bandwwv_basis = new Point(100, 100);
        private Point rad_bandgen_basis = new Point(100, 100);
        private Point rad_bandVHF0_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF1_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF2_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF3_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF4_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF5_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF6_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF7_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF8_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF9_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF10_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF11_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF12_basis = new Point(100, 100);//w3sz added
        private Point rad_bandVHF13_basis = new Point(100, 100);//w3sz added
        private Point btn_bandVHF_basis = new Point(100, 100);//w3sz added
        private Point btn_bandHF_basis = new Point(100, 100);//w3sz added
        private Point rad_bandGEN0_basis = new Point(100, 100);
        private Point rad_bandGEN1_basis = new Point(100, 100);
        private Point rad_bandGEN2_basis = new Point(100, 100);
        private Point rad_bandGEN3_basis = new Point(100, 100);
        private Point rad_bandGEN4_basis = new Point(100, 100);
        private Point rad_bandGEN5_basis = new Point(100, 100);
        private Point rad_bandGEN6_basis = new Point(100, 100);
        private Point rad_bandGEN7_basis = new Point(100, 100);
        private Point rad_bandGEN8_basis = new Point(100, 100);
        private Point rad_bandGEN9_basis = new Point(100, 100);
        private Point rad_bandGEN10_basis = new Point(100, 100);
        private Point rad_bandGEN11_basis = new Point(100, 100);
        private Point rad_bandGEN12_basis = new Point(100, 100);
        private Point rad_bandGEN13_basis = new Point(100, 100);
        private Point btn_bandHF1_basis = new Point(100, 100);
        private Point rad_mode_lsb_basis = new Point(100, 100);
        private Point rad_mode_usb_basis = new Point(100, 100);
        private Point rad_mode_dsb_basis = new Point(100, 100);
        private Point rad_mode_cwl_basis = new Point(100, 100);
        private Point rad_mode_cwu_basis = new Point(100, 100);
        private Point rad_mode_fmn_basis = new Point(100, 100);
        private Point rad_mode_am_basis = new Point(100, 100);
        private Point rad_mode_sam_basis = new Point(100, 100);
        private Point rad_mode_spec_basis = new Point(100, 100);
        private Point rad_mode_digl_basis = new Point(100, 100);
        private Point rad_mode_digu_basis = new Point(100, 100);
        private Point rad_mode_drm_basis = new Point(100, 100);

        //
        // G8NJJ: Titlebar strings for Andromeda
        //
        private string TitleBarMultifunction;                   // shows action assigned to multi encoder
        private string TitleBarEncoder;                         // shows most recent encoder value change
        #endregion

        #region Constructor and Destructor
        // ======================================================
        // Constructor and Destructor
        // ======================================================

        public Console(string[] args)
        {
            Display.specready = false;

            foreach (string s in args)
            {
                if (s.StartsWith("-datapath:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);
                    if (path.EndsWith("\"")) path = path.Substring(0, path.Length - 1);
                    if (!path.EndsWith("\\")) path += "\\";
                    if (Directory.Exists(path))
                        AppDataPath = path;
                    else
                    {
                        DialogResult dr = MessageBox.Show("-datapath: command line option found, but the folder specified was not found.\n" +
                            "Would you like to create this folder?  If not, the default folder will be used.\n\n" +
                            "(" + s + ")",
                            "Command Line Option: Create Folder?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                        {
                            Directory.CreateDirectory(path);
                            AppDataPath = path;
                        }
                    }
                }
            }

            if (app_data_path == "")
            {
                // Assembly assembly = Assembly.GetExecutingAssembly();
                //  FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                // string version = fvi.FileVersion; //.Substring(0, fvi.FileVersion.LastIndexOf("."));
                AppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
                    + "\\OpenHPSDR\\Thetis\\";
            }

            foreach (string s in args)
            {
                if (s.StartsWith("-dbfilename:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);
                    if (File.Exists(path))
                    {
                        DBFileName = path;
                    }
                    else
                    {
                        DialogResult dr = MessageBox.Show("-dbfilename: command line option found, but the file specified was not found.\n" +
                            "Would you like to create this file?  If not, the default database will be used.\n\n" +
                            "(" + s + ")",
                            "Command Line Option: Create File?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                            DBFileName = path;
                    }
                }
            }


#if(DEBUG)
            AppDataPath += "Debug\\";
#endif
            if (!Directory.Exists(app_data_path))
                Directory.CreateDirectory(app_data_path);

            if (db_file_name == "")
                DBFileName = AppDataPath + "database.xml";

            string autoMergeFileName = AppDataPath + "databaseToMerge.xml"; //-W2PA A legacy database candidate for automatic merging

            if (File.Exists(db_file_name))
            {
                if (Keyboard.IsKeyDown(Keys.LShiftKey) || Keyboard.IsKeyDown(Keys.RShiftKey))
                {
                    Thread.Sleep(500); // ensure this is intentional
                    if (Keyboard.IsKeyDown(Keys.LShiftKey) || Keyboard.IsKeyDown(Keys.RShiftKey))
                    {
                        DialogResult dr = MessageBox.Show(
                             "The database reset function has been tiggered.  Would you like to reset your database?\n\n" +
                             "If so, a copy of the current database will be placed in the DB_Archive folder with\n" +
                             "a date and time stamp in the file name, before creating a brand new\n" +
                             "database for active use.",
                             "Reset Database?",
                             MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                        if (dr == DialogResult.Yes)
                        {
                            string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                            string datetime = DateTime.Now.ToShortDateString().Replace("/", "-") + "_" +
                                DateTime.Now.ToShortTimeString().Replace(":", ".");

                            string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                            file = file.Substring(0, file.Length - 4);
                            if (!Directory.Exists(AppDataPath + "\\DB_Archive\\"))
                                Directory.CreateDirectory(AppDataPath + "\\DB_Archive\\");

                            File.Copy(db_file_name, AppDataPath + "\\DB_Archive\\Thetis_" + file + "_" + datetime + ".xml", true);
                            File.Delete(db_file_name);
                            Thread.Sleep(100);
                        }
                    }
                }

                if (File.Exists(db_file_name))
                {
                    if (!DB.Init(this)) // Init throws an exception on reading XML files that are too corrupted for DataSet.ReadXml to handle.
                    {
                        string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                        string datetime = DateTime.Now.ToShortDateString().Replace("/", "-") + "_" +
                            DateTime.Now.ToShortTimeString().Replace(":", ".");

                        string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                        file = file.Substring(0, file.Length - 4);
                        if (!Directory.Exists(AppDataPath + "\\DB_Archive\\"))
                            Directory.CreateDirectory(AppDataPath + "\\DB_Archive\\");

                        File.Copy(db_file_name, AppDataPath + "\\DB_Archive\\Thetis" + file + "_" + datetime + ".xml", true);
                        File.Delete(db_file_name);
                        MessageBox.Show("The database file could not be read. It has been copied to the DB_Archive folder\n\n"
                                    + "Current database has been reset and initialized.  After the reset, "
                                    + "you can try importing another working database file using Setup - Import Database.", "Database Read Failure",
                                     MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    else
                    {
                        string DBVersion = "";
                        string version = getVersion();
                        ArrayList a = DB.GetVars("State");
                        a.Sort();
                        foreach (string s in a)
                        {
                            string[] vals = s.Split('/');
                            string name = vals[0];
                            string val = vals[1];

                            switch (name)
                            {
                                case "VersionNumber":
                                    DBVersion = val;
                                    break;
                            }
                        }

                        if (DBVersion != "" && DBVersion != version || File.Exists(autoMergeFileName)) // Back-level DB detected
                        {
                            //-W2PA Automatically reset, shut down, and import the old database file if possible

                            if (File.Exists(autoMergeFileName)) // We have already reset and are ready for trying a merge
                            {
                                //-W2PA Import carefully, allowing use of DB files created by previous versions so as to retain settings and options   
                                if (DB.ImportAndMergeDatabase(autoMergeFileName, AppDataPath))
                                {
                                    string versionName = TitleBar.GetString();
                                    versionName = versionName.Remove(versionName.LastIndexOf("("));  // strip off date                                    
                                    File.Delete(autoMergeFileName);
                                    DB.WriteCurrentDB(db_file_name);
                                    DB.Init(this);
                                    MessageBox.Show("Your database from a previous version was imported successfully into a new one.\n\n"
                                        + versionName + " will now start.", "Success!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                else
                                {
                                    File.Delete(db_file_name);
                                    File.Delete(autoMergeFileName);
                                    Thread.Sleep(100);
                                    MessageBox.Show("A previous version database file could not be imported. It has been copied to the DB_Archive folder\n\n. "
                                        + "The current database has been reset and initialized.\n"
                                        + "You can try importing another working database file using Setup - Import Database.", "Database Import Failure",
                                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                }
                                resetForAutoMerge = false;
                            }
                            else  // Not yet ready for trying an automatic merge - get set up for it
                            {
                                // Archive the old database file and reset database
                                string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                                string datetime = DateTime.Now.ToShortDateString().Replace("/", "-") + "_" +
                                    DateTime.Now.ToShortTimeString().Replace(":", ".");

                                string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                                file = file.Substring(0, file.Length - 4);
                                if (!Directory.Exists(AppDataPath + "\\DB_Archive\\"))
                                    Directory.CreateDirectory(AppDataPath + "\\DB_Archive\\");
                                File.Copy(db_file_name, AppDataPath + "\\DB_Archive\\Thetis" + file + "_" + datetime + ".xml", true);
                                File.Copy(db_file_name, autoMergeFileName, true); // After reset and restart, this will be a flag to attempt to merge
                                File.Delete(db_file_name);
                                resetForAutoMerge = true;  // a flag to main()

                                MessageBox.Show("Your database file is from a previous version.\nMerging it into a new reset database will now be attempted.\n\n"
                                    + "First your old database will be saved in DB_Archive folder,\nand a database reset will happen.\n\n"
                                    + "Please RE-START when the reset finishes.", "Note", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            }

                        }
                    }

                }

            }

            CmdLineArgs = args;

            Splash.ShowSplashScreen();							// Start splash screen

            Splash.SetStatus("Initializing Components");		// Set progress point
            booting = true;
            InitializeComponent();								// Windows Forms Generated Code
            booting = false;

            GlobalMouseHandler gmh = new GlobalMouseHandler(); // capture mouse up event
            gmh.MouseUp += new MouseMovedEvent(gmh_MouseUp);
            Application.AddMessageFilter(gmh);

            foreach (PanelTS control in this.Controls.OfType<PanelTS>())
            {
                foreach (TextBoxTS c in control.Controls.OfType<TextBoxTS>())
                {
                    c.GotFocus += new EventHandler(textbox_GotFocus);
                    c.LostFocus += new EventHandler(textbox_LostFocus);
                }
                foreach (ComboBoxTS c in control.Controls.OfType<ComboBoxTS>())
                {
                    c.DropDown += new EventHandler(combo_OpenDropDown);
                    c.DropDownClosed += new EventHandler(combo_CloseDropDown);
                }

            }

            foreach (GroupBoxTS control in this.Controls.OfType<GroupBoxTS>())
            {
                foreach (TextBoxTS c in control.Controls.OfType<TextBoxTS>())
                {
                    c.GotFocus += new EventHandler(textbox_GotFocus);
                    c.LostFocus += new EventHandler(textbox_LostFocus);
                }
                foreach (ComboBoxTS c in control.Controls.OfType<ComboBoxTS>())
                {
                    c.DropDown += new EventHandler(combo_OpenDropDown);
                    c.DropDownClosed += new EventHandler(combo_CloseDropDown);
                }
            }

            // for resizing
            GrabConsoleSizeBasis();
            MinimumSize = this.Size;

            Splash.SetStatus("Initializing Database");			// Set progress point
            DB.Init(this);											// Initialize the database

            InitCTCSS();
            Splash.SetStatus("Initializing Hardware");			// Set progress point

            bool RX2Enabled = false;
            if (File.Exists(db_file_name))
            {
                ArrayList a = DB.GetVars("State");
                a.Sort();
                foreach (string s in a)
                {
                    string[] vals = s.Split('/');
                    string name = vals[0];
                    string val = vals[1];

                    switch (name)
                    {
                        case "BandTextID":
                            FRSRegion r = (FRSRegion)Enum.Parse(typeof(FRSRegion), val);
                            CurrentRegion = r;
                            break;
                        case "chkRX2":
                            RX2Enabled = bool.Parse(val);
                            break;
                    }
                }
            }

            Application.DoEvents();

            if (RX2Enabled)
            {
                // chkRX2.Visible = true;
                // lblAntRX2.Visible = true;
                //panelRX2Divider.Visible = true;
                this.MinimumSize = new Size(this.MinimumSize.Width, this.MinimumSize.Height - (panelRX2Filter.Height + 8));
            }
            else
            {
                console_basis_size.Height -= (panelRX2Filter.Height + 8);
                this.MinimumSize = new Size(this.MinimumSize.Width, this.MinimumSize.Height - (panelRX2Filter.Height + 8));
                // if (chkRX2.Checked) chkRX2.Checked = false;
                this.Height -= (panelRX2Filter.Height + 8);
            }

            Splash.SetStatus("Initializing Radio");				// Set progress point
            radio = new Radio();								// Initialize the Radio processor
            specRX = new SpecRX();
            Display.specready = true;

            Splash.SetStatus("Initializing PortAudio");			// Set progress point
            PA19.PA_Initialize();								// Initialize the audio interface

            Splash.SetStatus("Loading Main Form");				// Set progress point
            Splash.SplashForm.Owner = this;						// So that main form will show/focus when splash disappears
            break_in_timer = new HiPerfTimer();

            Midi2Cat = new Midi2CatCommands(this);

            Init60mChannels();
            LoadLEDFont();
            InitConsole();										// Initialize all forms and main variables

            CWFWKeyer = true;                 
            Splash.SetStatus("Finished");						// Set progress point
            // Activates double buffering

            this.SetStyle(ControlStyles.UserPaint |
               ControlStyles.AllPaintingInWmPaint |
               ControlStyles.OptimizedDoubleBuffer, true);

            this.UpdateStyles();

            Splash.CloseForm();									// End splash screen

            // update titlebar
            this.Text = TitleBar.GetString();
            SetupForm.UpdateCustomTitle();

            //-W2PA Need to do this if first time during database import process
            if (run_setup_wizard)
            {
                // var w = new SetupWizard(this, 0);
                //w.ShowDialog();

                ArrayList a = new ArrayList();
                a.Add("SetupWizard/1");
                DB.SaveVars("State", ref a);

                SetupForm.SaveOptions();
                SaveState();
            }

            if (rx1_meter_cal_offset == 0.0f)
            {
                switch (current_hpsdr_model)
                {
                    case HPSDRModel.ORIONMKII:
                    case HPSDRModel.ANAN7000D:
                    case HPSDRModel.ANAN8000D:
                        rx1_meter_cal_offset = 3.00f;
                        rx2_meter_cal_offset = 3.00f;
                        break;
                    default:
                        rx1_meter_cal_offset = -2.44f;
                        rx2_meter_cal_offset = -2.44f;
                        break;
                }
            }

            if (rx1_display_cal_offset == 0.0f)
            {
                switch (current_hpsdr_model)
                {
                    case HPSDRModel.ORIONMKII:
                    case HPSDRModel.ANAN7000D:
                    case HPSDRModel.ANAN8000D:
                        RX1DisplayCalOffset = 3.36f;
                        break;
                    default:
                        RX1DisplayCalOffset = -2.1f;
                        break;
                }
            }

            foreach (string s in CmdLineArgs)
            {
                if (s == "-autostart")
                {
                    Thread autoStartThread = new Thread(new ThreadStart(AutoStart));
                    autoStartThread.Start();
                }
                else if (s.StartsWith("-datapath:"))
                {
                    string path = s.Substring(s.IndexOf(":") + 1);
                    if (Directory.Exists(path))
                        AppDataPath = path;
                }
            }

            SyncDSP();

            initializing = false;
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            chkSquelch_CheckedChanged(this, EventArgs.Empty);
            chkRX2Squelch_CheckedChanged(this, EventArgs.Empty);

            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();

            if (draw_display_thread == null || !draw_display_thread.IsAlive)
            {
                draw_display_thread = new Thread(new ThreadStart(RunDisplay));
                draw_display_thread.Name = "Draw Display Thread";
                draw_display_thread.Priority = ThreadPriority.BelowNormal;
                draw_display_thread.IsBackground = true;
                draw_display_thread.Start();
            }

            rx1_meter_cal_offset = rx_meter_cal_offset_by_radio[(int)current_hpsdr_model];
            RX1DisplayCalOffset = rx_display_cal_offset_by_radio[(int)current_hpsdr_model];
            if (resetForAutoMerge)
            {
                MessageBox.Show("Please RE-START now.", "Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }
        void AutoStart()
        {
            Thread.Sleep(2000);
            chkPower.Checked = true;
        }

        void gmh_MouseUp()
        {
            if (!selectByClick)
                ToggleFocusMasterTimer();
        }

        //private int dispose_count = 0;
        public bool reset_db = false;
        protected override void Dispose(bool disposing)
        {
            if (Midi2Cat != null) Midi2Cat.CloseMidi2Cat();
            if (disposing)
            {
                if (components != null)
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
            ExitConsole();
            if (reset_db)
            {
                string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                string datetime = DateTime.Now.ToShortDateString().Replace("/", "-") + "_" +
                    DateTime.Now.ToShortTimeString().Replace(":", ".");

                string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                file = file.Substring(0, file.Length - 4);
                if (!Directory.Exists(AppDataPath + "\\DB_Archive\\"))
                    Directory.CreateDirectory(AppDataPath + "\\DB_Archive\\");

                File.Copy(db_file_name, AppDataPath + "\\DB_Archive\\Thetis_" + file + "_" + datetime + ".xml");
                // File.Copy(db_file_name, desktop + "\\PowerSDR_" + file + "_" + datetime + ".xml");
                File.Delete(db_file_name);
            }
        }

        #endregion

        #region Main
        // ======================================================
        // Main
        // ======================================================

        [STAThread]
        static void Main(string[] args)
        {
            string app_data_path = "";
            foreach (string s in args)
            {
                if (s.StartsWith("-datapath:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);
                    if (path.EndsWith("\"")) path = path.Substring(0, path.Length - 1);
                    if (!path.EndsWith("\\")) path += "\\";
#if(DEBUG)
                    path += "Debug\\";
#endif
                    if (Directory.Exists(path))
                        app_data_path = path;
                    else
                    {
                        DialogResult dr = MessageBox.Show("-datapath: command line option found, but the folder specified was not found.\n" +
                            "Would you like to create this folder?  If not, the default folder will be used.\n\n" +
                            "(" + s + ")",
                            "Command Line Option: Create Folder?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                        {
                            Directory.CreateDirectory(path);
                            app_data_path = path;
                        }
                    }
                }
            }

            if (app_data_path == "")
            {
                Assembly assembly = Assembly.GetExecutingAssembly();
                FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                string version = fvi.FileVersion.Substring(0, fvi.FileVersion.LastIndexOf("."));
                app_data_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
                    + "\\OpenHPSDR\\Thetis\\";
#if(DEBUG)
                app_data_path += "Debug\\";
#endif
            }

            try
            {
                {
                    // Need to create the directory in %appdata% before we go run wisdom
                    if (!Directory.Exists(app_data_path))
                        Directory.CreateDirectory(app_data_path);
                }

                try
                {
                    if (!CheckForOpenProcesses())
                        return;
                }
                catch (Exception)
                {

                }

                Win32.TimeBeginPeriod(1); // set timer resolution to 1ms => freq=1000Hz
                Application.EnableVisualStyles();
                Application.DoEvents();

                theConsole = new Console(args);
                if (theConsole.resetForAutoMerge)
                {
                    Application.Exit();
                }
                else Application.Run(theConsole);
            }
            catch (Exception ex)
            {
                string msg = ex.Message + "\n\n" + ex.StackTrace.ToString();
                if (ex.InnerException != null) msg += "\n\n" + ex.InnerException.Message;
                MessageBox.Show(msg, "Fatal Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        #endregion

        #region Misc Routines
        // ======================================================
        // Misc Routines
        // ======================================================

        private bool just_imported_initial_db = false;
        public bool JustImportedInitialDB
        {
            get { return just_imported_initial_db; }
            set { just_imported_initial_db = value; }
        }

        private bool spec_display = true;
        public bool SpecDisplay
        {
            get { return spec_display; }
            set
            {
                spec_display = value;
                cmaster.SetRunPanadapter(0, value);
            }
        }
//
// added G8NJJ for Andromeda controller
//
        public string TitleBarMultifunctionString
        {
            set
            {
                TitleBarMultifunction = value;
                if (iscollapsed)
                    this.Text = TitleBar.GetString() + TitleBarMultifunction + "    " + TitleBarEncoder;
                else
                    this.Text = TitleBar.GetString() + TitleBarMultifunction;
            }
        }

        public string TitleBarEncoderString
        {
            set
            {
                TitleBarEncoder = value;
                if (iscollapsed)
                    this.Text = TitleBar.GetString() + TitleBarMultifunction + "    " + TitleBarEncoder;
            }
        }

        private bool fwc_rca_ptt = false;
        public bool FWCRCAPTT
        {
            get { return fwc_rca_ptt; }
            set { fwc_rca_ptt = value; }
        }

        private bool fwc_mic_ptt = false;
        public bool FWCMicPTT
        {
            get { return fwc_mic_ptt; }
            set { fwc_mic_ptt = value; }
        }

        private bool mic_ptt = false;
        public bool MicPTT
        {
            get { return mic_ptt; }
            set { mic_ptt = value; }
        }

        private void LoadLEDFont()
        {
            //string[] names = Assembly.GetExecutingAssembly().GetManifestResourceNames();
            Stream stmFont = Assembly.GetExecutingAssembly().GetManifestResourceStream(
            "Thetis.Resources.digital7.ttf");
            byte[] rgbyt = new Byte[stmFont.Length];
            stmFont.Read(rgbyt, 0, rgbyt.Length);
            uint cFonts;
            Win32.AddFontMemResourceEx(rgbyt, rgbyt.Length, IntPtr.Zero, out cFonts);

            IntPtr pbyt = Marshal.AllocCoTaskMem(rgbyt.Length);
            Marshal.Copy(rgbyt, 0, pbyt, rgbyt.Length);
            fonts = new PrivateFontCollection();
            fonts.AddMemoryFont(pbyt, rgbyt.Length);

            LEDLFont = new Font(fonts.Families[0], 24.0F);
            //txtVFOAFreq.Font = new Font(LEDLFont, FontStyle.Regular);
            //txtVFOBFreq.Font = new Font(LEDLFont, FontStyle.Regular);
            //txtVFOAMSD.Font = new Font(LEDLFont, FontStyle.Regular);
            //txtVFOBMSD.Font = new Font(LEDLFont, FontStyle.Regular);
            LEDSFont = new Font(fonts.Families[0], 19.0F);
            //txtVFOALSD.Font = new Font(LEDSFont, FontStyle.Regular);
            //txtVFOBLSD.Font = new Font(LEDSFont, FontStyle.Regular);
            LEDMFont = new Font(fonts.Families[0], 22.0F);
            //txtMultiText.Font = new Font(LEDMFont, FontStyle.Regular);
            //txtRX2Meter.Font = new Font(LEDMFont, FontStyle.Regular);
        }

        private void InitConsole()
        {

            psform = new PSForm(this);
            // PSForm.console = this;


            booting = true;
            /*   // EHR add nav support
               try
               {
                   TDxDevice = new TDxInput.DeviceClass();
                   TDxSensor = TDxDevice.Sensor;
                   TDxDevice.Connect();
                   if (TDxDevice.IsConnected)
                   {
                       this.timer_navigate.Interval = 100;
                       this.timer_navigate.Enabled = true;
                   }
               }
               catch (Exception)
               {
                   //MessageBox.Show("SpaceNavigator not installed.", "No Navigator",
                   //MessageBoxButtons.OK, MessageBoxIcon.Information);
               }
               // EHR end */

            Thread.Sleep(100);
            UpdateBandStackRegisters();

            Audio.console = this;
            Display.console = this;

            chkDSPNB2.Enabled = true;

            vfoa_hover_digit = -1;
            vfob_hover_digit = -1;

            rx_meter_cal_offset_by_radio = new float[(int)HPSDRModel.LAST];
            rx_display_cal_offset_by_radio = new float[(int)HPSDRModel.LAST];
            for (int i = 0; i < (int)HPSDRModel.LAST; i++)
            {
                switch ((HPSDRModel)i)
                {
                    case HPSDRModel.ANAN7000D:
                    case HPSDRModel.ANAN8000D:
                    case HPSDRModel.ORIONMKII:
                        rx_meter_cal_offset_by_radio[i] = 0.9449f;
                        rx_display_cal_offset_by_radio[i] = 0.9468f;
                        break;
                    default:
                        rx_meter_cal_offset_by_radio[i] = 0.98f;
                        rx_display_cal_offset_by_radio[i] = -2.1f;
                        break;
                }
            }

            rx1_preamp_by_band = new PreampMode[(int)Band.LAST];
            rx2_preamp_by_band = new PreampMode[(int)Band.LAST];
            rx1_step_attenuator_by_band = new int[(int)Band.LAST];
            rx2_step_attenuator_by_band = new int[(int)Band.LAST];
            tx_step_attenuator_by_band = new int[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                switch ((Band)i)
                {
                    //case Band.GEN:
                    //case Band.B160M:
                    //case Band.B80M:
                    //case Band.B60M:
                    //case Band.B40M:
                    //case Band.B30M:
                    //    rx1_preamp_by_band[i] = PreampMode.HPSDR_OFF;
                    //    rx2_preamp_by_band[i] = PreampMode.HPSDR_OFF;
                    //    rx1_step_attenuator_by_band[i] = 20;
                    //    rx2_step_attenuator_by_band[i] = 20;
                    //    break;
                    default:
                        rx1_preamp_by_band[i] = PreampMode.HPSDR_ON;
                        rx2_preamp_by_band[i] = PreampMode.HPSDR_ON;
                        rx1_step_attenuator_by_band[i] = 0;
                        rx2_step_attenuator_by_band[i] = 0;
                        break;
                }

                tx_step_attenuator_by_band[i] = 31;
            }

            power_by_band = new int[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++) power_by_band[i] = 50;

            fm_tx_offset_by_band_mhz = new double[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++) // setup default FM offsets
            {
                switch ((Band)i)
                {
                    case Band.B6M: fm_tx_offset_by_band_mhz[i] = 1; break; // 1MHz
                    case Band.B10M: fm_tx_offset_by_band_mhz[i] = 0.1; break; // 100kHz
                    default: fm_tx_offset_by_band_mhz[i] = 0.1; break; // 100kHz
                }
            }

            rx1_agcm_by_band = new AGCMode[(int)Band.LAST]; // AGC Mode by band
            rx2_agcm_by_band = new AGCMode[(int)Band.LAST];

            rx1_agct_by_band = new int[(int)Band.LAST];
            rx2_agct_by_band = new int[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                rx1_agcm_by_band[i] = AGCMode.MED;
                rx2_agcm_by_band[i] = AGCMode.MED;

                switch ((Band)i)
                {
                    case Band.B160M:
                    case Band.B80M:
                    case Band.B60M:
                        rx1_agct_by_band[i] = 75;
                        rx2_agct_by_band[i] = 75;
                        break;
                    case Band.B40M:
                    case Band.B30M:
                        rx1_agct_by_band[i] = 80;
                        rx2_agct_by_band[i] = 80;
                        break;
                    case Band.B20M:
                    case Band.B17M:
                        rx1_agct_by_band[i] = 85;
                        rx2_agct_by_band[i] = 85;
                        break;
                    case Band.B10M:
                        rx1_agct_by_band[i] = 95;
                        rx2_agct_by_band[i] = 95;
                        break;
                    case Band.B6M:
                        rx1_agct_by_band[i] = 110;
                        rx2_agct_by_band[i] = 110;
                        break;
                    default:
                        rx1_agct_by_band[i] = 90;
                        rx2_agct_by_band[i] = 90;
                        break;
                }
            }

            diversity_rx1_ref_by_band = new bool[(int)Band.LAST];
            diversity_rx2_ref_by_band = new bool[(int)Band.LAST];

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                diversity_rx1_ref_by_band[i] = true;
                diversity_rx2_ref_by_band[i] = false;
            }

            vhf_text = new RadioButtonTS[15];
            vhf_text[0] = radBandVHF0;
            vhf_text[1] = radBandVHF1;
            vhf_text[2] = radBandVHF2;
            vhf_text[3] = radBandVHF3;
            vhf_text[4] = radBandVHF4;
            vhf_text[5] = radBandVHF5;
            vhf_text[6] = radBandVHF6;
            vhf_text[7] = radBandVHF7;
            vhf_text[8] = radBandVHF8;
            vhf_text[9] = radBandVHF9;
            vhf_text[10] = radBandVHF10;
            vhf_text[11] = radBandVHF11;
            vhf_text[12] = radBandVHF12;
            vhf_text[13] = radBandVHF13;

            radBandGEN0.Enabled = true; // ke9ns add turn on all the buttons for GEN SWL
            radBandGEN1.Enabled = true;
            radBandGEN2.Enabled = true;
            radBandGEN3.Enabled = true;
            radBandGEN4.Enabled = true;
            radBandGEN5.Enabled = true;
            radBandGEN6.Enabled = true;
            radBandGEN7.Enabled = true;
            radBandGEN8.Enabled = true;
            radBandGEN9.Enabled = true;
            radBandGEN10.Enabled = true;
            radBandGEN11.Enabled = true;
            radBandGEN12.Enabled = true;
            radBandGEN13.Enabled = true;

            rx1_level_table = new float[(int)Band.LAST][]; // 3 settings per band (display_offset, preamp, multimeter offset)
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                rx1_level_table[i] = new float[3];
                rx1_level_table[i][0] = -37.5f;	// setup defaults;
                rx1_level_table[i][1] = 20.0f;
                rx1_level_table[i][2] = -11.5f;
            }

            rx2_level_table = new float[(int)Band.LAST][]; // 3 settings per band (display_offset, preamp, multimeter offset)
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                rx2_level_table[i] = new float[3];
                rx2_level_table[i][0] = -37.5f;	// setup defaults;
                rx2_level_table[i][1] = -20.0f;
                rx2_level_table[i][2] = -11.5f;
            }

            tune_power = 0;
            calibrating = false;
            //-W2PA Need this for DB import
            run_setup_wizard = true;

            // get culture specific decimal separator
            separator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

            last_band = "";						// initialize bandstack

            tune_step_list = new List<TuneStep>();  // initialize wheel tuning list array
            tune_step_list.Add(new TuneStep(1, "1Hz"));
            tune_step_list.Add(new TuneStep(2, "2Hz"));
            tune_step_list.Add(new TuneStep(10, "10Hz"));
            tune_step_list.Add(new TuneStep(25, "25Hz"));
            tune_step_list.Add(new TuneStep(50, "50Hz"));
            tune_step_list.Add(new TuneStep(100, "100Hz"));
            tune_step_list.Add(new TuneStep(250, "250Hz"));
            tune_step_list.Add(new TuneStep(500, "500Hz"));
            tune_step_list.Add(new TuneStep(1000, "1kHz"));
            tune_step_list.Add(new TuneStep(2000, "2kHz"));
            tune_step_list.Add(new TuneStep(2500, "2.5kHz"));
            tune_step_list.Add(new TuneStep(5000, "5kHz"));
            tune_step_list.Add(new TuneStep(6250, "6.25kHz"));
            tune_step_list.Add(new TuneStep(9000, "9kHz"));
            tune_step_list.Add(new TuneStep(10000, "10kHz"));
            tune_step_list.Add(new TuneStep(12500, "12.5kHz"));
            tune_step_list.Add(new TuneStep(15000, "15kHz"));
            tune_step_list.Add(new TuneStep(20000, "20kHz"));
            tune_step_list.Add(new TuneStep(25000, "25kHz"));
            tune_step_list.Add(new TuneStep(30000, "30kHz"));
            tune_step_list.Add(new TuneStep(50000, "50kHz"));
            tune_step_list.Add(new TuneStep(100000, "100kHz"));
            tune_step_list.Add(new TuneStep(250000, "250kHz"));
            tune_step_list.Add(new TuneStep(500000, "500kHz"));
            tune_step_list.Add(new TuneStep(1000000, "1MHz"));
            tune_step_list.Add(new TuneStep(10000000, "10MHz"));

            tune_step_index = 2;

            meter_text_history = new float[multimeter_text_peak_samples];

            current_meter_data = -200.0f;
            new_meter_data = -200.0f;

            rx1_preamp_offset = new float[9];

            rx1_preamp_offset[(int)PreampMode.HPSDR_OFF] = 20.0f; //atten inline
            rx1_preamp_offset[(int)PreampMode.HPSDR_ON] = 0.0f; //no atten
            rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS10] = 10.0f;
            rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS20] = 20.0f;
            rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS30] = 30.0f;
            rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS40] = 40.0f;
            rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS50] = 50.0f;
            rx1_preamp_offset[(int)PreampMode.SA_MINUS10] = 10f;
            rx1_preamp_offset[(int)PreampMode.SA_MINUS30] = 30f;

            rx2_preamp_offset = new float[8];
            rx2_preamp_offset[(int)PreampMode.HPSDR_OFF] = 20.0f;
            rx2_preamp_offset[(int)PreampMode.HPSDR_ON] = 0.0f;
            rx2_preamp_offset[(int)PreampMode.HPSDR_MINUS10] = 10.0f;
            rx2_preamp_offset[(int)PreampMode.HPSDR_MINUS30] = 30.0f;

            this.ActiveControl = chkPower;		// Power has focus initially

            Display.Target = picDisplay;
            // Display.WaterfallTarget = picWaterfall;
            Display.Init();						// Initialize Display variables
            InitDisplayModes();					// Initialize Display Modes
            InitAGCModes();						// Initialize AGC Modes
            InitMultiMeterModes();				// Initialize MultiMeter Modes

            siolisten = new SIOListenerII(this);
            sio2listen = new SIO2ListenerII(this);
            sio3listen = new SIO3ListenerII(this);
            sio4listen = new SIO4ListenerII(this);

            EQForm = new EQForm(this);

            InitFilterPresets();					// Initialize filter values

            StackForm = new StackControl(this);     // ke9ns add communicate with bandstack controls
            SwlForm = new SwlControl(this);         // ke9ns add communicate with swl list controls
            httpFile = new Http(this);              // ke9ns add
            httpServer = new HttpServer(this);      // rn3kk add

            SetupForm = new Setup(this);		// create Setup form
            SetupForm.StartPosition = FormStartPosition.Manual;

            // SetupForm.AddHPSDRPages();
            // SetComboPreampForHPSDR();

            //SetupForm.GetTxProfiles();
            UpdateTXProfile(SetupForm.TXProfile);

            Common.RestoreForm(EQForm, "EQForm", false);

            XVTRForm = new XVTRForm(this);

            WaveForm = new WaveControl(this);	// create Wave form
            WaveForm.StartPosition = FormStartPosition.Manual;

            ScanForm = new ScanControl(this);   // ke9ns add create Scan form
            ScanForm.StartPosition = FormStartPosition.Manual;

            MemoryList = MemoryList.Restore();
            MemoryList.CheckVersion();
            dxmemList = DXMemList.Restore1(); // ke9ns add for dx spotter
            dxmemList.CheckVersion1(); // ke9ns add

            InitMemoryFrontPanel();

            //rx1_filter = Filter.F2600;

            //RX1AGCMode = AGCMode.MED;				// Initialize front panel controls
            //comboPreamp.Text = "0dB";
            // chkRX1Preamp.Checked = true;
            vfob_dsp_mode = DSPMode.LSB;
            vfob_filter = Filter.F3;
            comboDisplayMode.Text = "Panafall";
            comboRX2DisplayMode.Text = "Panadapter";
            comboMeterRXMode.SelectedIndex = 0;
            comboRX2MeterMode.SelectedIndex = 0;
            comboTuneMode.SelectedIndex = 0;
            quick_save_filter = Filter.F3;
            quick_save_mode = DSPMode.LSB;
            ptbPWR.Value = 100;
            btnDisplayPanCenter_Click(this, EventArgs.Empty);
            comboTXProfile.Text = SetupForm.TXProfile;
            comboDigTXProfile.Text = SetupForm.TXProfile;
            comboFMTXProfile.Text = SetupForm.TXProfile;
            comboFMCTCSS.Text = "100.0";

            GetState();							// recall saved state

            chkFullDuplex.Checked = false;
            if (rx1_dsp_mode == DSPMode.FIRST || rx1_dsp_mode == DSPMode.LAST)
                radModeLSB.Checked = true;
            if (rx2_dsp_mode == DSPMode.FIRST || rx2_dsp_mode == DSPMode.LAST)
                radRX2ModeLSB.Checked = true;
            if (rx1_filter == Filter.FIRST || rx1_filter == Filter.LAST ||
               (rx1_filter == Filter.NONE && rx1_dsp_mode != DSPMode.DRM && rx1_dsp_mode != DSPMode.SPEC))
                radFilter3.Checked = true;
            if (rx2_filter == Filter.FIRST || rx2_filter == Filter.LAST ||
               (rx2_filter == Filter.NONE && rx2_dsp_mode != DSPMode.DRM && rx2_dsp_mode != DSPMode.SPEC))
                radRX2Filter3.Checked = true;

            chkVFOATX_CheckedChanged(this, EventArgs.Empty);
            chkVFOBTX_CheckedChanged(this, EventArgs.Empty);

            txtVFOAFreq_LostFocus(this, EventArgs.Empty);

            PAPresent = pa_present;
            SampleRateTX = sample_rate_tx;

            if (comboAGC.SelectedIndex < 0)
                RX1AGCMode = AGCMode.MED;
            if (comboRX2AGC.SelectedIndex < 0)
                comboRX2AGC.Text = "Med";
            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            ptbPWR_Scroll(this, EventArgs.Empty);
            ptbAF_Scroll(this, EventArgs.Empty);
            ptbSquelch_Scroll(this, EventArgs.Empty);
            ptbMic_Scroll(this, EventArgs.Empty);
            ptbDX_Scroll(this, EventArgs.Empty);
            ptbCPDR_Scroll(this, EventArgs.Empty);
            ptbVOX_Scroll(this, EventArgs.Empty);
            ptbNoiseGate_Scroll(this, EventArgs.Empty);
            ptbCWSpeed_Scroll(this, EventArgs.Empty);
            ptbCWAPFBandwidth_Scroll(this, EventArgs.Empty);
            ptbCWAPFFreq_Scroll(this, EventArgs.Empty);
            ptbCWAPFGain_Scroll(this, EventArgs.Empty);
            ptbPanMainRX_Scroll(this, EventArgs.Empty);
            ptbPanSubRX_Scroll(this, EventArgs.Empty);
            ptbRX2RF_Scroll(this, EventArgs.Empty);
            ptbRX2Squelch_Scroll(this, EventArgs.Empty);
            initializing = false;
            // double freq = double.Parse(txtVFOAFreq.Text);
            // Band b = BandByFreq(freq, rx1_xvtr_index, false, current_region);
            // if (b != rx1_band)
            // SetRX1Band(b);
            RX1PreampMode = rx1_preamp_by_band[(int)rx1_band];
            RX1AttenuatorData = rx1_step_attenuator_by_band[(int)rx1_band];
            RX2PreampMode = rx2_preamp_by_band[(int)rx2_band];
            RX2AttenuatorData = rx2_step_attenuator_by_band[(int)rx2_band];
            // initializing = true;

            // RX1PreampMode = rx1_preamp_mode;
            // RX2PreampMode = rx2_preamp_mode;
            initializing = true;
            ptbDisplayZoom_Scroll(this, EventArgs.Empty);
            ptbRX0Gain_Scroll(this, EventArgs.Empty);
            ptbRX1Gain_Scroll(this, EventArgs.Empty);
            ptbPanMainRX_Scroll(this, EventArgs.Empty);
            ptbPanSubRX_Scroll(this, EventArgs.Empty);
            ptbRX2Pan_Scroll(this, EventArgs.Empty);
            ptbRX2Gain_Scroll(this, EventArgs.Empty);
            // chkRX2Preamp_CheckedChanged(this, EventArgs.Empty);
            ptbRF_Scroll(this, EventArgs.Empty);
            ptbVACRXGain_Scroll(this, EventArgs.Empty);
            ptbVACTXGain_Scroll(this, EventArgs.Empty);
            radFilter_CheckedChanged(this, EventArgs.Empty);
            radModeButton_CheckedChanged(this, EventArgs.Empty);
            radRX2Filter_CheckedChanged(this, EventArgs.Empty);
            radRX2ModeButton_CheckedChanged(this, EventArgs.Empty);
            chkTNF_CheckedChanged(this, EventArgs.Empty);
            radRX1Show_CheckedChanged(this, EventArgs.Empty);
            radRX2Show_CheckedChanged(this, EventArgs.Empty);
            chkRX2SR_CheckedChanged(this, EventArgs.Empty);
            booting = false;
            chkDisplayAVG_CheckedChanged(this, EventArgs.Empty);

            CalcDisplayFreq();
            CalcRX2DisplayFreq();
            CpuUsage();

            tune_step_index--;					// Setup wheel tuning
            ChangeTuneStepUp();
            UpdateRX1DisplayOffsets();
            UpdateRX2DisplayOffsets();
            SetupForm.initCATandPTTprops();   // wjt added -- get console props setup for cat and ptt 

            if (CmdLineArgs != null)
            {
                foreach (string t in CmdLineArgs)
                {
                    switch (t)
                    {
                        case "--disable-swr-prot-at-my-risk":
                            DisableSWRProtection = true;
                            this.Text = this.Text + "  *** SWR Protection Disabled! ***";
                            break;
                        case "--high-pwr-am":
                            Audio.high_pwr_am = true;
                            MessageBox.Show("high power am");
                            break;
                        // the next 4 opts are for various experimental HPSDR xmit and receive options 							

                        case "--force-16bit-IQ":
                            Force16bitIQ = true;
                            this.Text = this.Text + " *** 16 bit IQ ***";
                            break;

                        case "--mercury-xmit-hack":
                            //DttSP.SetMercuryXmit(true);
                            this.Text = this.Text + " *** MercXmit ***";
                            break;

                        case "--eer-xmit-hack":
                            //DttSP.SetEerXmit(true);
                            this.Text = this.Text + " *** EerXmit ***";
                            break;

                        //case "--no-send-to-Janus":
                        //    NoJanusSend = true;
                        //    this.Text = this.Text + "*** NoJanusSend ***";
                        //    break;

                        case "--allowOOBxmit":
                            Extended = true;
                            this.Text = this.Text + " OOBok";
                            break;

                        case "--no-firmware-version-check":
                            this.Text = this.Text + " NoFWVerCheck";
                            NetworkIO.forceFWGood = true;
                            break;

                        case "--Atlas10MHz":
                        case "--Penny10MHz":
                        case "--Mercury10Mhz":
                        case "--Mercury125MHz":
                        case "--CfgPenny":
                        case "--CfgMercury":
                        case "--CfgBoth":
                        case "--PennyMic":
                            string title_text = NetworkIO.setC1Opts(t);
                            if (title_text != null)
                            {
                                this.Text = this.Text + " " + title_text;
                            }
                            break;

                    }
                }
            }

            if (comboMeterTXMode.Items.Count > 0 && comboMeterTXMode.SelectedIndex < 0)
                comboMeterTXMode.SelectedIndex = 0;
            chkMOX.Enabled = false;

            if (!collapsedDisplay)
            {
                modeToolStripMenuItem.Visible = false;
                bandToolStripMenuItem.Visible = false;
                rX2ToolStripMenuItem.Visible = false;
            }

            Display.Target = picDisplay;
            //Display.Target = pandisplay.picPanDisplay;
            // uncomment for multiple displays
            //if (cmaster.Getrxa(4) != null)
            //{
            //    for (int i = 4; i < 7; i++)
            //    {
            //        cmaster.Getrxa(i).pDisplay.cOnsole = this;
            //        cmaster.Getrxa(i).pDisplay.Init();
            //    }
            //}

            update_rx2_display = true;

            if (startdiversity)
                eSCToolStripMenuItem_Click(this, EventArgs.Empty);

            // uncomment for multiple displays
            //cmaster.Getrxa(4).pDisplay.StartDisplay(4);
            //cmaster.Getrxa(5).pDisplay.StartDisplay(5);
            //cmaster.Getrxa(6).pDisplay.StartDisplay(6);

            SetupForm.RestoreNotchesFromDatabase();

            // Prepare for QSK in InitConsole
            qsk_sidetone_volume = SetupForm.TXAF;
            chkQSK.Checked = false;
            non_qsk_agc = RX1AGCMode;
            non_qsk_agc_hang_thresh = SetupForm.AGCHangThreshold;
            non_qsk_ATTOnTX = attontx;
            non_qsk_ATTOnTXVal = SetupForm.ATTOnTX;
            non_qsk_breakin = BreakInEnabled;
            non_qsk_breakin_delay = break_in_delay;
            non_qsk_disablePTT = disable_ptt;

            if (chkCWSidetone.Checked)
            {
                NetworkIO.SetCWSidetoneVolume(qsk_sidetone_volume);
            }
            else NetworkIO.SetCWSidetoneVolume(0);

            RX1_band_change = RX1Band;
        }

        public void Init60mChannels()
        {
            channels_60m = new List<Channel>();
            switch (CurrentRegion)
            {
                case FRSRegion.UK:
                    channels_60m.Add(new Channel(5.26125, 5500));
                    channels_60m.Add(new Channel(5.2800, 8000));
                    channels_60m.Add(new Channel(5.29025, 3500));
                    channels_60m.Add(new Channel(5.3025, 9000));
                    channels_60m.Add(new Channel(5.3180, 10000));
                    channels_60m.Add(new Channel(5.3355, 5000));
                    channels_60m.Add(new Channel(5.3560, 4000));
                    channels_60m.Add(new Channel(5.36825, 12500));
                    channels_60m.Add(new Channel(5.3800, 4000));
                    channels_60m.Add(new Channel(5.39825, 6500));
                    channels_60m.Add(new Channel(5.4050, 3000));
                    break;

                case FRSRegion.US:
                    channels_60m.Add(new Channel(5.3320, 2800));
                    channels_60m.Add(new Channel(5.3480, 2800));
                    channels_60m.Add(new Channel(5.3585, 2800));
                    channels_60m.Add(new Channel(5.3730, 2800));
                    channels_60m.Add(new Channel(5.4050, 2800));
                    break;

                default:
                    channels_60m.Add(new Channel(5.3320, 2800));
                    channels_60m.Add(new Channel(5.3480, 2800));
                    channels_60m.Add(new Channel(5.3585, 2800));
                    channels_60m.Add(new Channel(5.3730, 2800));
                    channels_60m.Add(new Channel(5.4050, 2800));
                    break;
            }
        }

        private void SyncDSP()
        {
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    RadioDSPRX dsp_rx = radio.GetDSPRX(i, j);
                    dsp_rx.Update = true;
                    dsp_rx.Force = true;
                    dsp_rx.BufferSize = dsp_rx.BufferSize;
                    dsp_rx.Force = false;
                }
            }

            for (int i = 0; i < 1; i++)
            {
                RadioDSPTX dsp_tx = radio.GetDSPTX(i);
                dsp_tx.Update = true;
                dsp_tx.Force = true;
                dsp_tx.BufferSize = dsp_tx.BufferSize;
                dsp_tx.Force = false;
            }

            SetupForm.UpdateTXDisplayFFT();
            // RadioDSP.SyncStatic();

            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    RadioDSPRX dsp_rx = radio.GetDSPRX(i, j);
                    dsp_rx.Update = false;
                    dsp_rx.Force = true;
                    dsp_rx.Update = true;
                    dsp_rx.Force = false;
                }
            }

            for (int i = 0; i < 1; i++)
            {
                RadioDSPTX dsp_tx = radio.GetDSPTX(i);
                dsp_tx.Update = false;
                dsp_tx.Force = true;
                dsp_tx.Update = true;
                dsp_tx.Force = false;
            }
        }

        public bool Force16bitIQ = false;
        // public bool NoJanusSend = false;
        public void ExitConsole()
        {
            /*  try
              {
                  if (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)
                      Pal.Exit();
              }
              catch (Exception)
              {

              }*/

            if (n1mm_udp_client != null)
                n1mm_udp_client.Close();

            if (SaveTXProfileOnExit == true)    // save the tx profile
            {
                SetupForm.SaveTXProfileData();
            }

            if (SetupForm != null)		// make sure Setup form is deallocated
                SetupForm.Dispose();
            if (CWXForm != null)			// make sure CWX form is deallocated
                CWXForm.Dispose();
            chkPower.Checked = false;	// make sure power is off		
            ckQuickRec.Checked = false; // make sure recording is stopped

            PA19.PA_Terminate();		// terminate audio interface
            DB.Exit();					// close and save database
            NetworkIO.DestroyRNet();
            Win32.TimeEndPeriod(1); // return to previous timing precision
            Thread.Sleep(100);
        }

        public void SaveState()
        {
            // Automatically saves all control settings to the database in the tab
            // pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)
            string s;

            if (chkQSK.Checked)
            {
                QSKEnabled = false;  // Just to save the non-qsk settings, but leaving the button alone
            }

            chkPower.Checked = false;		// turn off the power first

            //-------------------------------------------------------------------
            // ke9ns add  create database to store my stuff in

            string file_name2 = AppDataPath + "ke9ns8.dat"; // save data for my mods

            FileStream stream2 = new FileStream(file_name2, FileMode.Create); // open BMP  file
            BinaryWriter writer2 = new BinaryWriter(stream2);

            //    if (Audio.MON_PRE == 1) Debug.WriteLine("Saving PRE = 1");
            //    else Debug.WriteLine("Saving PRE = 0");

            //  writer2.Write((double)WaterfallLowThresholdMic);      // TX low level waterfall threshold
            // writer2.Write(SetupForm.checkWaterMoveSize.Checked);  // large waterfall move
            writer2.Write(Display.GrayScale);                    // color or grayscale watetfall
            // writer2.Write((byte)WaveForm.BandL);                 // save mode for check of valid waterfall ID later  // RX1DSPMode != BandL
            // writer2.Write(Display.PW_AVG);                       // save avgP or avgB  RX1
            // writer2.Write(Display.PW_AVG2);                      // save avgp or avgB RX2
            // writer2.Write(Audio.MON_PRE);                        // save MONitor pre or post audio

            // if (SetupForm.gridBoxTS.Checked == true) Display.GridOff = 1; // gridlines OFF
            // else Display.GridOff = 0; // gridlines ON

            writer2.Write(Display.GridOff);                      // save panadapter grid on/off
            //  writer2.Write(WaveControl.QAC);                      // QUickaudio file #

            writer2.Write(SpotControl.nameB);               // name for dx spotter
            writer2.Write(SpotControl.callB);               // call sign for dx spotter
            writer2.Write(SpotControl.nodeB);               // node  for dx spotter
            writer2.Write(SpotControl.portB);               // port for dx spotter

            writer2.Write(callsign);                             // callsign for waterfall ID
            writer2.Write(lastcallsign);                         // last callsign test for valid waterfall ID

            //  writer2.Write((byte)PAON);                           // temp/volts on/off console display
            writer2.Write((byte)noaaON);                          // space weather console display

            // writer2.Write((byte)SetupForm.tune_step_index2);      // save Powermate knob index

            writer2.Write("end");

            //  writer2.Write(callsign);                  // callsign test
            //  writer2.Write(Display.samplesPerSecondL);  // last samplerate


            writer2.Close();    // close  file
            stream2.Close();   // close stream
            //   Debug.WriteLine("save database file on exit");

            // PAON = 0;       // shut down PAON thread
            //--------------------------------------------------------------------

            ArrayList a = new ArrayList();

            foreach (Control c in this.Controls)			// For each control
            {
                // if it is a groupbox or panel, check for sub controls
                if (c.GetType() == typeof(GroupBoxTS) || c.GetType() == typeof(PanelTS))
                {
                    foreach (Control c2 in c.Controls)	// for each sub-control
                    {	// check to see if it is a value type we need to save
                        if (c2.Enabled)
                        {
                            if (c2.GetType() == typeof(CheckBoxTS))
                                a.Add(c2.Name + "/" + ((CheckBoxTS)c2).Checked.ToString());
                            else if (c2.GetType() == typeof(ComboBoxTS))
                            {
                                if (((ComboBoxTS)c2).Items.Count > 0)
                                    a.Add(c2.Name + "/" + ((ComboBoxTS)c2).Text);
                            }
                            else if (c2.GetType() == typeof(NumericUpDownTS))
                                a.Add(c2.Name + "/" + ((NumericUpDownTS)c2).Value.ToString());
                            else if (c2.GetType() == typeof(RadioButtonTS))
                                a.Add(c2.Name + "/" + ((RadioButtonTS)c2).Checked.ToString());
                            else if (c2.GetType() == typeof(TextBoxTS))
                            {
                                if (((TextBoxTS)c2).ReadOnly == false)
                                    a.Add(c2.Name + "/" + ((TextBoxTS)c2).Text);
                            }
                            else if (c2.GetType() == typeof(TrackBarTS))
                                a.Add(c2.Name + "/" + ((TrackBarTS)c2).Value.ToString());
                            else if (c2.GetType() == typeof(PrettyTrackBar))
                                a.Add(c2.Name + "/" + ((PrettyTrackBar)c2).Value.ToString());
#if(DEBUG)
                            else if (c2.GetType() == typeof(GroupBox) ||
                                c2.GetType() == typeof(CheckBox) ||
                                c2.GetType() == typeof(ComboBox) ||
                                c2.GetType() == typeof(NumericUpDown) ||
                                c2.GetType() == typeof(RadioButton) ||
                                c2.GetType() == typeof(TextBox) ||
                                c2.GetType() == typeof(TrackBar))
                                Debug.WriteLine(c2.Name + " needs to be converted to a Thread Safe control.");
#endif
                        }
                    }
                }
                else // it is not a group box
                {	// check to see if it is a value type we need to save
                    if (c.Enabled)
                    {
                        if (c.GetType() == typeof(CheckBoxTS))
                            a.Add(c.Name + "/" + ((CheckBoxTS)c).Checked.ToString());
                        else if (c.GetType() == typeof(ComboBoxTS))
                        {
                            if (((ComboBoxTS)c).SelectedIndex >= 0)
                                a.Add(c.Name + "/" + ((ComboBoxTS)c).Text);
                        }
                        else if (c.GetType() == typeof(NumericUpDownTS))
                            a.Add(c.Name + "/" + ((NumericUpDownTS)c).Value.ToString());
                        else if (c.GetType() == typeof(RadioButtonTS))
                            a.Add(c.Name + "/" + ((RadioButtonTS)c).Checked.ToString());
                        else if (c.GetType() == typeof(TextBoxTS))
                        {
                            if (((TextBoxTS)c).ReadOnly == false)
                                a.Add(c.Name + "/" + ((TextBoxTS)c).Text);
                        }
                        else if (c.GetType() == typeof(TrackBarTS))
                            a.Add(c.Name + "/" + ((TrackBarTS)c).Value.ToString());
                        else if (c.GetType() == typeof(PrettyTrackBar))
                            a.Add(c.Name + "/" + ((PrettyTrackBar)c).Value.ToString());
#if(DEBUG)
                        else if (c.GetType() == typeof(GroupBox) ||
                            c.GetType() == typeof(CheckBox) ||
                            c.GetType() == typeof(ComboBox) ||
                            c.GetType() == typeof(NumericUpDown) ||
                            c.GetType() == typeof(RadioButton) ||
                            c.GetType() == typeof(TextBox) ||
                            c.GetType() == typeof(TrackBar))
                            Debug.WriteLine(c.Name + " needs to be converted to a Thread Safe control.");
#endif
                    }
                }
            }

            a.Remove("udRX1StepAttData/" + udRX1StepAttData.Value.ToString());
            a.Remove("udRX2StepAttData/" + udRX2StepAttData.Value.ToString());

            string ver_num = TitleBar.GetVerNum();

            a.Add("chkNR_checkstate/" + chkNR.CheckState.ToString());
            a.Add("chkRX2NR_checkstate/" + chkRX2NR.CheckState.ToString());
            a.Add("chkNB_checkstate/" + chkNB.CheckState.ToString());
            a.Add("chkRX2NB_checkstate/" + chkRX2NB.CheckState.ToString());
            // a.Add("chkSyncIT_checkstate/" + chkSyncIT.CheckState.ToString());  //-W2PA Checkbox for synched RIT/XIT

            a.Add("current_datetime_mode/" + (int)current_datetime_mode);
            a.Add("rx1_display_cal_offset/" + rx1_display_cal_offset.ToString("f3"));
            a.Add("rx1_meter_cal_offset/" + rx1_meter_cal_offset);

            a.Add("rx2_display_cal_offset/" + rx2_display_cal_offset.ToString("f3"));
            a.Add("rx2_meter_cal_offset/" + rx2_meter_cal_offset);

            a.Add("txtMemoryQuick/" + txtMemoryQuick.Text);		// save quick memory settings
            a.Add("quick_save_mode/" + (int)quick_save_mode);
            a.Add("quick_save_filter/" + (int)quick_save_filter);

            // a.Add("fwc_last_cal_date_time/" + fwc_last_cal_date_time);
            //  a.Add("fwc_serial_num/" + fwc_serial_num);
            //  a.Add("fwc_trx_serial_num/" + fwc_trx_serial_num);

            //  a.Add("rx2_last_cal_date_time/" + rx2_last_cal_date_time);
            //  a.Add("rx2_serial_num/" + rx2_serial_num);
            //  a.Add("rx2_trx_match_serial/" + rx2_trx_match_serial);

            //FM Squelch Save
            a.Add("rx1_squelch_on/" + rx1_squelch_on);
            a.Add("rx1_fm_squelch_on/" + rx1_fm_squelch_on);
            a.Add("rx1_squelch_threshold_scroll/" + rx1_squelch_threshold_scroll);
            a.Add("rx1_fm_squelch_threshold_scroll/" + rx1_fm_squelch_threshold_scroll);

            a.Add("rx2_squelch_on/" + rx2_squelch_on);
            a.Add("rx2_fm_squelch_on/" + rx2_fm_squelch_on);
            a.Add("rx2_squelch_threshold_scroll/" + rx2_squelch_threshold_scroll);
            a.Add("rx2_fm_squelch_threshold_scroll/" + rx2_fm_squelch_threshold_scroll);

            a.Add("click_tune_display/" + click_tune_display);
            a.Add("VFOAFreq/" + VFOAFreq);
            a.Add("center_frequency/" + center_frequency);

            a.Add("click_tune_rx2_display/" + click_tune_rx2_display);
            a.Add("VFOBFreq/" + VFOBFreq);
            a.Add("center_rx2_frequency/" + center_rx2_frequency);

            a.Add("diversity_gain_160m/" + diversity_gain_160m);
            a.Add("diversity_gain_r2_160m/" + diversity_gain_r2_160m);
            a.Add("diversity_phase_160m/" + diversity_phase_160m);
            a.Add("diversity_gain_80m/" + diversity_gain_80m);
            a.Add("diversity_gain_r2_80m/" + diversity_gain_r2_80m);
            a.Add("diversity_phase_80m/" + diversity_phase_80m);
            a.Add("diversity_gain_60m/" + diversity_gain_60m);
            a.Add("diversity_gain_r2_60m/" + diversity_gain_r2_60m);
            a.Add("diversity_phase_60m/" + diversity_phase_60m);
            a.Add("diversity_gain_40m/" + diversity_gain_40m);
            a.Add("diversity_gain_r2_40m/" + diversity_gain_r2_40m);
            a.Add("diversity_phase_40m/" + diversity_phase_40m);
            a.Add("diversity_gain_30m/" + diversity_gain_30m);
            a.Add("diversity_gain_r2_30m/" + diversity_gain_r2_30m);
            a.Add("diversity_phase_30m/" + diversity_phase_30m);
            a.Add("diversity_gain_20m/" + diversity_gain_20m);
            a.Add("diversity_gain_r2_20m/" + diversity_gain_r2_20m);
            a.Add("diversity_phase_20m/" + diversity_phase_20m);
            a.Add("diversity_gain_17m/" + diversity_gain_17m);
            a.Add("diversity_gain_r2_17m/" + diversity_gain_r2_17m);
            a.Add("diversity_phase_17m/" + diversity_phase_17m);
            a.Add("diversity_gain_15m/" + diversity_gain_15m);
            a.Add("diversity_gain_r2_15m/" + diversity_gain_r2_15m);
            a.Add("diversity_phase_15m/" + diversity_phase_15m);
            a.Add("diversity_gain_12m/" + diversity_gain_12m);
            a.Add("diversity_gain_r2_12m/" + diversity_gain_r2_12m);
            a.Add("diversity_phase_12m/" + diversity_phase_12m);
            a.Add("diversity_gain_10m/" + diversity_gain_10m);
            a.Add("diversity_gain_r2_10m/" + diversity_gain_r2_10m);
            a.Add("diversity_phase_10m/" + diversity_phase_10m);
            a.Add("diversity_gain_6m/" + diversity_gain_6m);
            a.Add("diversity_gain_r2_6m/" + diversity_gain_r2_6m);
            a.Add("diversity_phase_6m/" + diversity_phase_6m);
            a.Add("diversity_gain_wwv/" + diversity_gain_wwv);
            a.Add("diversity_gain_r2_wwv/" + diversity_gain_r2_wwv);
            a.Add("diversity_phase_wwv/" + diversity_phase_wwv);
            a.Add("diversity_gain_gen/" + diversity_gain_gen);
            a.Add("diversity_gain_r2_gen/" + diversity_gain_r2_gen);
            a.Add("diversity_phase_gen/" + diversity_phase_gen);
            a.Add("diversity_gain_xvtr/" + diversity_gain_xvtr);
            a.Add("diversity_gain_r2_xvtr/" + diversity_gain_r2_xvtr);
            a.Add("diversity_phase_xvtr/" + diversity_phase_xvtr);

            a.Add("waterfall_high_threshold_160m/" + waterfall_high_threshold_160m);
            a.Add("waterfall_low_threshold_160m/" + waterfall_low_threshold_160m);
            a.Add("waterfall_high_threshold_80m/" + waterfall_high_threshold_80m);
            a.Add("waterfall_low_threshold_80m/" + waterfall_low_threshold_80m);
            a.Add("waterfall_high_threshold_60m/" + waterfall_high_threshold_60m);
            a.Add("waterfall_low_threshold_60m/" + waterfall_low_threshold_60m);
            a.Add("waterfall_high_threshold_40m/" + waterfall_high_threshold_40m);
            a.Add("waterfall_low_threshold_40m/" + waterfall_low_threshold_40m);
            a.Add("waterfall_high_threshold_30m/" + waterfall_high_threshold_30m);
            a.Add("waterfall_low_threshold_30m/" + waterfall_low_threshold_30m);
            a.Add("waterfall_high_threshold_20m/" + waterfall_high_threshold_20m);
            a.Add("waterfall_low_threshold_20m/" + waterfall_low_threshold_20m);
            a.Add("waterfall_high_threshold_17m/" + waterfall_high_threshold_17m);
            a.Add("waterfall_low_threshold_17m/" + waterfall_low_threshold_17m);
            a.Add("waterfall_high_threshold_15m/" + waterfall_high_threshold_15m);
            a.Add("waterfall_low_threshold_15m/" + waterfall_low_threshold_15m);
            a.Add("waterfall_high_threshold_12m/" + waterfall_high_threshold_12m);
            a.Add("waterfall_low_threshold_12m/" + waterfall_low_threshold_12m);
            a.Add("waterfall_high_threshold_10m/" + waterfall_high_threshold_10m);
            a.Add("waterfall_low_threshold_10m/" + waterfall_low_threshold_10m);
            a.Add("waterfall_high_threshold_6m/" + waterfall_high_threshold_6m);
            a.Add("waterfall_low_threshold_6m/" + waterfall_low_threshold_6m);
            a.Add("waterfall_high_threshold_wwv/" + waterfall_high_threshold_wwv);
            a.Add("waterfall_low_threshold_wwv/" + waterfall_low_threshold_wwv);
            a.Add("waterfall_high_threshold_gen/" + waterfall_high_threshold_gen);
            a.Add("waterfall_low_threshold_gen/" + waterfall_low_threshold_gen);
            a.Add("waterfall_high_threshold_xvtr/" + waterfall_high_threshold_xvtr);
            a.Add("waterfall_low_threshold_xvtr/" + waterfall_low_threshold_xvtr);

            a.Add("rx2_waterfall_high_threshold_160m/" + rx2_waterfall_high_threshold_160m);
            a.Add("rx2_waterfall_low_threshold_160m/" + rx2_waterfall_low_threshold_160m);
            a.Add("rx2_waterfall_high_threshold_80m/" + rx2_waterfall_high_threshold_80m);
            a.Add("rx2_waterfall_low_threshold_80m/" + rx2_waterfall_low_threshold_80m);
            a.Add("rx2_waterfall_high_threshold_60m/" + rx2_waterfall_high_threshold_60m);
            a.Add("rx2_waterfall_low_threshold_60m/" + rx2_waterfall_low_threshold_60m);
            a.Add("rx2_waterfall_high_threshold_40m/" + rx2_waterfall_high_threshold_40m);
            a.Add("rx2_waterfall_low_threshold_40m/" + rx2_waterfall_low_threshold_40m);
            a.Add("rx2_waterfall_high_threshold_30m/" + rx2_waterfall_high_threshold_30m);
            a.Add("rx2_waterfall_low_threshold_30m/" + rx2_waterfall_low_threshold_30m);
            a.Add("rx2_waterfall_high_threshold_20m/" + rx2_waterfall_high_threshold_20m);
            a.Add("rx2_waterfall_low_threshold_20m/" + rx2_waterfall_low_threshold_20m);
            a.Add("rx2_waterfall_high_threshold_17m/" + rx2_waterfall_high_threshold_17m);
            a.Add("rx2_waterfall_low_threshold_17m/" + rx2_waterfall_low_threshold_17m);
            a.Add("rx2_waterfall_high_threshold_15m/" + rx2_waterfall_high_threshold_15m);
            a.Add("rx2_waterfall_low_threshold_15m/" + rx2_waterfall_low_threshold_15m);
            a.Add("rx2_waterfall_high_threshold_12m/" + rx2_waterfall_high_threshold_12m);
            a.Add("rx2_waterfall_low_threshold_12m/" + rx2_waterfall_low_threshold_12m);
            a.Add("rx2_waterfall_high_threshold_10m/" + rx2_waterfall_high_threshold_10m);
            a.Add("rx2_waterfall_low_threshold_10m/" + rx2_waterfall_low_threshold_10m);
            a.Add("rx2_waterfall_high_threshold_6m/" + rx2_waterfall_high_threshold_6m);
            a.Add("rx2_waterfall_low_threshold_6m/" + rx2_waterfall_low_threshold_6m);
            a.Add("rx2_waterfall_high_threshold_wwv/" + rx2_waterfall_high_threshold_wwv);
            a.Add("rx2_waterfall_low_threshold_wwv/" + rx2_waterfall_low_threshold_wwv);
            a.Add("rx2_waterfall_high_threshold_gen/" + rx2_waterfall_high_threshold_gen);
            a.Add("rx2_waterfall_low_threshold_gen/" + rx2_waterfall_low_threshold_gen);
            a.Add("rx2_waterfall_high_threshold_xvtr/" + rx2_waterfall_high_threshold_xvtr);
            a.Add("rx2_waterfall_low_threshold_xvtr/" + rx2_waterfall_low_threshold_xvtr);

            a.Add("display_grid_max_160m/" + display_grid_max_160m);
            a.Add("display_grid_min_160m/" + display_grid_min_160m);
            a.Add("display_grid_max_80m/" + display_grid_max_80m);
            a.Add("display_grid_min_80m/" + display_grid_min_80m);
            a.Add("display_grid_max_60m/" + display_grid_max_60m);
            a.Add("display_grid_min_60m/" + display_grid_min_60m);
            a.Add("display_grid_max_40m/" + display_grid_max_40m);
            a.Add("display_grid_min_40m/" + display_grid_min_40m);
            a.Add("display_grid_max_30m/" + display_grid_max_30m);
            a.Add("display_grid_min_30m/" + display_grid_min_30m);
            a.Add("display_grid_max_20m/" + display_grid_max_20m);
            a.Add("display_grid_min_20m/" + display_grid_min_20m);
            a.Add("display_grid_max_17m/" + display_grid_max_17m);
            a.Add("display_grid_min_17m/" + display_grid_min_17m);
            a.Add("display_grid_max_15m/" + display_grid_max_15m);
            a.Add("display_grid_min_15m/" + display_grid_min_15m);
            a.Add("display_grid_max_12m/" + display_grid_max_12m);
            a.Add("display_grid_min_12m/" + display_grid_min_12m);
            a.Add("display_grid_max_10m/" + display_grid_max_10m);
            a.Add("display_grid_min_10m/" + display_grid_min_10m);
            a.Add("display_grid_max_6m/" + display_grid_max_6m);
            a.Add("display_grid_min_6m/" + display_grid_min_6m);
            a.Add("display_grid_max_wwv/" + display_grid_max_wwv);
            a.Add("display_grid_min_wwv/" + display_grid_min_wwv);
            a.Add("display_grid_max_gen/" + display_grid_max_gen);
            a.Add("display_grid_min_gen/" + display_grid_min_gen);
            a.Add("display_grid_max_xvtr/" + display_grid_max_xvtr);
            a.Add("display_grid_min_xvtr/" + display_grid_min_xvtr);

            a.Add("rx2_display_grid_max_160m/" + rx2_display_grid_max_160m);
            a.Add("rx2_display_grid_min_160m/" + rx2_display_grid_min_160m);
            a.Add("rx2_display_grid_max_80m/" + rx2_display_grid_max_80m);
            a.Add("rx2_display_grid_min_80m/" + rx2_display_grid_min_80m);
            a.Add("rx2_display_grid_max_60m/" + rx2_display_grid_max_60m);
            a.Add("rx2_display_grid_min_60m/" + rx2_display_grid_min_60m);
            a.Add("rx2_display_grid_max_40m/" + rx2_display_grid_max_40m);
            a.Add("rx2_display_grid_min_40m/" + rx2_display_grid_min_40m);
            a.Add("rx2_display_grid_max_30m/" + rx2_display_grid_max_30m);
            a.Add("rx2_display_grid_min_30m/" + rx2_display_grid_min_30m);
            a.Add("rx2_display_grid_max_20m/" + rx2_display_grid_max_20m);
            a.Add("rx2_display_grid_min_20m/" + rx2_display_grid_min_20m);
            a.Add("rx2_display_grid_max_17m/" + rx2_display_grid_max_17m);
            a.Add("rx2_display_grid_min_17m/" + rx2_display_grid_min_17m);
            a.Add("rx2_display_grid_max_15m/" + rx2_display_grid_max_15m);
            a.Add("rx2_display_grid_min_15m/" + rx2_display_grid_min_15m);
            a.Add("rx2_display_grid_max_12m/" + rx2_display_grid_max_12m);
            a.Add("rx2_display_grid_min_12m/" + rx2_display_grid_min_12m);
            a.Add("rx2_display_grid_max_10m/" + rx2_display_grid_max_10m);
            a.Add("rx2_display_grid_min_10m/" + rx2_display_grid_min_10m);
            a.Add("rx2_display_grid_max_6m/" + rx2_display_grid_max_6m);
            a.Add("rx2_display_grid_min_6m/" + rx2_display_grid_min_6m);
            a.Add("rx2_display_grid_max_wwv/" + rx2_display_grid_max_wwv);
            a.Add("rx2_display_grid_min_wwv/" + rx2_display_grid_min_wwv);
            a.Add("rx2_display_grid_max_gen/" + rx2_display_grid_max_gen);
            a.Add("rx2_display_grid_min_gen/" + rx2_display_grid_min_gen);
            a.Add("rx2_display_grid_max_xvtr/" + rx2_display_grid_max_xvtr);
            a.Add("rx2_display_grid_min_xvtr/" + rx2_display_grid_min_xvtr);

            for (int m = (int)DSPMode.FIRST + 1; m < (int)DSPMode.LAST; m++)
            {	// save filter settings per mode
                for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                {
                    a.Add("rx1_filters[" + m.ToString() + "][" + ((int)f).ToString() + "]/" + rx1_filters[m].ToString(f));
                }
                a.Add("last_rx1_filter[" + m.ToString() + "]/" + rx1_filters[m].LastFilter.ToString());
            }

            for (int m = (int)DSPMode.FIRST + 1; m < (int)DSPMode.LAST; m++)
            {	// save filter settings per mode
                for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                {
                    a.Add("rx2_filters[" + m.ToString() + "][" + ((int)f).ToString() + "]/" + rx2_filters[m].ToString(f));
                }
                a.Add("last_rx2_filter[" + m.ToString() + "]/" + rx2_filters[m].LastFilter.ToString());
            }

            for (int i = 0; i < MNotchDB.List.Count; i++)
            {
                a.Add("mnotchdb[" + i + "]/" + MNotchDB.List[i].ToString());
            }

            /* for (int i = 0; i < (int)Band.LAST; i++)
             {
                 s = "power_table[" + i + "]/";
                 for (int j = 0; j < 13; j++)
                     s += power_table[i][j].ToString("f4") + "|";
                 s = s.Substring(0, s.Length - 1);
                 a.Add(s);
             }

             for (int i = 0; i < (int)Band.LAST; i++)
             {
                 s = "tx_carrier_table[" + i + "]/";
                 for (int j = 0; j < 4; j++)
                     s += tx_carrier_table[i][j].ToString() + "|";
                 s = s.Substring(0, s.Length - 1);
                 a.Add(s);
             }

             for (int i = 0; i < 4; i++)
             {
                 s = "pa_bias_table[" + i + "]/";
                 for (int j = 0; j < 8; j++)
                     s += pa_bias_table[i][j].ToString() + "|";
                 s = s.Substring(0, s.Length - 1);
                 a.Add(s);
             } */

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                s = "rx1_level_table[" + i + "]/";
                for (int j = 0; j < 3; j++)
                    s += rx1_level_table[i][j].ToString("f3") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);
            }

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                s = "rx2_level_table[" + i + "]/";
                for (int j = 0; j < 3; j++)
                    s += rx2_level_table[i][j].ToString("f3") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);
            }

            /*  for (int i = 0; i < (int)Band.LAST; i++)
              {
                  s = "pa_bridge_table[" + i + "]/";
                  for (int j = 0; j < 6; j++)
                      s += pa_bridge_table[i][j].ToString("f4") + "|";
                  s = s.Substring(0, s.Length - 1);
                  a.Add(s);
              } */

            /*   for (int i = 0; i < (int)Band.LAST; i++)
               {
                   s = "swr_table[" + i + "]/";
                   s += swr_table[i].ToString("f4");
                   a.Add(s);
               }

               for (int i = 0; i < (int)Band.LAST; i++)
               {
                   s = "atu_swr_table[" + i + "]/";
                   s += atu_swr_table[i].ToString("f4");
                   a.Add(s);
               }

              // a.Add("current_ant_mode/" + ((int)current_ant_mode).ToString());
               a.Add("rx1_ant/" + ((int)rx1_ant).ToString());
               s = "rx1_ant_by_band/";
               for (int i = 0; i < (int)Band.LAST; i++)
                   s += ((int)rx1_ant_by_band[i]).ToString() + "|";
               s = s.Substring(0, s.Length - 1);
               a.Add(s);
               a.Add("rx1_loop/" + rx1_loop.ToString());

               a.Add("rx2_ant/" + ((int)rx2_ant).ToString());
               s = "rx2_ant_by_band/";
               for (int i = 0; i < (int)Band.LAST; i++)
                   s += ((int)rx2_ant_by_band[i]).ToString() + "|";
               s = s.Substring(0, s.Length - 1);
               a.Add(s);

               a.Add("tx_ant/" + ((int)tx_ant).ToString());
               s = "tx_ant_by_band/";
               for (int i = 0; i < (int)Band.LAST; i++)
                   s += ((int)tx_ant_by_band[i]).ToString() + "|";
               s = s.Substring(0, s.Length - 1);
               a.Add(s);

               s = "rx1_loop_by_band/";
               for (int i = 0; i < (int)Band.LAST; i++)
                   s += Convert.ToUInt16(rx1_loop_by_band[i]).ToString() + "|";
               s = s.Substring(0, s.Length - 1);
               a.Add(s); */
            rx1_preamp_by_band[(int)rx1_band] = rx1_preamp_mode;
            s = "rx1_preamp_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx1_preamp_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            rx2_preamp_by_band[(int)rx2_band] = rx2_preamp_mode;
            s = "rx2_preamp_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx2_preamp_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            rx1_step_attenuator_by_band[(int)rx1_band] = rx1_attenuator_data;
            s = "rx1_step_attenuator_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx1_step_attenuator_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            rx2_step_attenuator_by_band[(int)rx2_band] = rx2_attenuator_data;
            s = "rx2_step_attenuator_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx2_step_attenuator_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            //  tx_step_attenuator_by_band[(int)rx1_band] = rx2_attenuator_data;
            s = "tx_step_attenuator_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)tx_step_attenuator_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "power_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += power_by_band[i].ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "fm_tx_offset_by_band_mhz/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += fm_tx_offset_by_band_mhz[i].ToString("R") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "rx1_agct_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += rx1_agct_by_band[i].ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "rx2_agct_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += rx2_agct_by_band[i].ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            rx1_agcm_by_band[(int)rx1_band] = RX1AGCMode;
            s = "rx1_agcm_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx1_agcm_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            rx2_agcm_by_band[(int)rx2_band] = RX2AGCMode;
            s = "rx2_agcm_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += ((int)rx2_agcm_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "diversity_rx1_ref_by_band/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += Convert.ToUInt16(diversity_rx1_ref_by_band[i]).ToString() + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "rx_meter_cal_offset_by_radio/";
            for (int i = 0; i < (int)HPSDRModel.LAST; i++)
                s += (rx_meter_cal_offset_by_radio[i]).ToString("f4") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "rx_display_cal_offset_by_radio/";
            for (int i = 0; i < (int)HPSDRModel.LAST; i++)
                s += (rx_display_cal_offset_by_radio[i]).ToString("f4") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            /*              s = "tx2_by_band/";
                for (int i = 0; i < (int)Band.LAST; i++)
                    s += Convert.ToUInt16(tx2_by_band[i]).ToString() + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "tx3_by_band/";
                for (int i = 0; i < (int)Band.LAST; i++)
                    s += Convert.ToUInt16(tx3_by_band[i]).ToString() + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx1_image_gain_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += rx1_image_gain_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx1_image_phase_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += rx1_image_phase_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx2_image_gain_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += rx2_image_gain_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "rx2_image_phase_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += rx2_image_phase_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "tx_image_gain_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += tx_image_gain_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                s = "tx_image_phase_table/";
                for (int i = 0; i <= (int)Band.B6M; i++)
                    s += tx_image_phase_table[i].ToString("R") + "|";
                s = s.Substring(0, s.Length - 1);
                a.Add(s);

                a.Add("rx1_level_checksum/" + rx1_level_checksum.ToString());
                a.Add("rx1_image_gain_checksum/" + rx1_image_gain_checksum.ToString());
                a.Add("rx1_image_phase_checksum/" + rx1_image_phase_checksum.ToString());
                a.Add("tx_image_gain_checksum/" + tx_image_gain_checksum.ToString());
                a.Add("tx_image_phase_checksum/" + tx_image_phase_checksum.ToString());
                a.Add("tx_carrier_checksum/" + tx_carrier_checksum.ToString());
                a.Add("pa_bias_checksum/" + pa_bias_checksum.ToString());
                a.Add("pa_bridge_checksum/" + pa_bridge_checksum.ToString());
                a.Add("pa_power_checksum/" + pa_power_checksum.ToString());
                a.Add("pa_swr_checksum/" + pa_swr_checksum.ToString());
                a.Add("atu_swr_checksum/" + atu_swr_checksum.ToString());
                a.Add("rx2_level_checksum/" + rx2_level_checksum.ToString());
                a.Add("rx2_image_gain_checksum/" + rx2_image_gain_checksum.ToString());
                a.Add("rx2_image_phase_checksum/" + rx2_image_phase_checksum.ToString());
                */
            /*   try
               {
                   StreamWriter writer = new StreamWriter(app_data_path + "\\power.csv");
                   writer.WriteLine("Band, 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100");
                   for (int i = 1; i <= (int)Band.B6M; i++)
                   {
                       writer.Write(((Band)i).ToString() + ",");
                       for (int j = 0; j < 13; j++)
                           writer.Write(power_table[i][j].ToString("f4") + ",");
                       writer.WriteLine("");
                   }
                   writer.Close();
               }
               catch (Exception)
               {
                   MessageBox.Show("Error writing power.csv file.  Please make sure this file is not open and try again.",
                       "Error writing power.csv",
                       MessageBoxButtons.OK,
                       MessageBoxIcon.Error);
               } */

            /*try
            {
                StreamWriter writer = new StreamWriter(app_data_path+"\\rx1_level.csv");
                writer.WriteLine("Band, 0, 1, 2");
                for(int i=1; i<=(int)Band.B6M; i++)
                {
                    writer.Write(((Band)i).ToString()+",");
                    for(int j=0; j<3; j++)
                        writer.Write(rx1_level_table[i][j].ToString("f10")+",");
                    writer.WriteLine("");
                }
                writer.Close();
            }
            catch(Exception)
            {
                MessageBox.Show("Error writing rx1_level.csv file.  Please make sure this file is not open and try again.",
                    "Error writing rx1_level.csv",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }*/

            // a.Add("rx2_fixed_gain/"+rx2_fixed_gain.ToString());
            //a.Add("rx2_max_gain/"+rx2_max_gain.ToString());

            a.Add("band_160m_index/" + band_160m_index.ToString());
            a.Add("band_80m_index/" + band_80m_index.ToString());
            a.Add("band_60m_index/" + band_60m_index.ToString());
            a.Add("band_40m_index/" + band_40m_index.ToString());
            a.Add("band_30m_index/" + band_30m_index.ToString());
            a.Add("band_20m_index/" + band_20m_index.ToString());
            a.Add("band_17m_index/" + band_17m_index.ToString());
            a.Add("band_15m_index/" + band_15m_index.ToString());
            a.Add("band_12m_index/" + band_12m_index.ToString());
            a.Add("band_10m_index/" + band_10m_index.ToString());
            a.Add("band_6m_index/" + band_6m_index.ToString());
            a.Add("band_2m_index/" + band_2m_index.ToString());
            a.Add("band_wwv_index/" + band_wwv_index.ToString());
            a.Add("band_gen_index/" + band_gen_index.ToString());

            a.Add("band_LMF_index/" + band_LMF_index.ToString()); // ke9ns add
            a.Add("band_120m_index/" + band_120m_index.ToString());
            a.Add("band_90m_index/" + band_90m_index.ToString());
            a.Add("band_61m_index/" + band_61m_index.ToString());
            a.Add("band_49m_index/" + band_49m_index.ToString());
            a.Add("band_41m_index/" + band_41m_index.ToString());
            a.Add("band_31m_index/" + band_31m_index.ToString());
            a.Add("band_25m_index/" + band_25m_index.ToString());
            a.Add("band_22m_index/" + band_22m_index.ToString());
            a.Add("band_19m_index/" + band_19m_index.ToString());
            a.Add("band_16m_index/" + band_16m_index.ToString());
            a.Add("band_14m_index/" + band_14m_index.ToString());
            a.Add("band_13m_index/" + band_13m_index.ToString());
            a.Add("band_11m_index/" + band_11m_index.ToString());

            a.Add("band_vhf0_index/" + band_vhf0_index.ToString());
            a.Add("band_vhf1_index/" + band_vhf1_index.ToString());
            a.Add("band_vhf2_index/" + band_vhf2_index.ToString());
            a.Add("band_vhf3_index/" + band_vhf3_index.ToString());
            a.Add("band_vhf4_index/" + band_vhf4_index.ToString());
            a.Add("band_vhf5_index/" + band_vhf5_index.ToString());
            a.Add("band_vhf6_index/" + band_vhf6_index.ToString());
            a.Add("band_vhf7_index/" + band_vhf7_index.ToString());
            a.Add("band_vhf8_index/" + band_vhf8_index.ToString());
            a.Add("band_vhf9_index/" + band_vhf9_index.ToString());
            a.Add("band_vhf10_index/" + band_vhf10_index.ToString());
            a.Add("band_vhf11_index/" + band_vhf11_index.ToString());
            a.Add("band_vhf12_index/" + band_vhf12_index.ToString());
            a.Add("band_vhf13_index/" + band_vhf13_index.ToString());

            a.Add("panelBandHF.Visible/" + whatisHF);//w3sz added
            a.Add("panelBandVHF.Visible/" + whatisVHF);//w3sz added
            a.Add("panelBandGEN.Visible/" + whatisGEN);
            a.Add("iscollapsed/" + iscollapsed);//w3sz added
            a.Add("isexpanded/" + isexpanded);//w3sz added
            a.Add("diversity/" + diversity2);

            for (int i = (int)PreampMode.FIRST + 1; i < (int)PreampMode.LAST; i++)
                a.Add("rx1_preamp_offset[" + i.ToString() + "]/" + rx1_preamp_offset[i].ToString("f3"));

            //a.Add("fwc_preamp_offset/"+fwc_preamp_offset.ToString());
            /*for(int i=0; i<32; i++)
                a.Add("fwc_att_offset["+i.ToString()+"]/"+fwc_att_offset[i].ToString());*/

            a.Add("wheel_tune_index/" + tune_step_index.ToString());		// Save wheel tune value

            a.Add("vfob_dsp_mode/" + ((int)vfob_dsp_mode).ToString());			// Save VFO B values 
            a.Add("vfob_filter/" + ((int)vfob_filter).ToString());

            a.Add("console_top/" + this.Top.ToString());		// save form positions
            a.Add("console_left/" + this.Left.ToString());
            a.Add("console_width/" + this.Width.ToString());
            a.Add("console_height/" + this.Height.ToString());
            a.Add("setup_top/" + SetupForm.Top.ToString());
            a.Add("setup_left/" + SetupForm.Left.ToString());
            a.Add("saved_rx_only/" + saved_rx_only.ToString());
            a.Add("mon_recall/" + mon_recall.ToString());

            a.Add("Version/" + this.Text);		// save the current version
            a.Add("VersionNumber/" + ver_num);      // Thetis version number in a.b.c format
            // a.Add("RadioType/" + CurrentModel);     // radio model string (ex. FLEX1500)
            a.Add("BandTextID/" + current_region);  // TURF Region
            a.Add("Metis_IP_address/" + NetworkIO.HpSdrHwIpAddress.ToString(nfi));
            a.Add("EthernetHostIPAddress/" + NetworkIO.EthernetHostIPAddress.ToString(nfi));

            DB.PurgeNotches();                  // remove old notches from DB
            DB.SaveVars("State", ref a);		// save the values to the DB
        }

        public void GetState()
        {
            // Automatically restores all controls from the database in the
            // tab pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)

            string file_name2 = AppDataPath + "ke9ns8.dat"; // save data for my mods


            if (!File.Exists(file_name2))
            {

                Debug.WriteLine("Create new database file");

                FileStream stream2 = new FileStream(file_name2, FileMode.Create); // open BMP  file
                BinaryWriter writer2 = new BinaryWriter(stream2);

                //  writer2.Write((double)WaterfallLowThresholdMic);      // TX low level waterfall threshold
                // writer2.Write(SetupForm.checkWaterMoveSize.Checked);  // large waterfall move
                writer2.Write(Display.GrayScale);                    // color or grayscale watetfall
                //  writer2.Write((byte)WaveForm.BandL);                 // save mode for check of valid waterfall ID later  // RX1DSPMode != BandL
                //  writer2.Write(Display.PW_AVG);                       // save avgP or avgB  RX1
                //  writer2.Write(Display.PW_AVG2);                      // save avgp or avgB RX2
                // writer2.Write(Audio.MON_PRE);                        // save MONitor pre or post audio
                writer2.Write(Display.GridOff);                      // save panadapter grid on/off
                //  writer2.Write(WaveControl.QAC);                      // QUickaudio file #

                writer2.Write(SpotControl.nameB);               // name for dx spotter
                writer2.Write(SpotControl.callB);               // call sign for dx spotter
                writer2.Write(SpotControl.nodeB);               // node  for dx spotter
                writer2.Write(SpotControl.portB);               // port for dx spotter


                writer2.Write(callsign);                             // callsign for waterfall ID
                writer2.Write(lastcallsign);                         // last callsign test for valid waterfall ID

                //  writer2.Write((byte)PAON);                           // temp/volts on/off console display
                writer2.Write((byte)noaaON);                          // space weather console display

                //  writer2.Write((byte)SetupForm.tune_step_index2);      // save Powermate knob index

                writer2.Write("end");


                writer2.Close();    // close  file
                stream2.Close();   // close stream
                Debug.WriteLine("Create new database file");

            }
            else // yes ke9ns.dat file does exist
            {

                FileStream stream2 = new FileStream(file_name2, FileMode.Open); // open BMP  file
                BinaryReader reader2 = new BinaryReader(stream2);

                //   WaterfallLowThresholdMic = (float)reader2.ReadDouble();            //  TX low level waterfall threshold
                //   SetupForm.checkWaterMoveSize.Checked = reader2.ReadBoolean();      // large waterfall move
                Display.GrayScale = reader2.ReadByte();                            // color or grayscale waterfall 
                //  WaveForm.BandL = (DSPMode)reader2.ReadByte();                      // for check of valid waterfall id
                //  Display.PW_AVG = reader2.ReadByte();                               // avgP or avgB RX1
                //  Display.PW_AVG2 = reader2.ReadByte();                              // avgP or avgB RX2
                // Audio.MON_PRE = reader2.ReadByte();                                // MONitor pre or post
                Display.GridOff = reader2.ReadByte();                              // panadapter grid on / off
                // WaveControl.QAC = reader2.ReadInt32();                             // QUickaudio file #

                SpotControl.DXNAME = reader2.ReadString();                     // name for dx spotter
                SpotControl.DXCALL = reader2.ReadString();                     // call sign for dx spotter
                SpotControl.DXNODE = reader2.ReadString();                     // node for dx spotter
                SpotControl.DXPORT = reader2.ReadString();                     // port for dx spotter


                callsign = reader2.ReadString();                                   // callsign for waterfall ID
                lastcallsign = reader2.ReadString();                               // last callsign test of waterfall ID valid

                //  PAON = reader2.ReadByte();                                       // temp/volt on/off display
                noaaON = reader2.ReadByte();                                // space weather console display

                //try
                //{
                //    SetupForm.tune_step_index2 = reader2.ReadByte();            // Powermate knob index
                //}
                //catch (Exception)
                //{
                //    SetupForm.tune_step_index2 = 2;
                //    SetupForm.tune_step_index2--;   // ke9ns add
                //    SetupForm.ChangeTuneStepUp2(); // ke9ns add
                //}

                reader2.Close();    // close  file
                stream2.Close();   // close stream
                //   Debug.WriteLine("Read database file");

            } // yes ke9ns.dat file does exist


            //ke9ns add
            //if (SetupForm.chkBoxHTTP.Checked == true)
            //{
            //    //   HttpServer2(); // ke9ns  start server

            //    Debug.WriteLine("ke9ns8 httplaunch");

            //    HttpServer = true;

            //    //  httpFile.HttpServer1();

            //}

            //   Debug.WriteLine("1nameB " + SpotControl.nameB);
            //   Debug.WriteLine("1portB " + SpotControl.portB);
            //   Debug.WriteLine("1callB " + SpotControl.callB);
            //    Debug.WriteLine("1nodeB " + SpotControl.nodeB);

            if (Display.GridOff == 1)
            {
                // SetupForm.gridBoxTS.CheckedChanged -= SetupForm.gridBoxTS_CheckedChanged;  // ke9ns turn off checkchanged temporarily    // ke9ns turn off valuechanged temporarily 
                // SetupForm.gridBoxTS.Checked = true;
                // SetupForm.gridBoxTS.CheckedChanged += SetupForm.gridBoxTS_CheckedChanged;


            }

            //  if (Audio.MON_PRE == 1)
            //  {

            //   Audio.MON_PRE = 2;// initial startup

            //   chkMON.CheckedChanged -= chkMON_CheckedChanged;
            //    chkMON.Text = "MONpr";
            //   panelDisplay.Invalidate();
            //   chkMON.Invalidate();
            //   panelDisplay.Update();
            //    chkMON.CheckedChanged -= chkMON_CheckedChanged;

            //  }
            //  else
            //  {
            //   Debug.WriteLine("recall PRE = 0");
            //  Audio.MON_PRE = 1;

            //  chkMON.CheckedChanged -= chkMON_CheckedChanged;
            //   chkMON.Text = "MONps";
            //    panelDisplay.Invalidate();
            //  chkMON.Invalidate();
            //   panelDisplay.Update();
            //  chkMON.CheckedChanged += chkMON_CheckedChanged;

            // }




            //if (Display.PW_AVG == 1)
            //{
            //    //  Debug.WriteLine("avgP ");

            //    chkDisplayAVG.CheckedChanged -= chkDisplayAVG_CheckedChanged; // turn eventoff
            //    //  chkDisplayAVG.Checked = true;
            //    chkDisplayAVG.Enabled = true;

            //    chkDisplayAVG.Text = "AvgP"; // ke9ns 
            //    panelDisplay.Invalidate();
            //    chkDisplayAVG.Invalidate();
            //    panelDisplay.Update();

            //    chkDisplayAVG.CheckedChanged += chkDisplayAVG_CheckedChanged; // turn eventoff


            //}
            //else
            //{
            //    //  chkDisplayAVG.Text = "AvgB"; // ke9ns 

            //}
            //if (Display.PW_AVG2 == 1)
            //{
            //    // Debug.WriteLine("avgP ");

            //    chkRX2DisplayAVG.CheckedChanged -= chkRX2DisplayAVG_CheckedChanged; // turn eventoff
            //    //  chkRX2DisplayAVG.Checked = true;

            //    chkRX2DisplayAVG.Enabled = true;

            //    chkRX2DisplayAVG.Text = "AvgP"; // ke9ns 
            //    panelRX2Display.Invalidate();
            //    chkRX2DisplayAVG.Invalidate();

            //    panelRX2Display.Update();
            //    chkRX2DisplayAVG.CheckedChanged += chkRX2DisplayAVG_CheckedChanged; // turn eventoff

            //}
            //else
            //{
            //    // chkRX2DisplayAVG.Text = "AvgB"; // ke9ns 

            //}

            //if (Display.GrayScale == 1)
            //{
            //    this.GrayMenuItem.Text = "ColorWtr";

            //}
            //if (SetupForm.checkWaterMoveSize.Checked)
            //{
            //    Display.WMS = 1;
            //}
            //callsignTextBox.Text = callsign;

            //if ((callsign == lastcallsign) && (WaveForm.BandL == RX1DSPMode))
            //{

            //    callsignTextBox.BackColor = Color.MediumSpringGreen;  // green if you created it or its still a valid wave
            //    menuStrip1.Invalidate();
            //    menuStrip1.Update();
            //}



            //  Debug.WriteLine("mic " + WaterfallLowThresholdMic);
            //  Debug.WriteLine("large " + setupForm.checkWaterMoveSize.Checked);
            //  Debug.WriteLine("large " + Display.WMS);
            //  Debug.WriteLine("call " + callsign);
            //  Debug.WriteLine("callL " + LastCall);


            ArrayList a1 = DB.GetVars("WaveOptions");                          // Get the saved list of controls
            a1.Sort();

            foreach (string s in a1)             // string is in the format "name,value"
            {
                string[] vals = s.Split('/');
                if (vals.Length > 2)
                {
                    for (int i = 2; i < vals.Length; i++)
                        vals[1] += "/" + vals[i];
                }

                string name = vals[0];
                string val = vals[1];

                if (name.StartsWith("chkQuickAudioFolder"))
                {
                    // Debug.WriteLine("val======= " + val);

                    //  if (val.Contains("True")) WaveForm.chkQuickAudioFolder.Checked = true;


                }
            }
            //--------------------------------------------------------kes9ns mod end
            //=========================================================================================================

            ArrayList checkbox_list = new ArrayList();
            ArrayList combobox_list = new ArrayList();
            ArrayList numericupdown_list = new ArrayList();
            ArrayList radiobutton_list = new ArrayList();
            ArrayList textbox_list = new ArrayList();
            ArrayList trackbar_list = new ArrayList();
            ArrayList prettytrackbar_list = new ArrayList();

            //ArrayList controls = new ArrayList();	// list of controls to restore
            foreach (Control c in this.Controls)
            {
                // if control is a groupbox or panel, retrieve all subcontrols
                if (c.GetType() == typeof(GroupBoxTS) || c.GetType() == typeof(PanelTS))
                {
                    foreach (Control c2 in c.Controls)
                    {
                        if (c2.Enabled)
                        {
                            if (c2.GetType() == typeof(CheckBoxTS))			// the control is a CheckBox
                                checkbox_list.Add(c2);
                            else if (c2.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
                                combobox_list.Add(c2);
                            else if (c2.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
                                numericupdown_list.Add(c2);
                            else if (c2.GetType() == typeof(RadioButtonTS))	// the control is a RadioButton
                                radiobutton_list.Add(c2);
                            else if (c2.GetType() == typeof(TextBoxTS))		// the control is a TextBox
                                textbox_list.Add(c2);
                            else if (c2.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
                                trackbar_list.Add(c2);
                            else if (c2.GetType() == typeof(PrettyTrackBar))
                                prettytrackbar_list.Add(c2);
                        }
                    }
                }
                else
                {
                    if (c.Enabled)
                    {
                        if (c.GetType() == typeof(CheckBoxTS))				// the control is a CheckBox
                            checkbox_list.Add(c);
                        else if (c.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
                            combobox_list.Add(c);
                        else if (c.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
                            numericupdown_list.Add(c);
                        else if (c.GetType() == typeof(RadioButtonTS))		// the control is a RadioButton
                            radiobutton_list.Add(c);
                        else if (c.GetType() == typeof(TextBoxTS))			// the control is a TextBox
                            textbox_list.Add(c);
                        else if (c.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
                            trackbar_list.Add(c);
                        else if (c.GetType() == typeof(PrettyTrackBar))
                            prettytrackbar_list.Add(c);
                    }
                }
            }

            ArrayList a = DB.GetVars("State");							// Get the saved list of controls
            a.Sort();
            int num_controls = checkbox_list.Count + combobox_list.Count +
                numericupdown_list.Count + radiobutton_list.Count +
                textbox_list.Count + trackbar_list.Count;

            foreach (string s in a)				// string is in the format "name,value"
            {
                string[] vals = s.Split('/');
                if (vals.Length > 2)
                {
                    for (int i = 2; i < vals.Length; i++)
                        vals[1] += "/" + vals[i];
                }

                string name = vals[0];
                string val = vals[1];
                int num = 0;

                if (name.StartsWith("rx1_filters["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    start = name.LastIndexOf("[") + 1;
                    length = name.LastIndexOf("]") - start;
                    int filter_mode = Int32.Parse(name.Substring(start, length));

                    length = val.IndexOf(":");
                    string n = val.Substring(0, length);

                    if (!val.Contains("|"))
                        val = val.Replace(",", "|");

                    start = val.IndexOf(":") + 2;
                    length = val.IndexOf("|") - start;
                    int low = Int32.Parse(val.Substring(start, length));

                    start = val.IndexOf("|") + 1;
                    int high = Int32.Parse(val.Substring(start));

                    rx1_filters[mode_index].SetFilter((Filter)filter_mode, low, high, n);
                }
                else if (name.StartsWith("rx2_filters["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    start = name.LastIndexOf("[") + 1;
                    length = name.LastIndexOf("]") - start;
                    int filter_mode = Int32.Parse(name.Substring(start, length));

                    length = val.IndexOf(":");
                    string n = val.Substring(0, length);

                    if (!val.Contains("|"))
                        val = val.Replace(",", "|");

                    start = val.IndexOf(":") + 2;
                    length = val.IndexOf("|") - start;
                    int low = Int32.Parse(val.Substring(start, length));

                    start = val.IndexOf("|") + 1;
                    int high = Int32.Parse(val.Substring(start));

                    rx2_filters[mode_index].SetFilter((Filter)filter_mode, low, high, n);
                }
                else if (name.StartsWith("mnotchdb"))
                {
                    MNotchDB.List.Add(MNotch.Parse(val));
                }
                else if (name.StartsWith("last_rx1_filter["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    rx1_filters[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                }
                else if (name.StartsWith("last_rx2_filter["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    rx2_filters[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                }
                else if (name.StartsWith("rx1_preamp_offset["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = Int32.Parse(name.Substring(start, length));

                    rx1_preamp_offset[index] = (float)Math.Round(float.Parse(val), 3);
                }
                /*else if(name.StartsWith("fwc_att_offset"))
                {
                    int start = name.IndexOf("[")+1;
                    int length = name.IndexOf("]")-start;
                    int index = int.Parse(name.Substring(start, length));

                    fwc_att_offset[index] = float.Parse(val);
                }
                else if (name.StartsWith("power_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 13 && i < list.Length; i++)
                        power_table[index][i] = (float)Math.Round(float.Parse(list[i]), 4);
                }
                else if (name.StartsWith("tx_carrier_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 4; i++)
                        tx_carrier_table[index][i] = int.Parse(list[i]);
                }
                  else if (name.StartsWith("pa_bias_table"))
                  {
                      int start = name.IndexOf("[") + 1;
                      int length = name.IndexOf("]") - start;
                      int index = int.Parse(name.Substring(start, length));

                      string[] list = val.Split('|');
                      for (int i = 0; i < 8 && i < list.Length; i++)
                          pa_bias_table[index][i] = int.Parse(list[i]);

                      if (fwc_init && index == 0 &&
                          (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                      {
                          if (flex5000DebugForm != null && !flex5000DebugForm.IsDisposed)
                          {
                              for (int i = 0; i < 8; i++)
                                  flex5000DebugForm.SetPAPot(i, (byte)pa_bias_table[index][i]);
                          }
                      }
                  } */
                else if (name.StartsWith("rx1_level_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 3; i++)
                        rx1_level_table[index][i] = (float)Math.Round(float.Parse(list[i]), 3);
                }
                else if (name.StartsWith("rx2_level_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 3; i++)
                        rx2_level_table[index][i] = (float)Math.Round(float.Parse(list[i]), 3);
                }
                /*   else if (name.StartsWith("pa_bridge_table"))
                   {
                       int start = name.IndexOf("[") + 1;
                       int length = name.IndexOf("]") - start;
                       int index = int.Parse(name.Substring(start, length));

                       string[] list = val.Split('|');
                       for (int i = 0; i < 6; i++)
                           pa_bridge_table[index][i] = (float)Math.Round(float.Parse(list[i]), 4);
                   } 
                   else if (name.StartsWith("swr_table"))
                   {
                       int start = name.IndexOf("[") + 1;
                       int length = name.IndexOf("]") - start;
                       int index = int.Parse(name.Substring(start, length));

                       swr_table[index] = (float)Math.Round(float.Parse(val), 4);
                   }
                   else if (name.StartsWith("atu_swr_table"))
                   {
                       int start = name.IndexOf("[") + 1;
                       int length = name.IndexOf("]") - start;
                       int index = int.Parse(name.Substring(start, length));

                       atu_swr_table[index] = (float)Math.Round(float.Parse(val), 4);
                   }
                   else if (name.StartsWith("rx1_ant_by_band"))
                   {
                       string[] list = val.Split('|');
                       for (int i = 0; i < (int)Band.LAST; i++)
                           rx1_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                   }
                   else if (name.StartsWith("rx2_ant_by_band"))
                   {
                       string[] list = val.Split('|');
                       for (int i = 0; i < (int)Band.LAST; i++)
                           rx2_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                   }
                   else if (name.StartsWith("tx_ant_by_band"))
                   {
                       string[] list = val.Split('|');
                       for (int i = 0; i < (int)Band.LAST; i++)
                           tx_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                   }
                   else if (name.StartsWith("rx1_loop_by_band"))
                   {
                       string[] list = val.Split('|');
                       for (int i = 0; i < (int)Band.LAST; i++)
                           rx1_loop_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                   } */
                else if (name.StartsWith("rx1_preamp_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx1_preamp_by_band[i] = (PreampMode)(int.Parse(list[i]));
                }
                else if (name.StartsWith("rx2_preamp_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx2_preamp_by_band[i] = (PreampMode)(int.Parse(list[i]));
                }
                else if (name.StartsWith("rx1_step_attenuator_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx1_step_attenuator_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("rx2_step_attenuator_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx2_step_attenuator_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("tx_step_attenuator_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        tx_step_attenuator_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("power_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        power_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("fm_tx_offset_by_band_mhz"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        fm_tx_offset_by_band_mhz[i] = double.Parse(list[i]);
                }
                else if (name.StartsWith("rx1_agct_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx1_agct_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("rx2_agct_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx2_agct_by_band[i] = int.Parse(list[i]);
                }
                else if (name.StartsWith("rx1_agcm_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx1_agcm_by_band[i] = (AGCMode)(int.Parse(list[i]));
                }
                else if (name.StartsWith("rx2_agcm_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        rx2_agcm_by_band[i] = (AGCMode)(int.Parse(list[i]));
                }
                else if (name.StartsWith("diversity_rx1_ref_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                        diversity_rx1_ref_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                }
                else if (name.StartsWith("rx_meter_cal_offset_by_radio"))
                {
                    string[] list = val.Split('|');
                    int numVals = list.Length;
                    if (numVals == (int)HPSDRModel.LAST)  //-W2PA  The number of rig types in the imported DB matches the number in this version
                    {
                        for (int i = 0; i < (int)HPSDRModel.LAST; i++)
                        {
                            rx_meter_cal_offset_by_radio[i] = float.Parse(list[i]);
                        }
                    }  //-W2PA  else the number has changed so don't import, leave the defaults alone
                    ;
                }
                else if (name.StartsWith("rx_display_cal_offset_by_radio"))
                {
                    string[] list = val.Split('|');
                    int numVals = list.Length;
                    if (numVals == (int)HPSDRModel.LAST)  //-W2PA  The number of rig types in the imported DB matches the number in this version
                    {
                        for (int i = 0; i < (int)HPSDRModel.LAST; i++)
                        {
                            rx_display_cal_offset_by_radio[i] = float.Parse(list[i]);
                        }
                    }  //-W2PA  else the number has changed so don't import, leave the defaults alone
                    ;
                }

                /*  else if (name.StartsWith("tx2_by_band"))
                  {
                      string[] list = val.Split('|');
                      for (int i = 0; i < (int)Band.LAST; i++)
                          tx2_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                  }
                  else if (name.StartsWith("tx3_by_band"))
                  {
                      string[] list = val.Split('|');
                      for (int i = 0; i < (int)Band.LAST; i++)
                          tx3_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                  } */

                switch (name)
                {
                    /* case "rx2_res_offset":
                         rx2_res_offset = float.Parse(val);
                         break;
                     case "current_ant_mode":
                         current_ant_mode = (AntMode)int.Parse(val);
                         break;
                     case "rx1_ant":
                         rx1_ant = (FWCAnt)int.Parse(val);
                         break;
                     case "rx1_loop":
                         rx1_loop = bool.Parse(val);
                         break;
                     case "rx2_ant":
                         rx2_ant = (FWCAnt)int.Parse(val);
                         break;
                     case "tx_ant":
                         tx_ant = (FWCAnt)int.Parse(val);
                         break;
                     case "fwc_preamp_offset":
                         fwc_preamp_offset = float.Parse(val);
                         break;
                     case "fwc_last_cal_date_time":
                         fwc_last_cal_date_time = long.Parse(val);
                         break;
                     case "fwc_serial_num":
                         fwc_serial_num = uint.Parse(val);
                         break;
                     case "fwc_trx_serial_num":
                         fwc_trx_serial_num = uint.Parse(val);
                         break;
                     case "rx2_last_cal_date_time":
                         rx2_last_cal_date_time = long.Parse(val);
                         break;
                     case "rx2_serial_num":
                         rx2_serial_num = uint.Parse(val);
                         break;
                     case "rx2_trx_match_serial":
                         rx2_trx_match_serial = uint.Parse(val);
                         break; */
                    //case "rx2_fixed_gain":
                    //rx2_fixed_gain = int.Parse(val);
                    //break;
                    //case "rx2_max_gain":
                    //	rx2_max_gain = int.Parse(val);
                    //	break;
                    case "chkNR_checkstate":
                        chkNR.CheckState = (CheckState)(Enum.Parse(typeof(CheckState), val));
                        break;
                    case "chkRX2NR_checkstate":
                        chkRX2NR.CheckState = (CheckState)(Enum.Parse(typeof(CheckState), val));
                        break;
                    case "chkNB_checkstate":
                        chkNB.CheckState = (CheckState)(Enum.Parse(typeof(CheckState), val));
                        break;
                    case "chkRX2NB_checkstate":
                        chkRX2NB.CheckState = (CheckState)(Enum.Parse(typeof(CheckState), val));
                        break;
                    //case "chkSyncIT_checkstate":  //-W2PA Checkbox for synched RIT/XIT
                    //    chkSyncIT.CheckState = (CheckState)(Enum.Parse(typeof(CheckState), val));
                    //    break;
                    case "band_160m_index":
                        band_160m_index = Int32.Parse(val);
                        break;
                    case "band_80m_index":
                        band_80m_index = Int32.Parse(val);
                        break;
                    case "band_60m_index":
                        band_60m_index = Int32.Parse(val);
                        break;
                    case "band_40m_index":
                        band_40m_index = Int32.Parse(val);
                        break;
                    case "band_30m_index":
                        band_30m_index = Int32.Parse(val);
                        break;
                    case "band_20m_index":
                        band_20m_index = Int32.Parse(val);
                        break;
                    case "band_17m_index":
                        band_17m_index = Int32.Parse(val);
                        break;
                    case "band_15m_index":
                        band_15m_index = Int32.Parse(val);
                        break;
                    case "band_12m_index":
                        band_12m_index = Int32.Parse(val);
                        break;
                    case "band_10m_index":
                        band_10m_index = Int32.Parse(val);
                        break;
                    case "band_6m_index":
                        band_6m_index = Int32.Parse(val);
                        break;
                    case "band_2m_index":
                        band_2m_index = Int32.Parse(val);
                        break;
                    case "band_wwv_index":
                        band_wwv_index = Int32.Parse(val);
                        break;
                    case "band_gen_index":
                        band_gen_index = Int32.Parse(val);
                        break;

                    case "band_LMF_index":                     // ke9ns add
                        band_LMF_index = Int32.Parse(val);
                        break;
                    case "band_120m_index":
                        band_120m_index = Int32.Parse(val);
                        break;
                    case "band_90m_index":
                        band_90m_index = Int32.Parse(val);
                        break;
                    case "band_61m_index":
                        band_61m_index = Int32.Parse(val);
                        break;
                    case "band_49m_index":
                        band_49m_index = Int32.Parse(val);
                        break;
                    case "band_41m_index":
                        band_41m_index = Int32.Parse(val);
                        break;
                    case "band_31m_index":
                        band_31m_index = Int32.Parse(val);
                        break;
                    case "band_25m_index":
                        band_25m_index = Int32.Parse(val);
                        break;
                    case "band_22m_index":
                        band_22m_index = Int32.Parse(val);
                        break;
                    case "band_19m_index":
                        band_19m_index = Int32.Parse(val);
                        break;
                    case "band_16m_index":
                        band_16m_index = Int32.Parse(val);
                        break;
                    case "band_14m_index":
                        band_14m_index = Int32.Parse(val);
                        break;
                    case "band_13m_index":
                        band_13m_index = Int32.Parse(val);
                        break;
                    case "band_11m_index":
                        band_11m_index = Int32.Parse(val);
                        break;

                    case "band_vhf0_index":
                        band_vhf0_index = Int32.Parse(val);
                        break;
                    case "band_vhf1_index":
                        band_vhf1_index = Int32.Parse(val);
                        break;
                    case "band_vhf2_index":
                        band_vhf2_index = Int32.Parse(val);
                        break;
                    case "band_vhf3_index":
                        band_vhf3_index = Int32.Parse(val);
                        break;
                    case "band_vhf4_index":
                        band_vhf4_index = Int32.Parse(val);
                        break;
                    case "band_vhf5_index":
                        band_vhf5_index = Int32.Parse(val);
                        break;
                    case "band_vhf6_index":
                        band_vhf6_index = Int32.Parse(val);
                        break;
                    case "band_vhf7_index":
                        band_vhf7_index = Int32.Parse(val);
                        break;
                    case "band_vhf8_index":
                        band_vhf8_index = Int32.Parse(val);
                        break;
                    case "band_vhf9_index":
                        band_vhf9_index = Int32.Parse(val);
                        break;
                    case "band_vhf10_index":
                        band_vhf10_index = Int32.Parse(val);
                        break;
                    case "band_vhf11_index":
                        band_vhf11_index = Int32.Parse(val);
                        break;
                    case "band_vhf12_index":
                        band_vhf12_index = Int32.Parse(val);
                        break;
                    case "band_vhf13_index":
                        band_vhf13_index = Int32.Parse(val);
                        break;
                    case "current_datetime_mode":
                        CurrentDateTimeMode = (DateTimeMode)(Int32.Parse(val));
                        break;
                    case "wheel_tune_index":
                        tune_step_index = Int32.Parse(val);
                        break;
                    case "txtMemoryQuick":
                        txtMemoryQuick.Text = val;
                        break;
                    case "rx1_display_cal_offset":
                        RX1DisplayCalOffset = float.Parse(val);
                        break;
                    //  case "tx_display_cal_offset":
                    //    TXDisplayCalOffset = float.Parse(val);
                    //     break;
                    case "rx1_meter_cal_offset":
                        rx1_meter_cal_offset = float.Parse(val);
                        break;
                    case "rx2_display_cal_offset":
                        RX2DisplayCalOffset = float.Parse(val);
                        break;
                    //  case "tx_display_cal_offset":
                    //    TXDisplayCalOffset = float.Parse(val);
                    //     break;
                    case "rx2_meter_cal_offset":
                        rx2_meter_cal_offset = float.Parse(val);
                        break;
                    case "panelBandHF.Visible": //added by w3sz
                        whatisHF = bool.Parse(val); //added by w3sz
                        panelBandHF.Visible = whatisHF; //added by w3sz
                        if (panelBandHF.Visible) //added by w3sz
                            btnBandHF_Click(btnBandHF, EventArgs.Empty); //added by w3sz
                        break; //added by w3sz
                    case "panelBandVHF.Visible": //added by w3sz
                        whatisVHF = bool.Parse(val); //added by w3sz
                        panelBandVHF.Visible = whatisVHF; //added by w3sz
                        if (panelBandVHF.Visible) //added by w3sz
                            btnBandVHF_Click(btnBandVHF, EventArgs.Empty); //added by w3sz
                        break;  //added by w3sz
                    case "panelBandGEN.Visible":
                        whatisGEN = bool.Parse(val);
                        panelBandGEN.Visible = whatisGEN;
                        if (panelBandGEN.Visible)
                            btnBandGEN_Click(radBandGEN, EventArgs.Empty);
                        break;  //added by w3sz
                    case "iscollapsed":  //added by w3sz
                        iscollapsed = bool.Parse(val);    //added by w3sz
                        if (iscollapsed)   //added by w3sz
                        {
                            this.CollapseDisplay();
                            iscollapsed = true;
                            isexpanded = false;
                        }
                        break; //added by w3sz
                    case "isexpanded":  //added by w3sz
                        isexpanded = bool.Parse(val);    //added by w3sz
                        if (isexpanded)   //added by w3sz
                        {
                            //  this.ExpandDisplay();
                            isexpanded = true;
                            iscollapsed = false;
                        }
                        break; //added by w3sz
                    case "diversity":
                        startdiversity = bool.Parse(val);
                        break;
                    case "quick_save_mode":
                        quick_save_mode = (DSPMode)(Int32.Parse(val));
                        break;
                    case "quick_save_filter":
                        quick_save_filter = (Filter)(Int32.Parse(val));
                        break;
                    case "vfob_dsp_mode":
                        vfob_dsp_mode = (DSPMode)(Int32.Parse(val));
                        break;
                    case "vfob_filter":
                        vfob_filter = (Filter)(Int32.Parse(val));
                        break;
                    case "console_top":
                        num = Int32.Parse(val);
                        /*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Height && Screen.AllScreens.Length == 1))
                            num = 0;*/
                        this.Top = num;
                        break;
                    case "console_left":
                        num = Int32.Parse(val);
                        /*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Width && Screen.AllScreens.Length == 1))
                            num = 0;*/
                        this.Left = num;
                        break;
                    case "console_width":
                        if (dpi <= 96) this.Width = int.Parse(val);
                        break;
                    case "console_height":
                        if (dpi <= 96) this.Height = int.Parse(val);
                        break;
                    case "setup_top":
                        num = Int32.Parse(val);
                        /*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Height && Screen.AllScreens.Length == 1))
                            num = 0;*/
                        SetupForm.Top = num;
                        break;
                    case "setup_left":
                        num = Int32.Parse(val);
                        /*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Width && Screen.AllScreens.Length == 1))
                            num = 0;*/
                        SetupForm.Left = num;
                        break;
                    /*	case "mem_top":
                            num = Int32.Parse(val);
                            if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Height && Screen.AllScreens.Length == 1))
                                num = 0;
                            MemForm.Top = num;
                            break;
                        case "mem_left":
                            num = Int32.Parse(val);
                            if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Width && Screen.AllScreens.Length == 1))
                                num = 0;
                            MemForm.Left = num;
                            break; */
                    case "SetupWizard":
                        if (val == "1")
                            run_setup_wizard = false;
                        break;
                    //case "show_alpha_warning":
                    //	show_alpha_warning = bool.Parse(val);
                    //	break;
                    // case "show_mobile_warning":
                    //    show_mobile_warning = bool.Parse(val);
                    //    break;
                    /*  case "rx1_image_gain_table":
                          string[] list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              rx1_image_gain_table[i] = float.Parse(list[i]);
                          break;
                      case "rx1_image_phase_table":
                          list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              rx1_image_phase_table[i] = float.Parse(list[i]);
                          break;
                      case "rx2_image_gain_table":
                          list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              rx2_image_gain_table[i] = float.Parse(list[i]);
                          break;
                      case "rx2_image_phase_table":
                          list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              rx2_image_phase_table[i] = float.Parse(list[i]);
                          break;
                      case "tx_image_gain_table":
                          list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              tx_image_gain_table[i] = float.Parse(list[i]);
                          break;
                      case "tx_image_phase_table":
                          list = val.Split('|');
                          for (int i = 0; i <= (int)Band.B6M && i < list.Length; i++)
                              tx_image_phase_table[i] = float.Parse(list[i]);
                          break;
                      case "rx1_level_checksum":
                          rx1_level_checksum = byte.Parse(val);
                          break;
                      case "rx1_image_gain_checksum":
                          rx1_image_gain_checksum = byte.Parse(val);
                          break;
                      case "rx1_image_phase_checksum":
                          rx1_image_phase_checksum = byte.Parse(val);
                          break;
                      case "tx_image_gain_checksum":
                          tx_image_gain_checksum = byte.Parse(val);
                          break;
                      case "tx_image_phase_checksum":
                          tx_image_phase_checksum = byte.Parse(val);
                          break;
                      case "tx_carrier_checksum":
                          tx_carrier_checksum = byte.Parse(val);
                          break;
                      case "pa_bias_checksum":
                          pa_bias_checksum = byte.Parse(val);
                          break;
                      case "pa_bridge_checksum":
                          pa_bridge_checksum = byte.Parse(val);
                          break;
                      case "pa_power_checksum":
                          pa_power_checksum = byte.Parse(val);
                          break;
                      case "pa_swr_checksum":
                          pa_swr_checksum = byte.Parse(val);
                          break;
                      case "atu_swr_checksum":
                          atu_swr_checksum = byte.Parse(val);
                          break;
                      case "rx2_level_checksum":
                          rx2_level_checksum = byte.Parse(val);
                          break;
                      case "rx2_image_gain_checksum":
                          rx2_image_gain_checksum = byte.Parse(val);
                          break;
                      case "rx2_image_phase_checksum":
                          rx2_image_phase_checksum = byte.Parse(val);
                          break; */
                    case "saved_rx_only":
                        saved_rx_only = bool.Parse(val);
                        break;
                    case "mon_recall":
                        mon_recall = bool.Parse(val);
                        break;
                    case "rx1_squelch_on":
                        rx1_squelch_on = bool.Parse(val);
                        break;
                    case "rx1_fm_squelch_on":
                        rx1_fm_squelch_on = bool.Parse(val);
                        break;
                    case "rx1_squelch_threshold_scroll":
                        rx1_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx1_fm_squelch_threshold_scroll":
                        rx1_fm_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx2_squelch_on":
                        rx2_squelch_on = bool.Parse(val);
                        break;
                    case "rx2_fm_squelch_on":
                        rx2_fm_squelch_on = bool.Parse(val);
                        break;
                    case "rx2_squelch_threshold_scroll":
                        rx2_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx2_fm_squelch_threshold_scroll":
                        rx2_fm_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "click_tune_display":
                        click_tune_display = bool.Parse(val);
                        break;
                    case "VFOAFreq":
                        VFOAFreq = double.Parse(val);
                        break;
                    case "center_frequency":
                        center_frequency = double.Parse(val);
                        break;
                    case "center_rx2_frequency":
                        center_rx2_frequency = double.Parse(val);
                        break;
                    case "diversity_gain_160m":
                        diversity_gain_160m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_160m":
                        diversity_gain_r2_160m = decimal.Parse(val);
                        break;
                    case "diversity_phase_160m":
                        diversity_phase_160m = decimal.Parse(val);
                        break;
                    case "diversity_gain_80m":
                        diversity_gain_80m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_80m":
                        diversity_gain_r2_80m = decimal.Parse(val);
                        break;
                    case "diversity_phase_80m":
                        diversity_phase_80m = decimal.Parse(val);
                        break;
                    case "diversity_gain_60m":
                        diversity_gain_60m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_60m":
                        diversity_gain_r2_60m = decimal.Parse(val);
                        break;
                    case "diversity_phase_60m":
                        diversity_phase_60m = decimal.Parse(val);
                        break;
                    case "diversity_gain_40m":
                        diversity_gain_40m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_40m":
                        diversity_gain_r2_40m = decimal.Parse(val);
                        break;
                    case "diversity_phase_40m":
                        diversity_phase_40m = decimal.Parse(val);
                        break;
                    case "diversity_gain_30m":
                        diversity_gain_30m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_30m":
                        diversity_gain_r2_30m = decimal.Parse(val);
                        break;
                    case "diversity_phase_30m":
                        diversity_phase_30m = decimal.Parse(val);
                        break;
                    case "diversity_gain_20m":
                        diversity_gain_20m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_20m":
                        diversity_gain_r2_20m = decimal.Parse(val);
                        break;
                    case "diversity_phase_20m":
                        diversity_phase_20m = decimal.Parse(val);
                        break;
                    case "diversity_gain_17m":
                        diversity_gain_17m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_17m":
                        diversity_gain_r2_17m = decimal.Parse(val);
                        break;
                    case "diversity_phase_17m":
                        diversity_phase_17m = decimal.Parse(val);
                        break;
                    case "diversity_gain_15m":
                        diversity_gain_15m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_15m":
                        diversity_gain_r2_15m = decimal.Parse(val);
                        break;
                    case "diversity_phase_15m":
                        diversity_phase_15m = decimal.Parse(val);
                        break;
                    case "diversity_gain_12m":
                        diversity_gain_12m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_12m":
                        diversity_gain_r2_12m = decimal.Parse(val);
                        break;
                    case "diversity_phase_12m":
                        diversity_phase_12m = decimal.Parse(val);
                        break;
                    case "diversity_gain_10m":
                        diversity_gain_10m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_10m":
                        diversity_gain_r2_10m = decimal.Parse(val);
                        break;
                    case "diversity_phase_10m":
                        diversity_phase_10m = decimal.Parse(val);
                        break;
                    case "diversity_gain_6m":
                        diversity_gain_6m = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_6m":
                        diversity_gain_r2_6m = decimal.Parse(val);
                        break;
                    case "diversity_phase_6m":
                        diversity_phase_6m = decimal.Parse(val);
                        break;
                    case "diversity_gain_wwv":
                        diversity_gain_wwv = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_wwv":
                        diversity_gain_r2_wwv = decimal.Parse(val);
                        break;
                    case "diversity_phase_wwv":
                        diversity_phase_wwv = decimal.Parse(val);
                        break;
                    case "diversity_gain_gen":
                        diversity_gain_gen = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_gen":
                        diversity_gain_r2_gen = decimal.Parse(val);
                        break;
                    case "diversity_phase_gen":
                        diversity_phase_gen = decimal.Parse(val);
                        break;
                    case "diversity_gain_xvtr":
                        diversity_gain_xvtr = decimal.Parse(val);
                        break;
                    case "diversity_gain_r2_xvtr":
                        diversity_gain_r2_xvtr = decimal.Parse(val);
                        break;
                    case "diversity_phase_xvtr":
                        diversity_phase_xvtr = decimal.Parse(val);
                        break;
                    case "waterfall_high_threshold_160m":
                        waterfall_high_threshold_160m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_160m":
                        waterfall_low_threshold_160m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_80m":
                        waterfall_high_threshold_80m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_80m":
                        waterfall_low_threshold_80m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_60m":
                        waterfall_high_threshold_60m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_60m":
                        waterfall_low_threshold_60m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_40m":
                        waterfall_high_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_40m":
                        waterfall_low_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_30m":
                        waterfall_high_threshold_30m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_30m":
                        waterfall_low_threshold_30m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_20m":
                        waterfall_high_threshold_20m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_20m":
                        waterfall_low_threshold_20m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_17m":
                        waterfall_high_threshold_17m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_17m":
                        waterfall_low_threshold_17m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_15m":
                        waterfall_high_threshold_15m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_15m":
                        waterfall_low_threshold_15m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_12m":
                        waterfall_high_threshold_12m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_12m":
                        waterfall_low_threshold_12m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_10m":
                        waterfall_high_threshold_10m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_10m":
                        waterfall_low_threshold_10m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_6m":
                        waterfall_high_threshold_6m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_6m":
                        waterfall_low_threshold_6m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_wwv":
                        waterfall_high_threshold_wwv = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_wwv":
                        waterfall_low_threshold_wwv = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_gen":
                        waterfall_high_threshold_gen = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_gen":
                        waterfall_low_threshold_gen = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_xvtr":
                        waterfall_high_threshold_xvtr = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_xvtr":
                        waterfall_low_threshold_xvtr = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_160m":
                        rx2_waterfall_high_threshold_160m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_160m":
                        rx2_waterfall_low_threshold_160m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_80m":
                        rx2_waterfall_high_threshold_80m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_80m":
                        rx2_waterfall_low_threshold_80m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_60m":
                        rx2_waterfall_high_threshold_60m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_60m":
                        rx2_waterfall_low_threshold_60m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_40m":
                        rx2_waterfall_high_threshold_40m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_40m":
                        rx2_waterfall_low_threshold_40m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_30m":
                        rx2_waterfall_high_threshold_30m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_30m":
                        rx2_waterfall_low_threshold_30m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_20m":
                        rx2_waterfall_high_threshold_20m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_20m":
                        rx2_waterfall_low_threshold_20m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_17m":
                        rx2_waterfall_high_threshold_17m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_17m":
                        rx2_waterfall_low_threshold_17m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_15m":
                        rx2_waterfall_high_threshold_15m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_15m":
                        rx2_waterfall_low_threshold_15m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_12m":
                        rx2_waterfall_high_threshold_12m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_12m":
                        rx2_waterfall_low_threshold_12m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_10m":
                        rx2_waterfall_high_threshold_10m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_10m":
                        rx2_waterfall_low_threshold_10m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_6m":
                        rx2_waterfall_high_threshold_6m = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_6m":
                        rx2_waterfall_low_threshold_6m = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_wwv":
                        rx2_waterfall_high_threshold_wwv = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_wwv":
                        rx2_waterfall_low_threshold_wwv = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_gen":
                        rx2_waterfall_high_threshold_gen = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_gen":
                        rx2_waterfall_low_threshold_gen = float.Parse(val);
                        break;
                    case "rx2_waterfall_high_threshold_xvtr":
                        rx2_waterfall_high_threshold_xvtr = float.Parse(val);
                        break;
                    case "rx2_waterfall_low_threshold_xvtr":
                        rx2_waterfall_low_threshold_xvtr = float.Parse(val);
                        break;
                    case "display_grid_max_160m":
                        display_grid_max_160m = float.Parse(val);
                        break;
                    case "display_grid_min_160m":
                        display_grid_min_160m = float.Parse(val);
                        break;
                    case "display_grid_max_80m":
                        display_grid_max_80m = float.Parse(val);
                        break;
                    case "display_grid_min_80m":
                        display_grid_min_80m = float.Parse(val);
                        break;
                    case "display_grid_max_60m":
                        display_grid_max_60m = float.Parse(val);
                        break;
                    case "display_grid_min_60m":
                        display_grid_min_60m = float.Parse(val);
                        break;
                    case "display_grid_max_40m":
                        display_grid_max_40m = float.Parse(val);
                        break;
                    case "display_grid_min_40m":
                        display_grid_min_40m = float.Parse(val);
                        break;
                    case "display_grid_max_30m":
                        display_grid_max_30m = float.Parse(val);
                        break;
                    case "display_grid_min_30m":
                        display_grid_min_30m = float.Parse(val);
                        break;
                    case "display_grid_max_20m":
                        display_grid_max_20m = float.Parse(val);
                        break;
                    case "display_grid_min_20m":
                        display_grid_min_20m = float.Parse(val);
                        break;
                    case "display_grid_max_17m":
                        display_grid_max_17m = float.Parse(val);
                        break;
                    case "display_grid_min_17m":
                        display_grid_min_17m = float.Parse(val);
                        break;
                    case "display_grid_max_15m":
                        display_grid_max_15m = float.Parse(val);
                        break;
                    case "display_grid_min_15m":
                        display_grid_min_15m = float.Parse(val);
                        break;
                    case "display_grid_max_12m":
                        display_grid_max_12m = float.Parse(val);
                        break;
                    case "display_grid_min_12m":
                        display_grid_min_12m = float.Parse(val);
                        break;
                    case "display_grid_max_10m":
                        display_grid_max_10m = float.Parse(val);
                        break;
                    case "display_grid_min_10m":
                        display_grid_min_10m = float.Parse(val);
                        break;
                    case "display_grid_max_6m":
                        display_grid_max_6m = float.Parse(val);
                        break;
                    case "display_grid_min_6m":
                        display_grid_min_6m = float.Parse(val);
                        break;
                    case "display_grid_max_wwv":
                        display_grid_max_wwv = float.Parse(val);
                        break;
                    case "display_grid_min_wwv":
                        display_grid_min_wwv = float.Parse(val);
                        break;
                    case "display_grid_max_gen":
                        display_grid_max_gen = float.Parse(val);
                        break;
                    case "display_grid_min_gen":
                        display_grid_min_gen = float.Parse(val);
                        break;
                    case "display_grid_max_xvtr":
                        display_grid_max_xvtr = float.Parse(val);
                        break;
                    case "display_grid_min_xvtr":
                        display_grid_min_xvtr = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_160m":
                        rx2_display_grid_max_160m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_160m":
                        rx2_display_grid_min_160m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_80m":
                        rx2_display_grid_max_80m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_80m":
                        rx2_display_grid_min_80m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_60m":
                        rx2_display_grid_max_60m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_60m":
                        rx2_display_grid_min_60m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_40m":
                        rx2_display_grid_max_40m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_40m":
                        rx2_display_grid_min_40m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_30m":
                        rx2_display_grid_max_30m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_30m":
                        rx2_display_grid_min_30m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_20m":
                        rx2_display_grid_max_20m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_20m":
                        rx2_display_grid_min_20m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_17m":
                        rx2_display_grid_max_17m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_17m":
                        rx2_display_grid_min_17m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_15m":
                        rx2_display_grid_max_15m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_15m":
                        rx2_display_grid_min_15m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_12m":
                        rx2_display_grid_max_12m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_12m":
                        rx2_display_grid_min_12m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_10m":
                        rx2_display_grid_max_10m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_10m":
                        rx2_display_grid_min_10m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_6m":
                        rx2_display_grid_max_6m = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_6m":
                        rx2_display_grid_min_6m = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_wwv":
                        rx2_display_grid_max_wwv = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_wwv":
                        rx2_display_grid_min_wwv = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_gen":
                        rx2_display_grid_max_gen = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_gen":
                        rx2_display_grid_min_gen = float.Parse(val);
                        break;
                    case "rx2_display_grid_max_xvtr":
                        rx2_display_grid_max_xvtr = float.Parse(val);
                        break;
                    case "rx2_display_grid_min_xvtr":
                        rx2_display_grid_min_xvtr = float.Parse(val);
                        break;
                    case "Metis_IP_address":
                        NetworkIO.HpSdrHwIpAddress = val;
                        break;
                    case "EthernetHostIPAddress":
                        NetworkIO.EthernetHostIPAddress = val;
                        break;
                }
            }

            // restore saved values to the controls
            foreach (string s in a)				// string is in the format "name,value"
            {
                string[] vals = s.Split('/');
                string name = vals[0];
                string val = vals[1];

                if (s.StartsWith("chk"))			// control is a CheckBox
                {
                    for (int i = 0; i < checkbox_list.Count; i++)
                    {	// look through each control to find the matching name
                        CheckBoxTS c = (CheckBoxTS)checkbox_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Checked = bool.Parse(val);	// restore value
                            i = checkbox_list.Count + 1;
                        }
                        if (i == checkbox_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("combo"))	// control is a ComboBox
                {
                    for (int i = 0; i < combobox_list.Count; i++)
                    {	// look through each control to find the matching name
                        ComboBoxTS c = (ComboBoxTS)combobox_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Text = val;	// restore value
                            i = combobox_list.Count + 1;
                        }
                        if (i == combobox_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("ud"))
                {
                    for (int i = 0; i < numericupdown_list.Count; i++)
                    {	// look through each control to find the matching name
                        NumericUpDownTS c = (NumericUpDownTS)numericupdown_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            decimal num = decimal.Parse(val);

                            if (num > c.Maximum) num = c.Maximum;		// check endpoints
                            else if (num < c.Minimum) num = c.Minimum;
                            c.Value = num;			// restore value
                            i = numericupdown_list.Count + 1;
                        }
                        if (i == numericupdown_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("rad"))
                {	// look through each control to find the matching name
                    for (int i = 0; i < radiobutton_list.Count; i++)
                    {
                        RadioButtonTS c = (RadioButtonTS)radiobutton_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            if (!val.ToLower().Equals("true") && !val.ToLower().Equals("false"))
                                val = "True";
                            c.Checked = bool.Parse(val);	// restore value
                            i = radiobutton_list.Count + 1;
                        }
                        if (i == radiobutton_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("txt"))
                {	// look through each control to find the matching name
                    for (int i = 0; i < textbox_list.Count; i++)
                    {
                        TextBoxTS c = (TextBoxTS)textbox_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Text = val;	// restore value
                            i = textbox_list.Count + 1;
                        }
                        if (i == textbox_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("tb"))
                {
                    // look through each control to find the matching name
                    for (int i = 0; i < trackbar_list.Count; i++)
                    {
                        TrackBarTS c = (TrackBarTS)trackbar_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Value = Int32.Parse(val);
                            i = trackbar_list.Count + 1;
                        }
                        if (i == trackbar_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else if (s.StartsWith("ptb"))
                {
                    // look through each control to find the matching name
                    for (int i = 0; i < prettytrackbar_list.Count; i++)
                    {
                        PrettyTrackBar c = (PrettyTrackBar)prettytrackbar_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Value = Int32.Parse(val);
                            i = prettytrackbar_list.Count + 1;
                        }
                        if (i == prettytrackbar_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }

            }

            Common.ForceFormOnScreen(this);
            Common.ForceFormOnScreen(SetupForm);
            //Common.ForceFormOnScreen(MemForm);
        }

        public float GetRX1Level(Band b, int index)
        {
            return rx1_level_table[(int)b][index];
        }

        public float GetRX2Level(Band b, int index)
        {
            return rx2_level_table[(int)b][index];
        }

        /* public void ResetMemForm()
        {
            MemForm = null;
            MemForm = new Memory(this);
            MemForm.StartPosition = FormStartPosition.Manual;
        } */

        public FilterPreset[] rx1_filters = new FilterPreset[(int)DSPMode.LAST];
        public FilterPreset[] rx2_filters = new FilterPreset[(int)DSPMode.LAST];

        private void InitFilterPresets()
        {
            InitFilterPresets(rx1_filters);
            InitFilterPresets(rx2_filters);
        }

        private void InitFilterPresets(FilterPreset[] preset)
        {
            // used to initialize all the filter variables

            for (int m = (int)DSPMode.FIRST + 1; m < (int)DSPMode.LAST; m++)
            {
                preset[m] = new FilterPreset();
                for (Filter f = Filter.F1; f != Filter.LAST; f++)
                {
                    switch (m)
                    {
                        case (int)DSPMode.LSB:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -5100, -100, "5.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -4500, -100, "4.4k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -3900, -100, "3.8k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -3400, -100, "3.3k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -3000, -100, "2.9k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -2800, -100, "2.7k");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -2500, -100, "2.4k");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -2200, -100, "2.1k");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -1900, -100, "1.8k");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -1100, -100, "1.0k");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -2800, -100, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -2800, -100, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.USB:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, 100, 5100, "5.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, 100, 4500, "4.4k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, 100, 3900, "3.8k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, 100, 3400, "3.3k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, 100, 3000, "2.9k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, 100, 2800, "2.7k");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, 100, 2500, "2.4k");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, 100, 2200, "2.1k");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, 100, 1900, "1.8k");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, 100, 1100, "1.0k");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, 100, 2800, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, 100, 2800, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.DIGL:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 1500, -digl_click_tune_offset + 1500, "3.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 1250, -digl_click_tune_offset + 1250, "2.5k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 1000, -digl_click_tune_offset + 1000, "2.0k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 750, -digl_click_tune_offset + 750, "1.5k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 500, -digl_click_tune_offset + 500, "1.0k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 400, -digl_click_tune_offset + 400, "800");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 300, -digl_click_tune_offset + 300, "600");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 150, -digl_click_tune_offset + 150, "300");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 75, -digl_click_tune_offset + 75, "150");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 38, -digl_click_tune_offset + 38, "75");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 400, -digl_click_tune_offset + 400, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -digl_click_tune_offset - 400, -digl_click_tune_offset + 400, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.DIGU:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 1500, digu_click_tune_offset + 1500, "3.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 1250, digu_click_tune_offset + 1250, "2.5k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 1000, digu_click_tune_offset + 1000, "2.0k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 750, digu_click_tune_offset + 750, "1.5k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 500, digu_click_tune_offset + 500, "1.0k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 400, digu_click_tune_offset + 400, "800");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 300, digu_click_tune_offset + 300, "600");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 150, digu_click_tune_offset + 150, "300");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 75, digu_click_tune_offset + 75, "150");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 38, digu_click_tune_offset + 38, "75");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 400, digu_click_tune_offset + 400, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 400, digu_click_tune_offset + 400, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.CWL:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -cw_pitch - 500, -cw_pitch + 500, "1.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -cw_pitch - 400, -cw_pitch + 400, "800");
                                    break;
                                //case Filter.F3:
                                //    preset[m].SetFilter(f, -cw_pitch - 375, -cw_pitch + 375, "750");
                                //    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -cw_pitch - 300, -cw_pitch + 300, "600");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "500");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -cw_pitch - 200, -cw_pitch + 200, "400");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -cw_pitch - 125, -cw_pitch + 125, "250");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -cw_pitch - 75, -cw_pitch + 75, "150");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -cw_pitch - 50, -cw_pitch + 50, "100");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -cw_pitch - 25, -cw_pitch + 25, "50");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -cw_pitch - 13, -cw_pitch + 13, "25");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -cw_pitch - 250, -cw_pitch + 250, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.CWU:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, cw_pitch - 500, cw_pitch + 500, "1.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, cw_pitch - 400, cw_pitch + 400, "800");
                                    break;
                                //case Filter.F3:
                                //    preset[m].SetFilter(f, cw_pitch - 375, cw_pitch + 375, "750");
                                //    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, cw_pitch - 300, cw_pitch + 300, "600");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "500");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, cw_pitch - 200, cw_pitch + 200, "400");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, cw_pitch - 125, cw_pitch + 125, "250");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, cw_pitch - 75, cw_pitch + 75, "150");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, cw_pitch - 50, cw_pitch + 50, "100");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, cw_pitch - 25, cw_pitch + 25, "50");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, cw_pitch - 13, cw_pitch + 13, "25");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, cw_pitch - 250, cw_pitch + 250, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.AM:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -10000, 10000, "20k");
                                    //preset[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -9000, 9000, "18k");
                                    //preset[m].SetFilter(f, -6000, 6000, "12k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -8000, 8000, "16k");
                                    //preset[m].SetFilter(f, -5000, 5000, "10k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -6000, 6000, "12k");
                                    //preset[m].SetFilter(f, -4000, 4000, "8.0k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -5000, 5000, "10k");
                                    //preset[m].SetFilter(f, -3300, 3300, "6.6k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -4500, 4500, "9.0k");
                                    //preset[m].SetFilter(f, -2600, 2600, "5.2k");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -4000, 4000, "8.0k");
                                    //preset[m].SetFilter(f, -2000, 2000, "4.0k");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -3500, 3500, "7.0k");
                                    //preset[m].SetFilter(f, -1550, 1550, "3.1k");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -3000, 3000, "6.0k");
                                    //preset[m].SetFilter(f, -1450, 1450, "2.9k");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -2500, 2500, "5.0k");
                                    //preset[m].SetFilter(f, -1200, 1200, "2.4k");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -3000, 3000, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -3000, 3000, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        case (int)DSPMode.SAM:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -10000, 10000, "20k");
                                    //preset[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -9000, 9000, "18k");
                                    //preset[m].SetFilter(f, -6000, 6000, "12k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -8000, 8000, "16k");
                                    //preset[m].SetFilter(f, -5000, 5000, "10k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -6000, 6000, "12k");
                                    //preset[m].SetFilter(f, -4000, 4000, "8.0k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -5000, 5000, "10k");
                                    //preset[m].SetFilter(f, -3300, 3300, "6.6k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -4500, 4500, "9.0k");
                                    //preset[m].SetFilter(f, -2600, 2600, "5.2k");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -4000, 4000, "8.0k");
                                    //preset[m].SetFilter(f, -2000, 2000, "4.0k");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -3500, 3500, "7.0k");
                                    //preset[m].SetFilter(f, -1550, 1550, "3.1k");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -3000, 3000, "6.0k");
                                    //preset[m].SetFilter(f, -1450, 1450, "2.9k");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -2500, 2500, "5.0k");
                                    //preset[m].SetFilter(f, -1200, 1200, "2.4k");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -3000, 3000, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -3000, 3000, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                         case (int)DSPMode.DSB:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -8000, 8000, "16k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -6000, 6000, "12k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -5000, 5000, "10k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -4000, 4000, "8.0k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -3300, 3300, "6.6k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -2600, 2600, "5.2k");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -2000, 2000, "4.0k");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -1550, 1550, "3.1k");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -1450, 1450, "2.9k");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -1200, 1200, "2.4k");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -3300, 3300, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -3300, 3300, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;
                        default:
                            preset[m].LastFilter = Filter.NONE;
                            break;
                    }
                }
            }
        }

        private void InitDisplayModes()
        {
            // populate the display mode list
            for (DisplayMode dm = DisplayMode.FIRST + 1; dm < DisplayMode.LAST; dm++)
            {
                string s = dm.ToString().ToLower();
                s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1);
                comboDisplayMode.Items.Add(s);
            }
        }

        private void InitAGCModes()
        {
            // populate the AGC mode list
            for (AGCMode agc = AGCMode.FIRST + 1; agc < AGCMode.LAST; agc++)
            {
                string s = agc.ToString().ToLower();
                s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1);
                comboAGC.Items.Add(s);
            }

            for (AGCMode agc = AGCMode.FIRST + 1; agc < AGCMode.LAST; agc++)
            {
                string s = agc.ToString().ToLower();
                s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1);
                comboRX2AGC.Items.Add(s);
            }
        }

        private void InitMultiMeterModes()
        {
            comboMeterRXMode.Items.Add("Signal");
            comboMeterRXMode.Items.Add("Sig Avg");
            comboMeterRXMode.Items.Add("ADC L");
            comboMeterRXMode.Items.Add("ADC R");
            comboMeterRXMode.Items.Add("ADC2 L");
            comboMeterRXMode.Items.Add("ADC2 R");
            comboMeterRXMode.Items.Add("Off");

            comboRX2MeterMode.Items.Add("Signal");
            comboRX2MeterMode.Items.Add("Sig Avg");
            comboRX2MeterMode.Items.Add("ADC L");
            comboRX2MeterMode.Items.Add("ADC R");
            comboRX2MeterMode.Items.Add("ADC2 L");
            comboRX2MeterMode.Items.Add("ADC2 R");
            comboRX2MeterMode.Items.Add("Off");

            comboMeterTXMode.Items.Add("Fwd Pwr");
            // comboMeterTXMode.Items.Add("Ref Pwr");
             // comboMeterTXMode.Items.Add("SWR");
           //comboMeterTXMode.Items.Add("Fwd SWR");
            comboMeterTXMode.Items.Add("Mic");
            comboMeterTXMode.Items.Add("EQ");
            comboMeterTXMode.Items.Add("Leveler");
            comboMeterTXMode.Items.Add("Lev Gain");
            comboMeterTXMode.Items.Add("CFC");
            comboMeterTXMode.Items.Add("CFC Comp");
            comboMeterTXMode.Items.Add("COMP");
            comboMeterTXMode.Items.Add("ALC");
            comboMeterTXMode.Items.Add("ALC Comp");
            comboMeterTXMode.Items.Add("Off");
        }

        private void DisableAllFilters()
        {
            foreach (Control c in panelFilter.Controls)
            {
                if (c.GetType() == typeof(RadioButtonTS))
                {
                    c.Enabled = false;
                }
            }
            filterToolStripMenuItem.Enabled = false;
        }

        private void DisableAllRX2Filters()
        {
            foreach (Control c in panelRX2Filter.Controls)
            {
                if (c.GetType() == typeof(RadioButtonTS))
                {
                    c.Enabled = false;
                }
            }
        }

        private void EnableAllFilters()
        {
            foreach (Control c in panelFilter.Controls)
            {
                if (c.GetType() == typeof(RadioButtonTS))
                {
                    c.Enabled = true;

                    if (c.BackColor == vfo_text_dark_color)
                    {
                        c.BackColor = button_selected_color;
                    }
                }
            }
            filterToolStripMenuItem.Enabled = true;
        }

        private void EnableAllRX2Filters()
        {
            foreach (Control c in panelRX2Filter.Controls)
            {
                if (c.GetType() == typeof(RadioButtonTS))
                {
                    c.Enabled = true;

                    if (c.BackColor == vfo_text_dark_color)
                    {
                        c.BackColor = button_selected_color;
                    }
                }
            }
        }

        private void DisableAllBands()
        {
            foreach (Control c in panelBandHF.Controls)
            {
                c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
            }

            foreach (Control c in panelBandVHF.Controls)
            {
                c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
            }

            foreach (Control c in panelBandGEN.Controls)
            {
                c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
            }

        }


        private void EnableAllBands()
        {
            foreach (Control c in panelBandHF.Controls)
            {
                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    b.Enabled = b.Text != "2" || XVTRPresent;

                    if (b.BackColor == vfo_text_dark_color)
                        b.BackColor = button_selected_color;
                }
                else c.Enabled = true;
            }

            foreach (Control c in panelBandVHF.Controls)
            {
                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.Name == "panelBandHF")
                        b.Enabled = true;
                    else
                    {
                        int index = Int32.Parse(b.Name.Substring(10));
                        if (XVTRForm.GetEnabled(index))
                            b.Enabled = true;
                    }

                    if (b.BackColor == vfo_text_dark_color)
                        b.BackColor = button_selected_color;
                }
                else c.Enabled = true;
            }

            foreach (Control c in panelBandGEN.Controls) // ke9ns add
            {
                RadioButtonTS b = c as RadioButtonTS;
                Debug.WriteLine("enableallbnads");

                if (b != null)
                {

                    if (b.Name == "panelBandHF")
                    {
                        b.Enabled = true;
                    }
                    else
                    {
                        b.Enabled = true;

                    }

                    if (b.BackColor == vfo_text_dark_color) b.BackColor = button_selected_color;
                }
                else
                {
                    c.Enabled = true;

                }
            }

        }

        private void DisableAllModes()
        {
            foreach (RadioButtonTS r in panelMode.Controls)
            {
                r.Enabled = false;
                if (r.BackColor == button_selected_color)
                    r.BackColor = vfo_text_dark_color;
            }
        }

        private void EnableAllModes()
        {
            foreach (RadioButtonTS r in panelMode.Controls)
            {
                if (r.Text != "")
                    r.Enabled = true;
                if (r.BackColor == vfo_text_dark_color)
                    r.BackColor = button_selected_color;
            }
        }

        private void DisableFilters(int lowcutoff)
        {
            // Disables all filters below the number passed in. 
            // For example, DisableFilters(100) would cause the
            // 100Hz, 50Hz and 25Hz filters to be disabled.

            foreach (Control c in panelFilter.Controls)
            {
                if (c.GetType() != typeof(RadioButtonTS) || c.Name.IndexOf("Var") >= 0) continue;
                string name = c.Name;
                int len;
                int begin = name.IndexOf("Filter") + 6;
                len = name.Length - begin;

                int filter_width = Int32.Parse(name.Substring(begin, len));
                if (filter_width >= lowcutoff) continue;
                c.Enabled = false;
                ((RadioButtonTS)c).Checked = false;
            }
        }

        private void GetVFOCharWidth()
        {
            // This function calculates the pixel width of the VFO display.
            // This information is used for mouse wheel hover tuning.

            Graphics g = txtVFOAFreq.CreateGraphics();

            SizeF size = g.MeasureString("0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
            vfo_char_width = (int)Math.Round(size.Width - 2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
            float float_char_width = size.Width - 2.0f;

            size = g.MeasureString("00", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
            vfo_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString(separator, txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
            vfo_decimal_width = (int)(size.Width - 2.0f);

            size = g.MeasureString("0" + separator + "0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
            vfo_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString("1234.678901", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
            vfo_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

            size = g.MeasureString("0", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
            vfo_small_char_width = (int)Math.Round(size.Width - 2.0f, 0);
            float_char_width = size.Width - 2.0f;

            size = g.MeasureString("00", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
            vfo_small_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            g.Dispose();
        }

        private void GetVFOSubCharWidth()
        {
            // This function calculates the pixel width of the VFO display.
            // This information is used for mouse wheel hover tuning.

            Graphics g = txtVFOABand.CreateGraphics();

            SizeF size = g.MeasureString("0", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
            vfo_sub_char_width = (int)Math.Round(size.Width - 2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
            float float_char_width = size.Width - 2.0f;

            size = g.MeasureString("00", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
            vfo_sub_char_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString(separator, txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
            vfo_sub_decimal_width = (int)(size.Width - 2.0f);

            size = g.MeasureString("0" + separator + "0", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
            vfo_sub_decimal_space = (int)Math.Round(size.Width - 2.0f - 2 * float_char_width, 0);

            size = g.MeasureString("1234.678901", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
            vfo_sub_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

            /*size = g.MeasureString("0", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
            vfo_small_char_width = (int)Math.Round(size.Width-2.0f, 0);
            float_char_width = size.Width-2.0f;

            size = g.MeasureString("00", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
            vfo_small_char_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);*/

            g.Dispose();
        }

        public string[] filter2 = new string[20]; // ke9ns add for bandstack locking
        public int iii = 0;


        //==================================================================================
        // ke9ns add
        public void SaveBand1()
        {

            try
            {
                StackForm.bandstackupdate(); // ke9ns add: to update filter2[]

                iii = Convert.ToInt32((string)regBox1.Text);
                Debug.WriteLine("LOCK STATUS filter2[] = " + filter2[iii]);

                iii = iii - 1;

                Debug.WriteLine("index status = " + iii);

            }
            catch
            {
                Debug.WriteLine("Cant get bandstack info");
                iii = 0;
                filter2[0] = "";

            }

            if (filter2[iii] == "@")
            {

                BandStackLock = 1;
            }
            else
            {
                BandStackLock = 0;

            }

        } // SaveBand1()

        public void SaveBand()
        {
            SaveBand1();

            // Used in Bandstacking algorithm
            double CenterFreq = center_frequency;           // Added by G3OQD
            int ZoomFactor = ptbDisplayZoom.Value;          // Added by G3OQD
            bool CTUN = ClickTuneDisplay;                   // Added by G3OQD
            double freq = Math.Round(VFOAFreq, 6);
            //string filter = rx1_filter.ToString();
            string filter = rx1_filter.ToString() + filter2[iii];
            string mode = rx1_dsp_mode.ToString();

            switch (rx1_band)
            {
                case Band.B160M:
                    if (freq >= 1.8 && freq < 2.0)
                        DB.SaveBandStack("160M", band_160m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B80M:
                    if (freq >= 3.5 && freq < 4.0)
                        DB.SaveBandStack("80M", band_80m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B60M:
                    if (extended || current_region != FRSRegion.US) // || current_region != FRSRegion.UK))
                    {
                        if (freq >= 5.0 && freq < 6.0)
                            DB.SaveBandStack("60M", band_60m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    }
                    else
                    {
                        if (RX1IsOn60mChannel())
                            DB.SaveBandStack("60M", band_60m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    }
                    break;
                case Band.B40M:
                    if (freq >= 7.0 && freq < 7.3)
                        DB.SaveBandStack("40M", band_40m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B30M:
                    if (freq >= 10.1 && freq < 10.15)
                        DB.SaveBandStack("30M", band_30m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B20M:
                    if (freq >= 14.0 && freq < 14.350)
                        DB.SaveBandStack("20M", band_20m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B17M:
                    if (freq >= 18.068 && freq < 18.168)
                        DB.SaveBandStack("17M", band_17m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B15M:
                    if (freq >= 21.0 && freq < 21.45)
                        DB.SaveBandStack("15M", band_15m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B12M:
                    if (freq >= 24.890 && freq < 24.990)
                        DB.SaveBandStack("12M", band_12m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B10M:
                    if (freq >= 28.0 && freq < 29.7)
                        DB.SaveBandStack("10M", band_10m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B6M:
                    if (freq >= 50.0 && freq < 54.0)
                        DB.SaveBandStack("6M", band_6m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B2M:
                    if (freq >= 144.0 && freq < 146.0)
                        DB.SaveBandStack("2M", band_2m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.WWV:
                    if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 || freq == 20.0)
                        DB.SaveBandStack("WWV", band_wwv_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.GEN:
                    DB.SaveBandStack("GEN", band_gen_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF0:
                    if (freq >= XVTRForm.GetBegin(0) && freq <= XVTRForm.GetEnd(0))
                        DB.SaveBandStack("VHF0", band_vhf0_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF1:
                    if (freq >= XVTRForm.GetBegin(1) && freq <= XVTRForm.GetEnd(1))
                        DB.SaveBandStack("VHF1", band_vhf1_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF2:
                    if (freq >= XVTRForm.GetBegin(2) && freq <= XVTRForm.GetEnd(2))
                        DB.SaveBandStack("VHF2", band_vhf2_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF3:
                    if (freq >= XVTRForm.GetBegin(3) && freq <= XVTRForm.GetEnd(3))
                        DB.SaveBandStack("VHF3", band_vhf3_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF4:
                    if (freq >= XVTRForm.GetBegin(4) && freq <= XVTRForm.GetEnd(4))
                        DB.SaveBandStack("VHF4", band_vhf4_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF5:
                    if (freq >= XVTRForm.GetBegin(5) && freq <= XVTRForm.GetEnd(5))
                        DB.SaveBandStack("VHF5", band_vhf5_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF6:
                    if (freq >= XVTRForm.GetBegin(6) && freq <= XVTRForm.GetEnd(6))
                        DB.SaveBandStack("VHF6", band_vhf6_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF7:
                    if (freq >= XVTRForm.GetBegin(7) && freq <= XVTRForm.GetEnd(7))
                        DB.SaveBandStack("VHF7", band_vhf7_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF8:
                    if (freq >= XVTRForm.GetBegin(8) && freq <= XVTRForm.GetEnd(8))
                        DB.SaveBandStack("VHF8", band_vhf8_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF9:
                    if (freq >= XVTRForm.GetBegin(9) && freq <= XVTRForm.GetEnd(9))
                        DB.SaveBandStack("VHF9", band_vhf9_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF10:
                    if (freq >= XVTRForm.GetBegin(10) && freq <= XVTRForm.GetEnd(10))
                        DB.SaveBandStack("VHF10", band_vhf10_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF11:
                    if (freq >= XVTRForm.GetBegin(11) && freq <= XVTRForm.GetEnd(11))
                        DB.SaveBandStack("VHF11", band_vhf11_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF12:
                    if (freq >= XVTRForm.GetBegin(12) && freq <= XVTRForm.GetEnd(12))
                        DB.SaveBandStack("VHF12", band_vhf12_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.VHF13:
                    if (freq >= XVTRForm.GetBegin(13) && freq <= XVTRForm.GetEnd(13))
                        DB.SaveBandStack("VHF13", band_vhf13_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

                case Band.BLMF:                                                                     // ke9ns add down below vhf
                    if (freq >= 0.20 && freq < 1.80)
                        DB.SaveBandStack("LMF", band_LMF_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B120M:
                    if (freq >= 2.30 && freq < 3.0)
                        DB.SaveBandStack("120M", band_120m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B90M:
                    if (freq >= 3.0 && freq < 3.50)
                        DB.SaveBandStack("90M", band_90m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B61M:
                    if (freq >= 4.10 && freq < 5.06)
                        DB.SaveBandStack("61M", band_61m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B49M:
                    if (freq >= 5.06 && freq < 7.00)
                        DB.SaveBandStack("49M", band_49m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B41M:
                    if (freq >= 7.30 && freq < 9.0)
                        DB.SaveBandStack("41M", band_41m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B31M:
                    if (freq >= 9.0 && freq < 9.9)
                        DB.SaveBandStack("31M", band_31m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B25M:
                    if (freq >= 11.0 && freq < 13.57)
                        DB.SaveBandStack("25M", band_25m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B22M:
                    if (freq >= 13.57 && freq < 13.87)
                        DB.SaveBandStack("22M", band_22m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

                case Band.B19M:
                    if (freq >= 15.1 && freq < 17.0)
                        DB.SaveBandStack("19M", band_19m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

                case Band.B16M:
                    if (freq >= 17.0 && freq < 18.0)
                        DB.SaveBandStack("16M", band_16m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;
                case Band.B14M:
                    if (freq >= 18.0 && freq < 21.0)
                        DB.SaveBandStack("14M", band_14m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

                case Band.B13M:
                    if (freq >= 21.00 && freq < 25.0)
                        DB.SaveBandStack("13M", band_13m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

                case Band.B11M:
                    if (freq >= 25.0 && freq < 28.0)
                        DB.SaveBandStack("11M", band_11m_index, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                    break;

            }
        }

        public void SetBand(string mode, string filter, double freq, bool CTUN, int ZoomFactor, double CenterFreq)
        {
            // These are needed for managing QSK when band changes also trigger mode changes.
            RX1_band_change = BandByFreq(freq, tx_xvtr_index, true, current_region, true);
            Band oldBand = RX1Band;
            qsk_band_changing = true; 

            if (filter.Contains("@"))
            {
                filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
            }

            // Set mode, filter, and frequency according to passed parameters
            RX1DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode, true);

            ClickTuneDisplay = false;                               // Set CTUN off to restore center frequency - G3OQD
            chkFWCATU.Checked = ClickTuneDisplay;
            ptbDisplayZoom.Value = ZoomFactor;
            ptbDisplayZoom_Scroll(this, EventArgs.Empty);
            if (CTUN)
            {
                center_frequency = CenterFreq;                      // Restore centre frequency if CTUN enabled - G3OQD
                VFOAFreq = center_frequency;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }

            if (rx1_dsp_mode != DSPMode.DRM &&
                rx1_dsp_mode != DSPMode.SPEC)
            {
                RX1Filter = (Filter)Enum.Parse(typeof(Filter), filter, true);
            }

            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            ClickTuneDisplay = CTUN;
            chkFWCATU.Checked = ClickTuneDisplay;
            VFOAFreq = freq;                                       // Restore actual receive frequency after CTUN status restored - G3OQD

            // Continuation of QSK-related band/mode-change management - see also QSKEnabled()
            qsk_band_changing = false;
            if (RX1_band_change != oldBand) // actual band change, not just rotating the stack
            {                
                if (chkQSK.Checked && !QSKEnabled) // We're changing from QSK off to on due to a mode change
                {
                    QSKEnabled = true; // complete the postponed change started in SetRX1Mode() via QSKEnabled()                  
                }
                else if (!chkQSK.Checked && QSKEnabled) // We're changing from QSK on to off due to a mode change
                {
                    rx1_agcm_by_band[(int)oldBand] = non_qsk_agc;  // was set on the old band where it was on                     
                    non_qsk_agc = rx1_agcm_by_band[(int)RX1_band_change];                     
                    QSKEnabled = false;  // complete the postponed change started in SetRX1Mode() via QSKEnabled() 
                }
                else if (chkQSK.Checked && QSKEnabled) // CW mode to CW mode with QSK on 
                {
                    rx1_agcm_by_band[(int)oldBand] = non_qsk_agc;  // was set on the old band where it was on
                    non_qsk_agc = rx1_agcm_by_band[(int)RX1_band_change];                    
                    RX1AGCMode = AGCMode.CUSTOM;
                    ; // don't need to turn QSK on - it's already on
                }
                else if (!chkQSK.Checked && !QSKEnabled) // Either CW to CW or non-CW to non-CW, with QSK off
                {
                    RX1AGCMode = rx1_agcm_by_band[(int)RX1_band_change];
                }
            }
            else // just rotating the stack without changing bands
            {
                if (chkQSK.Checked && !QSKEnabled) // We're changing from QSK off to on due to a mode change
                {
                    QSKEnabled = true; // complete the postponed change started in SetRX1Mode() via QSKEnabled()                  
                }
                else if (!chkQSK.Checked && QSKEnabled) // We're changing from QSK on to off due to a mode change
                {
                    QSKEnabled = false;  // complete the postponed change started in SetRX1Mode() via QSKEnabled() 
                }
                else if (chkQSK.Checked && QSKEnabled) // CW mode to CW mode with QSK on 
                {
                    ; // don't need to turn QSK on - it's already on
                }
                if (RX1DSPMode != DSPMode.CWL && RX1DSPMode != DSPMode.CWU && !QSKEnabled)
                {
                    RX1AGCMode = non_qsk_agc;
                }
            }

        }

        public int last_MHZ = 0; // ke9ns 
        public DSPMode last_MODE = DSPMode.LAST;

        private void ChangeTuneStepUp()
        {
            tune_step_index = (tune_step_index + 1) % tune_step_list.Count;
            txtWheelTune.Text = tune_step_list[tune_step_index].Name;
        }

        private void ChangeTuneStepDown()
        {
            tune_step_index = (tune_step_index - 1 + tune_step_list.Count) % tune_step_list.Count;
            txtWheelTune.Text = tune_step_list[tune_step_index].Name;
        }

        private void UpdateBandButtonColors()
        {
            /*SetRX1BandButtonColor(rx1_band);
            SetTXBandButtonColor(tx_band);
            SetRX2BandButtonColor(rx2_band);*/
            SetRX1BandButton(rx1_band);
        }

        private void DeselectHF()
        {
            radBand160.Checked = false;
            radBand80.Checked = false;
            radBand60.Checked = false;
            radBand40.Checked = false;
            radBand30.Checked = false;
            radBand20.Checked = false;
            radBand17.Checked = false;
            radBand15.Checked = false;
            radBand12.Checked = false;
            radBand10.Checked = false;
            radBand6.Checked = false;
            radBandWWV.Checked = false;
            radBandGEN.Checked = false;
            radBand2.Checked = false;
        }

        //===================================================
        private void DeselectGEN()  // ke9ns add
        {
            radBandGEN0.Checked = false;
            radBandGEN1.Checked = false;
            radBandGEN2.Checked = false;
            radBandGEN3.Checked = false;
            radBandGEN4.Checked = false;
            radBandGEN5.Checked = false;
            radBandGEN6.Checked = false;
            radBandGEN7.Checked = false;
            radBandGEN8.Checked = false;
            radBandGEN9.Checked = false;
            radBandGEN10.Checked = false;
            radBandGEN11.Checked = false;
            radBandGEN12.Checked = false;
            radBandGEN13.Checked = false;

        }

        private void DeselectVHF()
        {
            radBandVHF0.Checked = false;
            radBandVHF1.Checked = false;
            radBandVHF2.Checked = false;
            radBandVHF3.Checked = false;
            radBandVHF4.Checked = false;
            radBandVHF5.Checked = false;
            radBandVHF6.Checked = false;
            radBandVHF7.Checked = false;
            radBandVHF8.Checked = false;
            radBandVHF9.Checked = false;
            radBandVHF10.Checked = false;
            radBandVHF11.Checked = false;
            radBandVHF12.Checked = false;
            radBandVHF13.Checked = false;
        }

        private void SetRX1BandButton(Band b)
        {
            SpotControl.VFOLOW = 0;   // ke9ns add default values (used in spot.cs for mapping dx spots)
            SpotControl.VFOHIGH = 1;  // ke9ns add default values

            //RX1_band_change = b;

            switch (b)
            {
                case Band.B160M:
                    SpotControl.VFOLOW = 1800000; // ke9ns add
                    SpotControl.VFOHIGH = 2000000;// ke9ns add

                    last_band = "160M"; // ke9ns add
                    radBand160.Checked = true;
                    regBox.Text = band_160m_register.ToString();     // ke9ns add box to show the total # of bankstacks in memory
                    regBox1.Text = (band_160m_index + 1).ToString();  // ke9ns add box to show which bandstack your on
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B80M:
                    last_band = "80M";// ke9ns add
                    SpotControl.VFOLOW = 3500000;
                    SpotControl.VFOHIGH = 4000000;
                    radBand80.Checked = true;
                    regBox.Text = band_80m_register.ToString();
                    regBox1.Text = (band_80m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B60M:
                    last_band = "60M";// ke9ns add
                    SpotControl.VFOLOW = 5000000;
                    SpotControl.VFOHIGH = 6000000;
                    radBand60.Checked = true;
                    regBox.Text = band_60m_register.ToString();
                    regBox1.Text = (band_60m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B40M:
                    last_band = "40M";// ke9ns add
                    SpotControl.VFOLOW = 7000000;
                    SpotControl.VFOHIGH = 7300000;
                    radBand40.Checked = true;
                    regBox.Text = band_40m_register.ToString();
                    regBox1.Text = (band_40m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B30M:
                    last_band = "30M";// ke9ns add
                    SpotControl.VFOLOW = 10100000;
                    SpotControl.VFOHIGH = 10150000;
                    radBand30.Checked = true;
                    regBox.Text = band_30m_register.ToString();
                    regBox1.Text = (band_30m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B20M:
                    last_band = "20M";// ke9ns add
                    SpotControl.VFOLOW = 14000000;
                    SpotControl.VFOHIGH = 14350000;
                    radBand20.Checked = true;
                    regBox.Text = band_20m_register.ToString();
                    regBox1.Text = (band_20m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B17M:
                    last_band = "17M";// ke9ns add
                    SpotControl.VFOLOW = 18000000; // 18.068
                    SpotControl.VFOHIGH = 18200000; // 18.168
                    radBand17.Checked = true;
                    regBox.Text = band_17m_register.ToString();
                    regBox1.Text = (band_17m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B15M:
                    last_band = "15M";// ke9ns add
                    SpotControl.VFOLOW = 21000000; // 
                    SpotControl.VFOHIGH = 21450000; // 
                    radBand15.Checked = true;
                    regBox.Text = band_15m_register.ToString();
                    regBox1.Text = (band_15m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B12M:
                    last_band = "12M";// ke9ns add
                    SpotControl.VFOLOW = 24800000; // 24.89
                    SpotControl.VFOHIGH = 25000000; // 24.99
                    radBand12.Checked = true;
                    regBox.Text = band_12m_register.ToString();
                    regBox1.Text = (band_12m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B10M:
                    last_band = "10M";// ke9ns add
                    SpotControl.VFOLOW = 28000000; // 
                    SpotControl.VFOHIGH = 30000000; // 
                    radBand10.Checked = true;
                    regBox.Text = band_10m_register.ToString();
                    regBox1.Text = (band_10m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B6M:
                    last_band = "6M";// ke9ns add
                    SpotControl.VFOLOW = 50000000; // 
                    SpotControl.VFOHIGH = 54000000; //
                    radBand6.Checked = true;
                    regBox.Text = band_6m_register.ToString();
                    regBox1.Text = (band_6m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B2M:
                    last_band = "2M";// ke9ns add
                    //    SpotControl.VFOLOW = 144000000; // 
                    //    SpotControl.VFOHIGH = 146000000; // 
                    radBand2.Checked = true;
                    regBox.Text = band_2m_register.ToString();
                    regBox1.Text = (band_2m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.WWV:
                    last_band = "WWV";// ke9ns add
                    radBandWWV.Checked = true;
                    regBox.Text = band_wwv_register.ToString();
                    regBox1.Text = (band_wwv_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.GEN:
                    last_band = "GEN";// ke9ns add
                    //   Debug.WriteLine("gen pushed");
                    radBandGEN.Checked = true;
                    DeselectVHF();
                    DeselectHF(); // ke9ns add
                    break;


                case Band.VHF0:
                    last_band = "VHF0";// ke9ns add
                    //    SpotControl.VFOLOW = 144000000; // 
                    //    SpotControl.VFOHIGH = 146000000; // 
                    radBandVHF0.Checked = true;
                    regBox.Text = band_vhf0_register.ToString();
                    regBox1.Text = (band_vhf0_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF1:
                    last_band = "VHF1";// ke9ns add
                    //    SpotControl.VFOLOW = 430000000; // 
                    //    SpotControl.VFOHIGH = 445000000; // 
                    radBandVHF1.Checked = true;
                    regBox.Text = band_vhf1_register.ToString();
                    regBox1.Text = (band_vhf1_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF2:
                    last_band = "VHF2";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //    SpotControl.VFOHIGH = 990000000; //
                    radBandVHF2.Checked = true;
                    regBox.Text = band_vhf2_register.ToString();
                    regBox1.Text = (band_vhf2_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF3:
                    last_band = "VHF3";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //   SpotControl.VFOHIGH = 990000000; //
                    radBandVHF3.Checked = true;
                    regBox.Text = band_vhf3_register.ToString();
                    regBox1.Text = (band_vhf3_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF4:
                    last_band = "VHF4";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //   SpotControl.VFOHIGH = 990000000; //
                    radBandVHF4.Checked = true;
                    regBox.Text = band_vhf4_register.ToString();
                    regBox1.Text = (band_vhf4_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF5:
                    last_band = "VHF5";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //  SpotControl.VFOHIGH = 990000000; //
                    radBandVHF5.Checked = true;
                    regBox.Text = band_vhf5_register.ToString();
                    regBox1.Text = (band_vhf5_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF6:
                    last_band = "VHF6";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //   SpotControl.VFOHIGH = 990000000; //
                    radBandVHF6.Checked = true;
                    regBox.Text = band_vhf6_register.ToString();
                    regBox1.Text = (band_vhf6_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF7:
                    last_band = "VHF7";// ke9ns add
                    //  SpotControl.VFOLOW = 445000000; // 
                    //  SpotControl.VFOHIGH = 990000000; //
                    radBandVHF7.Checked = true;
                    regBox.Text = band_vhf7_register.ToString();
                    regBox1.Text = (band_vhf7_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF8:
                    last_band = "VHF8";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //  SpotControl.VFOHIGH = 990000000; //
                    radBandVHF8.Checked = true;
                    regBox.Text = band_vhf8_register.ToString();
                    regBox1.Text = (band_vhf8_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF9:
                    last_band = "VHF9";// ke9ns add 
                    //  SpotControl.VFOLOW = 445000000; // 
                    //  SpotControl.VFOHIGH = 990000000; //
                    radBandVHF9.Checked = true;
                    regBox.Text = band_vhf9_register.ToString();
                    regBox1.Text = (band_vhf9_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF10:
                    last_band = "VHF10";// ke9ns add
                    //  SpotControl.VFOLOW = 445000000; // 
                    //  SpotControl.VFOHIGH = 990000000; //
                    radBandVHF10.Checked = true;
                    regBox.Text = band_vhf10_register.ToString();
                    regBox1.Text = (band_vhf10_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF11:
                    last_band = "VHF11";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //   SpotControl.VFOHIGH = 990000000; //
                    radBandVHF11.Checked = true;
                    regBox.Text = band_vhf11_register.ToString();
                    regBox1.Text = (band_vhf11_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF12:
                    last_band = "VHF12";// ke9ns add
                    //   SpotControl.VFOLOW = 445000000; // 
                    //   SpotControl.VFOHIGH = 990000000; //
                    radBandVHF12.Checked = true;
                    regBox.Text = band_vhf12_register.ToString();
                    regBox1.Text = (band_vhf12_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF13:
                    last_band = "VHF13";// ke9ns add 
                    // SpotControl.VFOLOW = 445000000; // 
                    // SpotControl.VFOHIGH = 990000000; //
                    radBandVHF13.Checked = true;
                    regBox.Text = band_vhf13_register.ToString();
                    regBox1.Text = (band_vhf13_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;

                case Band.BLMF:
                    last_band = "LMF";// ke9ns add
                    radBandGEN0.Checked = true;
                    regBox.Text = band_LMF_register.ToString();
                    regBox1.Text = (band_LMF_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B120M:
                    last_band = "120M";// ke9ns add
                    radBandGEN1.Checked = true;
                    regBox.Text = band_120m_register.ToString();
                    regBox1.Text = (band_120m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B90M:
                    last_band = "90M";// ke9ns add
                    radBandGEN2.Checked = true;
                    regBox.Text = band_90m_register.ToString();
                    regBox1.Text = (band_90m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B61M:
                    last_band = "61M";// ke9ns add
                    radBandGEN3.Checked = true;
                    regBox.Text = band_61m_register.ToString();
                    regBox1.Text = (band_61m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B49M:
                    //   Debug.WriteLine("================49==============");
                    last_band = "49M";// ke9ns add
                    radBandGEN4.Checked = true;
                    regBox.Text = band_49m_register.ToString();
                    regBox1.Text = (band_49m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B41M:
                    last_band = "41M";// ke9ns add
                    //  Debug.WriteLine("================41==============");

                    radBandGEN5.Checked = true;
                    regBox.Text = band_41m_register.ToString();
                    regBox1.Text = (band_41m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B31M:
                    last_band = "31M";// ke9ns add
                    radBandGEN6.Checked = true;
                    regBox.Text = band_31m_register.ToString();
                    regBox1.Text = (band_31m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B25M:
                    last_band = "25M";// ke9ns add
                    radBandGEN7.Checked = true;
                    regBox.Text = band_25m_register.ToString();
                    regBox1.Text = (band_25m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B22M:
                    last_band = "22M";// ke9ns add
                    radBandGEN8.Checked = true;
                    regBox.Text = band_22m_register.ToString();
                    regBox1.Text = (band_22m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B19M:
                    last_band = "19M";// ke9ns add
                    radBandGEN9.Checked = true;
                    regBox.Text = band_19m_register.ToString();
                    regBox1.Text = (band_19m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B16M:
                    last_band = "16M";// ke9ns add
                    radBandGEN10.Checked = true;
                    regBox.Text = band_16m_register.ToString();
                    regBox1.Text = (band_16m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B14M:
                    last_band = "14M";// ke9ns add
                    radBandGEN11.Checked = true;
                    regBox.Text = band_14m_register.ToString();
                    regBox1.Text = (band_14m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B13M:
                    last_band = "13M";// ke9ns add
                    radBandGEN12.Checked = true;
                    regBox.Text = band_13m_register.ToString();
                    regBox1.Text = (band_13m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B11M:
                    last_band = "11M";// ke9ns add
                    radBandGEN13.Checked = true;
                    regBox.Text = band_11m_register.ToString();
                    regBox1.Text = (band_11m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;

            }
            StackForm.bandstackupdate(); // ke9ns add update band stack screen 
        }

        private void SetRX1BandButtonColor(Band b)
        {
            // Sets band button color based on passed band.

            /*Button btn = null;
            switch(b)
            {
                case Band.GEN:
                    btn = btnBandGEN;
                    break;
                case Band.B160M:
                    btn = btnBand160;
                    break;
                case Band.B80M:
                    btn = btnBand80;
                    break;
                case Band.B60M:
                    btn = btnBand60;
                    break;
                case Band.B40M:
                    btn = btnBand40;
                    break;
                case Band.B30M:
                    btn = btnBand30;
                    break;
                case Band.B20M:
                    btn = btnBand20;
                    break;
                case Band.B17M:
                    btn = btnBand17;
                    break;
                case Band.B15M:
                    btn = btnBand15;
                    break;
                case Band.B12M:
                    btn = btnBand12;
                    break;
                case Band.B10M:
                    btn = btnBand10;
                    break;
                case Band.B6M:
                    btn = btnBand6;
                    break;
                case Band.B2M:
                    btn = btnBand2;
                    break;
                case Band.WWV:
                    btn = btnBandWWV;
                    break;
                case Band.VHF0:
                    btn = btnBandVHF0;
                    break;
                case Band.VHF1:
                    btn = btnBandVHF1;
                    break;
                case Band.VHF2:
                    btn = btnBandVHF2;
                    break;
                case Band.VHF3:
                    btn = btnBandVHF3;
                    break;
                case Band.VHF4:
                    btn = btnBandVHF4;
                    break;
                case Band.VHF5:
                    btn = btnBandVHF5;
                    break;
                case Band.VHF6:
                    btn = btnBandVHF6;
                    break;
                case Band.VHF7:
                    btn = btnBandVHF7;
                    break;
                case Band.VHF8:
                    btn = btnBandVHF8;
                    break;
                case Band.VHF9:
                    btn = btnBandVHF9;
                    break;
                case Band.VHF10:
                    btn = btnBandVHF10;
                    break;
                case Band.VHF11:
                    btn = btnBandVHF11;
                    break;
                case Band.VHF12:
                    btn = btnBandVHF12;
                    break;
                case Band.VHF13:
                    btn = btnBandVHF13;
                    break;
            }

            foreach(Button b2 in panelBandHF.Controls)
            {
                if(b2 == btn)
                {
                    b2.BackColor = rx1_band_color;
                }
                else
                {
                    if(b2.BackColor == rx1_band_color)
                        b2.BackColor = SystemColors.Control;
                }
            }

            foreach(Button b2 in panelBandVHF.Controls)
            {
                if(b2 == btn)
                {
                    b2.BackColor = rx1_band_color;
                }
                else
                {
                    if(b2.BackColor == rx1_band_color)
                        b2.BackColor = SystemColors.Control;
                }
            }*/
        }

        private void SetRX2BandButtonColor(Band b)
        {
            /*// Sets band button color based on passed band.
            if(!rx2_enabled) b = Band.FIRST;
            Button btn = null;
            switch(b)
            {
                case Band.GEN:
                    btn = btnBandGEN;
                    break;
                case Band.B160M:
                    btn = btnBand160;
                    break;
                case Band.B80M:
                    btn = btnBand80;
                    break;
                case Band.B60M:
                    btn = btnBand60;
                    break;
                case Band.B40M:
                    btn = btnBand40;
                    break;
                case Band.B30M:
                    btn = btnBand30;
                    break;
                case Band.B20M:
                    btn = btnBand20;
                    break;
                case Band.B17M:
                    btn = btnBand17;
                    break;
                case Band.B15M:
                    btn = btnBand15;
                    break;
                case Band.B12M:
                    btn = btnBand12;
                    break;
                case Band.B10M:
                    btn = btnBand10;
                    break;
                case Band.B6M:
                    btn = btnBand6;
                    break;
                case Band.B2M:
                    btn = btnBand2;
                    break;
                case Band.WWV:
                    btn = btnBandWWV;
                    break;
                case Band.VHF0:
                    btn = btnBandVHF0;
                    break;
                case Band.VHF1:
                    btn = btnBandVHF1;
                    break;
                case Band.VHF2:
                    btn = btnBandVHF2;
                    break;
                case Band.VHF3:
                    btn = btnBandVHF3;
                    break;
                case Band.VHF4:
                    btn = btnBandVHF4;
                    break;
                case Band.VHF5:
                    btn = btnBandVHF5;
                    break;
                case Band.VHF6:
                    btn = btnBandVHF6;
                    break;
                case Band.VHF7:
                    btn = btnBandVHF7;
                    break;
                case Band.VHF8:
                    btn = btnBandVHF8;
                    break;
                case Band.VHF9:
                    btn = btnBandVHF9;
                    break;
                case Band.VHF10:
                    btn = btnBandVHF10;
                    break;
                case Band.VHF11:
                    btn = btnBandVHF11;
                    break;
                case Band.VHF12:
                    btn = btnBandVHF12;
                    break;
                case Band.VHF13:
                    btn = btnBandVHF13;
                    break;
            }

            foreach(Button b2 in panelBandHF.Controls)
            {
                if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
                {
                    b2.BackColor = rx2_band_color;
                }
                else
                {
                    if(b2.BackColor == rx2_band_color)
                        b2.BackColor = SystemColors.Control;
                }
            }

            foreach(Button b2 in panelBandVHF.Controls)
            {
                if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
                {
                    b2.BackColor = rx2_band_color;
                }
                else
                {
                    if(b2.BackColor == rx2_band_color)
                        b2.BackColor = SystemColors.Control;
                }
            }
            /*if(b < Band.VHF0)
            {
//				if(!grpBandHF.Visible)
//				{
//					grpBandHF.Visible = true;
//					grpBandVHF.Visible = false;
//				}

                foreach(Button b2 in grpBandVHF.Controls)
                    b2.BackColor = SystemColors.Control;

                foreach(Button b2 in grpBandHF.Controls)
                {
                    if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
                    {
                        b2.BackColor = rx2_band_color;
                    }
                    else
                    {
                        if(b2.BackColor == rx2_band_color)
                            b2.BackColor = SystemColors.Control;
                    }

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
                }
            }
            else
            {
//				if(!grpBandVHF.Visible)
//				{
//					grpBandVHF.Visible = true;
//					grpBandHF.Visible = false;
//				}

                foreach(Button b2 in grpBandHF.Controls)
                    b2.BackColor = SystemColors.Control;

                foreach(Button b2 in grpBandVHF.Controls)
                {
                    if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
                    {
                        b2.BackColor = rx2_band_color;
                    }
                    else
                    {
                        if(b2.BackColor == rx2_band_color)
                            b2.BackColor = SystemColors.Control;
                    }

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
                }
            }*/
        }

        private void SetTXBandButtonColor(Band b)
        {
            /*// Sets band button color based on passed band.

            Button btn = null;
            switch(b)
            {
                case Band.GEN:
                    btn = btnBandGEN;
                    break;
                case Band.B160M:
                    btn = btnBand160;
                    break;
                case Band.B80M:
                    btn = btnBand80;
                    break;
                case Band.B60M:
                    btn = btnBand60;
                    break;
                case Band.B40M:
                    btn = btnBand40;
                    break;
                case Band.B30M:
                    btn = btnBand30;
                    break;
                case Band.B20M:
                    btn = btnBand20;
                    break;
                case Band.B17M:
                    btn = btnBand17;
                    break;
                case Band.B15M:
                    btn = btnBand15;
                    break;
                case Band.B12M:
                    btn = btnBand12;
                    break;
                case Band.B10M:
                    btn = btnBand10;
                    break;
                case Band.B6M:
                    btn = btnBand6;
                    break;
                case Band.B2M:
                    btn = btnBand2;
                    break;
                case Band.WWV:
                    btn = btnBandWWV;
                    break;
                case Band.VHF0:
                    btn = btnBandVHF0;
                    break;
                case Band.VHF1:
                    btn = btnBandVHF1;
                    break;
                case Band.VHF2:
                    btn = btnBandVHF2;
                    break;
                case Band.VHF3:
                    btn = btnBandVHF3;
                    break;
                case Band.VHF4:
                    btn = btnBandVHF4;
                    break;
                case Band.VHF5:
                    btn = btnBandVHF5;
                    break;
                case Band.VHF6:
                    btn = btnBandVHF6;
                    break;
                case Band.VHF7:
                    btn = btnBandVHF7;
                    break;
                case Band.VHF8:
                    btn = btnBandVHF8;
                    break;
                case Band.VHF9:
                    btn = btnBandVHF9;
                    break;
                case Band.VHF10:
                    btn = btnBandVHF10;
                    break;
                case Band.VHF11:
                    btn = btnBandVHF11;
                    break;
                case Band.VHF12:
                    btn = btnBandVHF12;
                    break;
                case Band.VHF13:
                    btn = btnBandVHF13;
                    break;
            }

            foreach(Button b2 in panelBandHF.Controls)
            {
                if(b2 == btn && b2.BackColor != rx1_band_color)
                {
                    b2.BackColor = tx_band_color;
                }
                else
                {
                    if(b2.BackColor == tx_band_color)
                        b2.BackColor = SystemColors.Control;
                }
            }
            /*if(b < Band.VHF0)
            {
//				if(!grpBandHF.Visible)
//				{
//					grpBandHF.Visible = true;
//					grpBandVHF.Visible = false;
//				}

                foreach(Button b2 in grpBandVHF.Controls)
                    b2.BackColor = SystemColors.Control;

                foreach(Button b2 in grpBandHF.Controls)
                {
                    if(b2 == btn && b2.BackColor != rx1_band_color)
                    {
                        b2.BackColor = tx_band_color;
                    }
                    else
                    {
                        if(b2.BackColor == tx_band_color)
                            b2.BackColor = SystemColors.Control;
                    }

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
                }
            }
            else
            {
//				if(!grpBandVHF.Visible)
//				{
//					grpBandVHF.Visible = true;
//					grpBandHF.Visible = false;
//				}

                foreach(Button b2 in grpBandHF.Controls)
                    b2.BackColor = SystemColors.Control;

                foreach(Button b2 in grpBandVHF.Controls)
                {
                    if(b2 == btn && b2.BackColor != rx1_band_color)
                    {
                        b2.BackColor = tx_band_color;
                    }
                    else
                    {
                        if(b2.BackColor == tx_band_color)
                            b2.BackColor = SystemColors.Control;
                    }

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
                }
            }*/
        }

        private Band BandByFreq(double freq, int xvtr_index, bool tx, FRSRegion region, bool vfoa)
        {
            if (xvtr_index >= 0)
            {
                if (vfoa)
                {
                    panelBandGEN.Visible = false;
                    panelBandHF.Visible = false;
                    panelBandVHF.Visible = true; // ke9ns add keep VHF panel open when VHF button selected
                }
                return (Band)(Band.VHF0 + xvtr_index);
            }
            /*
                        if (extended)
                        {
                            if (freq >= 0.0 && freq <= 2.75)
                                return Band.B160M;
                            else if (freq > 2.75 && freq < 5.0)
                                return Band.B80M;
                            else if (freq >= 5.0 && freq < 7.0)
                                return Band.B60M;
                            else if (freq >= 7.0 && freq <= 8.7)
                                return Band.B40M;
                            else if (freq >= 8.7 && freq <= 12.075)
                                return Band.B30M;
                            else if (freq >= 12.075 && freq <= 16.209)
                                return Band.B20M;
                            else if (freq >= 16.209 && freq <= 19.584)
                                return Band.B17M;
                            else if (freq >= 19.584 && freq <= 23.17)
                                return Band.B15M;
                            else if (freq >= 23.17 && freq <= 26.495)
                                return Band.B12M;
                            else if (freq >= 26.495 && freq <= 29.7)
                                return Band.B10M;
                            else if (freq >= 29.7 && freq <= 50.0)
                                return Band.B10M;
                            else if (freq >= 50.0 && freq <= 54.0)
                                return Band.B6M;
                            else if (freq >= 54.0 && freq <= 61.44)
                                return Band.B6M;
                            else if (freq >= 144.0 && freq <= 148.0)
                                return Band.B2M;
                            else if (freq == 2.5 || freq == 5.0 ||
                                freq == 10.0 || freq == 15.0 ||
                                freq == 20.0)
                                return Band.WWV;
                            else
                                return Band.GEN;
                        }
                        */

            if (extended)
            {
                // ke9ns add
                if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.BLMF;
                    //  return Band.B160M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                       freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.WWV;
                }


                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B120M;
                    //  return Band.B160M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B90M;
                    // return Band.B80M;
                }

                else if (freq >= 4.00 && freq < 5.1)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B61M;
                    //  return Band.B80M;
                }

                else if (freq >= 5.5 && freq < 7.00)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B49M;
                    //  return Band.B60M;
                }

                else if (freq >= 7.30 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B41M;
                    //  return Band.B40M;
                }

                else if (freq >= 9.0 && freq < 10.1)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B31M;
                    // return Band.B30M;
                }

                else if (freq >= 10.16 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B25M;
                    //  return Band.B20M;
                }

                else if (freq >= 13.57 && freq < 14.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B22M;
                    //  return Band.B20M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B19M;
                    // return Band.B17M;
                }

                else if (freq >= 17.0 && freq < 18.068)
                {

                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B16M;
                    //return Band.B17M;
                }

                else if (freq >= 18.168 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B14M;
                    //  return Band.B15M;
                }
                else if (freq >= 21.450 && freq < 24.89)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B13M;
                    //  return Band.B12M;
                }

                else if (freq >= 24.99 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGEN.Visible = true;
                    return Band.B11M;
                    // return Band.B10M;
                }

                // original code below 
                else if (freq >= 0.0 && freq <= 2.75)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B160M;
                }
                else if (freq > 2.75 && freq < 5.3305)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B80M;
                }
                else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 8.7)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B40M;
                }
                else if (freq >= 8.7 && freq <= 12.075)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B30M;
                }
                else if (freq >= 12.075 && freq <= 16.209)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B20M;
                }
                else if (freq >= 16.209 && freq <= 19.584)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B17M;
                }
                else if (freq >= 19.584 && freq <= 23.17)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B15M;
                }
                else if (freq >= 23.17 && freq <= 26.495)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B12M;
                }
                else if (freq >= 26.495 && freq <= 29.7)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0) // ke9ns test was 144.0 and 148.0
                {
                    panelBandHF.Visible = true;
                    panelBandGEN.Visible = false;
                    return Band.B2M;
                }
                else
                    return Band.GEN;
            }

            switch (region)
            {
                case FRSRegion.US:
                    /*
                    if ((freq >= 0.1357 && freq <= 0.1378) ||
                        (freq >= 0.472 && freq <= 0.479) ||
                        freq >= 1.8 && freq <= 2.0)
                        return Band.B160M;
                    else if (freq >= 3.5 && freq <= 4.0)
                        return Band.B80M;
                    else if (freq >= 5.1 && freq <= 5.5)
                        return Band.B60M;
                    else if (freq >= 7.0 && freq <= 7.3)
                        return Band.B40M;
                    else if (freq >= 10.1 && freq <= 10.15)
                        return Band.B30M;
                    else if (freq >= 14.0 && freq <= 14.35)
                        return Band.B20M;
                    else if (freq >= 18.068 && freq <= 18.168)
                        return Band.B17M;
                    else if (freq >= 21.0 && freq <= 21.450)
                        return Band.B15M;
                    else if (freq >= 24.89 && freq <= 24.99)
                        return Band.B12M;
                    else if (freq >= 28.0 && freq <= 29.7)
                        return Band.B10M;
                    else if (freq >= 50.0 && freq <= 54.0)
                        return Band.B6M;
                    else if (freq >= 144.0 && freq <= 148.0)
                        return Band.B2M;
                    else if (freq == 2.5 || freq == 5.0 ||
                        freq == 10.0 || freq == 15.0 ||
                        freq == 20.0)
                        return Band.WWV;
                    else
                        return Band.GEN;
                    */
                    if (freq >= 1.8 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 4.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.1 && freq <= 5.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.3)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 54.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0) // ke9ns test was 144.0 148.0
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 1.8 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 4.1)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 11.6)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 13.87 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;


                case FRSRegion.India:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.9)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 54.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.9)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 54.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Spain:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 54.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.1 && freq <= 5.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Europe:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.08 && freq <= 51.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.1 && freq <= 5.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.03 && freq <= 51.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Israel:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 50.2)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 146.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 50.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 146.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.UK:
                    //if ((freq >= 0.472 && freq <= 0.479) ||
                    //    (freq >= 1.8 && freq <= 2.0))
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.25 && freq <= 5.41)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if ((freq >= 0.472 && freq <= 0.479) ||
                        (freq >= 1.8 && freq <= 2.0))
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.25 && freq <= 5.41)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.03 && freq <= 51.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Italy_Plus:
                    //if (freq >= 1.83 && freq <= 1.85)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 6.975)
                    //    return Band.B60M;
                    //else if (freq >= 6.975 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.08 && freq <= 51.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.83 && freq <= 1.85)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 6.975)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 6.975 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.08 && freq <= 51.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Japan:
                    //if ((freq >= 0.1357 && freq <= 0.1378) ||
                    //    (freq >= 1.81 && freq <= 1.9125))
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.805)
                    //    return Band.B80M;
                    //else if (freq >= 5.1 && freq <= 5.5)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 54.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 || freq == 8.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if ((freq >= 0.1357 && freq <= 0.1378) ||
                         (freq >= 1.81 && freq <= 1.9125))
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.805)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 4.629995 && freq <= 4.630005)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Australia:
                    //if ((freq >= 0.1357 && freq <= 0.1378) ||
                    //    (freq >= 0.472 && freq <= 0.479) ||
                    //    freq >= 1.8 && freq <= 1.875)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.3)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 54.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if ((freq >= 0.1357 && freq <= 0.1378) ||
                        (freq >= 0.472 && freq <= 0.479) ||
                         freq >= 1.8 && freq <= 1.875)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.3)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 54.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Norway:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.25 && freq <= 5.45)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.8 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.25 && freq <= 5.45)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Denmark:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.25 && freq <= 5.45)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.25 && freq <= 5.45)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Latvia:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 51.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Slovakia:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Bulgaria:
                    //if (freq >= 1.81 && freq <= 1.85)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.05 && freq <= 50.2)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Greece:
                    //if (freq >= 1.81 && freq <= 1.85)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 1.85)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Hungary:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.1)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B10M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.1)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Netherlands:
                    //if (freq >= 1.81 && freq <= 1.88)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 1.88)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.France:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 24.99)
                    //    return Band.B12M;
                    //else if (freq >= 28.0 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 52)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Russia:
                    //if (freq >= 1.81 && freq <= 2.0)
                    //    return Band.B160M;
                    //else if (freq >= 3.5 && freq <= 3.8)
                    //    return Band.B80M;
                    //else if (freq >= 5.0 && freq < 7.0)
                    //    return Band.B60M;
                    //else if (freq >= 7.0 && freq <= 7.2)
                    //    return Band.B40M;
                    //else if (freq >= 10.1 && freq <= 10.15)
                    //    return Band.B30M;
                    //else if (freq >= 14.0 && freq <= 14.35)
                    //    return Band.B20M;
                    //else if (freq >= 18.068 && freq <= 18.168)
                    //    return Band.B17M;
                    //else if (freq >= 21.0 && freq <= 21.45)
                    //    return Band.B15M;
                    //else if (freq >= 24.89 && freq <= 25.14)
                    //    return Band.B12M;
                    //else if (freq >= 26.97 && freq <= 29.7)
                    //    return Band.B10M;
                    //else if (freq >= 50.0 && freq <= 54.0)
                    //    return Band.B6M;
                    //else if (freq >= 144.0 && freq <= 148.0)
                    //    return Band.B2M;
                    //else if (freq == 2.5 || freq == 5.0 ||
                    //    freq == 10.0 || freq == 15.0 ||
                    //    freq == 20.0)
                    //    return Band.WWV;
                    //else
                    //    return Band.GEN;

                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.0 && freq <= 7.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 25.14)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

                case FRSRegion.Sweden:
                    //        if (freq >= 1.81 && freq <= 2.0)
                    //            return Band.B160M;
                    //        else if (freq >= 3.5 && freq <= 3.8)
                    //            return Band.B80M;
                    //        else if (freq >= 5.31 && freq < 5.93)
                    //            return Band.B60M;
                    //        else if (freq >= 7.0 && freq <= 7.2)
                    //            return Band.B40M;
                    //        else if (freq >= 10.1 && freq <= 10.15)
                    //            return Band.B30M;
                    //        else if (freq >= 14.0 && freq <= 14.35)
                    //            return Band.B20M;
                    //        else if (freq >= 18.068 && freq <= 18.168)
                    //            return Band.B17M;
                    //        else if (freq >= 21.0 && freq <= 21.45)
                    //            return Band.B15M;
                    //        else if (freq >= 24.89 && freq <= 24.99)
                    //            return Band.B12M;
                    //        else if (freq >= 28 && freq <= 29.7)
                    //            return Band.B10M;
                    //        else if (freq >= 50.0 && freq <= 52.0)
                    //            return Band.B6M;
                    //        else if (freq >= 144.0 && freq <= 148.0)
                    //            return Band.B2M;
                    //        else if (freq == 2.5 || freq == 5.0 ||
                    //            freq == 10.0 || freq == 15.0 ||
                    //            freq == 20.0)
                    //            return Band.WWV;
                    //        else
                    //            return Band.GEN;
                    if (freq >= 1.81 && freq <= 2.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B160M;
                    }
                    else if (freq >= 3.5 && freq <= 3.8)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B80M;
                    }
                    else if (freq >= 5.31 && freq <= 5.93)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B60M;
                    }
                    else if (freq >= 7.0 && freq <= 7.2)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B40M;
                    }
                    else if (freq >= 10.1 && freq <= 10.15)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B30M;
                    }
                    else if (freq >= 14.0 && freq <= 14.35)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B20M;
                    }
                    else if (freq >= 18.068 && freq <= 18.168)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B17M;
                    }
                    else if (freq >= 21.0 && freq <= 21.450)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B15M;
                    }
                    else if (freq >= 24.89 && freq <= 24.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B12M;
                    }
                    else if (freq >= 28.0 && freq <= 29.7)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B10M;
                    }
                    else if (freq >= 50.0 && freq <= 52.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B6M;
                    }
                    else if (freq >= 144.0 && freq <= 148.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.B2M;
                    }
                    else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                            freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = true;
                            panelBandGEN.Visible = false;
                        }
                        return Band.WWV;
                    }

                    // ke9ns add
                    else if (freq >= 0.20 && freq < 1.80)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.BLMF;
                    }

                    else if (freq >= 2.3 && freq < 3.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B120M;
                    }

                    else if (freq >= 3.0 && freq < 3.5)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B90M;
                    }

                    else if (freq >= 4.10 && freq < 5.06)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B61M;
                    }

                    else if (freq >= 5.06 && freq < 7.20)
                    {
                        //   Debug.WriteLine("bandbyfreq 49");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B49M;
                    }

                    else if (freq >= 7.20 && freq < 9.0)
                    {
                        //  Debug.WriteLine("bandbyfreq 41");
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B41M;
                    }

                    else if (freq >= 9.0 && freq < 9.99)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B31M;
                    }

                    else if (freq >= 11.6 && freq < 13.57)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B25M;
                    }

                    else if (freq >= 13.57 && freq < 13.87)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B22M;
                    }

                    else if (freq >= 15.1 && freq < 17.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B19M;
                    }

                    else if (freq >= 17.0 && freq < 18.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B16M;
                    }

                    else if (freq >= 18.0 && freq < 21.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B14M;
                    }
                    else if (freq >= 21.00 && freq < 25.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B13M;
                    }

                    else if (freq >= 25.0 && freq < 28.0)
                    {
                        if (vfoa)
                        {
                            panelBandHF.Visible = false;
                            panelBandGEN.Visible = true;
                        }
                        return Band.B11M;
                    }

                    else
                        return Band.GEN;

            }


            // if nothing matched to this point, just put it in the GEN band
            return Band.GEN;
        }

        // Used to detect when a band change is in progress
        // by comparing with RX1Band at any point
        private Band RX1_band_change = Band.B160M;  

        private void SetRX1Band(Band b)
        {
            if (disable_split_on_bandchange)
            {
                if (RX1Band != b && !tuning)
                {
                    if (chkVFOSplit.Checked)
                        chkVFOSplit.Checked = false;
                }
            }

            Band old_band = rx1_band;
            RX1Band = b;

            if (old_band != b)
            {
                UpdateBandButtonColors();
                UpdateWaterfallLevelValues();
                UpdateDisplayGridLevelValues();
                UpdateDiversityValues();
            }

            if (rx1_xvtr_index >= 0)
            {
                panelBandHF.Visible = false;
                panelBandGEN.Visible = false;
                panelBandVHF.Visible = true;
            }
            else
            {
                panelBandGEN.Visible = true;
                //panelBandHF.Visible = true;
                panelBandVHF.Visible = false;
            }
            // UpdateWaterfallLevelValues();
            // UpdateDisplayGridLevelValues();

        }

        private void SetRX2Band(Band b)
        {
            Band old_band = rx2_band;
            RX2Band = b;
            if (old_band != b)
            {
                UpdateBandButtonColors();
                UpdateWaterfallLevelValues();
                UpdateDisplayGridLevelValues();
            }
            //  UpdateWaterfallLevelValues();
            //  UpdateDisplayGridLevelValues();

        }

        private void SetTXBand(Band b)
        {
            if (disable_split_on_bandchange)
            {
                if (TXBand != b && !tuning)
                {
                    if (chkVFOSplit.Checked)
                        chkVFOSplit.Checked = false;
                }
            }

            Band old_band = tx_band;
            TXBand = b;
            if (old_band != b)
                UpdateBandButtonColors();

            //if (!(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
            //{
            //    if (atu_present && xvtr_present)
            //    {
            //        if (b == Band.B2M)
            //            comboTuneMode.Enabled = false;
            //        else
            //            comboTuneMode.Enabled = true;
            //    }

            //    if (xvtr_present)
            //    {
            //        if (atu_present &&
            //            comboTuneMode.SelectedIndex > 0 &&
            //            (ATUTuneMode)comboTuneMode.SelectedIndex != ATUTuneMode.BYPASS &&
            //            (tuned_band != b) &&
            //            tuned_band != Band.FIRST)
            //        {
            //            Hdw.PA_ATUTune(ATUTuneMode.BYPASS);
            //            tuned_band = Band.FIRST;
            //            chkTUN.BackColor = SystemColors.Control;
            //        }

            //        if (b == Band.B2M)
            //        {
            //            if (comboPreamp.Items.Contains("Off"))
            //                comboPreamp.Items.Remove("Off");
            //            if (comboPreamp.Items.Contains("Med"))
            //                comboPreamp.Items.Remove("Med");
            //            if (comboPreamp.SelectedIndex < 0)
            //                comboPreamp.Text = "High";
            //        }
            //        else
            //        {
            //            if (!comboPreamp.Items.Contains("Off"))
            //                comboPreamp.Items.Insert(0, "Off");
            //            if (!comboPreamp.Items.Contains("Med"))
            //                comboPreamp.Items.Insert(2, "Med");
            //        }
            //    }
            // }
        }

        private float GainByBand(Band b)
        {
            float retval = 0;
            if (current_hpsdr_model == HPSDRModel.ANAN10 || current_hpsdr_model == HPSDRModel.ANAN10E)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANAN10PAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANAN10PAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANAN10PAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANAN10PAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANAN10PAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANAN10PAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANAN10PAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANAN10PAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANAN10PAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANAN10PAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANAN10PAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANAN10PAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANAN10PAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANAN10PAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANAN10PAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANAN10PAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANAN10PAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANAN10PAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANAN10PAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANAN10PAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANAN10PAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANAN10PAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANAN10PAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANAN10PAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANAN10PAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ANAN100B)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANAN100BPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANAN100BPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANAN100BPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANAN100BPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANAN100BPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANAN100BPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANAN100BPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANAN100BPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANAN100BPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANAN100BPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANAN100BPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANAN100BPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANAN100BPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANAN100BPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANAN100BPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANAN100BPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANAN100BPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANAN100BPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANAN100BPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANAN100BPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANAN100BPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANAN100BPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANAN100BPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANAN100BPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANAN100BPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ANAN100)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANAN100PAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANAN100PAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANAN100PAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANAN100PAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANAN100PAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANAN100PAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANAN100PAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANAN100PAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANAN100PAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANAN100PAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANAN100PAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANAN100PAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANAN100PAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANAN100PAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANAN100PAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANAN100PAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANAN100PAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANAN100PAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANAN100PAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANAN100PAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANAN100PAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANAN100PAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANAN100PAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANAN100PAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANAN100PAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (!SetupForm.chkBypassANANPASettings.Checked && current_hpsdr_model == HPSDRModel.ANAN100D)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANANPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANANPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANANPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANANPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANANPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANANPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANANPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANANPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANANPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANANPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANANPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANANPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANANPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANANPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANANPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANANPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANANPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANANPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANANPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANANPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANANPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANANPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANANPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANANPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANANPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ANAN200D)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.OrionPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.OrionPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.OrionPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.OrionPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.OrionPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.OrionPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.OrionPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.OrionPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.OrionPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.OrionPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.OrionPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.OrionPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.OrionPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.OrionPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.OrionPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.OrionPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.OrionPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.OrionPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.OrionPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.OrionPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.OrionPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.OrionPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.OrionPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.OrionPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.OrionPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ORIONMKII)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ORIONMKIIPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ORIONMKIIPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ORIONMKIIPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ORIONMKIIPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ORIONMKIIPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ORIONMKIIPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ORIONMKIIPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ORIONMKIIPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ORIONMKIIPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ORIONMKIIPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ORIONMKIIPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ORIONMKIIPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ORIONMKIIPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ORIONMKIIPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ORIONMKIIPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ORIONMKIIPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ORIONMKIIPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ORIONMKIIPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ORIONMKIIPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ORIONMKIIPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ORIONMKIIPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ORIONMKIIPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ORIONMKIIPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ORIONMKIIPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ORIONMKIIPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ANAN7000D)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANAN7000DPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANAN7000DPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANAN7000DPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANAN7000DPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANAN7000DPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANAN7000DPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANAN7000DPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANAN7000DPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANAN7000DPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANAN7000DPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANAN7000DPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANAN7000DPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANAN7000DPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANAN7000DPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANAN7000DPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANAN7000DPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANAN7000DPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANAN7000DPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANAN7000DPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANAN7000DPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANAN7000DPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANAN7000DPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANAN7000DPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANAN7000DPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANAN7000DPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.ANAN8000D)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.ANAN8000DPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.ANAN8000DPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.ANAN8000DPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.ANAN8000DPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.ANAN8000DPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.ANAN8000DPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.ANAN8000DPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.ANAN8000DPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.ANAN8000DPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.ANAN8000DPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.ANAN8000DPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.ANAN8000DPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.ANAN8000DPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.ANAN8000DPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.ANAN8000DPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.ANAN8000DPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.ANAN8000DPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.ANAN8000DPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.ANAN8000DPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.ANAN8000DPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.ANAN8000DPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.ANAN8000DPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.ANAN8000DPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.ANAN8000DPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.ANAN8000DPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.HERMES)
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.HermesPAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.HermesPAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.HermesPAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.HermesPAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.HermesPAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.HermesPAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.HermesPAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.HermesPAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.HermesPAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.HermesPAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.HermesPAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.HermesPAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.HermesPAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.HermesPAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.HermesPAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.HermesPAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.HermesPAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.HermesPAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.HermesPAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.HermesPAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.HermesPAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.HermesPAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.HermesPAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.HermesPAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.HermesPAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }

            if (current_hpsdr_model == HPSDRModel.HPSDR || (SetupForm.chkBypassANANPASettings.Checked && current_hpsdr_model == HPSDRModel.ANAN100D))
            {
                switch (b)
                {
                    case Band.B160M:
                        retval = SetupForm.PAGain160;
                        break;
                    case Band.B80M:
                        retval = SetupForm.PAGain80;
                        break;
                    case Band.B60M:
                        retval = SetupForm.PAGain60;
                        break;
                    case Band.B40M:
                        retval = SetupForm.PAGain40;
                        break;
                    case Band.B30M:
                        retval = SetupForm.PAGain30;
                        break;
                    case Band.B20M:
                        retval = SetupForm.PAGain20;
                        break;
                    case Band.B17M:
                        retval = SetupForm.PAGain17;
                        break;
                    case Band.B15M:
                        retval = SetupForm.PAGain15;
                        break;
                    case Band.B12M:
                        retval = SetupForm.PAGain12;
                        break;
                    case Band.B10M:
                        retval = SetupForm.PAGain10;
                        break;
                    case Band.B6M:
                        retval = SetupForm.PAGain6;
                        break;
                    case Band.VHF0:
                        retval = SetupForm.PAGainVHF0;
                        break;
                    case Band.VHF1:
                        retval = SetupForm.PAGainVHF1;
                        break;
                    case Band.VHF2:
                        retval = SetupForm.PAGainVHF2;
                        break;
                    case Band.VHF3:
                        retval = SetupForm.PAGainVHF3;
                        break;
                    case Band.VHF4:
                        retval = SetupForm.PAGainVHF4;
                        break;
                    case Band.VHF5:
                        retval = SetupForm.PAGainVHF5;
                        break;
                    case Band.VHF6:
                        retval = SetupForm.PAGainVHF6;
                        break;
                    case Band.VHF7:
                        retval = SetupForm.PAGainVHF7;
                        break;
                    case Band.VHF8:
                        retval = SetupForm.PAGainVHF8;
                        break;
                    case Band.VHF9:
                        retval = SetupForm.PAGainVHF9;
                        break;
                    case Band.VHF10:
                        retval = SetupForm.PAGainVHF10;
                        break;
                    case Band.VHF11:
                        retval = SetupForm.PAGainVHF11;
                        break;
                    case Band.VHF12:
                        retval = SetupForm.PAGainVHF12;
                        break;
                    case Band.VHF13:
                        retval = SetupForm.PAGainVHF13;
                        break;
                    default:
                        retval = 1000;
                        break;
                }
            }
            return retval;
        }

        public void CheckSelectedButtonColor()
        {
            // used when changing the background color of selected buttons
            foreach (Control c in this.Controls)
            {
                if (c.GetType() == typeof(GroupBoxTS))
                {
                    foreach (Control c2 in ((GroupBoxTS)c).Controls)
                    {
                        if (c2.GetType() == typeof(RadioButtonTS))
                        {
                            RadioButtonTS r = (RadioButtonTS)c2;
                            if (r.Checked && r.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(CheckBoxTS))
                        {
                            CheckBoxTS chk = (CheckBoxTS)c2;
                            if (chk.Checked && chk.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(NumericUpDownTS))
                        {
                            NumericUpDownTS ud = (NumericUpDownTS)c2;
                            if (ud.BackColor != SystemColors.Window)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                        else if (c2.GetType() == typeof(ButtonTS))
                        {
                            ButtonTS b = (ButtonTS)c2;
                            if (b.BackColor != SystemColors.Control)
                            {
                                c2.BackColor = button_selected_color;
                            }
                        }
                    }
                }
                else if (c.GetType() == typeof(RadioButtonTS))
                {
                    RadioButtonTS r = (RadioButtonTS)c;
                    if (r.Checked && r.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(CheckBoxTS))
                {
                    CheckBoxTS chk = (CheckBoxTS)c;
                    if (chk.Checked && chk.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(NumericUpDownTS))
                {
                    NumericUpDownTS ud = (NumericUpDownTS)c;
                    if (ud.BackColor != SystemColors.Window)
                        c.BackColor = button_selected_color;
                }
                else if (c.GetType() == typeof(ButtonTS))
                {
                    ButtonTS b = (ButtonTS)c;
                    if (b.BackColor != SystemColors.Control)
                        c.BackColor = button_selected_color;
                }
            }
        }

        private double PABandOffset(Band b)
        {
            double num = 0;
            switch (b)
            {
                case Band.B160M:
                    // num = SetupForm.PAADC160;
                    break;
                case Band.B80M:
                    // num = SetupForm.PAADC80;
                    break;
                case Band.B60M:
                    // num = SetupForm.PAADC60;
                    break;
                case Band.B40M:
                    // num = SetupForm.PAADC40;
                    break;
                case Band.B30M:
                    // num = SetupForm.PAADC30;
                    break;
                case Band.B20M:
                    //  num = SetupForm.PAADC20;
                    break;
                case Band.B17M:
                    // num = SetupForm.PAADC17;
                    break;
                case Band.B15M:
                    // num = SetupForm.PAADC15;
                    break;
                case Band.B12M:
                    // num = SetupForm.PAADC12;
                    break;
                case Band.B10M:
                    //  num = SetupForm.PAADC10;
                    break;
            }

            if (num == 0) return 0;
            //return 100000 / Math.Pow(num, 2);
            return (double)108 / num;
        }

        private double SWR(int adc_fwd, int adc_rev)
        {
            if (adc_fwd == 0 && adc_rev == 0)
                return 1.0;
            else if (adc_rev > adc_fwd)
                return 50.0;

            double Ef = ScaledVoltage(adc_fwd);
            double Er = ScaledVoltage(adc_rev);

            double swr = (Ef + Er) / (Ef - Er);

            return swr;
        }

#if false
        public double ALEXSWR(double g_fwd, double g_rev)
        {
            double rho = Math.Sqrt(g_rev / g_fwd);
            double swr = (1.0 + rho) / (1.0 - rho); ;

            if (!alexpresent || g_fwd < 0.5)
            {
                JanusAudio.SetSWRProtect(1.0f);
                HighSWR = false;
                return 1.0; // swr;
            }

            if (!swrprotection)
            {
                // double rho = Math.Sqrt(g_rev / g_fwd);
                // swr = (1.0 + rho) / (1.0 - rho);
                JanusAudio.SetSWRProtect(1.0f);
                if (swr > 2.2) HighSWR = true;
                else HighSWR = false;
                return swr;
            }

            if (chkTUN.Checked && disable_swr_on_tune && (alexpresent || apollopresent))
            {
                if (g_fwd <= 10.0)
                {
                    //  double rho = Math.Sqrt(g_rev / g_fwd);
                    //  swr = (1.0 + rho) / (1.0 - rho);
                    JanusAudio.SetSWRProtect(1.0f);
                    HighSWR = false;
                    return swr;
                }
            }

            //  if (g_rev > g_fwd)
            //  {
            //    HighSWR = true;
            //   swr = 5.0;
            //   if (current_display_engine == DisplayEngine.GDI_PLUS)
            //      picDisplay.Invalidate();

            //  }
            //  else
            // {
            //     double rho = Math.Sqrt(g_rev / g_fwd);
            //     swr = (1.0 + rho) / (1.0 - rho);
            //  }

            if (swr > 2.2)
            {
                JanusAudio.SetSWRProtect(0.5f);
                HighSWR = true;
                if (swr > 3) JanusAudio.SetSWRProtect(0.25f);
                if (current_display_engine == DisplayEngine.GDI_PLUS)
                    picDisplay.Invalidate();
            }
            else
            {
                JanusAudio.SetSWRProtect(1.0f);
                HighSWR = false;
                if (current_display_engine == DisplayEngine.GDI_PLUS)
                    picDisplay.Invalidate();
            }
            return swr;
        }
#endif

        //public double FWCSWR(int adc_fwd, int adc_rev)
        //{
        //    double f = FWCPAPower(adc_fwd);
        //    double r = FWCPAPower(adc_rev) * swr_table[(int)tx_band];
        //    //Debug.WriteLine("FWCSWR: fwd:"+adc_fwd+" rev:"+adc_rev+" f:"+f.ToString("f2")+" r:"+r.ToString("f2"));

        //    if ((adc_fwd == 0 && adc_rev == 0) || (f < 1.0 && r < 1.0)) return 1.0;
        //    if (adc_rev > adc_fwd) return 50.0;

        //    double sqrt_r_over_f = Math.Sqrt(r / f);
        //    return (1.0 + sqrt_r_over_f) / (1.0 - sqrt_r_over_f);
        //}

        private double ScaledVoltage(int adc)
        {
            double v_det = adc * 0.062963;			// scale factor in V/bit including pot ratio
            double v_out = v_det * 10.39853;		// scale factor in V/V for bridge output to detector voltage
            return v_out * PABandOffset(tx_band);
            //double v_det = adc * 0.0304;
            //			double v_out = 0;
            //			if(v_det >= 1.6)
            //				v_out = (-0.241259304*v_det+12.07915098)*v_det*PABandOffset(CurrentBand);
            //			else if(v_det > 0.35)
            //				v_out = (1/Math.Pow(v_det, 2)+11.3025111)*v_det*PABandOffset(CurrentBand);
            //return v_out;
        }

        private double ADCtodBm(int adc_data)
        {
            if (adc_data == 0)
                return 0;

            double mult = 100000 / Math.Pow(225 / PABandOffset(tx_band), 2);
            return 10 * Math.Log10(mult * Math.Pow(adc_data, 2));
        }

        private double PAPower(int adc)
        {
            double v_out = ScaledVoltage(adc);
            double pow = Math.Pow(v_out, 2) / 50;
            pow = Math.Max(pow, 0.0);
            return pow;
        }

        private double WattsTodBm(double watts)
        {
            return 10 * Math.Log10(watts / 0.001);
        }

        private double dBmToWatts(double dBm)
        {
            return Math.Pow(10, dBm / 10) * 0.001;
        }

        /*public float CalibratedPAPower()
        {
            float watts = alex_fwd; // computeAlexFwdPower();
           //******************************************************************
           // Begin with both numbers in each line equal to the comment value.
           // For each power level from 10W to maximum, adjust power such that
           // the P*SDR meter just achieves the value in the comment. 
           // Record the actual power output as indicated by an external 
           // calibrated meter.  Use the recorded values as the FIRST numbers
           // in the respective lines of the table.
           //******************************************************************
            float[] table = new float[15] {   1.0f,                       //   0W 
                                             SetupForm.PA10W  /  10.0f,   //  10W 
                                             SetupForm.PA20W  /  20.0f,   //  20W 
                                             SetupForm.PA30W  /  30.0f,   //  30W 
                                             SetupForm.PA40W  /  40.0f,   //  40W 
                                             SetupForm.PA50W  /  50.0f,   //  50W 
                                             SetupForm.PA60W  /  60.0f,   //  60W 
                                             SetupForm.PA70W  /  70.0f,   //  70W
                                             SetupForm.PA80W  /  80.0f,   //  80W 
                                             SetupForm.PA90W  /  90.0f,   //  90W
                                             SetupForm.PA100W / 100.0f,   // 100W
                                             SetupForm.PA110W / 110.0f,   // 110W
                                             SetupForm.PA120W / 120.0f,   // 120W 
                                             SetupForm.PA130W / 130.0f,   // 130W
                                             SetupForm.PA140W / 140.0f }; // 140W
            int idx = (int)(0.1f * watts);
            float frac = 0.1f * watts - idx;
            watts *= (1.0f - frac) * table[idx] + frac * table[idx + 1];
            return watts;
        }*/

        public float CalibratedPAPower()
        {
            float watts = alex_fwd;
            //********************************************************************
            // Begin with all spinners set equal to their labelled value.
            // For each spinner, from minimum to maximum, adjust the output power
            // such that your CALIBRATED EXTERNAL METER is equal to the spinner
            // value.  Record the values appearing in the Thetis 'Fwd Pwr' meter.
            // After completing measurements for all spinners, enter your
            // recorded values into the respective spinners.  DO NOT USE
            // POWER EXCEEDING THE RATING OF YOUR RADIO!
            //********************************************************************
            const int entries = 11;                                 // number of table entries
            float interval = 10.0f;                                 // interval (watts) between labels
            float[] PAsets = new float[entries] { 0.0f,
                                                  SetupForm.PA10W,
                                                  SetupForm.PA20W,
                                                  SetupForm.PA30W,
                                                  SetupForm.PA40W,
                                                  SetupForm.PA50W,
                                                  SetupForm.PA60W,
                                                  SetupForm.PA70W,
                                                  SetupForm.PA80W,
                                                  SetupForm.PA90W,
                                                  SetupForm.PA100W };

            switch (CurrentHPSDRModel)
            {
                //case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100D:
                    interval = 10.0f;
                    float[] ANAN100DCal = new float[entries] {   0.0f,      // predetermined calibration factors
                                                                11.0f,
                                                                24.0f,
                                                                35.0f,
                                                                46.0f,
                                                                57.0f,
                                                                67.0f,
                                                                81.0f,
                                                                90.0f,
                                                               103.0f,
                                                               114.0f };
                    watts = PowerKernel(watts, interval, entries, ANAN100DCal);
                    break;
                case HPSDRModel.ANAN7000D:
                    interval = 10.0f;
                    break;
                case HPSDRModel.ANAN8000D:
                    interval = 20.0f;
                    break;
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN10E:
                    interval = 1.0f;
                    break;
                default:
                    interval = 10.0f;
                    break;
            }
            return PowerKernel(watts, interval, entries, PAsets);
        }

        private float PowerKernel(float watts, float interval, int entries, float[] table)
        {
            int idx = 0;
            if (watts > table[entries - 1])
                idx = entries - 2;
            else
            {
                while (watts > table[idx]) idx++;
                if (idx > 0) idx--;
            }
            float frac = (watts - table[idx]) / (table[idx + 1] - table[idx]);
            return interval * ((1.0f - frac) * (float)idx + frac * (float)(idx + 1));
        }

        //public double FWCPAPower(int adc) // adc in, watts out
        //{
        //    if (adc < 2) return 0.0;
        //    double[] table = { 1.0, 2.0, 5.0, 10.0, 20.0, 90.0 };

        //    double watts = 0.0;
        //    double volts = (double)adc / 4096 * 2.5;
        //    double v2 = Math.Pow(volts, 2);

        //    int high_index = 0;
        //    for (int i = 0; i < 6; i++)
        //    {
        //        if (volts < pa_bridge_table[(int)tx_band][i])
        //        {
        //            high_index = i;
        //            break;
        //        }
        //        if (i == 5) high_index = 6;
        //    }

        //    if (high_index != 6)
        //    {
        //        double v_low = 0.0, v_high = 0.0;
        //        double p_low = 0.0, p_high = 0.0;

        //        if (high_index != 0) v_low = pa_bridge_table[(int)tx_band][high_index - 1];
        //        v_high = pa_bridge_table[(int)tx_band][high_index];
        //        if (high_index != 0) p_low = table[high_index - 1];
        //        p_high = table[high_index];
        //        Debug.Assert(v_low <= volts && v_high >= volts);

        //        double v_low_2 = Math.Pow(v_low, 2.0);
        //        double v_high_2 = Math.Pow(v_high, 2.0);

        //        watts = p_low + (p_high - p_low) * ((v2 - v_low_2) / (v_high_2 - v_low_2));
        //    }
        //    else
        //    {
        //        double v_low_2 = Math.Pow(pa_bridge_table[(int)tx_band][4], 2.0);
        //        double v_high_2 = Math.Pow(pa_bridge_table[(int)tx_band][5], 2.0);

        //        if (v_low_2 != v_high_2)
        //        {
        //            double a = 70.0 / (v_high_2 - v_low_2);
        //            double b = 90.0 / (a * v_high_2);

        //            watts = a * v2 + b;
        //        }
        //    }

        //    return watts;
        //}

        private static bool CheckForOpenProcesses()
        {
            // find all open Thetis processes
            Process[] p = Process.GetProcessesByName("Thetis");
            if (p.Length > 1)
            {
                DialogResult dr = MessageBox.Show("There are other Thetis instances running.\n" +
                    "Are you sure you want to continue?",
                    "Continue?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);
                if (dr == DialogResult.No)
                {
                    return false;
                }
            }
            return true;
        }

        public int VersionTextToInt(string version)	// takes a version string like "1.0.6" 
        {											// and converts it to an int like 010006.
            string[] nums = version.Split('.');
            if (nums.Length < 3 || nums.Length > 4) return -1;

            int num1 = Int32.Parse(nums[0]);
            int num2 = Int32.Parse(nums[1]);
            int num3 = Int32.Parse(nums[2]);
            int num4 = 0;
            if (nums.Length == 4) num4 = Int32.Parse(nums[3]);

            return num1 * 1000000 + num2 * 10000 + num3 * 100 + num4;
        }

        public bool CheckValidTXFreq(FRSRegion r, double f, DSPMode mode)
        {
            if (extended || tx_xvtr_index > -1)
                return true;

            bool retval = false;

            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                    retval = (CheckValidTXFreq_Private(r, f + Display.TXFilterLow * 1e-6) &&
                        CheckValidTXFreq_Private(r, f + Display.TXFilterHigh * 1e-6));
                    // retval = (CheckValidTXFreq_Private(r, Math.Round(f + Display.TXFilterLow * 0.0000010, 6, MidpointRounding.AwayFromZero)) &&
                    //   CheckValidTXFreq_Private(r, Math.Round(f + Display.TXFilterHigh * 0.0000010, 6, MidpointRounding.AwayFromZero))); //w5wc
                    break;
                case DSPMode.CWL:
                case DSPMode.CWU:
                    retval = CheckValidTXFreq_Private(r, f);
                    break;
                case DSPMode.DRM:
                    retval = (CheckValidTXFreq_Private(r, f - 0.012 + Display.TXFilterLow * 1e-6) &&
                        CheckValidTXFreq_Private(r, f - 0.012 + Display.TXFilterHigh * 1e-6));
                    break;
            }

            return retval;
        }

        private bool CheckValidTXFreq_Private(FRSRegion r, double f)
        {
            if (extended || tx_xvtr_index > -1)
                return true;

            bool ret_val = false;
            f = Math.Round(f, 6);

            switch (r)
            {
                case FRSRegion.US:
                    if (f >= .1357 && f <= .1378) ret_val = true;
                    else if (f >= 0.472 && f <= 0.479) ret_val = true;
                    else if (f >= 1.8 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 4.0) ret_val = true;
                    else if (f >= 5.3305 && f <= 5.3334) ret_val = true; // allow for default 3100Hz TX Filter High Cut
                    else if (f >= 5.3465 && f <= 5.3494) ret_val = true;
                    else if (f >= 5.357 && f <= 5.3599) ret_val = true;
                    else if (f >= 5.3715 && f <= 5.3744) ret_val = true;
                    else if (f >= 5.4035 && f <= 5.4064) ret_val = true;
                    else if (f >= 7.0 && f <= 7.3) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else if (f >= 144.0 && f <= 146.0)
                    {
                        if (xvtr_present)
                            ret_val = true;
                        else
                            ret_val = false;
                    }
                    else ret_val = false;
                    break;
                case FRSRegion.Spain:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.India:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.9) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Europe:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.08 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Israel:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 50.2) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.UK:
                    if (f >= 0.472 && f <= 0.479) ret_val = true;
                    else if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.2585 && f <= 5.264) ret_val = true;
                    else if (f >= 5.276 && f <= 5.284) ret_val = true;
                    else if (f >= 5.2885 && f <= 5.292) ret_val = true;
                    else if (f >= 5.298 && f <= 5.307) ret_val = true;
                    else if (f >= 5.313 && f <= 5.323) ret_val = true;
                    else if (f >= 5.333 && f <= 5.338) ret_val = true;
                    else if (f >= 5.354 && f <= 5.358) ret_val = true;
                    else if (f >= 5.362 && f <= 5.3745) ret_val = true;
                    else if (f >= 5.378 && f <= 5.382) ret_val = true;
                    else if (f >= 5.395 && f <= 5.4015) ret_val = true;
                    else if (f >= 5.4035 && f <= 5.4065) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Italy_Plus:
                    if (f >= 1.83 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 6.975 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.08 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Japan:
                    if (f >= .1357 && f <= .1378) ret_val = true;
                    else if (f >= 0.472 && f <= 0.479) ret_val = true;
                    else if (f >= 1.81 && f <= 1.825) ret_val = true;
                    else if (f >= 1.9075 && f <= 1.9125) ret_val = true;
                    else if (f >= 3.5 && f <= 3.575) ret_val = true;
                    else if (f >= 3.599 && f <= 3.612) ret_val = true;
                    else if (f >= 3.680 && f <= 3.687) ret_val = true;
                    else if (f >= 3.702 && f <= 3.716) ret_val = true;
                    else if (f >= 3.745 && f <= 3.770) ret_val = true;
                    else if (f >= 3.791 && f <= 3.805) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Australia:
                    if (f >= .1357 && f <= .1378) ret_val = true;
                    else if (f >= 0.472 && f <= 0.479) ret_val = true;
                    else if (f >= 1.8 && f <= 1.875) ret_val = true;
                    else if (f >= 3.5 && f <= 3.7) ret_val = true;
                    else if (f >= 3.776 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.3) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Norway:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.25 && f <= 5.45) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Denmark: // 6
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.25 && f <= 5.45) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Latvia: // 7
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Slovakia: // 8
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Bulgaria: // 9
                    if (f >= 1.81 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.05 && f <= 50.2) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Greece: // 10
                    if (f >= 1.81 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Hungary: // 11
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.1) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Netherlands: // 12
                    if (f >= 1.81 && f <= 1.88) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.35 && f <= 5.45) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.France:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.08 && f <= 51.2) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Russia: // 14
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 25.14) ret_val = true;
                    else if (f >= 26.97 && f <= 27.85) ret_val = true;
                    else if (f >= 28 && f <= 29.7) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Sweden:
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.31 && f <= 5.313) ret_val = true;
                    else if (f >= 5.32 && f <= 5.323) ret_val = true;
                    else if (f >= 5.38 && f <= 5.383) ret_val = true;
                    else if (f >= 5.39 && f <= 5.393) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                default:
                    ret_val = false;
                    break;
            }

            return ret_val;
        }

        public void SetAlexHPF(double freq)
        {
            if (current_hpsdr_hardware == HPSDRHW.OrionMKII) SetBPF1(freq);
            else
            {
                if (alexpresent && !initializing)
                {
                    if (mox && disable_hpf_on_tx)
                    {
                        NetworkIO.SetAlexHPFBits(0x20);
                        SetupForm.radDHPFTXled.Checked = true;
                        return;
                    }

                    if (alex_hpf_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.radBPHPFled.Checked = true;
                        return;
                    }

                    if ((decimal)freq >= SetupForm.udAlex1_5HPFStart.Value && // 1.5 MHz HPF
                         (decimal)freq <= SetupForm.udAlex1_5HPFEnd.Value)
                    {
                        if (alex1_5bphpf_bypass)
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x10);
                            SetupForm.rad1_5HPFled.Checked = true;
                        }
                    }

                    else if ((decimal)freq >= SetupForm.udAlex6_5HPFStart.Value && // 6.5 MHz HPF
                             (decimal)freq <= SetupForm.udAlex6_5HPFEnd.Value)
                    {
                        if (alex6_5bphpf_bypass)
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x08);
                            SetupForm.rad6_5HPFled.Checked = true;
                        }
                    }

                    else if ((decimal)freq >= SetupForm.udAlex9_5HPFStart.Value && // 9.5 MHz HPF
                             (decimal)freq <= SetupForm.udAlex9_5HPFEnd.Value)
                    {
                        if (alex9_5bphpf_bypass)
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x04);
                            SetupForm.rad9_5HPFled.Checked = true;
                        }
                    }

                    else if ((decimal)freq >= SetupForm.udAlex13HPFStart.Value && // 13 MHz HPF
                             (decimal)freq <= SetupForm.udAlex13HPFEnd.Value)
                    {
                        if (alex13bphpf_bypass)
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x01);
                            SetupForm.rad13HPFled.Checked = true;
                        }
                    }

                    else if ((decimal)freq >= SetupForm.udAlex20HPFStart.Value && // 20 MHz HPF
                             (decimal)freq <= SetupForm.udAlex20HPFEnd.Value)
                    {
                        if (alex20bphpf_bypass)
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x02);
                            SetupForm.rad20HPFled.Checked = true;
                        }
                    }

                    else if ((decimal)freq >= SetupForm.udAlex6BPFStart.Value && // 6m BPF/LNA
                             (decimal)freq <= SetupForm.udAlex6BPFEnd.Value)
                    {
                        if (alex6bphpf_bypass || disable_6m_lna_on_rx || (mox && disable_6m_lna_on_tx))
                        {
                            NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                            SetupForm.radBPHPFled.Checked = true;
                        }
                        else
                        {
                            NetworkIO.SetAlexHPFBits(0x40);
                            SetupForm.rad6BPFled.Checked = true;
                        }
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.radBPHPFled.Checked = true;
                    }
                }
            }
        }

        public void SetBPF1(double freq)
        {
            if (alexpresent && !initializing)
            {
                if (mox && (disable_hpf_on_tx || PureSignalEnabled))
                {
                    NetworkIO.SetAlexHPFBits(0x20);
                    SetupForm.BPF1BPTXled = true;
                    return;
                }

                if (alex_hpf_bypass)
                {
                    NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                    SetupForm.BPBPF1led = true;
                    return;
                }

                if (freq >= SetupForm.BPF1_1_5Start && // 1.5 MHz HPF
                     freq <= SetupForm.BPF1_1_5End)
                {
                    if (bpf1_1_5bp_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x10);
                        SetupForm.BPF1_1_5led = true;
                    }
                }

                else if (freq >= SetupForm.BPF1_6_5Start && // 6.5 MHz HPF
                         freq <= SetupForm.BPF1_6_5End)
                {
                    if (bpf1_6_5bp_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x08);
                        SetupForm.BPF1_6_5led = true;
                    }
                }

                else if (freq >= SetupForm.BPF1_9_5Start && // 9.5 MHz HPF
                         freq <= SetupForm.BPF1_9_5End)
                {
                    if (bpf1_9_5bp_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x04);
                        SetupForm.BPF1_9_5led = true;
                    }
                }

                else if (freq >= SetupForm.BPF1_13Start && // 13 MHz HPF
                         freq <= SetupForm.BPF1_13End)
                {
                    if (bpf1_13bp_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x01);
                        SetupForm.BPF1_13led = true;
                    }
                }

                else if (freq >= SetupForm.BPF1_20Start && // 20 MHz HPF
                         freq <= SetupForm.BPF1_20End)
                {
                    if (bpf1_20bp_bypass)
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x02);
                        SetupForm.BPF1_20led = true;
                    }
                }

                else if (freq >= SetupForm.BPF1_6Start && // 6m BPF/LNA
                         freq <= SetupForm.BPF1_6End)
                {
                    if (bpf1_6bp_bypass || disable_6m_lna_on_rx || (mox && disable_6m_lna_on_tx))
                    {
                        NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                        SetupForm.BPBPF1led = true;
                    }
                    else
                    {
                        NetworkIO.SetAlexHPFBits(0x40);
                        SetupForm.BPF1_6led = true;
                    }
                }
                else
                {
                    NetworkIO.SetAlexHPFBits(0x20); // Bypass HPF
                    SetupForm.BPBPF1led = true;
                }
            }
        }

        public void SetAlex2HPF(double freq)
        {
            if (alexpresent && !initializing)
            {
                // JanusAudio.SetAlexManEnable(0x01);

                if (alex2_hpf_bypass)
                {
                    NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                    SetupForm.radAlex2BPHPFled.Checked = true;
                    return;
                }

                if ((decimal)freq >= SetupForm.udAlex21_5HPFStart.Value && // 1.5 MHz HPF
                     (decimal)freq <= SetupForm.udAlex21_5HPFEnd.Value)
                {
                    if (alex21_5bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x10);
                        SetupForm.radAlex21_5HPFled.Checked = true;
                    }
                }

                else if ((decimal)freq >= SetupForm.udAlex26_5HPFStart.Value && // 6.5 MHz HPF
                         (decimal)freq <= SetupForm.udAlex26_5HPFEnd.Value)
                {
                    if (alex26_5bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x08);
                        SetupForm.radAlex26_5HPFled.Checked = true;
                    }
                }

                else if ((decimal)freq >= SetupForm.udAlex29_5HPFStart.Value && // 9.5 MHz HPF
                         (decimal)freq <= SetupForm.udAlex29_5HPFEnd.Value)
                {
                    if (alex29_5bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x04);
                        SetupForm.radAlex29_5HPFled.Checked = true;
                    }
                }

                else if ((decimal)freq >= SetupForm.udAlex213HPFStart.Value && // 13 MHz HPF
                         (decimal)freq <= SetupForm.udAlex213HPFEnd.Value)
                {
                    if (alex213bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x01);
                        SetupForm.radAlex213HPFled.Checked = true;
                    }
                }

                else if ((decimal)freq >= SetupForm.udAlex220HPFStart.Value && // 20 MHz HPF
                         (decimal)freq <= SetupForm.udAlex220HPFEnd.Value)
                {
                    if (alex220bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x02);
                        SetupForm.radAlex220HPFled.Checked = true;
                    }
                }

                else if ((decimal)freq >= SetupForm.udAlex26BPFStart.Value && // 6m BPF/LNA
                         (decimal)freq <= SetupForm.udAlex26BPFEnd.Value)
                {
                    if (alex26bphpf_bypass)
                    {
                        NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                        SetupForm.radAlex2BPHPFled.Checked = true;
                    }
                    else
                    {
                        NetworkIO.SetAlex2HPFBits(0x40);
                        SetupForm.radAlex26BPFled.Checked = true;
                    }
                }
                else
                {
                    NetworkIO.SetAlex2HPFBits(0x20); // Bypass HPF
                    SetupForm.radAlex2BPHPFled.Checked = true;
                }
            }
        }

        public void SetAlexLPF(double freq)
        {
            if (!mox && lpf_bypass)
            {
                NetworkIO.SetAlexLPFBits(0x10); // 6m LPF
                SetupForm.rad6LPFled.Checked = true;
                return;
            }

            if (alexpresent && !initializing)
            {
                if ((decimal)freq >= SetupForm.udAlex20mLPFStart.Value && // 30/20m LPF
                          (decimal)freq <= SetupForm.udAlex20mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x01);
                    SetupForm.rad20LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex40mLPFStart.Value && // 60/40m LPF
                        (decimal)freq <= SetupForm.udAlex40mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x02);
                    SetupForm.rad40LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex80mLPFStart.Value && // 80m LPF
                         (decimal)freq <= SetupForm.udAlex80mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x04);
                    SetupForm.rad80LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex160mLPFStart.Value && // 160m LPF
                     (decimal)freq <= SetupForm.udAlex160mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x08);
                    SetupForm.rad160LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex6mLPFStart.Value && // 6m LPF
                        (decimal)freq <= SetupForm.udAlex6mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x10);
                    SetupForm.rad6LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex10mLPFStart.Value && // 12/10m LPF
                         (decimal)freq <= SetupForm.udAlex10mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x20);
                    SetupForm.rad10LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex15mLPFStart.Value && // 17/15 LPF
                          (decimal)freq <= SetupForm.udAlex15mLPFEnd.Value)
                {
                    NetworkIO.SetAlexLPFBits(0x40);
                    SetupForm.rad15LPFled.Checked = true;
                }

                else
                {
                    NetworkIO.SetAlexLPFBits(0x10); // 6m LPF
                    SetupForm.rad6LPFled.Checked = true;
                }
            }
        }

        public void SetAlex2LPF(double freq)
        {
            if (alexpresent && !initializing)
            {
                if ((decimal)freq >= SetupForm.udAlex220mLPFStart.Value && // 30/20m LPF
                          (decimal)freq <= SetupForm.udAlex220mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x01);
                    SetupForm.radAlex220LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex240mLPFStart.Value && // 60/40m LPF
                        (decimal)freq <= SetupForm.udAlex240mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x02);
                    SetupForm.radAlex240LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex280mLPFStart.Value && // 80m LPF
                         (decimal)freq <= SetupForm.udAlex280mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x04);
                    SetupForm.radAlex280LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex2160mLPFStart.Value && // 160m LPF
                     (decimal)freq <= SetupForm.udAlex2160mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x08);
                    SetupForm.radAlex2160LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex26mLPFStart.Value && // 6m LPF
                        (decimal)freq <= SetupForm.udAlex26mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x10);
                    SetupForm.radAlex26LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex210mLPFStart.Value && // 12/10m LPF
                         (decimal)freq <= SetupForm.udAlex210mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x20);
                    SetupForm.radAlex210LPFled.Checked = true;
                }

                else if ((decimal)freq >= SetupForm.udAlex215mLPFStart.Value && // 17/15 LPF
                          (decimal)freq <= SetupForm.udAlex215mLPFEnd.Value)
                {
                    NetworkIO.SetAlex2LPFBits(0x40);
                    SetupForm.radAlex215LPFled.Checked = true;
                }

                else
                {
                    NetworkIO.SetAlex2LPFBits(0x10); // 6m LPF
                    SetupForm.radAlex26LPFled.Checked = true;
                }
            }
        }

        public void SelectRX1VarFilter()
        {
            if (rx1_filter == Filter.VAR1) return;
            if (rx1_filter == Filter.VAR2) return;

            // save current filter bounds, reset to var, set filter bounds 
            int high = (int)udFilterHigh.Value;
            int low = (int)udFilterLow.Value;
            radFilterVar1.Checked = true;
            //SetFilter(Filter.VAR1); 
            UpdateRX1Filters(low, high);
        }

        public void SelectRX2VarFilter()
        {
            if (rx2_filter == Filter.VAR1) return;
            if (rx2_filter == Filter.VAR2) return;

            // save current filter bounds, reset to var, set filter bounds 
            int high = (int)udRX2FilterHigh.Value;
            int low = (int)udRX2FilterLow.Value;
            radRX2FilterVar1.Checked = true;
            //SetFilter(Filter.VAR1); 
            UpdateRX2Filters(low, high);
        }

        public void UpdateRXADCCtrl()
        {
            if (current_hpsdr_hardware != HPSDRHW.Angelia &&
                current_hpsdr_hardware != HPSDRHW.Orion &&
                current_hpsdr_hardware != HPSDRHW.OrionMKII)
            {
                if (psform.PSEnabled && mox)
                {
                    // set assigned ADC for Rx0 to ADC0 and Rx1 to DAC feedback 1 for Hermes boards
                    NetworkIO.SetADC_cntrl1(4);
                    NetworkIO.SetADC_cntrl2(0);
                }
                else
                {
                    NetworkIO.SetADC_cntrl1(0);
                    NetworkIO.SetADC_cntrl2(0);
                }
            }
            else
            {
                if (psform.PSEnabled && mox)
                {
                    int num_adc = 2;        // REQUIRES SOME CLEANUP!!!
                    NetworkIO.SetADC_cntrl1((rx_adc_ctrl1 & 0xf3) | (num_adc << 2));
                    NetworkIO.SetADC_cntrl2(rx_adc_ctrl2 & 0x3f);
                }
                else
                {
                    NetworkIO.SetADC_cntrl1(rx_adc_ctrl1 & 0xff);
                    NetworkIO.SetADC_cntrl2(rx_adc_ctrl2 & 0x3f);
                }
            }
        }

        // Added 06/24/05 BT for CAT commands
        public void CATMemoryQS()
        {
            btnMemoryQuickSave_Click(this.btnMemoryQuickSave, EventArgs.Empty);
        }

        // Added 06/25/05 BT for CAT commands
        public void CATMemoryQR()
        {
            btnMemoryQuickRestore_Click(this.btnMemoryQuickRestore, EventArgs.Empty);
        }

        // BT 06/30/05 Added for CAT commands
        public int CATBandGroup
        {
            get
            {
                if (panelBandHF.Visible)
                    return 0;
                else
                    return 1;
            }
            set
            {
                if (value == 0)
                    btnBandHF_Click(btnBandHF, EventArgs.Empty);
                else if (value == 1)
                    btnBandVHF_Click(btnBandVHF, EventArgs.Empty);
            }
        }

        //BT 06/17/05 added for CAT commands
        public void SetCATBand(Band pBand)
        {
            Band b = pBand;
            switch (b)
            {
                case Band.B160M:
                    radBand160_Click(this, EventArgs.Empty);
                    break;
                case Band.B80M:
                    radBand80_Click(this, EventArgs.Empty);
                    break;
                case Band.B60M:
                    radBand60_Click(this, EventArgs.Empty);
                    break;
                case Band.B40M:
                    radBand40_Click(this, EventArgs.Empty);
                    break;
                case Band.B30M:
                    radBand30_Click(this, EventArgs.Empty);
                    break;
                case Band.B20M:
                    radBand20_Click(this, EventArgs.Empty);
                    break;
                case Band.B17M:
                    radBand17_Click(this, EventArgs.Empty);
                    break;
                case Band.B15M:
                    radBand15_Click(this, EventArgs.Empty);
                    break;
                case Band.B12M:
                    radBand12_Click(this, EventArgs.Empty);
                    break;
                case Band.B10M:
                    radBand10_Click(this, EventArgs.Empty);
                    break;
                case Band.B6M:
                    radBand6_Click(this, EventArgs.Empty);
                    break;
                case Band.B2M:
                    radBand2_Click(this, EventArgs.Empty);
                    break;
                case Band.GEN:
                    radBandGEN_Click(this, EventArgs.Empty);
                    break;
                case Band.WWV:
                    radBandWWV_Click(this, EventArgs.Empty);
                    break;
                case Band.VHF0:
                    radBandVHF0.PerformClick();
                    break;
                case Band.VHF1:
                    radBandVHF1.PerformClick();
                    break;
                case Band.VHF2:
                    radBandVHF2.PerformClick();
                    break;
                case Band.VHF3:
                    radBandVHF3.PerformClick();
                    break;
                case Band.VHF4:
                    radBandVHF4.PerformClick();
                    break;
                case Band.VHF5:
                    radBandVHF5.PerformClick();
                    break;
                case Band.VHF6:
                    radBandVHF6.PerformClick();
                    break;
                case Band.VHF7:
                    radBandVHF7.PerformClick();
                    break;
                case Band.VHF8:
                    radBandVHF8.PerformClick();
                    break;
                case Band.VHF9:
                    radBandVHF9.PerformClick();
                    break;
                case Band.VHF10:
                    radBandVHF10.PerformClick();
                    break;
                case Band.VHF11:
                    radBandVHF11.PerformClick();
                    break;
                case Band.VHF12:
                    radBandVHF12.PerformClick();
                    break;
                case Band.VHF13:
                    radBandVHF13.PerformClick();
                    break;
                default:
                    radBandGEN_Click(this, EventArgs.Empty);
                    break;
            }
        }


        public void SetVHFText(int index, string text)
        {
            vhf_text[index].Text = text;
        }

        public void SetVHFEnabled(int index, bool b)
        {
            vhf_text[index].Enabled = b;
        }

        //=============================================================================
        // ke9ns mod add GEN SWL bands
        public int[] band_stacks; // ke9ns add each entry contains the # of bandstack entries for each band listed below 
        public int[] band_sort; // ke9ns add lowest to highest sorted freq list of the current bandstack  

        private void UpdateBandStackRegisters()
        {
            band_stacks = DB.GetBandStackNum();

            band_160m_register = band_stacks[0];
            band_80m_register = band_stacks[1];
            band_60m_register = band_stacks[2];
            band_40m_register = band_stacks[3];
            band_30m_register = band_stacks[4];
            band_20m_register = band_stacks[5];
            band_17m_register = band_stacks[6];
            band_15m_register = band_stacks[7];
            band_12m_register = band_stacks[8];
            band_10m_register = band_stacks[9];
            band_6m_register = band_stacks[10];
            band_2m_register = band_stacks[11];
            band_wwv_register = band_stacks[12];
            band_gen_register = band_stacks[13];

            band_LMF_register = band_stacks[14]; // ke9ns add
            band_120m_register = band_stacks[15];
            band_90m_register = band_stacks[16];
            band_61m_register = band_stacks[17];
            band_49m_register = band_stacks[18];
            band_41m_register = band_stacks[19];
            band_31m_register = band_stacks[20];
            band_25m_register = band_stacks[21];
            band_22m_register = band_stacks[22];
            band_19m_register = band_stacks[23];
            band_16m_register = band_stacks[24];
            band_14m_register = band_stacks[25];
            band_13m_register = band_stacks[26];
            band_11m_register = band_stacks[27];

            band_vhf0_register = band_stacks[28];
            band_vhf1_register = band_stacks[29];
            band_vhf2_register = band_stacks[30];
            band_vhf3_register = band_stacks[31];
            band_vhf4_register = band_stacks[32];
            band_vhf5_register = band_stacks[33];
            band_vhf6_register = band_stacks[34];
            band_vhf7_register = band_stacks[35];
            band_vhf8_register = band_stacks[36];
            band_vhf9_register = band_stacks[37];
            band_vhf10_register = band_stacks[38];
            band_vhf11_register = band_stacks[39];
            band_vhf12_register = band_stacks[40];
            band_vhf13_register = band_stacks[41];

        }

        public void UpdateRX1Filters(int low, int high)
        {
            // System.Console.WriteLine("updf lo: " + low + " hi: " + high); 
            // qualify settings
            //if(low > high) return;

            switch (rx1_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.CWL:
                    if (low > high - 10) low = high - 10;
                    break;
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.CWU:
                    if (high < low + 10) high = low + 10;
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.DSB:
                    if (high < low + 20)
                    {
                        if (Math.Abs(high) < Math.Abs(low))
                            high = low + 20;
                        else
                            low = high - 20;
                    }
                    break;
                case DSPMode.FM:
                    if (radio.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        low = -8000;
                        high = 8000;
                        lblFilterLabel.Text = "16k";
                    }
                    else if (radio.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        low = -4000;
                        high = 4000;
                        lblFilterLabel.Text = "8k";
                    }
                    break;
            }

            if (low < -9999)
                low = -9999;
            if (high > 9999)
                high = 9999;
            if (high < -9999)
                high = -9999;
            if (low > 9999)
                low = 9999;
            // if (low < -14999)
            //   low = -14999;
            // if (high > 14999)
            //  high = 14999;
            // if (low == high) high = low + 25;
            // System.Console.WriteLine("updf lo: " + low + " hi: " + high); 

            // send the settings to the DSP
            if (low == high) return;

            {
                radio.GetDSPRX(0, 0).SetRXFilter(low, high);
                radio.GetDSPRX(0, 1).SetRXFilter(low, high);
            }

            // send the setting to the display
            Display.RX1FilterLow = low;
            Display.RX1FilterHigh = high;

            // update var filter controls
            udFilterLow.Value = low;
            udFilterHigh.Value = high;

            // update Filter Shift
            ptbFilterShift_Update(low, high);

            // update Filter Width
            ptbFilterWidth_Update(low, high);

            // Update Display data if not in panadapter mode
            if (!radio.GetDSPRX(0, 0).SpectrumPreFilter)
                UpdateRXDisplayVars(low, high);

            // update display
            // if (!chkPower.Checked)
            //   Display.DrawBackground();

            // reset average and peak
            switch (Display.CurrentDisplayMode)
            {
                case DisplayMode.SPECTRUM:
                case DisplayMode.HISTOGRAM:
                case DisplayMode.SPECTRASCOPE:
                case DisplayMode.PANADAPTER:
                case DisplayMode.WATERFALL:
                    if (chkDisplayAVG.Checked)
                        Display.ResetRX1DisplayAverage();
                    if (chkDisplayPeak.Checked)
                        Display.ResetRX1DisplayPeak();
                    break;
            }

            // set XIT step rate
            if ((high - low) > 250)
            {
                udXIT.Increment = 10;
                udRIT.Increment = 10;
            }
            else
            {
                udXIT.Increment = 5;
                udRIT.Increment = 5;
            }

            if (filterRX1Form != null && !filterRX1Form.IsDisposed)
            {
                if (filterRX1Form.DSPMode == rx1_dsp_mode)
                    filterRX1Form.CurrentFilter = rx1_filter;
            }
        }

        public void UpdateRX2Filters(int low, int high)
        {
            switch (rx2_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.CWL:
                    if (low > high - 10) low = high - 10;
                    break;
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.CWU:
                    if (high < low + 10) high = low + 10;
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.DSB:
                    if (high < low + 20)
                    {
                        if (Math.Abs(high) < Math.Abs(low))
                            high = low + 20;
                        else
                            low = high - 20;
                    }
                    break;
                case DSPMode.FM:
                    if (radio.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        low = -8000;
                        high = 8000;
                    }
                    else if (radio.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        low = -4000;
                        high = 4000;
                    }
                    break;
            }

            if (low < -9999)
                low = -9999;
            if (high > 9999)
                high = 9999;
            if (high < -9999)
                high = -9999;
            if (low > 9999)
                low = 9999;
            // if (low < -14999)
            //   low = -14999;
            // if (high > 14999)
            //  high = 14999;
            // if (low == high) high = low + 25;
            // System.Console.WriteLine("updf lo: " + low + " hi: " + high); 

            // send the settings to the DSP
            if (low == high) return;

            // send the settings to the DSP
            radio.GetDSPRX(1, 0).SetRXFilter(low, high);
            radio.GetDSPRX(1, 1).SetRXFilter(low, high);

            // send the setting to the display
            Display.RX2FilterLow = low;
            Display.RX2FilterHigh = high;

            // update var filter controls
            udRX2FilterLow.Value = low;
            udRX2FilterHigh.Value = high;

            // update display
            //  if (!chkPower.Checked)
            //   Display.DrawBackground();

            if (filterRX2Form != null && !filterRX2Form.IsDisposed)
            {
                if (filterRX2Form.DSPMode == rx2_dsp_mode)
                    filterRX2Form.CurrentFilter = rx2_filter;
            }
        }

        public void UpdateRX1FilterNames(Filter f)
        {
            switch (f)
            {
                case Filter.F1:
                    radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
                    break;
                case Filter.F2:
                    radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
                    break;
                case Filter.F3:
                    radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
                    break;
                case Filter.F4:
                    radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
                    break;
                case Filter.F5:
                    radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
                    break;
                case Filter.F6:
                    radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
                    break;
                case Filter.F7:
                    radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
                    break;
                case Filter.F8:
                    radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
                    break;
                case Filter.F9:
                    radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
                    break;
                case Filter.F10:
                    radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
                    break;
                case Filter.VAR1:
                    radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
                    break;
                case Filter.VAR2:
                    radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
                    break;
            }

            if (f == rx1_filter)
                panelFilter.Text = "Filter - " + rx1_filters[(int)rx1_dsp_mode].GetName(f);
        }

        public void UpdateRX1FilterPresetLow(int val)
        {
            UpdateRX1Filters(val, (int)udFilterHigh.Value);
        }

        public void UpdateRX1FilterPresetHigh(int val)
        {
            UpdateRX1Filters((int)udFilterLow.Value, val);
        }

        public void UpdateRX2FilterNames(Filter f)
        {
            switch (f)
            {
                case Filter.F1:
                    radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
                    break;
                case Filter.F2:
                    radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
                    break;
                case Filter.F3:
                    radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
                    break;
                case Filter.F4:
                    radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
                    break;
                case Filter.F5:
                    radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
                    break;
                case Filter.F6:
                    radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
                    break;
                case Filter.F7:
                    radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
                    break;
                case Filter.VAR1:
                    radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
                    break;
                case Filter.VAR2:
                    radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
                    break;
            }

            if (f == rx2_filter)
                panelRX2Filter.Text = "RX2 Filter - " + rx2_filters[(int)rx2_dsp_mode].GetName(f);
        }

        public void UpdateRX2FilterPresetLow(int val)
        {
            UpdateRX2Filters(val, (int)udRX2FilterHigh.Value);
        }

        public void UpdateRX2FilterPresetHigh(int val)
        {
            UpdateRX2Filters((int)udRX2FilterLow.Value, val);
        }

        public void UpdateVFOAFreq(string freq)
        {	// only do this routine if there are six digits after the decimal point.
            txtVFOAFreq.Text = freq;
            txtVFOAMSD.Text = freq;

            string temp = freq;
            int index = temp.IndexOf(separator) + 4;
            txtVFOALSD.Text = temp.Remove(0, index);
            if (KWAutoInformation)
                BroadcastFreqChange("A", freq);
        }

        private void BroadcastFreqChange(string vfo, string freq)
        {
            freq = "F" + vfo + freq.Replace(separator, "").PadLeft(11, '0') + ";";
            byte[] bfreq = ASCIIEncoding.ASCII.GetBytes(freq);
            try
            {
                // siolisten.SIO.put(bfreq, (uint)bfreq.Length);
                siolisten.SIO.put(freq);
            }
            catch { }
        }

        public void UpdateVFOBFreq(string freq)
        {	// only do this routine if there are six digits after the decimal point.
            txtVFOBFreq.Text = freq;
            txtVFOBMSD.Text = freq;

            string temp = freq;
            int index = temp.IndexOf(separator) + 4;
            txtVFOBLSD.Text = temp.Remove(0, index);
            if (KWAutoInformation)
                BroadcastFreqChange("B", freq);
        }

        public void CalcDisplayFreq()
        {
            if (Display.CurrentDisplayMode != DisplayMode.PANADAPTER &&
                Display.CurrentDisplayMode != DisplayMode.WATERFALL &&
                Display.CurrentDisplayMode != DisplayMode.PANAFALL &&
                Display.CurrentDisplayMode != DisplayMode.PANASCOPE)
                return;

            if (!initializing)
                specRX.GetSpecRX(0).initAnalyzer();
            if (current_display_engine == DisplayEngine.GDI_PLUS)
            {
                picDisplay.Invalidate();
            }
            else
            {
                Display.RefreshPanadapterGrid = true;
            }
        }

        public void CalcRX2DisplayFreq()
        {
            if (Display.CurrentDisplayModeBottom != DisplayMode.PANADAPTER &&
                Display.CurrentDisplayModeBottom != DisplayMode.WATERFALL)
                return;

            if (!initializing)
                specRX.GetSpecRX(1).initAnalyzer();
            if (current_display_engine == DisplayEngine.GDI_PLUS)
            {
                picDisplay.Invalidate();
            }
            else
            {
                Display.RefreshPanadapterGrid = true;
            }
        }

        public void CalcTXDisplayFreq()
        {
            if (!initializing)
                specRX.GetSpecRX(cmaster.inid(1, 0)).initAnalyzer();
            if (current_display_engine == DisplayEngine.GDI_PLUS)
            {
                picDisplay.Invalidate();
            }
            else
            {
                Display.RefreshPanadapterGrid = true;
            }
        }

        public void UpdateRXSpectrumDisplayVars()
        {
            UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
        }

        public void UpdateTXSpectrumDisplayVars()
        {
            UpdateTXDisplayVars(radio.GetDSPTX(0).TXFilterLow, radio.GetDSPTX(0).TXFilterHigh);
        }

        private void UpdateRXDisplayVars(int l, int h)
        {
            if (Display.CurrentDisplayMode != DisplayMode.SPECTRUM &&
               Display.CurrentDisplayMode != DisplayMode.HISTOGRAM &&
               Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                return;
            int low = 0, high = 0;
            const int extra = 1000;
            const int little_extra = 500;
            int spec_blocksize = radio.GetDSPRX(0, 0).BufferSize;

            switch (rx1_dsp_mode)
            {
                case DSPMode.LSB:
                    low = l - extra;
                    high = 0;
                    break;
                case DSPMode.CWL:
                case DSPMode.DIGL:
                    low = l - little_extra;
                    high = 0;
                    break;
                case DSPMode.USB:
                    low = 0;
                    high = h + extra;
                    break;
                case DSPMode.CWU:
                case DSPMode.DIGU:
                    low = 0;
                    high = h + little_extra;
                    break;
                default:
                    low = l - extra;
                    high = h + extra;
                    break;
            }

            Display.RXSpectrumDisplayLow = low;
            Display.RXSpectrumDisplayHigh = high;
            specRX.GetSpecRX(0).CalcSpectrum(low, high, spec_blocksize, 48000);
        }

        private void UpdateTXDisplayVars(int l, int h)
        {
            if (Display.CurrentDisplayMode != DisplayMode.SPECTRUM &&
                Display.CurrentDisplayMode != DisplayMode.HISTOGRAM &&
                Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                return;

            int low = 0, high = 0;
            int spec_blocksize = radio.GetDSPTX(0).BufferSize;
            if (l < 0 && h <= 0)
            {
                high = 0;
                if (l >= -910)
                    low = -1000;
                else
                    low = (int)(l * 1.1);
            }
            else if (l >= 0 && h > 0)
            {
                low = 0;
                if (h <= 910)
                    high = 1000;
                else
                    high = (int)(h * 1.1);
            }
            else if (l < 0 && h > 0)
            {
                int max_edge = Math.Max(-l, h);
                low = (int)(max_edge * -1.1);
                high = (int)(max_edge * 1.1);
            }

            Display.TXSpectrumDisplayLow = low;
            Display.TXSpectrumDisplayHigh = high;
            specRX.GetSpecRX(cmaster.inid(1, 0)).CalcSpectrum(low, high, spec_blocksize, 96000);
        }

        public void SetTXFilters(DSPMode mode, int low, int high)
        {
            int l = 0, h = 0;
            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.CWL:
                case DSPMode.DIGL:
                    l = -high;
                    h = -low;
                    break;
                case DSPMode.USB:
                case DSPMode.CWU:
                case DSPMode.DIGU:
                    l = low;
                    h = high;
                    break;
                case DSPMode.DSB:
                    l = -high;
                    h = high;
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                    l = -high;
                    h = high;
                    break;
                case DSPMode.FM:
                    if (radio.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        l = -8000;
                        h = 8000;
                    }
                    else if (radio.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        l = -5500;
                        h = 5500;
                    }
                    break;
                case DSPMode.DRM:
                    l = 7000;
                    h = 17000;
                    break;
            }

            switch (Display.CurrentDisplayMode)
            {
                case DisplayMode.PANADAPTER:
                case DisplayMode.WATERFALL:
                case DisplayMode.PANAFALL:
                case DisplayMode.PANASCOPE:
                    break;
                default:
                    UpdateTXDisplayVars(l, h);
                    break;
            }

            radio.GetDSPTX(0).SetTXFilter(l, h);

            Display.TXFilterLow = l;
            Display.TXFilterHigh = h;
        }

        public void UpdateTXProfile(string name)
        {
            if (SetupForm == null) return;

            //string old = comboTXProfile.Text;
            comboTXProfile.Items.Clear();
            comboDigTXProfile.Items.Clear();
            comboFMTXProfile.Items.Clear();
            string[] s = SetupForm.GetTXProfileStrings();

            /*for(int i=0; i<s.Length; i++)
            {
                comboTXProfile.Items.Add(s[i]);
                comboDigTXProfile.Items.Add(s[i]);
            }*/
            comboTXProfile.Items.AddRange(s);
            comboDigTXProfile.Items.AddRange(s);
            comboFMTXProfile.Items.AddRange(s);

            if (name != "") comboTXProfile.Text = name;
        }

        // Diversity operation is on RX1; therefore, the 'rx1_rate' will be used as the diversity rate;
        public void UpdateDDCs(bool rx2_enabled)
        {
            int DDCEnable = 0;
            int DDC0 = 1, DDC1 = 2, DDC2 = 4, DDC3 = 8;
            int SyncEnable = 0;
            int[] Rate = new int[8];
            int i;
            int rx1_rate = SampleRate1;
            int rx2_rate = SampleRateRX2;
            int ps_rate = cmaster.PSrate;
            switch (current_hpsdr_model)
            {
                case HPSDRModel.ANAN100D:
                case HPSDRModel.ANAN200D:
                case HPSDRModel.ORIONMKII:
                case HPSDRModel.ANAN7000D:
                case HPSDRModel.ANAN8000D:
                    if (!mox)
                    {
                        if (diversity2)
                        {
                            DDCEnable = DDC0;
                            SyncEnable = DDC1;
                            Rate[0] = rx1_rate;
                            Rate[1] = rx1_rate;
                        }
                        else
                        {
                            DDCEnable = DDC2;
                            SyncEnable = 0;
                            Rate[2] = rx1_rate;
                        }
                    }
                    else
                    {
                        if (!diversity2 && !psform.PSEnabled)
                        {
                            DDCEnable = DDC2;
                            SyncEnable = 0;
                            Rate[2] = rx1_rate;
                        }
                        else if (!diversity2 && psform.PSEnabled)
                        {
                            DDCEnable = DDC0 + DDC2;
                            SyncEnable = DDC1;
                            Rate[0] = ps_rate;
                            Rate[1] = ps_rate;
                            Rate[2] = rx1_rate;
                        }
                        else if (diversity2 && psform.PSEnabled)
                        {
                            DDCEnable = DDC0 + DDC2;
                            SyncEnable = DDC1;
                            Rate[0] = ps_rate;
                            Rate[1] = ps_rate;
                            Rate[2] = rx1_rate;
                        }
                        else
                        {
                            DDCEnable = DDC0;
                            SyncEnable = DDC1;
                            Rate[0] = rx1_rate;
                            Rate[1] = rx1_rate;
                        }
                    }

                    if (rx2_enabled)
                    {
                        DDCEnable += DDC3;
                        Rate[3] = rx2_rate;
                    }
                    break;
                case HPSDRModel.HERMES:
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN10E:
                case HPSDRModel.ANAN100B:
                    if (!mox)
                    {
                        if (!diversity2)
                        {
                            DDCEnable = DDC0;
                            SyncEnable = 0;
                            Rate[0] = rx1_rate;

                            if (rx2_enabled)
                            {
                                DDCEnable += DDC1;
                                Rate[1] = rx2_rate;
                            }
                        }
                        else
                        {
                            DDCEnable = DDC0;
                            SyncEnable = DDC1;
                            Rate[0] = rx1_rate;
                            Rate[1] = rx1_rate;
                        }
                    }
                    else
                    {
                        if (!diversity2 && !psform.PSEnabled)
                        {
                            DDCEnable = DDC0;
                            SyncEnable = 0;
                            Rate[0] = rx1_rate;

                            if (rx2_enabled)
                            {
                                DDCEnable += DDC1;
                                Rate[1] = rx2_rate;
                            }
                        }
                        else if (diversity2 && !psform.PSEnabled)
                        {
                            DDCEnable = DDC0;
                            SyncEnable = DDC1;
                            Rate[0] = rx1_rate;
                            Rate[1] = rx1_rate;
                        }
                        else // transmitting and PS is ON
                        {
                            DDCEnable = DDC0;
                            SyncEnable = DDC1;
                            Rate[0] = ps_rate;
                            Rate[1] = ps_rate;
                        }
                    }
                    break;
                //case HPSDRModel.ANAN10E: // DDCs syncronous
                //case HPSDRModel.ANAN100B:
                //    DDCEnable = DDC0 + DDC1;
                //    // SyncEnable = DDC1;
                //    if (mox && psform.PSEnabled)
                //    {
                //        Rate[0] = Rate[1] = ps_rate;
                //        SyncEnable = DDC1;
                //    }
                //    else
                //        Rate[0] = Rate[1] = rx1_rate;
                //    break;
                case HPSDRModel.HPSDR:
                    break;
            }
            NetworkIO.EnableRxs(DDCEnable);
            NetworkIO.EnableRxSync(0, SyncEnable);
            for (i = 0; i < 4; i++)
                NetworkIO.SetDDCRate(i, Rate[i]);
            NetworkIO.CmdRx();
        }

        //public void UpdateReceivers(bool rx2_enabled)
        //{
        //    int rxs = 0;
        //    int Rx0 = 1, Rx1 = 2, Rx2 = 4, Rx3 = 8, enablesync = 0;

        //    switch (current_hpsdr_model)
        //    {
        //        case HPSDRModel.ANAN100D:
        //        case HPSDRModel.ANAN200D:
        //        case HPSDRModel.ORIONMKII:
        //        case HPSDRModel.ANAN8000D:
        //            if (!mox)
        //            {
        //                if (diversity2)
        //                {
        //                    rxs = Rx0;// +Rx1;
        //                    enablesync = Rx1;
        //                }
        //                else
        //                {
        //                    rxs = Rx2;
        //                    enablesync = 0;
        //                }
        //            }
        //            else
        //            {
        //                if (!diversity2 && !psform.PSEnabled)
        //                {
        //                    rxs = Rx2;
        //                    enablesync = 0;
        //                }
        //                else if (!diversity2 && psform.PSEnabled)
        //                {
        //                    rxs = Rx0 /*+ Rx1*/ + Rx2;
        //                    enablesync = Rx1;
        //                }
        //                else if (diversity2 && psform.PSEnabled)
        //                {
        //                    rxs = Rx0 /*+ Rx1*/ + Rx2;
        //                    enablesync = Rx1;
        //                }
        //                else
        //                {
        //                    rxs = Rx0;// +Rx1;
        //                    enablesync = Rx1;
        //                }
        //            }

        //            if (rx2_enabled)
        //                rxs += Rx3;
        //            break;
        //        case HPSDRModel.HERMES:
        //        case HPSDRModel.ANAN10:
        //        case HPSDRModel.ANAN10E:
        //        case HPSDRModel.ANAN100:
        //        case HPSDRModel.ANAN100B:
        //            if (!mox)
        //            {
        //                if (!diversity2)
        //                {
        //                    rxs = Rx0;
        //                    enablesync = 0;

        //                    if (rx2_enabled)
        //                        rxs += Rx1;
        //                }
        //                else
        //                {
        //                    rxs = Rx0;// +Rx1;//
        //                    enablesync = Rx1;//
        //                }
        //            }
        //            else
        //            {
        //                if (!diversity2 && !psform.PSEnabled)
        //                {
        //                    rxs = Rx0;
        //                    enablesync = 0;

        //                    if (rx2_enabled)
        //                        rxs += Rx1;
        //                }
        //                else
        //                {
        //                    rxs = Rx0;// +Rx1;//
        //                    enablesync = Rx1;//
        //                }
        //            }
        //            break;
        //        case HPSDRModel.HPSDR:
        //            break;
        //    }
        //    NetworkIO.EnableRxs(rxs);
        //    NetworkIO.EnableRxSync(0, enablesync);

        //}

        private void UpdateDiversityValues()
        {
            if (!initializing && diversityForm != null)
            {
                diversityForm.DiversityRXRef = diversity_rx1_ref_by_band[(int)rx1_band];

                switch (RX1Band)
                {
                    case Band.B160M:
                        diversityForm.DiversityGain = DiversityGain160m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain160m;
                        diversityForm.DiversityPhase = DiversityPhase160m;
                        break;
                    case Band.B80M:
                        diversityForm.DiversityGain = DiversityGain80m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain80m;
                        diversityForm.DiversityPhase = DiversityPhase80m;
                        break;
                    case Band.B60M:
                        diversityForm.DiversityGain = DiversityGain60m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain60m;
                        diversityForm.DiversityPhase = DiversityPhase60m;
                        break;
                    case Band.B40M:
                        diversityForm.DiversityGain = DiversityGain40m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain40m;
                        diversityForm.DiversityPhase = DiversityPhase40m;
                        break;
                    case Band.B30M:
                        diversityForm.DiversityGain = DiversityGain30m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain30m;
                        diversityForm.DiversityPhase = DiversityPhase30m;
                        break;
                    case Band.B20M:
                        diversityForm.DiversityGain = DiversityGain20m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain20m;
                        diversityForm.DiversityPhase = DiversityPhase20m;
                        break;
                    case Band.B17M:
                        diversityForm.DiversityGain = DiversityGain17m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain17m;
                        diversityForm.DiversityPhase = DiversityPhase17m;
                        break;
                    case Band.B15M:
                        diversityForm.DiversityGain = DiversityGain15m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain15m;
                        diversityForm.DiversityPhase = DiversityPhase15m;
                        break;
                    case Band.B12M:
                        diversityForm.DiversityGain = DiversityGain12m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain12m;
                        diversityForm.DiversityPhase = DiversityPhase12m;
                        break;
                    case Band.B10M:
                        diversityForm.DiversityGain = DiversityGain10m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain10m;
                        diversityForm.DiversityPhase = DiversityPhase10m;
                        break;
                    case Band.B6M:
                        diversityForm.DiversityGain = DiversityGain6m;
                        diversityForm.DiversityR2Gain = DiversityR2Gain6m;
                        diversityForm.DiversityPhase = DiversityPhase6m;
                        break;
                    case Band.WWV:
                        diversityForm.DiversityGain = DiversityGainWWV;
                        diversityForm.DiversityR2Gain = DiversityR2GainWWV;
                        diversityForm.DiversityPhase = DiversityPhaseWWV;
                        break;
                    case Band.GEN:
                        diversityForm.DiversityGain = DiversityGainGEN;
                        diversityForm.DiversityR2Gain = DiversityR2GainGEN;
                        diversityForm.DiversityPhase = DiversityPhaseGEN;
                        break;
                    default:
                        diversityForm.DiversityGain = DiversityGainXVTR;
                        diversityForm.DiversityR2Gain = DiversityR2GainXVTR;
                        diversityForm.DiversityPhase = DiversityPhaseXVTR;
                        break;
                }
            }
        }

        public void UpdateWaterfallLevelValues()
        {
            if (!initializing)
            {
                UpdateBandButtonColors(); // ke9ns add to update the regBOX bandstack values on screen

                if (StackForm != null)
                {
                    int value;
                    StackForm.textBox1.Focus();

                    if (int.TryParse(regBox1.Text, out value))
                    {

                        if (value > 0)
                        {
                            StackForm.textBox1.SelectionStart = (value - 1) * 31;       // start of each bandstack line
                            StackForm.textBox1.SelectionLength = 31;                    // length of each bandstack line
                        }
                        else
                        {
                            StackForm.textBox1.SelectionStart = 0;
                            StackForm.textBox1.SelectionLength = 31;
                        }

                    }
                    else
                    {
                        Debug.WriteLine("no value");
                        StackForm.textBox1.SelectionStart = 0;
                        StackForm.textBox1.SelectionLength = 31;
                    }
                }
                //
                switch (RX1Band)
                {
                    case Band.B160M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold160m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold160m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold160m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold160m;
                        break;
                    case Band.B80M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold80m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold80m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold80m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold80m;
                        break;
                    case Band.B60M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold60m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold60m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold60m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold60m;
                        break;
                    case Band.B40M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold40m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold40m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold40m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold40m;
                        break;
                    case Band.B30M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold30m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold30m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold30m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold30m;
                        break;
                    case Band.B20M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold20m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold20m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold20m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold20m;
                        break;
                    case Band.B17M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold17m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold17m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold17m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold17m;
                        break;
                    case Band.B15M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold15m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold15m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold15m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold15m;
                        break;
                    case Band.B12M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold12m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold12m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold12m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold12m;
                        break;
                    case Band.B10M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold10m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold10m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold10m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold10m;
                        break;
                    case Band.B6M:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThreshold6m;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThreshold6m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold6m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold6m;
                        break;
                    case Band.WWV:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThresholdWWV;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThresholdWWV;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdWWV;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdWWV;
                        break;
                    case Band.GEN:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThresholdGEN;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThresholdGEN;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdGEN;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdGEN;
                        break;
                    default:
                        SetupForm.WaterfallLowThreshold = WaterfallLowThresholdXVTR;
                        SetupForm.WaterfallHighThreshold = WaterfallHighThresholdXVTR;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdXVTR;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdXVTR;
                        break;
                }

                switch (RX2Band)
                {
                    case Band.B160M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold160m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold160m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold160m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold160m;
                        break;
                    case Band.B80M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold80m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold80m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold80m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold80m;
                        break;
                    case Band.B60M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold60m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold60m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold60m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold60m;
                        break;
                    case Band.B40M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold40m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold40m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold40m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold40m;
                        break;
                    case Band.B30M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold30m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold30m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold30m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold30m;
                        break;
                    case Band.B20M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold20m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold20m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold20m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold20m;
                        break;
                    case Band.B17M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold17m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold17m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold17m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold17m;
                        break;
                    case Band.B15M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold15m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold15m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold15m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold15m;
                        break;
                    case Band.B12M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold12m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold12m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold12m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold12m;
                        break;
                    case Band.B10M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold10m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold10m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold10m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold10m;
                        break;
                    case Band.B6M:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold6m;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold6m;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThreshold6m;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThreshold6m;
                        break;
                    case Band.WWV:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdWWV;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdWWV;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdWWV;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdWWV;
                        break;
                    case Band.GEN:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdGEN;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdGEN;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdGEN;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdGEN;
                        break;
                    default:
                        SetupForm.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdXVTR;
                        SetupForm.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdXVTR;
                        Display.RX2WaterfallLowThreshold = RX2WaterfallLowThresholdXVTR;
                        Display.RX2WaterfallHighThreshold = RX2WaterfallHighThresholdXVTR;
                        break;
                }
                SetupForm.UpdateWaterfallBandInfo();
            }
        }

        private void UpdateDisplayGridLevelValues()
        {
            if (!initializing)
            {
                //
                switch (RX1Band)
                {
                    case Band.B160M:
                        SetupForm.DisplayGridMin = DisplayGridMin160m;
                        SetupForm.DisplayGridMax = DisplayGridMax160m;
                        Display.SpectrumGridMin = (int)DisplayGridMin160m;
                        Display.SpectrumGridMax = (int)DisplayGridMax160m;
                        break;
                    case Band.B80M:
                        SetupForm.DisplayGridMin = DisplayGridMin80m;
                        SetupForm.DisplayGridMax = DisplayGridMax80m;
                        Display.SpectrumGridMin = (int)DisplayGridMin80m;
                        Display.SpectrumGridMax = (int)DisplayGridMax80m;
                        break;
                    case Band.B60M:
                        SetupForm.DisplayGridMin = DisplayGridMin60m;
                        SetupForm.DisplayGridMax = DisplayGridMax60m;
                        Display.SpectrumGridMin = (int)DisplayGridMin60m;
                        Display.SpectrumGridMax = (int)DisplayGridMax60m;
                        break;
                    case Band.B40M:
                        SetupForm.DisplayGridMin = DisplayGridMin40m;
                        SetupForm.DisplayGridMax = DisplayGridMax40m;
                        Display.SpectrumGridMin = (int)DisplayGridMin40m;
                        Display.SpectrumGridMax = (int)DisplayGridMax40m;
                        break;
                    case Band.B30M:
                        SetupForm.DisplayGridMin = DisplayGridMin30m;
                        SetupForm.DisplayGridMax = DisplayGridMax30m;
                        Display.SpectrumGridMin = (int)DisplayGridMin30m;
                        Display.SpectrumGridMax = (int)DisplayGridMax30m;
                        break;
                    case Band.B20M:
                        SetupForm.DisplayGridMin = DisplayGridMin20m;
                        SetupForm.DisplayGridMax = DisplayGridMax20m;
                        Display.SpectrumGridMin = (int)DisplayGridMin20m;
                        Display.SpectrumGridMax = (int)DisplayGridMax20m;
                        break;
                    case Band.B17M:
                        SetupForm.DisplayGridMin = DisplayGridMin17m;
                        SetupForm.DisplayGridMax = DisplayGridMax17m;
                        Display.SpectrumGridMin = (int)DisplayGridMin17m;
                        Display.SpectrumGridMax = (int)DisplayGridMax17m;
                        break;
                    case Band.B15M:
                        SetupForm.DisplayGridMin = DisplayGridMin15m;
                        SetupForm.DisplayGridMax = DisplayGridMax15m;
                        Display.SpectrumGridMin = (int)DisplayGridMin15m;
                        Display.SpectrumGridMax = (int)DisplayGridMax15m;
                        break;
                    case Band.B12M:
                        SetupForm.DisplayGridMin = DisplayGridMin12m;
                        SetupForm.DisplayGridMax = DisplayGridMax12m;
                        Display.SpectrumGridMin = (int)DisplayGridMin12m;
                        Display.SpectrumGridMax = (int)DisplayGridMax12m;
                        break;
                    case Band.B10M:
                        SetupForm.DisplayGridMin = DisplayGridMin10m;
                        SetupForm.DisplayGridMax = DisplayGridMax10m;
                        Display.SpectrumGridMin = (int)DisplayGridMin10m;
                        Display.SpectrumGridMax = (int)DisplayGridMax10m;
                        break;
                    case Band.B6M:
                        SetupForm.DisplayGridMin = DisplayGridMin6m;
                        SetupForm.DisplayGridMax = DisplayGridMax6m;
                        Display.SpectrumGridMin = (int)DisplayGridMin6m;
                        Display.SpectrumGridMax = (int)DisplayGridMax6m;
                        break;
                    case Band.WWV:
                        SetupForm.DisplayGridMin = DisplayGridMinWWV;
                        SetupForm.DisplayGridMax = DisplayGridMaxWWV;
                        Display.SpectrumGridMin = (int)DisplayGridMinWWV;
                        Display.SpectrumGridMax = (int)DisplayGridMaxWWV;
                        break;
                    case Band.GEN:
                        SetupForm.DisplayGridMin = DisplayGridMinGEN;
                        SetupForm.DisplayGridMax = DisplayGridMaxGEN;
                        Display.SpectrumGridMin = (int)DisplayGridMinGEN;
                        Display.SpectrumGridMax = (int)DisplayGridMaxGEN;
                        break;
                    default:
                        SetupForm.DisplayGridMin = DisplayGridMinXVTR;
                        SetupForm.DisplayGridMax = DisplayGridMaxXVTR;
                        Display.SpectrumGridMin = (int)DisplayGridMinXVTR;
                        Display.SpectrumGridMax = (int)DisplayGridMaxXVTR;
                        break;
                }

                switch (RX2Band)
                {
                    case Band.B160M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin160m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax160m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin160m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax160m;
                        break;
                    case Band.B80M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin80m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax80m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin80m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax80m;
                        break;
                    case Band.B60M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin60m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax60m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin60m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax60m;
                        break;
                    case Band.B40M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin40m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax40m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin40m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax40m;
                        break;
                    case Band.B30M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin30m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax30m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin30m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax30m;
                        break;
                    case Band.B20M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin20m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax20m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin20m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax20m;
                        break;
                    case Band.B17M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin17m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax17m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin17m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax17m;
                        break;
                    case Band.B15M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin15m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax15m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin15m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax15m;
                        break;
                    case Band.B12M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin12m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax12m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin12m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax12m;
                        break;
                    case Band.B10M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin10m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax10m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin10m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax10m;
                        break;
                    case Band.B6M:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMin6m;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMax6m;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMin6m;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMax6m;
                        break;
                    case Band.WWV:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMinWWV;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMaxWWV;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMinWWV;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMaxWWV;
                        break;
                    case Band.GEN:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMinGEN;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMaxGEN;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMinGEN;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMaxGEN;
                        break;
                    default:
                        SetupForm.RX2DisplayGridMin = RX2DisplayGridMinXVTR;
                        SetupForm.RX2DisplayGridMax = RX2DisplayGridMaxXVTR;
                        Display.RX2SpectrumGridMin = (int)RX2DisplayGridMinXVTR;
                        Display.RX2SpectrumGridMax = (int)RX2DisplayGridMaxXVTR;
                        break;
                }
                SetupForm.UpdateDisplayGridBandInfo();
            }
        }

        public bool RX1IsIn60m()
        {
            double freq = VFOAFreq;
            return (freq >= 5.1 && freq <= 5.5);
        }

        public bool RX1IsOn60mChannel(Channel c)
        {
            double freq = VFOAFreq - ModeFreqOffset(rx1_dsp_mode);
            freq = Math.Round(freq, 6);

            return (c.Freq == freq);
        }

        public bool RX1IsOn60mChannel()
        {
            double freq = VFOAFreq - ModeFreqOffset(rx1_dsp_mode);
            freq = Math.Round(freq, 6);

            foreach (Channel c in Channels60m)
            {
                if (c.Freq == freq)
                    return true;
            }

            return false; // nothing matched, return false
        }

        public bool RX2IsIn60m()
        {
            double freq = VFOBFreq;
            return (freq >= 5.1 && freq <= 5.5);
        }

        public bool RX2IsOn60mChannel(Channel c)
        {
            double freq = VFOBFreq - ModeFreqOffset(rx2_dsp_mode);
            freq = Math.Round(freq, 6);

            return (c.Freq == freq);
        }

        public bool RX2IsOn60mChannel()
        {
            double freq = VFOBFreq - ModeFreqOffset(rx2_dsp_mode);
            freq = Math.Round(freq, 6);

            foreach (Channel c in Channels60m)
            {
                if (c.Freq == freq)
                    return true;
            }

            return false; // nothing matched, return false
        }

        private double ModeFreqOffset(DSPMode mode)
        {
            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                    return (1500 * 1e-6);
                case DSPMode.USB:
                case DSPMode.DRM:
                case DSPMode.DIGU:
                    return (-1500 * 1e-6);
                case DSPMode.DSB:
                case DSPMode.CWL:
                case DSPMode.CWU:
                case DSPMode.FM:
                case DSPMode.AM:
                case DSPMode.SAM:
                    return 0;
                default: return 0;
            }
        }

        public string CATGetXVTRBandNames()
        {
            string names = "";
            for (int n = 0; n < 14; n++)
            {
                if (XVTRForm.GetEnabled(n) == true)
                    names += vhf_text[n].Text.ToString().PadLeft(5, ' ');
                else
                    names += "     ";
            }
            return names;
        }

        public string GetFilterPresets(int mode_ndx)
        {
            string mode_info = "";
            for (Filter f = Filter.F1; f < Filter.NONE; f++)
            {

                mode_info += rx1_filters[mode_ndx].GetName(f).PadLeft(5, ' ');
                mode_info += rx1_filters[mode_ndx].GetHigh(f).ToString().PadLeft(5, ' ');
                mode_info += rx1_filters[mode_ndx].GetLow(f).ToString().PadLeft(5, ' ');
            }
            return mode_info;
        }

        public int CurrentTuneStepHz
        {
            get { return tune_step_list[tune_step_index].StepHz; }
        }

        public double CurrentTuneStepMHz
        {
            get { return tune_step_list[tune_step_index].StepHz * 1e-6; }
        }


        //============================================================================ 
        //============================================================================ 
        // ke9ns add turn waterfall from color to grayscale
        // this saves display time and remote internet bandwidth
        //============================================================================ 
        //============================================================================ 
        private void GrayMenuItem_Click(object sender, EventArgs e) // ke9ns ADD  // this selects color or gray scale waterfalls
        {

            if (Display.GrayScale == 1) // do if currently GRAY waterfall
            {
                Display.GrayScale = 0;                // change to  RGB
                //  this.GrayMenuItem.Text = "GrayWtr";
            }
            else  // do if currently Color waterfall
            {
                Display.GrayScale = 1;                 // change to Gray
                //  this.GrayMenuItem.Text = "ColorWtr";
            }

            //  this.GrayMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;

        } //graymenuitem




        //============================================================================ 
        //============================================================================ 
        // ke9ns add clicking on PA temp or volts turns on/off this reading
        // PA reading from the flex take a long time so this is a toggle
        //============================================================================ 
        //============================================================================ 
        private void labelTS4_Click(object sender, EventArgs e) // ke9ns add
        {
            //if (PAON == 0)
            //{
            //    PAON = 1;
            //}
            //else
            //{
            //    PAON = 0;
            //}



        } //  click on AMPS



        //============================================================================ 
        // ke9ns add 
        private void labelTS3_Click(object sender, EventArgs e) // ke9ns add
        {

            //if (PAON == 0)
            //{
            //    PAON = 1;
            //}
            //else if (PAON == 1)
            //{
            //    PAON = 2;
            //}
            //else
            //{
            //    PAON = 0;
            //}

        } // click on temp


        //============================================================================ 
        //============================================================================ 
        // ke9ns add CALLSIGN menu field allow WaveForm to get text from here
        //============================================================================ 
        //============================================================================ 
        public static string callsign = "CallSign";

        public string Callsign            // wave.cs gets call sign from here
        {
            get { return callsign; }
            set
            {
                // Callsign = setupForm.txtGenCustomTitle.Text;
                callsign = value;

            } // set
        } // tx id

        public static string lastcallsign = " hhh ";

        public string LastCall            // wave.cs gets call sign from here
        {
            get { return lastcallsign; }
            set
            {
                lastcallsign = value;

            } // set
        } // tx id



        //=================================================================================================
        // ke9ns add   Check for left or right mouse click
        //=================================================================================================
        private void callsignTextBox_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            //  callsignTextBox.ShortcutsEnabled = false; // added to eliminate the contextmenu from popping up

            if (me.Button == System.Windows.Forms.MouseButtons.Right) // right mouse click
            {

                string filePath = AppDataPath + "ke9ns8.dat";

                if (!File.Exists(filePath))
                {
                    Debug.WriteLine("problem no ke9ns dat file found ");
                    return;
                }

                string argument = @"/select, " + filePath;

                System.Diagnostics.Process.Start("explorer.exe", argument);

            }

            if (me.Button == System.Windows.Forms.MouseButtons.Left) // left mouse click
            {
                //   WaveForm.CreatePlay = true;   // create wave file            
            }

        } // callsigntextbox mouse down

        //============================================================================ 
        //============================================================================ 
        // ke9ns add change callsign TX waterfall ID text here
        //============================================================================ 
        //============================================================================ 
        private void callsignTextBox_TextChanged_1(object sender, EventArgs e) // ke9ns add
        {
            // Debug.WriteLine("change   ");
            // Process.Start(@"c:\test")

            //  callsignTextBox.BackColor = Color.LemonChiffon; //to show your editing this callsign field
            //  callsign = callsignTextBox.Text;
            menuStrip1.Invalidate();
            menuStrip1.Update();

        }


        private static byte callsignfocus = 0; // ke9ns used to keep focus on text entry and not flex keyboard shortcuts

        private void callsignTextBox_MouseEnter(object sender, EventArgs e)// ke9ns add
        {

            //  Debug.WriteLine("Enter  ");

            //  callsign = callsignTextBox.Text;
            //  callsignTextBox.BackColor = Color.LemonChiffon;  // to show your editing this callsign field
            callsignfocus = 1;

            //  callsignTextBox.Focus();


        }

        private void callsignTextBox_MouseLeave(object sender, EventArgs e)// ke9ns add
        {
            // Debug.WriteLine("leaveM   ");
            //  WaveForm.CreatePlay = true;   // create wave file
            btnHidden.Focus();

            callsignfocus = 0; // ke9ns 
        }

        //============================================================================ 
        //============================================================================ 
        // ke9ns add  call waveform.createBoxTS to create new wave file first.
        //============================================================================ 
        //============================================================================ 
        private void callsignTextBox_Leave(object sender, EventArgs e)// ke9ns add
        {
            //   Debug.WriteLine("leave   ");
            //  WaveForm.CreatePlay = true;   // create wave file
            // "bright" variable controls brightness of txwaterID
        } // callsignTextBox_Leave



        //============================================================================ 
        //============================================================================ 
        // ke9ns add update TX Waterfall ID status from here
        // jump here from either a TXIDMenu click or from WaveForm TXIDBoxTS update
        //============================================================================ 
        //============================================================================ 
        private static byte vac1 = 0;
        private static int Txfh = 0;
        private void TXIDMenuItem_CheckedChanged(object sender, EventArgs e)
        {
            /*
                        if ((TXIDMenuItem.Checked) && (chkPower.Checked))
                        {
                            if (comboDisplayMode.Focused)
                                btnHidden.Focus();

                            if (chkVAC1.Checked)
                            {
                                vac1 = 1;
                                chkVAC1.Checked = false;
                            }
                            chkMOX.Checked = true;     // key radio 
                            WaveForm.TXIDPlay = true;
                        }
                        else
                        {
                            this.TXIDMenuItem.Text = "TX WaterID";
                            WaveForm.TXIDPlay = false;

                            if (Txfh > 0) TXFilterHigh = Txfh;         // put back original filter size

                            if (vac1 == 1)
                            {
                                vac1 = 0;
                                Thread.Sleep(100);
                                chkVAC1.Checked = true;

                                //  await Task.Delay(3000);
                            }
                            //  Debug.WriteLine("wating...........");

                            //  Thread.Sleep(300);
                            //  Task.Delay(200);

                            chkMOX.Checked = false;

                        }
                        */
        } // TXIDMenuItem_CheckedChanged


        // ke9ns add
        public Color Border = Color.DarkGreen;  // color of line around box
        public float BorderThk = 2.2f;   // line thickness around box
        public float BorderOff = (2.2f / 2.0f); // ke9ns offset from edge of box


        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpVFOA_Paint(object sender, PaintEventArgs p)  // ke9ns ADD
        {

            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(Color.Black), gPath);

            if ((MOX) && (chkVFOATX.Checked == true))
            {
                p.Graphics.DrawPath(new Pen(Color.Red, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

            p.Graphics.DrawString("VFO A", box.Font, Brushes.White, 8, 0);


        } // grpVFOA_Paint



        private void grpVFOA_MouseHover(object sender, EventArgs e)
        {
            grpVFOA.Invalidate();

        }

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpVFOB_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //


            p.Graphics.FillPath(new SolidBrush(Color.Black), gPath);

            if ((MOX) && (chkVFOBTX.Checked == true))
            {
                p.Graphics.DrawPath(new Pen(Color.Red, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

            p.Graphics.DrawString("VFO B", box.Font, Brushes.White, 8, 0);

        } //grpVFOB_Paint

        private void grpVFOB_MouseHover(object sender, EventArgs e)
        {
            grpVFOB.Invalidate();
        }


        Color Border1 = Color.DarkGreen;

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpMultimeter_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 4, true, true, true, true); //


            p.Graphics.FillPath(new SolidBrush(Color.Black), gPath);
            //  p.Graphics.DrawPath(new Pen(Border1, BorderThk), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            p.Graphics.DrawString("RX1 Meter        TX Meter", box.Font, Brushes.White, 8, 0);


        } // grpMultimeter_Paint

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpRX2Meter_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 4, true, true, true, true); //


            p.Graphics.FillPath(new SolidBrush(Color.Black), gPath);
            //  p.Graphics.DrawPath(new Pen(Border1, BorderThk), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            p.Graphics.DrawString("RX2 Meter        TX Meter(2nd)", box.Font, Brushes.White, 8, 0);

        }

        //  ToolTip tt = new ToolTip();
        private void TXIDMenuItem_MouseHover(object sender, EventArgs e)
        {
            //  tt.Show("Click 'LIVE ...", this.menuStrip1, 10000);

        }


        //=======================================================================
        // ke9ns add  PLAY button opens folder 
        //=======================================================================
        private void ckQuickRec_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if (me.Button == System.Windows.Forms.MouseButtons.Right)
            {
                /*
                                if (WaveForm.IsDisposed)
                                    WaveForm = new WaveControl(this);
                                WaveForm.Show();
                                WaveForm.Focus();

                            */

                string filePath = AppDataPath + "ke9ns8.dat";
                string filePath1 = AppDataPath + "QuickAudio\\";

                /*
                                if (WaveForm.chkQuickAudioFolder.Checked == false) // ke9ns do below if standard quickqudio
                                {
                                    if (!File.Exists(filePath))
                                    {
                                        Debug.WriteLine("problem no ke9ns dat file found");
                                        return;
                                    }

                                    string argument = @"/select, " + filePath;
                                    //   Debug.WriteLine("filepath " + argument);

                                    System.Diagnostics.Process.Start("explorer.exe", argument);
                                }
                                else // do below if subfolder sequential quickaudio
                                {


                                    if (!Directory.Exists(filePath1))
                                    {
                                        // create PowerSDR audio folder if it does not exist
                                        //  Directory.CreateDirectory(wave_folder);
                                        Debug.WriteLine("problem no ke9ns dat file found");
                                        return;

                                    }
                                    string argument = @"/select, " + filePath1;

                                    //   Debug.WriteLine("filepath1 " + argument);

                                    System.Diagnostics.Process.Start("explorer.exe", argument);

                                } // 

                                */

            } // right mouse button click


        } // ckQuickRec_MouseDown



        //============================================================================ 
        //============================================================================ 
        // ke9ns add Click here to 1 time autoadjust waterfall level
        //============================================================================ 
        //============================================================================ 
        public void autoBrightBox_Click(object sender, EventArgs e)
        {


            //if (Display.continuum == 0)
            //{
            //    Display.AutoBright = 1; // adjust RX or TX
            //}
            //else // in continuum mode so restart
            //{
            //    Display.K14 = 0; // click to restart continuum 
            //}

            btnHidden.Focus();


        } // autoBrightBox_Click


        //============================================================================ 
        //============================================================================ 
        // ke9ns add Scanner function
        //============================================================================ 
        //============================================================================ 
        private void ScanMenuItem_Click(object sender, EventArgs e)
        {
            if (ScanForm == null || ScanForm.IsDisposed)
                ScanForm = new ScanControl(this);
            ScanForm.Show();
            ScanForm.Focus();
            ScanForm.WindowState = FormWindowState.Normal; // ke9ns add

        }  //  ScanMenuItem_Click



        //===============================================================================================
        // ke9ns add GENERAL SWL BANDS here

        private void radBandGEN0_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("LMF"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_LMF_index = (band_LMF_index - 1 + band_LMF_register) % band_LMF_register;
                else
                    band_LMF_index = (band_LMF_index + 1) % band_LMF_register;
            }
            last_band = "LMF";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_LMF_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);

        } // MF or AM band in USA

        private void radBandGEN1_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();

            if (last_band.Equals("120M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                {
                    band_120m_index = (band_120m_index - 1 + band_120m_register) % band_120m_register;
                }
                else
                {
                    band_120m_index = (band_120m_index + 1) % band_120m_register; // ke9ns get the remainder as an index for the next bandstack
                }
            }
            last_band = "120M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_120m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 120m

        private void radBandGEN2_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("90M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_90m_index = (band_90m_index - 1 + band_90m_register) % band_90m_register;
                else
                    band_90m_index = (band_90m_index + 1) % band_90m_register;
            }
            last_band = "90M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_90m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 90m

        private void radBandGEN3_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("61M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_61m_index = (band_61m_index - 1 + band_61m_register) % band_61m_register;
                else
                    band_61m_index = (band_61m_index + 1) % band_61m_register;
            }
            last_band = "61M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_61m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 60m

        private void radBandGEN4_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("49M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_49m_index = (band_49m_index - 1 + band_49m_register) % band_49m_register;
                else
                    band_49m_index = (band_49m_index + 1) % band_49m_register;
            }
            last_band = "49M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_49m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 49m

        private void radBandGEN5_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("41M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_41m_index = (band_41m_index - 1 + band_41m_register) % band_41m_register;
                else
                    band_41m_index = (band_41m_index + 1) % band_41m_register;
            }
            last_band = "41M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_41m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 41m

        private void radBandGEN6_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("31M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_31m_index = (band_31m_index - 1 + band_31m_register) % band_31m_register;
                else
                    band_31m_index = (band_31m_index + 1) % band_31m_register;
            }
            last_band = "31M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_31m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } //31m

        private void radBandGEN7_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("25M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_25m_index = (band_25m_index - 1 + band_25m_register) % band_25m_register;
                else
                    band_25m_index = (band_25m_index + 1) % band_25m_register;
            }
            last_band = "25M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_25m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 25m

        private void radBandGEN8_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("22M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_22m_index = (band_22m_index - 1 + band_22m_register) % band_22m_register;
                else
                    band_22m_index = (band_22m_index + 1) % band_22m_register;
            }
            last_band = "22M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_22m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 22m

        private void radBandGEN9_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("19M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_19m_index = (band_19m_index - 1 + band_19m_register) % band_19m_register;
                else
                    band_19m_index = (band_19m_index + 1) % band_19m_register;
            }
            last_band = "19M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_19m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 19m

        private void radBandGEN10_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("16M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_16m_index = (band_16m_index - 1 + band_16m_register) % band_16m_register;
                else
                    band_16m_index = (band_16m_index + 1) % band_16m_register;
            }
            last_band = "16M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_16m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } //16m

        private void radBandGEN11_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("14M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_14m_index = (band_14m_index - 1 + band_14m_register) % band_14m_register;
                else
                    band_14m_index = (band_14m_index + 1) % band_14m_register;
            }
            last_band = "14M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_14m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 14m

        private void radBandGEN12_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("13M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_13m_index = (band_13m_index - 1 + band_13m_register) % band_13m_register;
                else
                    band_13m_index = (band_13m_index + 1) % band_13m_register;
            }
            last_band = "13M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_13m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        } // 13m 

        private void radBandGEN13_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("11M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_11m_index = (band_11m_index - 1 + band_11m_register) % band_11m_register;
                else
                    band_11m_index = (band_11m_index + 1) % band_11m_register;
            }
            last_band = "11M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_11m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@")) filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);

        } // 11m


        //==========================================================================
        // ke9ns add RIGHT CLICK to add bandstack to list
        private void radBand160_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right)) // regband is 1 when control key held down
            {
                if (band_160m_register < 10)
                    DB.AddBandStack("160M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click



        } //  radBand160_MouseDown

        private void radBand80_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_80m_register < 10)
                    DB.AddBandStack("80M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }//  radBand80_MouseDown

        private void radBand60_MouseDown(object sender, MouseEventArgs e)
        {
            // channelized

        }

        private void radBand40_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_40m_register < 10)
                    DB.AddBandStack("40M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq

                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click

        }

        private void radBand30_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_30m_register < 10)
                    DB.AddBandStack("30M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }

        private void radBand20_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_20m_register < 10)
                    DB.AddBandStack("20M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }

        private void radBand17_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_17m_register < 10)
                    DB.AddBandStack("17M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click
        }

        private void radBand15_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_15m_register < 10)
                    DB.AddBandStack("15M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_12m_register < 10)
                    DB.AddBandStack("12M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_10m_register < 10)
                    DB.AddBandStack("10M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_6m_register < 10)
                    DB.AddBandStack("6M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN0_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_LMF_register < 10)
                    DB.AddBandStack("LMF", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_120m_register < 10)
                    DB.AddBandStack("120M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_90m_register < 10)
                    DB.AddBandStack("90M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN3_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_61m_register < 10)
                    DB.AddBandStack("61M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN4_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_49m_register < 10)
                    DB.AddBandStack("49M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                if (band_160m_register < 10)
                    UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN5_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_41m_register < 10)
                    DB.AddBandStack("41M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_31m_register < 10)
                    DB.AddBandStack("31M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN7_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_25m_register < 10)
                    DB.AddBandStack("25M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN8_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_22m_register < 10)
                    DB.AddBandStack("22M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN9_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_19m_register < 10)
                    DB.AddBandStack("19M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_16m_register < 10)
                    DB.AddBandStack("16M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN11_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_14m_register < 10)
                    DB.AddBandStack("14M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_13m_register < 10)
                    DB.AddBandStack("13M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGEN13_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_11m_register < 10)
                    DB.AddBandStack("11M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF0_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf0_register < 10)
                    DB.AddBandStack("VHF0", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf1_register < 10)
                    DB.AddBandStack("VHF1", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf2_register < 10)
                    DB.AddBandStack("VHF2", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF3_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf3_register < 10)
                    DB.AddBandStack("VHF3", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF4_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf4_register < 10)
                    DB.AddBandStack("VHF4", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF5_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf5_register < 10)
                    DB.AddBandStack("VHF5", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }



        private void radBandVHF6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf6_register < 10)
                    DB.AddBandStack("VHF6", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF7_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf7_register < 10)
                    DB.AddBandStack("VHF7", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF8_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf8_register < 10)
                    DB.AddBandStack("VHF8", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF9_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf9_register < 10)
                    DB.AddBandStack("VHF9", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf10_register < 10)
                    DB.AddBandStack("VHF10", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF11_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf11_register < 10)
                    DB.AddBandStack("VHF11", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf12_register < 10)
                    DB.AddBandStack("VHF12", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF13_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf13_register < 10)
                    DB.AddBandStack("VHF13", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6), ClickTuneDisplay, ptbDisplayZoom.Value, center_frequency); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        //====================================================================================================
        // ke9ns
        public bool SWLFORM
        {
            get
            {
                return false;
            }
            set
            {
                if (SwlForm == null || SwlForm.IsDisposed) SwlForm = new SwlControl(this); // ke9ns add communicate with swl list controls

                SwlForm.Show();
                SwlForm.Focus();
                SwlForm.WindowState = FormWindowState.Normal; // ke9ns add


                // = value;
            }
        }

        //====================================================================================================
        //====================================================================================================
        // ke9ns add Thread routine
        private void spotterMenu_Click(object sender, EventArgs e)
        {
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            SpotForm.Show();
            SpotForm.Focus();
        }

        #endregion

        #region Test and Calibration Routines

        public static bool FreqCalibrationRunning = false;
        public bool CalibrateFreq(float freq)
        {
            if (!chkPower.Checked)
            {
                MessageBox.Show("Power must be on in order to calibrate Frequency.", "Power Is Off",
                    MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }
            calibration_running = true;
            // JanusAudio.FreqCorrectionFactor = 1.0;
            SetupForm.HPSDRFreqCorrectFactor = 1.0;         // TURN-OFF CORRECTION

            string vfo_freq_text = txtVFOAFreq.Text;		// save current frequency
            bool rit_on = chkRIT.Checked;					// save current RIT state
            chkRIT.Checked = false;							// set RIT to Off
            int rit_value = (int)udRIT.Value;				// save current RIT value
            udRIT.Value = 0;								// set RIT Value to 0
            VFOAFreq = freq;								// set frequency to passed value

            Thread.Sleep(1000);                             // wait for changes to take effect

            int ss = 0;
            int fft_size = specRX.GetSpecRX(0).FFTSize;     // get fft_size
            double[,] buf = new double[fft_size, 2];        // buffer for complex spectrum data
            double[] sum = new double[fft_size];            // buffer for "averaged" spectrum data

            for (int i = 0; i < 10; i++)                    // average 10 spectra to reduce noise
            {
                fixed (double* ptr = &buf[0, 0])
                    SpecHPSDRDLL.SnapSpectrum(0, ss, 0, ptr);                   // get a spectrum
                for (int j = 0; j < fft_size; j++)
                    sum[j] += buf[j, 0] * buf[j, 0] + buf[j, 1] * buf[j, 1];    // compute magnitude and add to "average"
                Thread.Sleep(50);                                               // wait a little for noise to change
            }
            const double cal_range = 2500.0;                                    // look +/- this much from current freq to find the calibration signal
            double bin_width = (double)(sample_rate1) / (double)fft_size;
            int offset = (int)(cal_range / bin_width);
            double max = double.MinValue;
            int max_index = 0;
            for (int i = fft_size / 2 - offset; i <= fft_size / 2 + offset; i++)// find the bin with the largest signal
            {
                if (sum[i] > max)
                {
                    max = sum[i];
                    max_index = i;
                }
            }

            // Calculate the frequency difference between the known signal and the measured signal
            double diff = bin_width * (fft_size / 2 - max_index);
            double correct_factor = 1.0d - ((diff / (double)(freq * 1e6)));
            // JanusAudio.FreqCorrectionFactor = correct_factor;
            SetupForm.HPSDRFreqCorrectFactor = correct_factor;  //TURN-ON CORRECTION

            SetupForm.RXOnly = rx_only;				    	// restore RX Only setting
            chkRIT.Checked = rit_on;						// restore RIT state
            RITValue = rit_value;							// restore RIT value
            VFOAFreq = float.Parse(vfo_freq_text);			// restore frequency
            calibration_running = false;

            return true;
        }

        public bool CalibrateLevel(float level, float freq, Progress progress, bool suppress_errors)
        {
            // Calibration routine called by Setup Form.
            bool ret_val = false;
            calibration_running = true;
            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate RX Level.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                return false;
            }

            int ss = 0;
            int fft_size = specRX.GetSpecRX(0).FFTSize;     // get fft_size
            double[,] buf = new double[fft_size, 2];        // buffer for complex spectrum data
            double[] sum = new double[fft_size];            // buffer for "averaged" spectrum data
            // const double cal_range = 2500.0;                // look +/- this much from current freq to find the calibration signal
            //  double bin_width = (double)(sample_rate1) / (double)fft_size;
            //  int offset = (int)(cal_range / bin_width);
            //  double maxsumsq = double.MinValue;

            int iterations = 20;                            // number of samples to average

            //~~~~~

            double vfoa = VFOAFreq;								// save current VFOA

            bool rit_on = chkRIT.Checked;						// save current RIT On
            chkRIT.Checked = false;								// turn RIT off
            int rit_val = (int)udRIT.Value;						// save current RIT value

            string display = comboDisplayMode.Text;
            comboDisplayMode.Text = "Panadapter";
            // comboDisplayMode.Text = "Off";

            //  bool polyphase = SetupForm.Polyphase;				// save current polyphase setting
            //  SetupForm.Polyphase = false;						// disable polyphase

            int dsp_buf_size = SetupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
            SetupForm.DSPPhoneRXBuffer = 16384;					// set DSP Buffer Size to 16384

            //  Filter filter = RX1Filter;						// save current filter

            DSPMode dsp_mode = rx1_dsp_mode;				// save current DSP demod mode
            RX1DSPMode = DSPMode.AM;						// set mode to CWU

            VFOAFreq = freq;									// set VFOA frequency

            //  Filter am_filter = RX1Filter;					// save current AM filter
            //  RX1Filter = Filter.F2;						   // set filter to 500Hz

            bool step_attn = SetupForm.HermesEnableAttenuator;
            SetupForm.HermesEnableAttenuator = false;
            PreampMode preamp = RX1PreampMode;				// save current preamp mode
            RX1PreampMode = PreampMode.HPSDR_ON;			// set to high

            MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
            CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

            //   bool display_avg = chkDisplayAVG.Checked;			// save current average state
            //   chkDisplayAVG.Checked = false;

            float old_multimeter_cal = rx1_meter_cal_offset;
            float old_display_cal = rx1_display_cal_offset;

            int progress_divisor;
            if (alexpresent)
            {
                progress_divisor = 390;
            }
            else
            {
                progress_divisor = 120;
            }

            comboPreamp.Enabled = false;
            comboDisplayMode.Enabled = false;
            comboMeterRXMode.Enabled = false;

            progress.SetPercent(0.0f);
            int counter = 0;
            Thread.Sleep(2000);
            btnZeroBeat_Click(this, EventArgs.Empty);
            // RX1Filter = Filter.F6;

            //  DisableAllFilters();
            //  DisableAllModes();
            //  VFOLock = true;
            // float max = float.MinValue;
            /*  calibration_mutex.WaitOne();
              Thread.Sleep(7000);
              fixed (float* ptr = &a[0])
                  SpecHPSDRDLL.GetPixels(0, ptr, ref flag);
              calibration_mutex.ReleaseMutex();
              float max = float.MinValue;
              float avg = 0;
              int max_index = 0;
           
              for (int i = 0; i < buff_size; i++)						// find the maximum signal
              {
                  avg += a[i];
                  if (a[i] > max)
                  {
                      max = a[i];
                      max_index = i;
                  }
              }
              avg -= max;
              avg /= buff_size; 

               if (max < (avg + 30))
               {
                   MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                       "Please use a larger signal for frequency calibration.",
                       "Calibration Error - Weak Signal",
                       MessageBoxButtons.OK,
                       MessageBoxIcon.Error);
                   ret_val = false;
                   goto end;
               } */
            double cal_range = 20000.0;        // look +/- this much from current freq to find the calibration signal
            //  double cal_range = (double)(sample_rate1 / 2.0 - 1);
            double bin_width = (double)(sample_rate1) / (double)fft_size;
            int offset = (int)(cal_range / bin_width);
            double maxsumsq = double.MinValue;
            double avgmag = 0;

            for (int i = 0; i < iterations; i++)
            {
                fixed (double* ptr = &buf[0, 0])
                    SpecHPSDRDLL.SnapSpectrum(0, ss, 0, ptr);                   // get a spectrum

                for (int j = fft_size / 2 - offset; j <= fft_size / 2 + offset; j++)
                    // sum[j] += buf[j, 0] * buf[j, 0] + buf[j, 1] * buf[j, 1];    // compute magnitude^2 for each bin and add to previous for averaging
                    sum[j] += 10.0 * Math.Log10(buf[j, 0] * buf[j, 0] + buf[j, 1] * buf[j, 1]);     // compute dB level for each bin and add to previous for averaging
                Thread.Sleep(20);                                               // wait a little for noise to change
            }

            for (int i = fft_size / 2 - offset; i <= fft_size / 2 + offset; i++)// find the max value in any bin
            {
                sum[i] /= iterations; // convert the sum to the average value for the bin
                avgmag += sum[i];
                if (sum[i] > maxsumsq)
                    maxsumsq = sum[i];
            }

            avgmag /= offset * 2.0;

            // avg2 = 10.0f * (float)Math.Log10(maxsumsq /  Math.Pow(fft_size, 2));

            // if (maxsumsq / avgmag < 1000.0)
            if ((maxsumsq - avgmag) < 30.0) // compare the max bin with the average bin value
            {
                MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                    "Please use a larger signal for frequency calibration.",
                    "Calibration Error - Weak Signal",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                ret_val = false;
                goto end;
            }
            //clean variables for next use
            maxsumsq = 0.0;
            Array.Clear(sum, 0, fft_size);


            // RX1DisplayCalOffset = 0.0f;
            rx1_meter_cal_offset = 0.0f;
            rx1_display_cal_offset = 0.0f;
            float num = 0.0f, num2 = 0.0f, avg2 = 0.0f;
            float avg = 0.0f;
            // get the value of the signal strength meter
            Thread.Sleep(1000);
            for (int i = 0; i < 50; i++)
            {
                num += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                Thread.Sleep(50);
                if (!progress.Visible)
                    goto end;
                else progress.SetPercent((float)((float)++counter / progress_divisor));
            }
            avg = num / 50.0f;


            RX1PreampMode = PreampMode.HPSDR_OFF;
            Thread.Sleep(100);

            // get the value of the signal strength meter
            num2 = 0.0f;
            Thread.Sleep(1000);
            for (int i = 0; i < 50; i++)
            {
                num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                Thread.Sleep(50);
                if (!progress.Visible)
                    goto end;
                else progress.SetPercent((float)((float)++counter / progress_divisor));
            }
            avg2 = num2 / 50.0f;

            float off_offset = avg2 - avg;

            rx1_preamp_offset[(int)PreampMode.HPSDR_OFF] = -off_offset;
            rx1_preamp_offset[(int)PreampMode.HPSDR_ON] = 0.0f;
            rx2_preamp_offset[(int)PreampMode.HPSDR_OFF] = -off_offset;
            rx2_preamp_offset[(int)PreampMode.HPSDR_ON] = 0.0f;

            if (alexpresent && !ANAN10Present && !ANAN10EPresent && !ANAN7000DPresent && !ANAN8000DPresent && !ORIONMKIIPresent)
            {
                RX1PreampMode = PreampMode.HPSDR_MINUS10; //-10dB
                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f;
                Thread.Sleep(1000);
                for (int i = 0; i < 50; i++)
                {
                    num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                    Thread.Sleep(50);
                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 50.0f;

                float minus10_offset = avg2 - avg;
                rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS10] = -minus10_offset;


                RX1PreampMode = PreampMode.HPSDR_MINUS20; //-20dB
                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f;
                Thread.Sleep(1000);
                for (int i = 0; i < 50; i++)
                {
                    num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                    Thread.Sleep(50);
                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 50.0f;

                float minus20_offset = avg2 - avg;
                rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS20] = -minus20_offset;


                RX1PreampMode = PreampMode.HPSDR_MINUS30; //-30dB
                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f; avg2 = 0.0f;
                Thread.Sleep(1000);
                for (int i = 0; i < 50; i++)
                {
                    num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                    Thread.Sleep(50);
                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 50.0f;

                float minus30_offset = avg2 - avg;
                rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS30] = -minus30_offset;

                RX1PreampMode = PreampMode.HPSDR_MINUS40; //-40dB

                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f;
                Thread.Sleep(1000);
                for (int i = 0; i < 50; i++)
                {
                    num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                    Thread.Sleep(50);
                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 50.0f;

                float minus40_offset = avg2 - avg;
                rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS40] = -minus40_offset;

                RX1PreampMode = PreampMode.HPSDR_MINUS50;

                Thread.Sleep(100);

                // get the value of the signal strength meter
                num2 = 0.0f;
                Thread.Sleep(1000);
                for (int i = 0; i < 50; i++)
                {
                    num2 += WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                    Thread.Sleep(50);
                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 50.0f;

                float minus50_offset = avg2 - avg;
                rx1_preamp_offset[(int)PreampMode.HPSDR_MINUS50] = -minus50_offset;

                System.Console.WriteLine("minus10_offset: " + minus10_offset);
                System.Console.WriteLine("minus20_offset: " + minus20_offset);
                System.Console.WriteLine("minus30_offset: " + minus30_offset);
                System.Console.WriteLine("minus40_offset: " + minus40_offset);
                System.Console.WriteLine("minus50_offset: " + minus50_offset);
            }
            System.Console.WriteLine("off_offset: " + off_offset);
            System.Console.WriteLine("Counter @ end: " + counter);

            RX1PreampMode = PreampMode.HPSDR_ON;
            Thread.Sleep(5000);

            cal_range = 2500.0;                         // look +/- this much from current freq to find the calibration signal
            offset = (int)(cal_range / bin_width);

            for (int i = 0; i < iterations; i++)            // average 10 spectra to reduce noise
            {
                fixed (double* ptr = &buf[0, 0])
                    SpecHPSDRDLL.SnapSpectrum(0, ss, 0, ptr);                   // get a spectrum
                for (int j = fft_size / 2 - offset; j <= fft_size / 2 + offset; j++)
                    sum[j] += buf[j, 0] * buf[j, 0] + buf[j, 1] * buf[j, 1];    // compute magnitude^2 and add to sum
                Thread.Sleep(20);                                               // wait a little for noise to change
            }
            for (int i = fft_size / 2 - offset; i <= fft_size / 2 + offset; i++)// find the max value in any bin
            {
                if (sum[i] > maxsumsq)
                    maxsumsq = sum[i];
            }

            avg2 = 10.0f * (float)Math.Log10(maxsumsq / iterations / Math.Pow(fft_size, 2));


            /*    num2 = 0.0f; avg2 = 0.0f;
                for (int i = 0; i < 20; i++)
                {
                    calibration_mutex.WaitOne();
                    Thread.Sleep(7000);
                    fixed (float* ptr = &a[0])
                        // DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP
                        SpecHPSDRDLL.GetPixels(0, ptr, ref flag);
                    calibration_mutex.ReleaseMutex();
                    max = float.MinValue;						// find the max spectrum value
                    for (int j = 0; j < buff_size; j++)
                        if (a[j] > max) max = a[j];

                    num2 += max;

                    Thread.Sleep(100);

                    if (!progress.Visible)
                        goto end;
                    else progress.SetPercent((float)((float)++counter / progress_divisor));
                }
                avg2 = num2 / 20.0f;  */

            // calculate the difference between the current value and the correct multimeter value
            float diff = level - (avg + rx1_meter_cal_offset + rx1_preamp_offset[(int)rx1_preamp_mode]);
            rx1_meter_cal_offset += diff;
            rx2_meter_cal_offset = rx1_meter_cal_offset;
            rx_meter_cal_offset_by_radio[(int)current_hpsdr_model] = rx1_meter_cal_offset;

            // calculate the difference between the current value and the correct spectrum value
            diff = level - (avg2 + rx1_display_cal_offset + rx1_preamp_offset[(int)rx1_preamp_mode]);

            /*     for (int i = 0; i < (int)Band.LAST; i++)
                 {
                     rx1_level_table[i][0] = (float)Math.Round(diff, 3);
                     //rx1_level_table[i][1] = rx1_preamp_offset[(int)rx1_preamp_mode];
                     rx1_level_table[i][2] = (float)Math.Round(rx1_meter_cal_offset, 3);

                     if (!rx2_preamp_present)
                     {
                         rx2_level_table[i][0] = (float)Math.Round(diff, 3);
                         //rx1_level_table[i][1] = rx1_preamp_offset[(int)rx1_preamp_mode];
                         rx2_level_table[i][2] = (float)Math.Round(rx1_meter_cal_offset, 3);
                     }
                 } */

            RX1DisplayCalOffset += diff;
            rx_display_cal_offset_by_radio[(int)current_hpsdr_model] = RX1DisplayCalOffset;

            //   if (!rx2_preamp_present)
            //     RX2DisplayCalOffset = RX1DisplayCalOffset;

            ret_val = true;

        end:
            if (!progress.Visible) progress.Text = "";
            progress.Hide();
            //  EnableAllFilters();
            //  EnableAllModes();
            //  VFOLock = false;
            comboPreamp.Enabled = true;
            comboDisplayMode.Enabled = true;
            comboMeterRXMode.Enabled = true;

            if (ret_val == false)
            {
                rx1_meter_cal_offset = old_multimeter_cal;
                rx1_display_cal_offset = old_display_cal;
            }

            comboDisplayMode.Text = display;
            chkRIT.Checked = rit_on;							// restore RIT on
            udRIT.Value = rit_val;								// restore RIT value
            //SetupForm.RXOnly = rx_only;						// restore RX Only			
            //  DisplayAVG = display_avg;							// restore AVG value
            RX1PreampMode = preamp;					        	// restore preamp value
            SetupForm.HermesEnableAttenuator = step_attn;
            // RX1Filter = am_filter;							// restore AM filter
            RX1DSPMode = dsp_mode;						    	// restore DSP mode
            // RX1Filter = filter;								// restore filter
            //  if (dsp_buf_size != 4096)
            //  chkPower.Checked = false;						// go to standby
            SetupForm.DSPPhoneRXBuffer = dsp_buf_size;		    // restore DSP Buffer Size
            VFOAFreq = vfoa;									// restore vfo frequency
            // if (dsp_buf_size != 4096)
            //  {
            //  Thread.Sleep(2000);
            //  chkPower.Checked = true;
            //  }
            CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
            // SetupForm.Polyphase = polyphase;					// restore polyphase

            //			Debug.WriteLine("multimeter_cal_offset: "+multimeter_cal_offset);
            //			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
            //			MessageBox.Show("multimeter_cal_offset: "+multimeter_cal_offset.ToString()+"\n"+
            //				"display_cal_offset: "+display_cal_offset.ToString());

            // break;

            // }

            calibration_running = false;
            return ret_val;
        }

        public bool CalibrateRX2Level(float level, float freq, Progress progress, bool suppress_errors)
        {
            // Calibration routine called by Setup Form.
            bool ret_val = false;
            calibration_running = true;
            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate RX2 Level.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                return false;
            }

            float[] a = new float[Display.BUFFER_SIZE];

            bool rit_on = chkRIT.Checked;						// save current RIT On
            chkRIT.Checked = false;								// turn RIT off
            int rit_val = (int)udRIT.Value;						// save current RIT value

            double vfoa = VFOAFreq;								// save current VFOA

            string display = comboDisplayMode.Text;
            comboDisplayMode.Text = "Spectrum";

            int dsp_buf_size = SetupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
            SetupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

            Filter filter = RX1Filter;						// save current filter

            DSPMode dsp_mode = rx1_dsp_mode;				// save current DSP demod mode
            DSPMode dsp2_mode = rx2_dsp_mode;				// save current DSP demod mode

            RX1DSPMode = DSPMode.DSB;						// set mode to DSB
            //Thread.Sleep(50);
            RX2DSPMode = DSPMode.DSB;						// set mode to DSB

            VFOAFreq = freq;									// set VFOA frequency
            //Thread.Sleep(100);
            VFOBFreq = freq;
            //Thread.Sleep(100);

            bool duplex = full_duplex;
            FullDuplex = true;

            bool rx2 = rx2_enabled;
            RX2Enabled = true;

            Filter rx1_filter = RX1Filter;					// save current AM filter
            UpdateRX1Filters(-500, 500);

            Filter rx2_filter = RX2Filter;
            UpdateRX2Filters(-500, 500);

            // bool rx1_preamp = chkRX1Preamp.Checked;					// save current preamp mode
            // chkRX1Preamp.Checked = false;							// turn preamp off
            //Thread.Sleep(50);

            bool rx2_preamp = chkRX2Preamp.Checked;					// save current preamp mode
            chkRX2Preamp.Checked = false;							// turn preamp off
            Thread.Sleep(50);

            //  PreampMode preamp = RX2PreampMode;				// save current preamp mode
            RX2PreampMode = PreampMode.HPSDR_ON;		    	// set to high

            MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
            CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

            MeterRXMode rx2_meter = RX2MeterMode;
            RX2MeterMode = MeterRXMode.OFF;

            bool display_avg = chkDisplayAVG.Checked;			// save current average state
            chkDisplayAVG.Checked = false;
            chkDisplayAVG.Checked = true;						// set average state to off

            float old_multimeter_cal = rx2_meter_cal_offset;
            float old_display_cal = rx2_display_cal_offset;

            chkRX1Preamp.Enabled = false;
            chkRX2Preamp.Enabled = false;
            comboDisplayMode.Enabled = false;
            comboMeterRXMode.Enabled = false;
            comboRX2MeterMode.Enabled = false;
            int progress_divisor;

            //  if (alexpresent)
            //  {
            //      progress_divisor = 390;
            //  }
            //  else
            //  {
            progress_divisor = 120;
            //  }

            progress.SetPercent(0.0f);
            int counter = 0;

            Thread.Sleep(2000);
            btnZeroBeat_Click(this, EventArgs.Empty);
            RX1Filter = Filter.F6;
            chkDisplayAVG.Checked = false;

            Thread.Sleep(200);

            DisableAllFilters();
            DisableAllModes();
            VFOLock = CheckState.Indeterminate;

            calibration_mutex.WaitOne();
            //fixed (float* ptr = &a[0])
            //    DttSP.GetSpectrum(2, ptr);		// get the spectrum values
            calibration_mutex.ReleaseMutex();

            float max = float.MinValue;
            float avg = 0;
            // int max_index = 0;

            for (int i = 0; i < 4095; i++)						// find the maximum signal
            {
                avg += a[i];
                if (a[i] > max)
                {
                    max = a[i];
                    // max_index = i;
                }
            }
            avg -= max;
            avg /= 4095;

            if (max < (avg + 30))
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                        "Please use a larger signal for frequency calibration.",
                        "Calibration Error - Weak Signal",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
                ret_val = false;
                goto end2;
            }

            rx2_meter_cal_offset = 0.0f;
            RX2DisplayCalOffset = 0.0f;
            float num = 0.0f; float num2 = 0.0f; float avg2 = 0.0f;
            avg = 0.0f;
            // get the value of the signal strength meter
            for (int i = 0; i < 50; i++)
            {
                num += WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.SIGNAL_STRENGTH);
                Thread.Sleep(50);
                if (!progress.Visible)
                    goto end2;
                else progress.SetPercent((float)((float)++counter / 120));
            }
            avg = num / 50.0f;


            RX2PreampMode = PreampMode.HPSDR_OFF;
            //RX1PreampMode = PreampMode.HPSDR_OFF;
            Thread.Sleep(200);

            // get the value of the signal strength meter
            num2 = 0.0f;
            Thread.Sleep(1000);
            for (int i = 0; i < 50; i++)
            {
                num2 += WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.SIGNAL_STRENGTH);
                Thread.Sleep(50);
                if (!progress.Visible)
                    goto end2;
                else progress.SetPercent((float)((float)++counter / progress_divisor));
            }
            avg2 = num2 / 50.0f;

            float off_offset = avg2 - avg;

            rx2_preamp_offset[(int)PreampMode.HPSDR_OFF] = -off_offset;
            rx2_preamp_offset[(int)PreampMode.HPSDR_ON] = 0.0f;
            RX2PreampMode = PreampMode.HPSDR_ON;
            // RX2PreampMode = PreampMode.OFF;
            Thread.Sleep(200);

            num2 = 0.0f;
            for (int i = 0; i < 20; i++)
            {
                calibration_mutex.WaitOne();
                //fixed (float* ptr = &a[0])
                //    DttSP.GetSpectrum(2, ptr);		// read again to clear out changed DSP
                calibration_mutex.ReleaseMutex();

                max = float.MinValue;						// find the max spectrum value
                for (int j = 0; j < Display.BUFFER_SIZE; j++)
                    if (a[j] > max) max = a[j];

                num2 += max;
                // num2 += a[max_index];
                Thread.Sleep(100);

                if (!progress.Visible)
                    goto end2;
                else progress.SetPercent((float)((float)++counter / 120));
            }
            avg2 = num2 / 20.0f;

            // calculate the difference between the current value and the correct multimeter value
            float diff = level - (avg + rx2_meter_cal_offset + rx2_preamp_offset[(int)rx2_preamp_mode]);
            rx2_meter_cal_offset += diff;

            // calculate the difference between the current value and the correct spectrum value
            diff = level - (avg2 + rx2_display_cal_offset + rx2_preamp_offset[(int)rx2_preamp_mode]);
            RX2DisplayCalOffset = diff;
            //UpdateDisplayOffsets();

            /*   for (int i = 0; i < (int)Band.LAST; i++)
               {
                   rx2_level_table[i][0] = (float)Math.Round(diff, 3);//rx2_display_cal_offset, 3);
                   //rx2_level_table[i][1] = (float)Math.Round(-fwc_preamp_offset, 3);
                   rx2_level_table[i][2] = (float)Math.Round(rx2_meter_cal_offset, 3);
               } */
            // RX2DisplayCalOffset += diff;
            ret_val = true;

        end2:
            if (!progress.Visible) progress.Text = "";
            progress.Hide();
            EnableAllFilters();
            EnableAllModes();
            VFOLock = CheckState.Unchecked;
            chkRX1Preamp.Enabled = true;
            chkRX2Preamp.Enabled = true;
            comboDisplayMode.Enabled = true;
            comboMeterRXMode.Enabled = true;
            comboRX2MeterMode.Enabled = true;

            if (ret_val == false)
            {
                rx2_meter_cal_offset = old_multimeter_cal;
                rx2_display_cal_offset = old_display_cal;
            }

            RX2Enabled = rx2;
            //Thread.Sleep(50);
            comboDisplayMode.Text = display;
            chkRIT.Checked = rit_on;							// restore RIT on
            udRIT.Value = rit_val;								// restore RIT value
            //SetupForm.RXOnly = rx_only;						// restore RX Only			
            DisplayAVG = display_avg;							// restore AVG value
            // chkRX1Preamp.Checked = rx1_preamp;					// restore preamp value
            chkRX2Preamp.Checked = rx2_preamp;
            RX1Filter = rx1_filter;							// restore AM filter
            RX1DSPMode = dsp_mode;							// restore DSP mode*
            //Thread.Sleep(50);
            RX2Filter = rx2_filter;							// restore AM filter
            RX2DSPMode = dsp2_mode;							// restore DSP mode
            RX1Filter = filter;								// restore filter
            if (dsp_buf_size != 4096)
                chkPower.Checked = false;						// go to standby
            SetupForm.DSPPhoneRXBuffer = dsp_buf_size;				// restore DSP Buffer Size
            VFOAFreq = vfoa;									// restore vfo frequency
            //Thread.Sleep(100);
            if (dsp_buf_size != 4096)
            {
                Thread.Sleep(100);
                chkPower.Checked = true;
            }
            CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
            RX2MeterMode = rx2_meter;

            //			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
            //			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
            //			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
            //				"display_cal_offset: "+display_cal_offset.ToString());

            calibration_running = false;
            return ret_val;
        }

        public bool CalibratePAGain(Progress progress, bool[] run, int target_watts) // calibrate PA Gain values
        {
            //			HiPerfTimer t1 = new HiPerfTimer();
            //			t1.Start();

            bool ret_val = false;

            if (!chkPower.Checked)
            {
                MessageBox.Show("START must be active in order to calibrate PA Gain.", "START is not presently active",
                    MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }

            calibrating = true;

            DSPMode dsp_mode = rx1_dsp_mode;			// save current wdsp mode
            RX1DSPMode = DSPMode.USB;					// set wdsp mode to CWL

            double vfo_freq = VFOAFreq;						// save current frequency

            int pwr = ptbPWR.Value;						// save current pwr level

            bool tx_eq = chkTXEQ.Checked;
            chkTXEQ.Checked = false;

            bool dx = chkDX.Checked;
            chkDX.Checked = false;

            bool cpdr = chkCPDR.Checked;
            chkCPDR.Checked = false;

            DisableAllFilters();
            DisableAllModes();
            VFOLock = CheckState.Checked;
            comboPreamp.Enabled = false;
            comboDisplayMode.Enabled = false;

            int on_time = 2500;
            int off_time = 2500;

            //switch (current_soundcard)
            //{
            //    case SoundCard.AUDIGY_2_ZS:
            //        on_time = 3000;
            //        off_time = 4000;
            //        break;
            //    case SoundCard.DELTA_44:
            //        on_time = 2000;
            //        off_time = 2000;
            //        break;
            //}

            progress.SetPercent(0.0f);

            float[] band_freqs = { 1.85f, 3.75f, 5.3715f, 7.15f, 10.125f, 14.175f, 18.1f, 21.300f, 24.9f, 28.4f, 50.4f };

            int[] max_pwr = { 100, 100, 100, 100, 100, 100, 100, 100, 75, 75, 75 };

            if (run[0]) SetupForm.PAGain160 = 49.0f;
            if (run[1]) SetupForm.PAGain80 = 49.0f;
            if (run[2]) SetupForm.PAGain60 = 49.0f;
            if (run[3]) SetupForm.PAGain40 = 49.0f;
            if (run[4]) SetupForm.PAGain30 = 49.0f;
            if (run[5]) SetupForm.PAGain20 = 49.0f;
            if (run[6]) SetupForm.PAGain17 = 49.0f;
            if (run[7]) SetupForm.PAGain15 = 49.0f;
            if (run[8]) SetupForm.PAGain12 = 49.0f;
            if (run[9]) SetupForm.PAGain10 = 49.0f;
            if (run[10]) SetupForm.PAGain6 = 49.0f;

            for (int i = 0; i < band_freqs.Length; i++)
            {
                if (run[i])
                {
                    int error_count = 0;
                    VFOLock = CheckState.Unchecked;
                    VFOAFreq = band_freqs[i];				// set frequency
                    VFOLock = CheckState.Checked;
                    ptbPWR.Value = Math.Min(target_watts, max_pwr[i]);
                    int target = ptbPWR.Value;

                    bool good_result = false;
                    while (good_result == false)
                    {
                        /*Audio.SwitchCount = 4;
                        Audio.RampDown = true;
                        Audio.NextMox = true;*/
                        Audio.SourceScale = 1.0;
                        Audio.TXInputSignal = Audio.SignalSource.SINE;
                        //Audio.TXOutputSignal = Audio.SignalSource.SINE;
                        tuning = true;
                        chkMOX.Checked = true;

                        for (int j = 0; j < on_time / 100; j++)
                        {
                            Thread.Sleep(100);
                            if (!progress.Visible)
                                goto end;
                        }

                        double watts = 0.0;
                        //pa_power_mutex.WaitOne();
                        //watts = PAPower(pa_fwd_power);
                        watts = alex_fwd; // (double)computeAlexFwdPower();       //HPSDR
                        //pa_power_mutex.ReleaseMutex();

                        chkMOX.Checked = false;
                        tuning = false;
                        /*Audio.RampDown = true;
                        Audio.NextMox = false;
                        Audio.SwitchCount = 4;*/
                        Audio.TXInputSignal = Audio.SignalSource.RADIO;
                        //Audio.TXOutputSignal = Audio.SignalSource.RADIO;

                        //Debug.WriteLine("watts: "+watts.ToString());

                        if (!progress.Visible)
                            goto end;

                        if (Math.Abs(watts - target) > 2)
                        {
                            // convert to dBm
                            float diff_dBm = (float)Math.Round((WattsTodBm(watts) - WattsTodBm((double)target)), 3);

                            switch (i)										// fix gain value
                            {
                                case 0:
                                    if (SetupForm.PAGain160 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain160 = (float)Math.Max(38.8, SetupForm.PAGain160 - 2.0);
                                    }
                                    else SetupForm.PAGain160 += diff_dBm;
                                    break;
                                case 1:
                                    if (SetupForm.PAGain80 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain80 = (float)Math.Max(38.8, SetupForm.PAGain80 - 2.0);
                                    }
                                    else SetupForm.PAGain80 += diff_dBm;
                                    break;
                                case 2:
                                    if (SetupForm.PAGain60 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain60 = (float)Math.Max(38.8, SetupForm.PAGain60 - 2.0);
                                    }
                                    else SetupForm.PAGain60 += diff_dBm;
                                    break;
                                case 3:
                                    if (SetupForm.PAGain40 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain40 = (float)Math.Max(38.8, SetupForm.PAGain40 - 2.0);
                                    }
                                    else SetupForm.PAGain40 += diff_dBm;
                                    break;
                                case 4:
                                    if (SetupForm.PAGain30 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain30 = (float)Math.Max(38.8, SetupForm.PAGain30 - 2.0);
                                    }
                                    else SetupForm.PAGain30 += diff_dBm;
                                    break;
                                case 5:
                                    if (SetupForm.PAGain20 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain20 = (float)Math.Max(38.8, SetupForm.PAGain20 - 2.0);
                                    }
                                    else SetupForm.PAGain20 += diff_dBm;
                                    break;
                                case 6:
                                    if (SetupForm.PAGain17 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain17 = (float)Math.Max(38.8, SetupForm.PAGain17 - 2.0);
                                    }
                                    else SetupForm.PAGain17 += diff_dBm;
                                    break;
                                case 7:
                                    if (SetupForm.PAGain15 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain15 = (float)Math.Max(38.8, SetupForm.PAGain15 - 2.0);
                                    }
                                    else SetupForm.PAGain15 += diff_dBm;
                                    break;
                                case 8:
                                    if (SetupForm.PAGain12 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain12 = (float)Math.Max(38.8, SetupForm.PAGain12 - 2.0);
                                    }
                                    else SetupForm.PAGain12 += diff_dBm;
                                    break;
                                case 9:
                                    if (SetupForm.PAGain10 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain10 = (float)Math.Max(38.8, SetupForm.PAGain10 - 2.0);
                                    }
                                    else SetupForm.PAGain10 += diff_dBm;
                                    break;
                                case 10:
                                    if (SetupForm.PAGain6 + diff_dBm < 38.8)
                                    {
                                        if (++error_count > 6)
                                            goto error;

                                        SetupForm.PAGain6 = (float)Math.Max(38.8, SetupForm.PAGain6 - 2.0);
                                    }
                                    else SetupForm.PAGain6 += diff_dBm;
                                    break;
                            }
                        }
                        else good_result = true;
                        for (int j = 0; j < off_time / 100; j++)
                        {
                            Thread.Sleep(100);
                            if (!progress.Visible)
                                goto end;
                        }
                    }
                }
                progress.SetPercent((float)((float)(i + 1) / 10));
            }

            ret_val = true;

        end:
            if (!progress.Visible) progress.Text = "";
            progress.Hide();

            EnableAllFilters();
            EnableAllModes();
            VFOLock = CheckState.Unchecked;
            comboPreamp.Enabled = true;
            comboDisplayMode.Enabled = true;

            chkTXEQ.Checked = tx_eq;
            chkDX.Checked = dx;
            chkCPDR.Checked = cpdr;

            chkMOX.Checked = false;
            tuning = false;
            //Audio.SwitchCount = 4;
            Audio.TXInputSignal = Audio.SignalSource.RADIO;
            Audio.TXOutputSignal = Audio.SignalSource.RADIO;

            RX1DSPMode = dsp_mode;							// restore wdsp mode
            VFOAFreq = vfo_freq;								// restore frequency
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            PWR = pwr;									// restore pwr level

            calibrating = false;

            //t1.Stop();
            //MessageBox.Show(t1.Duration.ToString());
            return ret_val;

        error:
            MessageBox.Show("Calculated gain is invalid.  Please double check connections and try again.\n"/* +
                "If this problem persists, contact support@flex-radio.com for support."*/,
                "Invalid Gain Found",
                MessageBoxButtons.OK,
                MessageBoxIcon.Error);
            goto end;
        }

        public bool CalibratePAGain2(Progress progress, bool[] run, bool suppress_warnings)
        {
            return true;
        }

        public bool LowPowerPASweep(Progress progress, int power) // calibrate PA Gain values
        {
            //			HiPerfTimer t1 = new HiPerfTimer();
            //			t1.Start();

            bool ret_val = false;

            if (!chkPower.Checked)
            {
                MessageBox.Show("Power must be on in order to run PA Sweep.", "Power Is Off",
                    MessageBoxButtons.OK, MessageBoxIcon.Stop);
                return false;
            }

            calibrating = true;

            DSPMode dsp_mode = RX1DSPMode;				// save current DSP Mode
            RX1DSPMode = DSPMode.USB;					// set DSP Mode to USB

            double vfo_freq = VFOAFreq;						// save current frequency

            int pwr = PWR;						// save current pwr level
            PWR = power;						// set pwr level to 100W

            progress.SetPercent(0.0f);

            float[] band_freqs = { 1.9f, 3.75f, 5.3715f, 7.15f, 10.125f, 14.175f, 18.1f, 21.225f, 24.9f, 28.85f };

            for (int i = 0; i < band_freqs.Length; i++)
            {
                VFOAFreq = band_freqs[i];				// set frequency
                Audio.TXInputSignal = Audio.SignalSource.SINE;
                Audio.SourceScale = 1.0;
                chkMOX.Checked = true;
                for (int j = 0; j < 30; j++)
                {
                    Thread.Sleep(100);
                    if (!progress.Visible)
                        goto end;
                }
                chkMOX.Checked = false;
                Audio.TXInputSignal = Audio.SignalSource.RADIO;

                if (!progress.Visible)
                    goto end;

                for (int j = 0; j < 40; j++)
                {
                    Thread.Sleep(100);
                    if (!progress.Visible)
                        goto end;
                }
                if (!progress.Visible)
                    goto end;

                progress.SetPercent((float)((float)(i + 1) / 10));
            }

            ret_val = true;

        end:
            progress.Hide();
            chkMOX.Checked = false;
            Audio.TXInputSignal = Audio.SignalSource.RADIO;
            RX1DSPMode = dsp_mode;							// restore wdsp mode
            VFOAFreq = vfo_freq;								// restore frequency
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            PWR = pwr;									// restore pwr level

            calibrating = false;

            //t1.Stop();
            //MessageBox.Show(t1.Duration.ToString());
            return ret_val;
        }

        #endregion

        #region Properties
        // ======================================================
        // Properties
        // ======================================================

        private IntPtr n1mm_handle = IntPtr.Zero;
        public IntPtr N1MMHandle
        {
            get { return n1mm_handle; }
            set { n1mm_handle = value; }
        }

        IntPtr myHandle = IntPtr.Zero;
        bool selectByClick = false;
        private FocusMasterMode focus_master_mode = FocusMasterMode.None;
        public FocusMasterMode FocusMasterMode
        {
            get { return focus_master_mode; }
            set
            {
                focus_master_mode = value;
                n1mm_handle = IntPtr.Zero;

                if (value != FocusMasterMode.None)
                {
                    if (n1mm_delay == null)
                    {
                        n1mm_delay = new System.Timers.Timer(focus_master_delay);
                        n1mm_delay.Elapsed += new ElapsedEventHandler(n1mm_delay_Elapsed);
                        n1mm_delay.AutoReset = false;
                        n1mm_delay.Enabled = false;
                    }
                    else n1mm_delay.Enabled = false;
                }
                else
                {
                    if (n1mm_delay != null)
                        n1mm_delay.Enabled = false;
                }

                switch (value)
                {
                    case FocusMasterMode.Logger:
                        Thread n1mm_focus_thread = new Thread(new ThreadStart(PollN1MMPacket))
                        {
                            Name = "N1MM Packet Thread",
                            IsBackground = true,
                            Priority = ThreadPriority.BelowNormal
                        };
                        n1mm_focus_thread.Start();
                        break;
                    case FocusMasterMode.Click:
                        myHandle = Win32.GetForegroundWindow();
                        selectByClick = true;
                        SetFocusMaster(false);
                        SetFocusMaster(true);
                        // n1mm_delay.Enabled = true;
                        break;
                    case FocusMasterMode.Title:
                        //foreach (Process pList in Process.GetProcesses())
                        //{
                        //    if (pList.MainWindowTitle.Equals(focus_master_win_title))
                        //    {
                        //        n1mm_handle = pList.MainWindowHandle;
                        //    }
                        //}
                        break;
                    case FocusMasterMode.None:
                        SetFocusMaster(false);
                        //n1mm_handle = IntPtr.Zero;
                        break;
                }

                //if (value != FocusMasterMode.None)
                //{
                //    if (n1mm_delay == null)
                //    {
                //        n1mm_delay = new System.Timers.Timer(focus_master_delay);
                //        n1mm_delay.Elapsed += new ElapsedEventHandler(n1mm_delay_Elapsed);
                //        n1mm_delay.AutoReset = false;
                //        n1mm_delay.Enabled = false;
                //    }
                //    else n1mm_delay.Enabled = false;
                //}
                //else
                //{
                //    if (n1mm_delay != null)
                //    n1mm_delay.Enabled = false;
                //}

                //if (FocusMasterMode == FocusMasterMode.Click) SetFocusMaster(true);// n1mm_delay.Enabled = true;
            }
        }

        private int focus_master_delay = 2000;
        public int FocusMasterDelay
        {
            get { return focus_master_delay; }
            set
            {
                focus_master_delay = value;
                if (n1mm_delay != null)
                {
                    n1mm_delay.Interval = focus_master_delay;
                }
            }
        }

        private int focus_master_udp_port = 12060;
        public int FocusMasterUDPPort
        {
            get { return focus_master_udp_port; }
            set { focus_master_udp_port = value; }
        }

        private string focus_master_win_title = "";
        public string FocusMasterWinTitle
        {
            get { return focus_master_win_title; }
            set { focus_master_win_title = value; }
        }

        private bool enable_led_font = false;
        public bool EnableLEDFont
        {
            get { return enable_led_font; }
            set
            {
                enable_led_font = value;
                if (value)
                {
                    txtVFOAFreq.Font = new Font(LEDLFont, FontStyle.Regular);
                    txtVFOBFreq.Font = new Font(LEDLFont, FontStyle.Regular);
                    txtVFOAMSD.Font = new Font(LEDLFont, FontStyle.Regular);
                    txtVFOBMSD.Font = new Font(LEDLFont, FontStyle.Regular);
                    txtVFOALSD.Font = new Font(LEDSFont, FontStyle.Regular);
                    txtVFOBLSD.Font = new Font(LEDSFont, FontStyle.Regular);
                    txtMultiText.Font = new Font(LEDMFont, FontStyle.Regular);
                    txtRX2Meter.Font = new Font(LEDMFont, FontStyle.Regular);
                }
                else
                {
                    txtVFOAFreq.Font = new Font(FontFamily.GenericSansSerif, 20.25F, FontStyle.Regular);
                    txtVFOBFreq.Font = new Font(FontFamily.GenericSansSerif, 20.25F, FontStyle.Regular);
                    txtVFOAMSD.Font = new Font(FontFamily.GenericSansSerif, 20.25F, FontStyle.Regular);
                    txtVFOBMSD.Font = new Font(FontFamily.GenericSansSerif, 20.25F, FontStyle.Regular);
                    txtVFOALSD.Font = new Font(FontFamily.GenericSansSerif, 15.75F, FontStyle.Regular);
                    txtVFOBLSD.Font = new Font(FontFamily.GenericSansSerif, 15.75F, FontStyle.Regular);
                    txtMultiText.Font = new Font(FontFamily.GenericSansSerif, 18F, FontStyle.Regular);
                    txtRX2Meter.Font = new Font(FontFamily.GenericSansSerif, 18F, FontStyle.Regular);
                }
            }

        }

        private int tx_attenuator_data = 31;
        public int TxAttenData
        {
            get { return tx_attenuator_data; }
            set
            {
                tx_attenuator_data = value;
                if (!initializing)
                {
                    tx_step_attenuator_by_band[(int)rx1_band] = tx_attenuator_data;
                    if (attontx) NetworkIO.SetTxAttenData(tx_step_attenuator_by_band[(int)rx1_band]);
                    else NetworkIO.SetTxAttenData(0);

                    if (attontx && mox)
                        udRX1StepAttData.Value = value;
                }
            }
        }

        private bool amp_protect = false;
        public bool AmpProtect
        {
            get { return amp_protect; }
            set { amp_protect = value; }
        }

        public bool ManualMox
        {
            get { return manual_mox; }
            set { manual_mox = value; }
        }

        private bool stereo_diversity = false;
        public bool StereoDiversity
        {
            get { return stereo_diversity; }
            set
            {
                stereo_diversity = value;

                if (!initializing && RX2Enabled && value)
                {
                    RX2DSPMode = RX1DSPMode;
                    RX2Filter = RX1Filter;
                    //RX2PreampMode = RX1PreampMode;
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                if (!initializing && RX2Enabled && !value)
                {
                    if (click_tune_display) chkDX.Enabled = false;
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

            }
        }

        private string apf_btn = "APF";
        public string APFbtn
        {
            get
            {
                return apf_btn;
            }
            set
            {
                apf_btn = value;
                chkCWAPFEnabled.Text = value;
            }
        }

        private string rx1_apf_label = "";
        public string RX1APFlabel
        {
            get
            {
                return rx1_apf_label;
            }
            set
            {
                rx1_apf_label = value;
                lblRX1APF.Text = value;
            }
        }

        private string rx2_apf_label = "";
        public string RX2APFlabel
        {
            get
            {
                return rx2_apf_label;
            }
            set
            {
                rx2_apf_label = value;
                lblRX2APF.Text = value;
            }
        }

        private bool cw_fw_keyer = true;
        public bool CWFWKeyer
        {
            get { return cw_fw_keyer; }
            set
            {
                cw_fw_keyer = value;
                udCWBreakInDelay_ValueChanged(this, EventArgs.Empty);
                NetworkIO.EnableCWKeyer(Convert.ToInt32(value));

                if (!initializing)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private bool startdiversity = false;
        private bool diversity2 = false;
        public bool Diversity2
        {
            get { return diversity2; }
            set
            {
                diversity2 = value;
                if (diversity2)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    UpdateAAudioMixerStates();
                    UpdateDDCs(rx2_enabled);
                    if (RX1StepAttPresent) udRX1StepAttData_ValueChanged(this, EventArgs.Empty);
                    else comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                    WDSP.SetEXTDIVRun(0, 1);
                    cmaster.LoadRouterControlBit((void*)0, 0, 1, 1);
                }
                else
                {
                    UpdateDDCs(rx2_enabled);
                    if (RX2StepAttPresent) udRX2StepAttData_ValueChanged(this, EventArgs.Empty);
                    else comboRX2Preamp_SelectedIndexChanged(this, EventArgs.Empty);
                    WDSP.SetEXTDIVRun(0, 0);
                    cmaster.LoadRouterControlBit((void*)0, 0, 1, 0);
                    UpdateAAudioMixerStates();
                    // chkRX2.Enabled = true;
                }
            }
        }

        private double center_frequency = 0.0;
        public double CenterFrequency
        {
            get
            {
                return center_frequency;
            }
            set
            {
                center_frequency = value;
            }
        }

        private double center_rx2_frequency = 0.0;
        public double CenterRX2Frequency
        {
            get
            {
                return center_rx2_frequency;
            }
            set
            {
                center_rx2_frequency = value;
            }
        }

        private bool update_centerfreq = false;
        public bool UpdateCenterFreq
        {
            get { return update_centerfreq; }
            set
            {
                update_centerfreq = value;
            }
        }

        private bool update_rx2_centerfreq = false;
        public bool UpdateRX2CenterFreq
        {
            get { return update_rx2_centerfreq; }
            set
            {
                update_rx2_centerfreq = value;
            }
        }

        public bool CTuneDisplay
        {
            get { return chkFWCATU.Checked; }
            set { chkFWCATU.Checked = value; }
        }

        public bool CTuneRX2Display
        {
            get { return chkX2TR.Checked; }
            set { chkX2TR.Checked = value; }
        }

        private bool click_tune_display = false;
        public bool ClickTuneDisplay
        {
            get { return click_tune_display; }
            set
            {
                click_tune_display = value;
                if (!stereo_diversity && value) chkDX.Enabled = false;
                else chkDX.Enabled = true;
            }
        }

        private bool click_tune_rx2_display = false;
        public bool ClickTuneRX2Display
        {
            get { return click_tune_rx2_display; }
            set
            {
                click_tune_rx2_display = value;
            }
        }

        private bool vhf_tr_relay = false;
        public bool VHFTRRelay
        {
            get { return vhf_tr_relay; }
            set
            {
                vhf_tr_relay = value;
                // txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private bool hf_tr_relay = false;
        public bool HFTRRelay
        {
            get { return hf_tr_relay; }
            set
            {
                hf_tr_relay = value;
                if (!initializing)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private bool bpf2_gnd = true;
        public bool BPF2Gnd
        {
            get { return bpf2_gnd; }
            set
            {
                bpf2_gnd = value;
            }
        }

        private bool enable_xvtr_hf = false;
        public bool EnableXVTRHF
        {
            get { return enable_xvtr_hf; }
            set
            {
                enable_xvtr_hf = value;
                if (!initializing)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }
            }
        }

        public bool ANAN8000DLEDisplayVoltsAmps { get; set; }

        private bool rx1_step_att_present = false;
        public bool RX1StepAttPresent
        {
            get { return rx1_step_att_present; }
            set
            {
                rx1_step_att_present = value;
                if (rx1_step_att_present)
                {
                    lblPreamp.Text = "S-ATT";
                    udRX1StepAttData.BringToFront();
                    udRX1StepAttData_ValueChanged(this, EventArgs.Empty);
                    // NetworkIO.EnableADC1StepAtten(1);
                }
                else
                {
                    lblPreamp.Text = "ATT";
                    comboPreamp.BringToFront();
                    comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                    //  NetworkIO.EnableADC1StepAtten(1);

                    if (AlexPresent)
                        NetworkIO.SetAlexAtten(alex_atten); // normal up alex attenuator setting
                }

                if (CollapsedDisplay)
                    CollapseDisplay();
                if (!mox)
                {
                    //update_preamp_mode = false;
                    update_preamp = true;
                    UpdatePreamps();
                }
                UpdateRX1DisplayOffsets();
            }
        }

        private int rx1_attenuator_data = 0;
        public int RX1AttenuatorData
        {
            get { return rx1_attenuator_data; }
            set
            {
                rx1_attenuator_data = value;
                if (initializing) return;
                if (AlexPresent && !ANAN10Present && !ANAN10EPresent
                     && !ANAN7000DPresent && !ANAN8000DPresent && !ORIONMKIIPresent)
                    udRX1StepAttData.Maximum = (decimal)61;
                else udRX1StepAttData.Maximum = (decimal)31;

                if (rx1_step_att_present)
                {
                    if (AlexPresent && !ANAN10Present && !ANAN10EPresent
                         && !ANAN7000DPresent && !ANAN8000DPresent && !ORIONMKIIPresent)
                    {
                        if (rx1_attenuator_data <= 31)
                        {
                            NetworkIO.SetAlexAtten(0); // 0dB Alex Attenuator
                            NetworkIO.SetADC1StepAttenData(rx1_attenuator_data);
                        }
                        else
                        {
                            NetworkIO.SetAlexAtten(3); // -30dB Alex Attenuator
                            NetworkIO.SetADC1StepAttenData(rx1_attenuator_data + 2);
                        }
                    }
                    else
                    {
                        NetworkIO.SetAlexAtten(0);
                        NetworkIO.SetADC1StepAttenData(rx1_attenuator_data);
                    }
                }

                if (!initializing && !mox)
                    rx1_step_attenuator_by_band[(int)rx1_band] = rx1_attenuator_data;

                udRX1StepAttData.Value = rx1_attenuator_data;
                if (!mox)
                {
                    update_preamp = true;
                    UpdatePreamps();
                }
                UpdateRX1DisplayOffsets();
            }
        }

        private bool rx2_step_att_present = false;
        public bool RX2StepAttPresent
        {
            get { return rx2_step_att_present; }
            set
            {
                rx2_step_att_present = value;
                if (rx2_preamp_present)
                {
                    if (rx2_step_att_present)
                    {
                        lblRX2Preamp.Visible = true;
                        udRX2StepAttData.Visible = true;
                        lblRX2Preamp.Text = "S-ATT";
                        udRX2StepAttData.BringToFront();
                        udRX2StepAttData.Value = rx2_step_attenuator_by_band[(int)rx2_band];
                        udRX2StepAttData_ValueChanged(this, EventArgs.Empty);
                        //  JanusAudio.EnableADC2StepAtten(1);
                    }
                    else
                    {
                        lblRX2Preamp.Visible = true;
                        lblRX2Preamp.Text = "ATT";
                        comboRX2Preamp.Visible = true;
                        comboRX2Preamp.BringToFront();
                        comboRX2Preamp_SelectedIndexChanged(this, EventArgs.Empty);
                        // if (current_hpsdr_model != HPSDRModel.HPSDR)
                        //  JanusAudio.EnableADC2StepAtten(1);
                    }

                    if (CollapsedDisplay)
                        CollapseDisplay();
                    if (!mox)
                    {
                        //update_preamp_mode = false;
                        update_preamp = true;
                        UpdatePreamps();
                    }
                    UpdateRX2DisplayOffsets();
                }

            }
        }

        public int RX2ATT
        {
            get { return (int)udRX2StepAttData.Value; }
            set { udRX2StepAttData.Value = (decimal)value; }
        }

        private int rx2_attenuator_data = 0;
        public int RX2AttenuatorData
        {
            get { return rx2_attenuator_data; }
            set
            {
                rx2_attenuator_data = value;
                if (rx2_step_att_present)
                {
                    // NetworkIO.EnableADC2StepAtten(1);
                    NetworkIO.SetADC2StepAttenData(rx2_attenuator_data);
                }

                if (!initializing && !mox && rx2_step_att_present)
                    rx2_step_attenuator_by_band[(int)rx2_band] = value;
                if (!mox)
                {
                    // update_preamp_mode = false;
                    update_preamp = true;
                    UpdatePreamps();
                }
            }
        }

        private List<TuneStep> tune_step_list;				// A list of available tuning steps
        public List<TuneStep> TuneStepList
        {
            get { return tune_step_list; }
        }

        private int tune_step_index;						// An index into the above array
        public int TuneStepIndex
        {
            get { return tune_step_index; }
            set
            {
                if (value < 0 || value > tune_step_list.Count - 1)
                    return;

                tune_step_index = value;
                txtWheelTune.Text = tune_step_list[tune_step_index].Name;
            }
        }

        public int TuneStepLookup(string s)
        {
            for (int i = 0; i < tune_step_list.Count; i++)
            {
                if (tune_step_list[i].Name == s)
                    return i;
            }

            return -1;
        }

        /// <summary>
        /// The transmit frequency in MHz
        /// </summary>
        public double TXFreq
        {
            get
            {
                double tx_freq = 0.0;

                if (!rx2_enabled)
                {
                    if (!chkVFOBTX.Checked)
                        tx_freq = VFOAFreq;
                    else
                        tx_freq = VFOBFreq;
                }
                else // if(rx2_enabled)
                {
                    if (chkVFOBTX.Checked)
                        tx_freq = VFOBFreq;
                    else if (chkVFOSplit.Checked)
                        tx_freq = VFOASubFreq;
                    else if (chkVFOATX.Checked)
                        tx_freq = VFOAFreq;
                }

                return tx_freq;
            }

            set
            {
                if (!rx2_enabled)
                {
                    if (!chkVFOBTX.Checked)
                        VFOAFreq = value;
                    else
                        VFOBFreq = value;
                }
                else // if(rx2_enabled)
                {
                    if (chkVFOBTX.Checked)
                        VFOBFreq = value;
                    else if (chkVFOSplit.Checked)
                        VFOASubFreq = value;
                    else if (chkVFOATX.Checked)
                        VFOAFreq = value;
                }
            }
        }

        private bool swap_vfo_ab_tx = false;
        public bool SwapVFOA_BTX
        {
            get { return swap_vfo_ab_tx; }
            set
            {
                if (value)
                {
                    //chkVFOATX.Checked = false;
                    chkVFOBTX.Checked = true;
                }
                else
                {
                    chkVFOATX.Checked = true;
                    //chkVFOBTX.Checked = false;
                }
                swap_vfo_ab_tx = value;
            }
        }

        public int RX0Gain
        {
            get
            {
                if (ptbRX0Gain != null) return ptbRX0Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX0Gain != null) ptbRX0Gain.Value = value;
                ptbRX0Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int PanMainRX
        {
            get
            {
                if (ptbPanMainRX != null) return ptbPanMainRX.Value;
                else return -1;
            }
            set
            {
                if (ptbPanMainRX != null) ptbPanMainRX.Value = value;
                ptbPanMainRX_Scroll(this, EventArgs.Empty);
            }
        }

        public int RX1Gain
        {
            get
            {
                if (ptbRX1Gain != null) return ptbRX1Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX1Gain != null) ptbRX1Gain.Value = value;
                ptbRX1Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int PanSubRX
        {
            get
            {
                if (ptbPanSubRX != null) return ptbPanSubRX.Value;
                else return -1;
            }
            set
            {
                if (ptbPanSubRX != null) ptbPanSubRX.Value = value;
                ptbPanSubRX_Scroll(this, EventArgs.Empty);
            }
        }

        public int RX2Gain
        {
            get
            {
                if (ptbRX2Gain != null) return ptbRX2Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX2Gain != null) ptbRX2Gain.Value = value;
                ptbRX2Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int RX2Pan
        {
            get
            {
                if (ptbRX2Pan != null) return ptbRX2Pan.Value;
                else return -1;
            }
            set
            {
                if (ptbRX2Pan != null) ptbRX2Pan.Value = value;
                ptbRX2Pan_Scroll(this, EventArgs.Empty);
            }
        }

        public decimal CATDiversityRX1Gain
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.DiversityGain;
                else
                    return 0.0m;
            }
            set
            {
                if (diversityForm != null)
                    diversityForm.DiversityGain = value;
            }
        }

        public decimal CATDiversityRX2Gain
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.DiversityR2Gain;
                else
                    return 0.0m;
            }
            set
            {
                if (diversityForm != null)
                    diversityForm.DiversityR2Gain = value;
            }
        }

        public decimal CATDiversityPhase
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.DiversityPhase;
                else
                    return 0.0m;
            }
            set
            {
                if (diversityForm != null)
                    diversityForm.DiversityPhase = value;
            }
        }

        public bool CATDiversityEnable
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.DiversityEnabled;
                else
                    return false;
            }
            set
            {
                if (diversityForm != null)
                    if (value)
                        diversityForm.DiversityEnabled = true;
                    else
                        diversityForm.DiversityEnabled = false;
            }
        }

        public bool CATDiversityRXRefSource             // added G8NJJ
           {
               get
               {
                   if (diversityForm != null)
                    return diversityForm.DiversityRXRef;
                   else
                       return false;
               }
               set
               {
                   if (diversityForm != null)
                       if (value)
                        diversityForm.DiversityRXRef = true;
                       else
                        diversityForm.DiversityRXRef = false;
            }
        }

        public int CATDiversityRXSource             // added G8NJJ
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.DiversityRXSource;
                else
                    return 0;
            }
            set
            {
                if (diversityForm != null)
                    diversityForm.DiversityRXSource = value;
            }
               }

        public bool CATDiversityForm
        {
            get
            {
                if (diversityForm == null || diversityForm.IsDisposed)
                    return false;
                else
                    return true;
            }
            set
            {
                if (value)
                {
                    if (current_hpsdr_model != HPSDRModel.ANAN100D &&
                        current_hpsdr_model != HPSDRModel.ANAN200D &&
                        current_hpsdr_model != HPSDRModel.ORIONMKII &&
                        current_hpsdr_model != HPSDRModel.ANAN7000D &&
                        current_hpsdr_model != HPSDRModel.ANAN8000D) return;
                    if (diversityForm == null || diversityForm.IsDisposed)
                        diversityForm = new DiversityForm(this);
                    diversityForm.Focus();
                    this.Invoke(new MethodInvoker(diversityForm.Show));
                }
                else
                    if (diversityForm != null)
                        this.Invoke(new MethodInvoker(diversityForm.Close));
            }
        }

        public bool CATCWXForm
        {
            get
            {
                if (CWXForm == null || CWXForm.IsDisposed)
                    return false;
                else
                    return true;
            }
            set
            {
                if (value)
                {
                    cWXToolStripMenuItem.PerformClick();
                }
                else
                    if (CWXForm != null)
                        this.Invoke(new MethodInvoker(CWXForm.Close));
            }
        }

        public bool VFOATX
        {
            get { return chkVFOATX.Checked; }
            set { chkVFOATX.Checked = value; }
        }

        public bool VFOBTX
        {
            get { return chkVFOBTX.Checked; }
            set { chkVFOBTX.Checked = value; }
        }

        private bool vac2_on_split = true;
        public bool VAC2onSplit
        {
            get { return vac2_on_split; }
            set 
            { 
                vac2_on_split = value; 
            }

        }

        private string db_file_name = "";
        public string DBFileName
        {
            get { return db_file_name; }
            set
            {
                if (initializing) // ignore changes here after init is complete per design
                {
                    db_file_name = value;
                    DB.FileName = value;
                }
            }
        }

        private string app_data_path = "";
        public string AppDataPath
        {
            get { return app_data_path; }
            set
            {
                app_data_path = value;
                Skin.AppDataPath = value;
            }
        }

        private static string appdatapath = "";
        public static string AppDatapath
        {
            get { return appdatapath; }
            set
            {
                appdatapath = value;
            }
        }

        private bool wheel_tunes_vfob = false;
        public bool WheelTunesVFOB
        {
            get { return wheel_tunes_vfob; }
            set { wheel_tunes_vfob = value; }
        }

        private bool disable_ui_mox_changes = true;
        public bool DisableUIMOXChanges
        {
            get { return disable_ui_mox_changes; }
            set { disable_ui_mox_changes = value; }
        }

        private float rx1_xvtr_gain_offset;						// gain offset as entered on the xvtr form
        public float RX1XVTRGainOffset
        {
            get { return rx1_xvtr_gain_offset; }
            set
            {
                rx1_xvtr_gain_offset = value;
                UpdateRX1DisplayOffsets();
            }
        }

        private float rx2_xvtr_gain_offset;						// gain offset as entered on the xvtr form
        public float RX2XVTRGainOffset
        {
            get { return rx2_xvtr_gain_offset; }
            set
            {
                rx2_xvtr_gain_offset = value;
                UpdateRX2DisplayOffsets();
            }
        }

        private float rx_6m_gain_offset = 13;
        public float RX6mGainOffset
        {
            get { return rx_6m_gain_offset; }
            set
            {
                rx_6m_gain_offset = value;
                if (SetupForm != null)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private float rx_6m_gain_offset_rx2 = 13;
        public float RX6mGainOffsetRx2
        {
            get { return rx_6m_gain_offset_rx2; }
            set
            {
                rx_6m_gain_offset_rx2 = value;
                if (SetupForm != null)
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private float rx1_6m_gain_offset = 0;
        public float RX16mGainOffset
        {
            get { return rx1_6m_gain_offset; }
            set
            {
                rx1_6m_gain_offset = value;
                UpdateRX1DisplayOffsets();
            }
        }

        private float rx2_6m_gain_offset = 0;
        public float RX26mGainOffset
        {
            get { return rx2_6m_gain_offset; }
            set
            {
                rx2_6m_gain_offset = value;
                UpdateRX2DisplayOffsets();
            }
        }

        private bool enable_6m_preamp = false;
        public bool Enable6mPreamp
        {
            get { return enable_6m_preamp; }
            set
            {
                enable_6m_preamp = value;
            }
        }

        private bool meter_detail = false;
        public bool MeterDetail
        {
            get { return meter_detail; }
            set { meter_detail = value; }
        }

        private MeterTXMode tune_meter_tx_mode = MeterTXMode.FORWARD_POWER;
        public MeterTXMode TuneTXMeterMode
        {
            get { return tune_meter_tx_mode; }
            set
            {
                tune_meter_tx_mode = value;
                if (chkTUN.Checked)
                {
                    CurrentMeterTXMode = value;
                    comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
                }
            }
        }

        public bool NB
        {
            get { return chkNB.Checked; }
            set { chkNB.Checked = value; }
        }

        public bool NB2
        {
            get { return chkDSPNB2.Checked; }
            set { chkDSPNB2.Checked = value; }
        }

        public bool QuickPlay
        {
            get { return ckQuickPlay.Checked; }
            set { ckQuickPlay.Checked = value; }
        }

        public bool DX
        {
            get { return chkDX.Checked; }
            set { chkDX.Checked = value; }
        }

        public int DXLevel
        {
            get { return ptbDX.Value; }
            set
            {
                ptbDX.Value = value;
                ptbDX_Scroll(this, EventArgs.Empty);
            }
        }

        private bool peak_tx_meter = true; // as opposed to avg
        public bool PeakTXMeter
        {
            get { return peak_tx_meter; }
            set { peak_tx_meter = value; }
        }

        private bool allow_vac_bypass = true;
        public bool AllowVACBypass
        {
            get { return allow_vac_bypass; }
            set { allow_vac_bypass = value; }
        }

        private bool allow_space_bypass = false;
        public bool AllowSPACEBypass
        {
            get { return allow_space_bypass; }
            set { allow_space_bypass = value; }
        }

        private bool allow_mox_bypass = false;
        public bool AllowMOXBypass
        {
            get { return allow_mox_bypass; }
            set { allow_mox_bypass = value; }
        }

        public float NewMeterData
        {
            get { return new_meter_data; }
        }

        public float Rx2MeterData
        {
            get { return rx2_meter_new_data; }
        }

        private bool all_mode_mic_ptt = true;
        public bool AllModeMicPTT
        {
            get { return all_mode_mic_ptt; }
            set { all_mode_mic_ptt = value; }
        }

        private int last_rx1_xvtr_index = -1;			// index of last xvtr in use
        public int LastRX1XVTRIndex
        {
            get { return last_rx1_xvtr_index; }
            set { last_rx1_xvtr_index = value; }
        }

        private int last_rx2_xvtr_index = -1;			// index of last xvtr in use
        public int LastRX2XVTRIndex
        {
            get { return last_rx2_xvtr_index; }
            set { last_rx2_xvtr_index = value; }
        }

        private int rx1_xvtr_index = -1;				// index of current xvtr in use
        public int RX1XVTRIndex
        {
            get { return rx1_xvtr_index; }
            set
            {
                rx1_xvtr_index = value;
                if (value >= 0)
                {
                    lblRX1MuteVFOA.SendToBack();
                    lblRX1APF.SendToBack();
                }
                else
                {
                    lblRX1MuteVFOA.BringToFront();
                    lblRX1APF.BringToFront();
                }

            }
        }

        private int rx2_xvtr_index = -1;				// index of current xvtr in use
        public int RX2XVTRIndex
        {
            get { return rx2_xvtr_index; }
            set
            {
                rx2_xvtr_index = value;
                if (value >= 0)
                {
                    lblRX2MuteVFOB.SendToBack();
                    lblRX2APF.SendToBack();
                }
                else
                {
                    lblRX2MuteVFOB.BringToFront();
                    lblRX2APF.BringToFront();
                }
            }
        }

        private int tx_xvtr_index = -1;				// index of current xvtr in use
        public int TXXVTRIndex
        {
            get { return tx_xvtr_index; }
            set { tx_xvtr_index = value; }
        }

        private int last_tx_xvtr_index = -1;		    // index of last xvtr in use
        public int LastTXXVTRIndex
        {
            get { return last_tx_xvtr_index; }
            set { last_tx_xvtr_index = value; }
        }

        private float rx1_path_offset = 0.0f;
        public float RX1PathOffset
        {
            get { return rx1_path_offset; }
        }

        private float rx2_path_offset = 0.0f;
        public float RX2PathOffset
        {
            get { return rx2_path_offset; }
        }

        private PreampMode[] rx1_preamp_by_band;
        public void SetRX1Preamp(Band b, PreampMode mode)
        {
            rx1_preamp_by_band[(int)b] = mode;
        }

        public PreampMode GetPreamp(Band b)
        {
            return rx1_preamp_by_band[(int)b];
        }

        private PreampMode[] rx2_preamp_by_band;


        private double[] fm_tx_offset_by_band_mhz;

        private int[] power_by_band;
        public void SetPower(Band b, int pwr)
        {
            power_by_band[(int)b] = pwr;
            if (tx_band == b) PWR = pwr;
        }

        public int GetPower(Band b)
        {
            return power_by_band[(int)b];
        }

        private AGCMode[] rx1_agcm_by_band;
        private AGCMode[] rx2_agcm_by_band;

        private int[] rx1_agct_by_band;
        public void SetRFGain(Band b, int gain)
        {
            rx1_agct_by_band[(int)b] = gain;
            if (rx1_band == b) RF = gain;
        }

        public int GetRFGain(Band b)
        {
            return rx1_agct_by_band[(int)b];
        }

        private int[] rx2_agct_by_band;

        private bool mouse_tune_step = false;
        public bool MouseTuneStep
        {
            get { return mouse_tune_step; }
            set { mouse_tune_step = value; }
        }

        public bool WheelReverse { get; set; }

        private bool new_power_cal = false;
        public bool NewPowerCal
        {
            get { return new_power_cal; }
            set { new_power_cal = value; }
        }

        public bool ShowCWTXFreq
        {
            get { return chkShowTXCWFreq.Checked; }
            set { chkShowTXCWFreq.Checked = value; }
        }

        public bool ShowTXFilter
        {
            get { return chkShowTXFilter.Checked; }
            set { chkShowTXFilter.Checked = value; }
        }

        private bool zero_beat_rit = false;
        public bool ZeroBeatRIT
        {
            get { return zero_beat_rit; }
            set { zero_beat_rit = value; }
        }


        //=========================================================
        // ke9ns add for display to check if Beacon needs an freq avg signal strength reading
        public bool BeaconSigAvg
        {
            get
            {
                if (SpotForm != null)
                {
                    if ((SpotForm.beacon5 > 0) || (SpotForm.beacon11 > 0) || (SpotForm.WTime == true)) return true;  // if Fast or Slow Beacon scanning is enabled or WWV checking
                    else return false;
                }
                else return false;

            }


        } //  public bool BeaconSigAvg



        //=============================
        // ke9ns add  scheduler calls this to set audio to POST and 48k SR for small file size recordings
        public bool RECPOST
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {

                if (value == true)
                {
                    WaveForm.RECPLAY = true;                 // this sets recording to POST (not IQ pre) 
                    WaveForm.RECPLAY2 = true;                // and reduces .wav to 48000 SR to save file size

                    WaveForm.checkBoxRecord.Checked = true; // start recording

                }
                else
                {
                    //  WaveForm.RECPLAY3 = true;                // and restores .wav to original SR size
                    WaveForm.checkBoxRecord.Checked = value; // start recording

                }


            }

        }

        public bool RECPOST1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                WaveForm.RECPLAY3 = true;                // and restores .wav to original SR size
            }

        }
        // ke9ns add when schedule recording comes up, turn WAVE RED
        public bool REC1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                if (value == false)
                {
                    waveToolStripMenuItem.ForeColor = SystemColors.ControlLightLight;
                    waveToolStripMenuItem.Text = "Wave";

                }
                else
                {
                    waveToolStripMenuItem.ForeColor = Color.Red;
                    waveToolStripMenuItem.Text = "Record";


                }
            }

        } // REC1

        // ke9ns add when schedule comes up, turn Memory RED
        public bool SCHED1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                if (value == false)
                {

                    memoryToolStripMenuItem.ForeColor = SystemColors.ControlLightLight;
                    memoryToolStripMenuItem.Text = "Memory";
                }
                else
                {

                    memoryToolStripMenuItem.ForeColor = Color.Red;
                    memoryToolStripMenuItem.Text = "Mem Sched";
                }
            }

        } // REC1

        private void UpdateRX1DisplayOffsets()
        {
            if (initializing) return;

            if (rx1_step_att_present)
            {
                Display.RX1PreampOffset = rx1_attenuator_data;
                if (current_hpsdr_model != HPSDRModel.ANAN100D &&
                    current_hpsdr_model != HPSDRModel.ANAN200D &&
                    current_hpsdr_model != HPSDRModel.ORIONMKII &&
                    current_hpsdr_model != HPSDRModel.ANAN7000D &&
                    current_hpsdr_model != HPSDRModel.ANAN8000D &&
                    !rx2_preamp_present || mox)
                    Display.RX2PreampOffset = rx1_attenuator_data;
            }
            else
            {
                Display.RX1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];

                if (current_hpsdr_model != HPSDRModel.ANAN100D &&
                    current_hpsdr_model != HPSDRModel.ANAN200D &&
                    current_hpsdr_model != HPSDRModel.ORIONMKII &&
                    current_hpsdr_model != HPSDRModel.ANAN7000D &&
                    current_hpsdr_model != HPSDRModel.ANAN8000D &&
                    !rx2_preamp_present)
                    Display.RX2PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];
            }

            switch (Display.CurrentDisplayMode)
            {
                case DisplayMode.WATERFALL:
                case DisplayMode.PANADAPTER:
                case DisplayMode.PANAFALL:
                case DisplayMode.PANASCOPE:
                case DisplayMode.SPECTRUM:
                case DisplayMode.HISTOGRAM:
                case DisplayMode.SPECTRASCOPE:
                    Display.RX1DisplayCalOffset = rx1_display_cal_offset + rx1_xvtr_gain_offset + rx1_6m_gain_offset;
                    break;
                default:
                    Display.RX1DisplayCalOffset = rx1_display_cal_offset + rx1_path_offset + rx1_xvtr_gain_offset;
                    break;
            }

        }

        private void UpdateRX2DisplayOffsets()
        {
            if (initializing) return;

            if (rx2_step_att_present)
            {
                Display.RX2PreampOffset = rx2_attenuator_data;
            }
            else
            {
                if (current_hpsdr_model == HPSDRModel.ANAN100D ||
                    current_hpsdr_model == HPSDRModel.ANAN200D ||
                    current_hpsdr_model == HPSDRModel.ORIONMKII ||
                    current_hpsdr_model == HPSDRModel.ANAN7000D ||
                    current_hpsdr_model == HPSDRModel.ANAN8000D ||
                    rx2_preamp_present)
                {
                    Display.RX2PreampOffset = rx2_preamp_offset[(int)rx2_preamp_mode];
                }
            }

            switch (Display.CurrentDisplayModeBottom)
            {
                case DisplayMode.WATERFALL:
                case DisplayMode.PANADAPTER:
                    Display.RX2DisplayCalOffset = rx1_display_cal_offset + rx2_xvtr_gain_offset;
                    break;
                default:
                    Display.RX2DisplayCalOffset = rx1_display_cal_offset + rx2_path_offset + rx2_xvtr_gain_offset;
                    break;
            }
        }


        private bool click_tune_drag = false;
        public bool ClickTuneDrag
        {
            get { return click_tune_drag; }
            set { click_tune_drag = value; }
        }

        private bool snap_to_click_tuning = true;
        public bool SnapToClickTuning
        {
            get { return snap_to_click_tuning; }
            set { snap_to_click_tuning = value; }
        }

        private bool click_tune_filter = true;
        public bool ClickTuneFilter
        {
            get { return click_tune_filter; }
            set { click_tune_filter = value; }
        }

        private bool xvtr_tune_power = false;
        public bool XVTRTunePower
        {
            get { return xvtr_tune_power; }
            set { xvtr_tune_power = value; }
        }

        public bool DisableToolTips
        {
            set
            {
                if (toolTip1 != null) toolTip1.Active = !value;
            }
        }

        public bool X2TR
        {
            get
            {
                if (chkX2TR != null) return chkX2TR.Checked;
                else return false;
            }
            set
            {
                if (chkX2TR != null) chkX2TR.Checked = value;
            }
        }

        public string TXProfile
        {
            get
            {
                if (comboTXProfile != null) return comboTXProfile.Text;
                else return "";
            }
            set
            {
                if (comboTXProfile != null) comboTXProfile.Text = value;
                if (comboDigTXProfile != null) comboDigTXProfile.Text = value;
            }
        }

        private string vac_sample_rate = "48000";
        public string VACSampleRate
        {
            get
            {
                return vac_sample_rate;
            }
            set
            {
                vac_sample_rate = value;
                if (comboVACSampleRate != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                    comboVACSampleRate.Text = value;
            }
        }

        private string vac2_sample_rate = "48000";
        public string VAC2SampleRate
        {
            get
            {
                return vac2_sample_rate;
            }
            set
            {
                vac2_sample_rate = value;
                if (comboVACSampleRate != null && (chkVAC2.Checked && chkVFOBTX.Checked))
                    comboVACSampleRate.Text = value;
            }
        }

        private bool vac_stereo;
        public bool VACStereo
        {
            get
            {
                return vac_stereo;
            }
            set
            {
                vac_stereo = value;
                if (chkVACStereo != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                    chkVACStereo.Checked = value;
            }
        }

        private bool vac2_stereo;
        public bool VAC2Stereo
        {
            get
            {
                return vac2_stereo;
            }
            set
            {
                vac2_stereo = value;
                if (chkVACStereo != null && (chkVAC2.Checked && chkVFOBTX.Checked))
                    chkVACStereo.Checked = value;
            }
        }

        public bool CWIambic
        {
            get
            {
                if (chkCWIambic != null) return chkCWIambic.Checked;
                else return false;
            }

            set
            {
                if (chkCWIambic != null) chkCWIambic.Checked = value;
            }
        }

        private MultiMeterDisplayMode current_meter_display_mode = MultiMeterDisplayMode.Edge;
        public MultiMeterDisplayMode CurrentMeterDisplayMode
        {
            get { return current_meter_display_mode; }
            set
            {
                //current_meter_display_mode = value;
                //if (initializing) return;
                //switch (current_meter_display_mode)
                //{
                //             case MultiMeterDisplayMode.Edge:
                //                picMultiMeterDigital.Height += lblMultiSMeter.ClientSize.Height;
                //                picMultiMeterDigital.BackColor = edge_meter_background_color;
                //                picRX2Meter.Height += lblRX2Meter.ClientSize.Height;
                //                picRX2Meter.BackColor = edge_meter_background_color;
                //                //lblMultiSMeter.Hide();
                //                lblMultiSMeter.SendToBack();
                //                //lblRX2Meter.Hide();
                //                lblRX2Meter.SendToBack();
                //                if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                //                    comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                //                break;
                //            case MultiMeterDisplayMode.Original:
                //                picMultiMeterDigital.Height -= lblMultiSMeter.ClientSize.Height;
                //                picMultiMeterDigital.BackColor = meter_background_color;
                //                picRX2Meter.Height -= lblRX2Meter.ClientSize.Height;
                //                picRX2Meter.BackColor = meter_background_color;
                //               // lblMultiSMeter.Show();
                //                lblMultiSMeter.BringToFront();
                //                //lblRX2Meter.Show();
                //                lblRX2Meter.BringToFront();
                //                if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                //                    comboMeterTXMode.Items.Remove("Fwd SWR");
                //                break;
                // }

                switch (current_meter_display_mode)
                {
                    case MultiMeterDisplayMode.Edge:
                        switch (value)
                        {
                            case MultiMeterDisplayMode.Edge:
                                break;
                            default:
                                picMultiMeterDigital.Height -= lblMultiSMeter.ClientSize.Height;
                                picMultiMeterDigital.BackColor = meter_background_color;
                                picRX2Meter.Height -= lblRX2Meter.ClientSize.Height;
                                picRX2Meter.BackColor = meter_background_color;
                                lblMultiSMeter.Show();
                                lblRX2Meter.Show();
                                if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                                    comboMeterTXMode.Items.Remove("Fwd SWR");
                                break;
                        }
                        break;
                    default:
                        switch (value)
                        {
                            case MultiMeterDisplayMode.Edge:
                                picMultiMeterDigital.Height += lblMultiSMeter.ClientSize.Height;
                                picMultiMeterDigital.BackColor = edge_meter_background_color;
                                picRX2Meter.Height += lblRX2Meter.ClientSize.Height;
                                picRX2Meter.BackColor = edge_meter_background_color;
                                lblMultiSMeter.Hide();
                                lblRX2Meter.Hide();
                                if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                                    comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                                break;
                        }
                        break;
                }
                current_meter_display_mode = value;

                if (collapsedDisplay) CollapseDisplay();
                picMultiMeterDigital.Invalidate();
            }
        }

        /*	private Color gen_background_color = SystemColors.Control;//k6jca 1/13/08
            public Color GenBackgroundColor							  //k6jca  1/13/08
            {
                get
                {
                    return gen_background_color;
                }
                set
                {
                    //gen_background_color = value;
                    //this.BackColor = value;
                    //grpVFOA.BackColor = value;
                    //grpVFOB.BackColor = value;
                }
            }*/

        public bool VFOSync
        {
            get { return chkVFOSync.Checked; }
            set { chkVFOSync.Checked = value; }
        }

        private Color vfo_background_color = Color.Black;
        public Color VFOBackgroundColor
        {
            get { return vfo_background_color; }
            set
            {
                vfo_background_color = value;
                txtVFOAFreq.BackColor = value;
                txtVFOAMSD.BackColor = value;
                txtVFOALSD.BackColor = value;
                txtVFOBFreq.BackColor = value;
                txtVFOBMSD.BackColor = value;
                txtVFOBLSD.BackColor = value;
                panelVFOAHover.BackColor = value;
                panelVFOBHover.BackColor = value;
                lblFilterLabel.BackColor = value;
                lblModeLabel.BackColor = value;
            }
        }

        private Color meter_digital_text_color = Color.Yellow;
        public Color MeterDigitalTextColor
        {
            get { return meter_digital_text_color; }
            set
            {
                meter_digital_text_color = value;
                txtMultiText.ForeColor = value;
                txtRX2Meter.ForeColor = value;
            }
        }

        private Color meter_digital_background_color = Color.Black;
        public Color MeterDigitalBackgroundColor
        {
            get { return meter_digital_background_color; }
            set
            {
                meter_digital_background_color = value;
                txtMultiText.BackColor = value;
                txtRX2Meter.BackColor = value;
            }
        }

        private Color band_background_color = Color.Black;
        public Color BandBackgroundColor
        {
            get { return band_background_color; }
            set
            {
                band_background_color = value;
                txtVFOABand.BackColor = value;
                txtVFOBBand.BackColor = value;
            }
        }

        private Color edge_meter_background_color = Color.Black;
        private Pen edge_meter_background_pen = new Pen(Color.Black);
        public Color EdgeMeterBackgroundColor
        {
            get { return edge_meter_background_color; }
            set
            {
                edge_meter_background_color = value;
                edge_meter_background_pen.Color = edge_meter_background_color;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.BackColor = value;
                    picMultiMeterDigital.Invalidate();
                    picRX2Meter.BackColor = value;
                    if (chkRX2.Checked)
                        picRX2Meter.Invalidate();
                }
            }
        }
        private SolidBrush low_brush = new SolidBrush(Color.White);
        private Color edge_low_color = Color.White;
        public Color EdgeLowColor
        {
            get { return edge_low_color; }
            set
            {
                edge_low_color = value;
                low_brush.Color = edge_low_color;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.Invalidate();
                    if (chkRX2.Checked)
                        picRX2Meter.Invalidate();
                }
            }
        }
        private SolidBrush high_brush = new SolidBrush(Color.Red);
        private Color edge_high_color = Color.Red;
        public Color EdgeHighColor
        {
            get { return edge_high_color; }
            set
            {
                edge_high_color = value;
                high_brush.Color = edge_high_color;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.Invalidate();
                    if (chkRX2.Checked)
                        picRX2Meter.Invalidate();
                }
            }
        }


        private Pen line_pen = new Pen(Color.Yellow);
        private Pen line_dark_pen = new Pen(Color.Yellow);
        private Color edge_avg_color = Color.Yellow;
        public Color EdgeAVGColor
        {
            get { return edge_avg_color; }
            set
            {
                edge_avg_color = value;
                line_pen.Color = edge_avg_color;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    picMultiMeterDigital.Invalidate();
            }
        }

        private Pen meter_background_pen = new Pen(Color.Black);
        private Color meter_background_color = Color.Black;
        public Color MeterBackgroundColor
        {
            get { return meter_background_color; }
            set
            {
                meter_background_color = value;
                meter_background_pen.Color = meter_background_color;
                if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                {
                    picMultiMeterDigital.BackColor = value;
                    picMultiMeterDigital.Invalidate();
                }
            }
        }

        private Color peak_background_color = Color.Black;
        public Color PeakBackgroundColor
        {
            get { return peak_background_color; }
            set
            {
                peak_background_color = value;
                txtDisplayCursorOffset.BackColor = value;
                txtDisplayCursorPower.BackColor = value;
                txtDisplayCursorFreq.BackColor = value;
                // txtDisplayPeakOffset.BackColor = value;
                // txtDisplayPeakPower.BackColor = value;
                // txtDisplayPeakFreq.BackColor = value;
                txtOverload.BackColor = value;
            }
        }

        private bool small_lsd = true;
        public bool SmallLSD
        {
            get { return small_lsd; }
            set
            {
                small_lsd = value;
                txtVFOALSD.Visible = value;
                txtVFOAMSD.Visible = value;
                txtVFOBLSD.Visible = value;
                txtVFOBMSD.Visible = value;
            }
        }

        private Color small_vfo_color = Color.OrangeRed;
        public Color SmallVFOColor
        {
            get { return small_vfo_color; }
            set
            {
                small_vfo_color = value;
                if (small_lsd && chkPower.Checked)
                {
                    txtVFOALSD.ForeColor = small_vfo_color;
                    if (chkVFOSplit.Checked)
                        txtVFOBLSD.ForeColor = small_vfo_color;
                }
            }
        }

        //============================================================
        // ke9ns add
        private Color ring_vfo_color = Color.DarkGreen;
        public Color RingVFOColor
        {
            get { return ring_vfo_color; }
            set
            {
                ring_vfo_color = value;
                grpVFOA.Invalidate();
                grpVFOB.Invalidate();
                grpMultimeter.Invalidate();
                grpRX2Meter.Invalidate();

            }

        } //RingVFOColor

        private Color info_buttons_color = Color.DarkOrange;
        public Color InfoButtonsColor
        {
            get { return info_buttons_color; }
            set
            {
                info_buttons_color = value;
                lblModeLabel.ForeColor = value;
                lblFilterLabel.ForeColor = value;
            }
        }

        private int default_low_cut = 150;
        public int DefaultLowCut
        {
            get { return default_low_cut; }
            set
            {
                for (DSPMode m = DSPMode.FIRST + 1; m < DSPMode.LAST; m++)
                {
                    for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                    {
                        int low = rx1_filters[(int)m].GetLow(f);
                        int high = rx1_filters[(int)m].GetHigh(f);

                        switch (m)
                        {
                            case DSPMode.USB:
                                //case DSPMode.DIGU:
                                if (low == default_low_cut)
                                    rx1_filters[(int)m].SetLow(f, value);
                                break;
                            case DSPMode.LSB:
                                //case DSPMode.DIGL:
                                if (high == -default_low_cut)
                                    rx1_filters[(int)m].SetHigh(f, -value);
                                break;
                        }
                    }
                }
                default_low_cut = value;
                RX1Filter = rx1_filter;
            }
        }

        private int default_rx2_low_cut = 150;
        public int DefaultRX2LowCut
        {
            get { return default_rx2_low_cut; }
            set
            {
                for (DSPMode m = DSPMode.FIRST + 1; m < DSPMode.LAST; m++)
                {
                    for (Filter f = Filter.FIRST + 1; f < Filter.LAST; f++)
                    {
                        int low = rx2_filters[(int)m].GetLow(f);
                        int high = rx2_filters[(int)m].GetHigh(f);

                        switch (m)
                        {
                            case DSPMode.USB:
                                //case DSPMode.DIGU:
                                if (low == default_rx2_low_cut)
                                    rx2_filters[(int)m].SetLow(f, value);
                                break;
                            case DSPMode.LSB:
                                //case DSPMode.DIGL:
                                if (high == -default_rx2_low_cut)
                                    rx2_filters[(int)m].SetHigh(f, -value);
                                break;
                        }
                    }
                }
                default_rx2_low_cut = value;
                RX2Filter = rx2_filter;
            }
        }

        public int CPDRVal
        {
            get
            {
                if (ptbCPDR != null) return ptbCPDR.Value;
                else return -1;
            }
            set
            {
                if (ptbCPDR != null) ptbCPDR.Value = value;
                ptbCPDR_Scroll(this, EventArgs.Empty);
            }
        }

        public int NoiseGate
        {
            get
            {
                if (ptbNoiseGate != null) return ptbNoiseGate.Value;
                else return -1;
            }
            set
            {
                if (ptbNoiseGate != null)
                {
                    if (value > ptbNoiseGate.Maximum) value = ptbNoiseGate.Maximum;
                    ptbNoiseGate.Value = value;
                    ptbNoiseGate_Scroll(this, EventArgs.Empty);
                }
            }
        }

        public int VOXSens
        {
            get
            {
                if (ptbVOX != null) return ptbVOX.Value;
                else return -1;
            }
            set
            {
                if (ptbVOX != null)
                {
                    ptbVOX.Value = value;
                    ptbVOX_Scroll(this, EventArgs.Empty);
                }
            }
        }
        // added G8NJJ to allow scaling of VOX gain CAT command to Thetis range which is typ -80 to 0, not 0 to 1000
        public int VOXSensExtent
        {
            get
            {
                if (ptbVOX != null) return (ptbVOX.Maximum - ptbVOX.Minimum);
                else return -1;
            }
        }
        public int VOXSensMin
        {
            get
            {
                if (ptbVOX != null) return ptbVOX.Minimum;
                else return -1;
            }
        }

        public bool NoiseGateEnabled
        {
            get
            {
                if (chkNoiseGate != null) return chkNoiseGate.Checked;
                else return false;
            }
            set
            {
                if (chkNoiseGate != null) chkNoiseGate.Checked = value;
            }
        }

        private int vac_rx_gain;
        public int VACRXGain
        {
            get
            {
                return vac_rx_gain;
            }
            set
            {
                vac_rx_gain = value;
                if (ptbVACRXGain != null && !(chkVAC2.Checked || chkVFOBTX.Checked))
                {
                    ptbVACRXGain.Value = value;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

        private int vac2_rx_gain;
        public int VAC2RXGain
        {
            get
            {
                return vac2_rx_gain;
            }
            set
            {
                vac2_rx_gain = value;
                if (ptbVACRXGain != null && (chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    ptbVACRXGain.Value = value;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

        private int vac_tx_gain;
        public int VACTXGain
        {
            get
            {
                return vac_tx_gain;
            }
            set
            {
                vac_tx_gain = value;
                if (ptbVACTXGain != null && !(chkVAC2.Checked || chkVFOBTX.Checked))
                {
                    ptbVACTXGain.Value = value;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

        private int vac2_tx_gain;
        public int VAC2TXGain
        {
            get
            {
                return vac2_tx_gain;
            }
            set
            {
                vac2_tx_gain = value;
                if (ptbVACTXGain != null && (chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    ptbVACTXGain.Value = value;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

        // These class vars save non-QSK settings so they don't have to be made persistent separately from how they're normally handled, 
        // and so that going in/out of QSK mode doesn't modify a user's normal settings when not in a CW mode.
        private bool qsk_enabled = false;
        private int qsk_sidetone_volume = 50;
        private AGCMode non_qsk_agc = AGCMode.MED;
        private int non_qsk_agc_hang_thresh = 1;
        private bool non_qsk_ATTOnTX = false;
        private int non_qsk_ATTOnTXVal = 0;
        private bool non_qsk_breakin = false;
        private double non_qsk_breakin_delay = 100;
        private bool non_qsk_disablePTT = false;
        private bool qsk_in_CW = false;
        private bool qsk_band_changing = false;

        public bool QSKEnabled  // QSK - a.k.a. full-break-in - Possible with Protocol-2 v1.7 or later  -W2PA
        {
            get
            {
                return qsk_enabled;
            }
            set
            {
                if (qsk_band_changing) return; // Postpone until band change is completed, else things get messy.  See SetBand()
                if (qsk_enabled == value) return;

                qsk_enabled = value; 

                if (qsk_enabled)
                {
                    // Save non-QSK settings
                    non_qsk_agc = RX1AGCMode;
                    non_qsk_agc_hang_thresh = SetupForm.AGCHangThreshold;
                    non_qsk_ATTOnTX = ATTOnTX;
                    non_qsk_ATTOnTXVal = SetupForm.ATTOnTX; 
                    non_qsk_breakin = BreakInEnabled;
                    non_qsk_breakin_delay = break_in_delay;
                    non_qsk_disablePTT = disable_ptt;

                    // Apply QSK settings.      
                    RX1AGCMode = AGCMode.CUSTOM;  // Use AGC Custom mode for optimal QSK settings                   
                    if (SetupForm.AGCHangThreshold < 70) SetupForm.AGCHangThreshold = 100;                   
                    ATTOnTX = true;         // Enable attenuation on transmit via the setting
                    SetupForm.ATTOnTX = 15;                    
                    BreakInEnabled = true;  // Make sure break-in is on                    
                    BreakInDelay = 0;       // Set break-in delay to zero in case it's something else                    
                    DisablePTT = true;      // Turn on Disable PTT, or QSK doesn't work 
                    if (chkCWSidetone.Checked)
                    {
                        NetworkIO.SetCWSidetoneVolume((int)(qsk_sidetone_volume * 1.27));
                    } else NetworkIO.SetCWSidetoneVolume((int)(0));
                }
                else // Disable
                {
                    // Retrieve saved non-QSK settings
                    RX1AGCMode = non_qsk_agc;                                      
                    SetupForm.AGCHangThreshold = non_qsk_agc_hang_thresh;
                    ATTOnTX = non_qsk_ATTOnTX;
                    SetupForm.ATTOnTX = non_qsk_ATTOnTXVal;
                    BreakInEnabled = non_qsk_breakin;
                    BreakInDelay = non_qsk_breakin_delay;
                    DisablePTT = non_qsk_disablePTT;                   
                    if (chkCWSidetone.Checked)
                    {
                        qsk_sidetone_volume = SetupForm.TXAF;
                    }
                    NetworkIO.SetCWSidetoneVolume((int)(ptbAF.Value * 1.27));
                }
            }
        }

        public bool BreakInEnabled
        {
            get
            {
                if (chkCWBreakInEnabled != null) return chkCWBreakInEnabled.Checked;
                else return false;
            }
            set
            {
                if (chkCWBreakInEnabled != null) chkCWBreakInEnabled.Checked = value;
            }
        }

        private bool non_CW_mode_breakin_disabled = false;
        public bool NonCWModeBreakInDisabled    
            // Disable break-in temporarily. Used with QSK-enabled firmware (version 1.7 or later).
            // Necessary so that hitting the key won't transmit when in a non-CW mode.
        {
            get
            {
                return non_CW_mode_breakin_disabled;
            }
            set
            {
                if (value)  // disable it if enabled
                {
                    if (BreakInEnabled)
                    {
                        non_CW_mode_breakin_disabled = true;    // take note of disabling so it can be undone
                    }
                    else non_CW_mode_breakin_disabled = false;  // don't need to disable, was already disabled
                }
                else  // re-enable it if it had been disabled
                if (non_CW_mode_breakin_disabled)
                {
                    non_CW_mode_breakin_disabled = false;
                }
            }
        }           
          

        public bool APFEnabled
        {
            get
            {
                if (chkCWAPFEnabled != null) return chkCWAPFEnabled.Checked;
                else return false;
            }
            set
            {
                if (chkCWAPFEnabled != null) chkCWAPFEnabled.Checked = value;
            }
        }

        public bool VOXEnable
        {
            get
            {
                if (chkVOX != null) return chkVOX.Checked;
                else return false;
            }
            set
            {
                if (chkVOX != null) chkVOX.Checked = value;
            }
        }

        public int RF
        {
            get
            {
                if (ptbRF != null) return ptbRF.Value;
                else return -1;
            }
            set
            {
                if (ptbRF != null)
                {
                    ptbRF.Value = value;
                    ptbRF_Scroll(this, EventArgs.Empty);
                }
            }
        }

        public int RX2RF
        {
            get
            {
                if (ptbRX2RF != null) return ptbRX2RF.Value;
                else return -1;
            }
            set
            {
                if (ptbRX2RF != null)
                {
                    ptbRX2RF.Value = value;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
                }
            }
        }

        private bool enable_kb_shortcuts = true;
        public bool EnableKBShortcuts
        {
            get { return enable_kb_shortcuts; }
            set
            {
                enable_kb_shortcuts = value;
                // if (value) WinKeyCapture5.UnHook();
                //  else WinKeyCapture5.SetHook();
            }
        }

        private bool save_filter_changes = true;
        public bool SaveFilterChanges
        {
            get { return save_filter_changes; }
            set { save_filter_changes = value; }
        }

        private int max_filter_shift = 9999;
        public int MaxFilterShift
        {
            get { return max_filter_shift; }
            set
            {
                max_filter_shift = value;
                UpdateRX1Filters(radio.GetDSPRX(0, 0).RXFilterLow, radio.GetDSPRX(0, 0).RXFilterHigh);
            }
        }

        private int max_filter_width = 9999;
        public int MaxFilterWidth
        {
            get { return max_filter_width; }
            set
            {
                max_filter_width = value;
                UpdateRX1Filters(radio.GetDSPRX(0, 0).RXFilterLow, radio.GetDSPRX(0, 0).RXFilterHigh);
            }
        }

        private bool line_in = false;
        public bool LineIn
        {
            get { return line_in; }
            set
            {
                line_in = value;
                ptbMic_Scroll(this, EventArgs.Empty);
                SetMicGain();
            }
        }

        private double line_in_boost = 0.0;
        public double LineInBoost
        {
            get { return line_in_boost; }
            set
            {
                line_in_boost = value;
                ptbMic_Scroll(this, EventArgs.Empty);
                SetMicGain();
            }
        }

        private bool mic_boost = true;
        public bool MicBoost
        {
            get { return mic_boost; }
            set
            {
                mic_boost = value;
                ptbMic_Scroll(this, EventArgs.Empty);
                SetMicGain();
                //cmaster.CMSetTXAVoxThresh(0);
            }
        }

        private bool always_on_top = false;
        public bool AlwaysOnTop
        {
            get { return always_on_top; }
            set
            {
                always_on_top = value;
                if (value)
                {
                    Win32.SetWindowPos(this.Handle.ToInt32(),
                        -1, this.Left, this.Top, this.Width, this.Height, 0);
                }
                else
                {
                    Win32.SetWindowPos(this.Handle.ToInt32(),
                        -2, this.Left, this.Top, this.Width, this.Height, 0);
                }
            }
        }

        private bool quick_qsy = true;
        public bool QuickQSY
        {
            get { return quick_qsy; }
            set { quick_qsy = value; }
        }

        //public HW Hdw
        //{
        //    set
        //    {
        //        hw = value;
        //        //Keyer.Hdw = value;
        //    }
        //    get { return hw; }
        //}

        private ColorSheme color_palette = ColorSheme.enhanced;
        public ColorSheme color_sheme
        {
            get { return color_palette; }

            set
            {
                Display.ColorSheme = value;
                //#if DirectX
                //         Display_DirectX.ColorSheme = value;
                //#endif
                color_palette = value;
            }
        }

        private ColorSheme rx2_color_palette = ColorSheme.enhanced;
        public ColorSheme rx2_color_sheme
        {
            get { return rx2_color_palette; }

            set
            {
                Display.RX2ColorSheme = value;
                //#if DirectX
                //         Display_DirectX.ColorSheme = value;
                //#endif
                rx2_color_palette = value;
            }
        }

        public SIOListenerII Siolisten
        {
            get { return siolisten; }
            set
            {
                siolisten = value;
                //Keyer.Siolisten = value;
            }
        }

        public SIO2ListenerII Sio2listen
        {
            get { return sio2listen; }
            set
            {
                sio2listen = value;
                //Keyer.Siolisten = value;
            }
        }

        public SIO3ListenerII Sio3listen
        {
            get { return sio3listen; }
            set
            {
                sio3listen = value;
                //Keyer.Siolisten = value;
            }
        }
        public SIO4ListenerII Sio4listen
        {
            get { return sio4listen; }
            set
            {
                sio4listen = value;
                //Keyer.Siolisten = value;
            }
        }

        public bool HideTuneStep
        {
            get { return txtWheelTune.Visible; }
            set
            {
                if (SetupForm != null)
                    txtWheelTune.Visible = value;
            }
        }

        public string DisplayModeText
        {
            get { return comboDisplayMode.Text; }
            set { comboDisplayMode.Text = value; }
        }

        //private bool auto_mute = false;
        //public bool AutoMute
        //{
        //    get { return auto_mute; }
        //    set { auto_mute = value; }
        //}

        private float multimeter_avg_mult_old = 1 - (float)1 / 10;
        private float multimeter_avg_mult_new = (float)1 / 10;
        private int multimeter_avg_num_blocks = 10;
        public int MultiMeterAvgBlocks
        {
            get { return multimeter_avg_num_blocks; }
            set
            {
                multimeter_avg_num_blocks = value;
                multimeter_avg_mult_old = 1 - (float)1 / multimeter_avg_num_blocks;
                multimeter_avg_mult_new = (float)1 / multimeter_avg_num_blocks;
            }
        }

        private bool vac_auto_enable = false;
        public bool VACAutoEnable
        {
            get { return vac_auto_enable; }
            set
            {
                vac_auto_enable = value;
                if (SetupForm == null) return;
                if (vac_auto_enable)
                {
                    switch (rx1_dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                        case DSPMode.DRM:
                            SetupForm.VACEnable = true;
                            break;
                        default:
                            SetupForm.VACEnable = false;
                            break;
                    }
                }
                else SetupForm.VACEnable = false;
            }
        }

        private bool vac2_auto_enable = false;
        public bool VAC2AutoEnable
        {
            get { return vac2_auto_enable; }
            set
            {
                vac2_auto_enable = value;
                if (SetupForm == null) return;
                if (vac2_auto_enable)
                {
                    DSPMode dsp_mode = rx1_dsp_mode;
                    if (vac2_rx2) dsp_mode = rx2_dsp_mode;

                    switch (dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                        case DSPMode.DRM:
                            SetupForm.VAC2Enable = true;
                            break;
                        default:
                            SetupForm.VAC2Enable = false;
                            break;
                    }
                }
                else SetupForm.VAC2Enable = false;
            }
        }

        private bool vac2_rx2 = true;
        public bool VAC2RX2
        {
            get { return vac2_rx2; }
            set
            {
                vac2_rx2 = value;
                // Audio.VAC2RX2 = value;
                if (SetupForm == null) return;
                if (vac2_auto_enable)
                {
                    DSPMode dsp_mode = rx1_dsp_mode;
                    if (vac2_rx2) dsp_mode = rx2_dsp_mode;

                    switch (dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                        case DSPMode.DRM:
                            SetupForm.VAC2Enable = true;
                            break;
                        default:
                            SetupForm.VAC2Enable = false;
                            break;
                    }
                }
            }
        }

        private float rx1_display_cal_offset;					// display calibration offset per volume setting in dB
        public float RX1DisplayCalOffset
        {
            get { return rx1_display_cal_offset; }
            set
            {
                rx1_display_cal_offset = value;
                RX2DisplayCalOffset = value;
                //  UpdateDisplayOffsets();
            }
        }

        private float rx2_display_cal_offset;					// display calibration offset per volume setting in dB
        public float RX2DisplayCalOffset
        {
            get { return rx2_display_cal_offset; }
            set
            {
                rx2_display_cal_offset = value;
                //Display.RX2DisplayCalOffset = value;
                //  UpdateDisplayOffsets();
            }
        }

        /*  private float tx_display_cal_offset;					// display calibration offset per volume setting in dB
          public float TXDisplayCalOffset
          {
              get { return tx_display_cal_offset; }
              set
              {
                  tx_display_cal_offset = value;
                  //Display.TXDisplayCalOffset = value;
                  UpdateDisplayOffsets();
              }
          } */

        private int display_cursor_x;						// x-coord of the cursor when over the display
        public int DisplayCursorX
        {
            get { return display_cursor_x; }
            set
            {
                display_cursor_x = value;
                Display.DisplayCursorX = value;
            }
        }

        private int display_cursor_y;						// y-coord of the cursor when over the display
        public int DisplayCursorY
        {
            get { return display_cursor_y; }
            set
            {
                display_cursor_y = value;
                Display.DisplayCursorY = value;
            }
        }

        //private bool long_crosshair;						// If true, the long yellow cursors are displayed
        //public bool LongCrosshair
        //{
        //	get { return long_crosshair; }
        //	set { long_crosshair = value; }
        //}

        private ClickTuneMode current_click_tune_mode = ClickTuneMode.Off;
        public ClickTuneMode CurrentClickTuneMode
        {
            get { return current_click_tune_mode; }
            set
            {
                current_click_tune_mode = value;
                Display.CurrentClickTuneMode = value;
            }
        }

        private double freq_center = 0.0;
        public double Freq_Center
        {
            get { return freq_center; }
            set { freq_center = value; }
        }

        private DisplayEngine current_display_engine = DisplayEngine.GDI_PLUS;
        public DisplayEngine CurrentDisplayEngine
        {
            get { return current_display_engine; }
            set
            {
                bool power = chkPower.Checked;
                current_display_engine = value;

                if (PowerOn)
                {
                    pause_DisplayThread = true;
                    chkPower.Checked = false;
                    Thread.Sleep(100);
                }

                switch (value)
                {
                    case DisplayEngine.GDI_PLUS:
                        {
                            //Display.DirectXRelease();
                            Thread.Sleep(100);
                            Display.Init();
                        }
                        break;
                    //case DisplayEngine.DIRECT_X:
                    //    {
                    //        if (!booting)
                    //        {
                    //            pause_DisplayThread = true;
                    //            Display.Target = picDisplay;
                    //            Display.WaterfallTarget = picWaterfall;
                    //            //Display.DirectXInit();
                    //            //Display.RenderDirectX();
                    //            // current_display_engine = value;
                    //            // Display.PrepareDisplayVars(Display.CurrentDisplayMode);
                    //            // Display.DrawBackground();
                    //            pause_DisplayThread = false;
                    //        }
                    // Display.CurrentDisplayEngine = value;
                    // chkPower.Checked = power;                          
                    // }
                    // break;
                }
                Display.CurrentDisplayEngine = value;
                pause_DisplayThread = false;

                if (power) PowerOn = true;
            }
        }

        private bool diversity_rx_ref;
        public bool DiversityRXRef
        {
            get
            {
                return diversity_rx1_ref_by_band[(int)rx1_band];
            }
            set
            {
                if (!initializing)
                {
                    diversity_rx_ref = value;
                    diversity_rx1_ref_by_band[(int)rx1_band] = value;
                }
            }
        }

        private decimal diversity_gain_160m = 1.0M;
        public decimal DiversityGain160m
        {
            get { return diversity_gain_160m; }
            set { diversity_gain_160m = value; }
        }

        private decimal diversity_gain_80m = 1.0M;
        public decimal DiversityGain80m
        {
            get { return diversity_gain_80m; }
            set { diversity_gain_80m = value; }
        }

        private decimal diversity_gain_60m = 1.0M;
        public decimal DiversityGain60m
        {
            get { return diversity_gain_60m; }
            set { diversity_gain_60m = value; }
        }

        private decimal diversity_gain_40m = 1.0M;
        public decimal DiversityGain40m
        {
            get { return diversity_gain_40m; }
            set { diversity_gain_40m = value; }
        }

        private decimal diversity_gain_30m = 1.0M;
        public decimal DiversityGain30m
        {
            get { return diversity_gain_30m; }
            set { diversity_gain_30m = value; }
        }

        private decimal diversity_gain_20m = 1.0M;
        public decimal DiversityGain20m
        {
            get { return diversity_gain_20m; }
            set { diversity_gain_20m = value; }
        }

        private decimal diversity_gain_17m = 1.0M;
        public decimal DiversityGain17m
        {
            get { return diversity_gain_17m; }
            set { diversity_gain_17m = value; }
        }

        private decimal diversity_gain_15m = 1.0M;
        public decimal DiversityGain15m
        {
            get { return diversity_gain_15m; }
            set { diversity_gain_15m = value; }
        }

        private decimal diversity_gain_12m = 1.0M;
        public decimal DiversityGain12m
        {
            get { return diversity_gain_12m; }
            set { diversity_gain_12m = value; }
        }

        private decimal diversity_gain_10m = 1.0M;
        public decimal DiversityGain10m
        {
            get { return diversity_gain_10m; }
            set { diversity_gain_10m = value; }
        }

        private decimal diversity_gain_6m = 1.0M;
        public decimal DiversityGain6m
        {
            get { return diversity_gain_6m; }
            set { diversity_gain_6m = value; }
        }

        private decimal diversity_gain_wwv = 1.0M;
        public decimal DiversityGainWWV
        {
            get { return diversity_gain_wwv; }
            set { diversity_gain_wwv = value; }
        }

        private decimal diversity_gain_gen = 1.0M;
        public decimal DiversityGainGEN
        {
            get { return diversity_gain_gen; }
            set { diversity_gain_gen = value; }
        }

        private decimal diversity_gain_xvtr = 1.0M;
        public decimal DiversityGainXVTR
        {
            get { return diversity_gain_xvtr; }
            set { diversity_gain_xvtr = value; }
        }

        private decimal diversity_gain_r2_160m = 1.0M;
        public decimal DiversityR2Gain160m
        {
            get { return diversity_gain_r2_160m; }
            set { diversity_gain_r2_160m = value; }
        }

        private decimal diversity_gain_r2_80m = 1.0M;
        public decimal DiversityR2Gain80m
        {
            get { return diversity_gain_r2_80m; }
            set { diversity_gain_r2_80m = value; }
        }

        private decimal diversity_gain_r2_60m = 1.0M;
        public decimal DiversityR2Gain60m
        {
            get { return diversity_gain_r2_60m; }
            set { diversity_gain_r2_60m = value; }
        }

        private decimal diversity_gain_r2_40m = 1.0M;
        public decimal DiversityR2Gain40m
        {
            get { return diversity_gain_r2_40m; }
            set { diversity_gain_r2_40m = value; }
        }

        private decimal diversity_gain_r2_30m = 1.0M;
        public decimal DiversityR2Gain30m
        {
            get { return diversity_gain_r2_30m; }
            set { diversity_gain_r2_30m = value; }
        }

        private decimal diversity_gain_r2_20m = 1.0M;
        public decimal DiversityR2Gain20m
        {
            get { return diversity_gain_r2_20m; }
            set { diversity_gain_r2_20m = value; }
        }

        private decimal diversity_gain_r2_17m = 1.0M;
        public decimal DiversityR2Gain17m
        {
            get { return diversity_gain_r2_17m; }
            set { diversity_gain_r2_17m = value; }
        }

        private decimal diversity_gain_r2_15m = 1.0M;
        public decimal DiversityR2Gain15m
        {
            get { return diversity_gain_r2_15m; }
            set { diversity_gain_r2_15m = value; }
        }

        private decimal diversity_gain_r2_12m = 1.0M;
        public decimal DiversityR2Gain12m
        {
            get { return diversity_gain_r2_12m; }
            set { diversity_gain_r2_12m = value; }
        }

        private decimal diversity_gain_r2_10m = 1.0M;
        public decimal DiversityR2Gain10m
        {
            get { return diversity_gain_r2_10m; }
            set { diversity_gain_r2_10m = value; }
        }

        private decimal diversity_gain_r2_6m = 1.0M;
        public decimal DiversityR2Gain6m
        {
            get { return diversity_gain_r2_6m; }
            set { diversity_gain_r2_6m = value; }
        }

        private decimal diversity_gain_r2_wwv = 1.0M;
        public decimal DiversityR2GainWWV
        {
            get { return diversity_gain_r2_wwv; }
            set { diversity_gain_r2_wwv = value; }
        }

        private decimal diversity_gain_r2_gen = 1.0M;
        public decimal DiversityR2GainGEN
        {
            get { return diversity_gain_r2_gen; }
            set { diversity_gain_r2_gen = value; }
        }

        private decimal diversity_gain_r2_xvtr = 1.0M;
        public decimal DiversityR2GainXVTR
        {
            get { return diversity_gain_r2_xvtr; }
            set { diversity_gain_r2_xvtr = value; }
        }

        private decimal diversity_phase_160m = 0.0M;
        public decimal DiversityPhase160m
        {
            get { return diversity_phase_160m; }
            set { diversity_phase_160m = value; }
        }

        private decimal diversity_phase_80m = 0.0M;
        public decimal DiversityPhase80m
        {
            get { return diversity_phase_80m; }
            set { diversity_phase_80m = value; }
        }

        private decimal diversity_phase_60m = 0.0M;
        public decimal DiversityPhase60m
        {
            get { return diversity_phase_60m; }
            set { diversity_phase_60m = value; }
        }

        private decimal diversity_phase_40m = 0.0M;
        public decimal DiversityPhase40m
        {
            get { return diversity_phase_40m; }
            set { diversity_phase_40m = value; }
        }

        private decimal diversity_phase_30m = 0.0M;
        public decimal DiversityPhase30m
        {
            get { return diversity_phase_30m; }
            set { diversity_phase_30m = value; }
        }

        private decimal diversity_phase_20m = 0.0M;
        public decimal DiversityPhase20m
        {
            get { return diversity_phase_20m; }
            set { diversity_phase_20m = value; }
        }

        private decimal diversity_phase_17m = 0.0M;
        public decimal DiversityPhase17m
        {
            get { return diversity_phase_17m; }
            set { diversity_phase_17m = value; }
        }

        private decimal diversity_phase_15m = 0.0M;
        public decimal DiversityPhase15m
        {
            get { return diversity_phase_15m; }
            set { diversity_phase_15m = value; }
        }

        private decimal diversity_phase_12m = 0.0M;
        public decimal DiversityPhase12m
        {
            get { return diversity_phase_12m; }
            set { diversity_phase_12m = value; }
        }

        private decimal diversity_phase_10m = 0.0M;
        public decimal DiversityPhase10m
        {
            get { return diversity_phase_10m; }
            set { diversity_phase_10m = value; }
        }

        private decimal diversity_phase_6m = 0.0M;
        public decimal DiversityPhase6m
        {
            get { return diversity_phase_6m; }
            set { diversity_phase_6m = value; }
        }

        private decimal diversity_phase_wwv = 0.0M;
        public decimal DiversityPhaseWWV
        {
            get { return diversity_phase_wwv; }
            set { diversity_phase_wwv = value; }
        }

        private decimal diversity_phase_gen = 0.0M;
        public decimal DiversityPhaseGEN
        {
            get { return diversity_phase_gen; }
            set { diversity_phase_gen = value; }
        }

        private decimal diversity_phase_xvtr = 0.0M;
        public decimal DiversityPhaseXVTR
        {
            get { return diversity_phase_xvtr; }
            set { diversity_phase_xvtr = value; }
        }

        private float waterfall_high_threshold_160m = -80.0F;
        public float WaterfallHighThreshold160m
        {
            get { return waterfall_high_threshold_160m; }
            set { waterfall_high_threshold_160m = value; }
        }

        private float waterfall_low_threshold_160m = -120.0F;
        public float WaterfallLowThreshold160m
        {
            get { return waterfall_low_threshold_160m; }
            set { waterfall_low_threshold_160m = value; }
        }

        private float waterfall_high_threshold_80m = -80.0F;
        public float WaterfallHighThreshold80m
        {
            get { return waterfall_high_threshold_80m; }
            set { waterfall_high_threshold_80m = value; }
        }

        private float waterfall_low_threshold_80m = -120.0F;
        public float WaterfallLowThreshold80m
        {
            get { return waterfall_low_threshold_80m; }
            set { waterfall_low_threshold_80m = value; }
        }

        private float waterfall_high_threshold_60m = -80.0F;
        public float WaterfallHighThreshold60m
        {
            get { return waterfall_high_threshold_60m; }
            set { waterfall_high_threshold_60m = value; }
        }

        private float waterfall_low_threshold_60m = -120.0F;
        public float WaterfallLowThreshold60m
        {
            get { return waterfall_low_threshold_60m; }
            set { waterfall_low_threshold_60m = value; }
        }

        private float waterfall_high_threshold_40m = -80.0F;
        public float WaterfallHighThreshold40m
        {
            get { return waterfall_high_threshold_40m; }
            set { waterfall_high_threshold_40m = value; }
        }

        private float waterfall_low_threshold_40m = -120.0F;
        public float WaterfallLowThreshold40m
        {
            get { return waterfall_low_threshold_40m; }
            set { waterfall_low_threshold_40m = value; }
        }

        private float waterfall_high_threshold_30m = -80.0F;
        public float WaterfallHighThreshold30m
        {
            get { return waterfall_high_threshold_30m; }
            set { waterfall_high_threshold_30m = value; }
        }

        private float waterfall_low_threshold_30m = -130.0F;
        public float WaterfallLowThreshold30m
        {
            get { return waterfall_low_threshold_30m; }
            set { waterfall_low_threshold_30m = value; }
        }

        private float waterfall_high_threshold_20m = -80.0F;
        public float WaterfallHighThreshold20m
        {
            get { return waterfall_high_threshold_20m; }
            set { waterfall_high_threshold_20m = value; }
        }

        private float waterfall_low_threshold_20m = -130.0F;
        public float WaterfallLowThreshold20m
        {
            get { return waterfall_low_threshold_20m; }
            set { waterfall_low_threshold_20m = value; }
        }

        private float waterfall_high_threshold_17m = -80.0F;
        public float WaterfallHighThreshold17m
        {
            get { return waterfall_high_threshold_17m; }
            set { waterfall_high_threshold_17m = value; }
        }

        private float waterfall_low_threshold_17m = -130.0F;
        public float WaterfallLowThreshold17m
        {
            get { return waterfall_low_threshold_17m; }
            set { waterfall_low_threshold_17m = value; }
        }

        private float waterfall_high_threshold_15m = -80.0F;
        public float WaterfallHighThreshold15m
        {
            get { return waterfall_high_threshold_15m; }
            set { waterfall_high_threshold_15m = value; }
        }

        private float waterfall_low_threshold_15m = -130.0F;
        public float WaterfallLowThreshold15m
        {
            get { return waterfall_low_threshold_15m; }
            set { waterfall_low_threshold_15m = value; }
        }

        private float waterfall_high_threshold_12m = -80.0F;
        public float WaterfallHighThreshold12m
        {
            get { return waterfall_high_threshold_12m; }
            set { waterfall_high_threshold_12m = value; }
        }

        private float waterfall_low_threshold_12m = -140.0F;
        public float WaterfallLowThreshold12m
        {
            get { return waterfall_low_threshold_12m; }
            set { waterfall_low_threshold_12m = value; }
        }

        private float waterfall_high_threshold_10m = -80.0F;
        public float WaterfallHighThreshold10m
        {
            get { return waterfall_high_threshold_10m; }
            set { waterfall_high_threshold_10m = value; }
        }

        private float waterfall_low_threshold_10m = -140.0F;
        public float WaterfallLowThreshold10m
        {
            get { return waterfall_low_threshold_10m; }
            set { waterfall_low_threshold_10m = value; }
        }

        private float waterfall_high_threshold_6m = -80.0F;
        public float WaterfallHighThreshold6m
        {
            get { return waterfall_high_threshold_6m; }
            set { waterfall_high_threshold_6m = value; }
        }

        private float waterfall_low_threshold_6m = -140.0F;
        public float WaterfallLowThreshold6m
        {
            get { return waterfall_low_threshold_6m; }
            set { waterfall_low_threshold_6m = value; }
        }

        private float waterfall_high_threshold_wwv = -80.0F;
        public float WaterfallHighThresholdWWV
        {
            get { return waterfall_high_threshold_wwv; }
            set { waterfall_high_threshold_wwv = value; }
        }

        private float waterfall_low_threshold_wwv = -130.0F;
        public float WaterfallLowThresholdWWV
        {
            get { return waterfall_low_threshold_wwv; }
            set { waterfall_low_threshold_wwv = value; }
        }

        private float waterfall_high_threshold_gen = -80.0F;
        public float WaterfallHighThresholdGEN
        {
            get { return waterfall_high_threshold_gen; }
            set { waterfall_high_threshold_gen = value; }
        }

        private float waterfall_low_threshold_gen = -130.0F;
        public float WaterfallLowThresholdGEN
        {
            get { return waterfall_low_threshold_gen; }
            set { waterfall_low_threshold_gen = value; }
        }

        private float waterfall_high_threshold_xvtr = -80.0F;
        public float WaterfallHighThresholdXVTR
        {
            get { return waterfall_high_threshold_xvtr; }
            set { waterfall_high_threshold_xvtr = value; }
        }

        private float waterfall_low_threshold_xvtr = -140.0F;
        public float WaterfallLowThresholdXVTR
        {
            get { return waterfall_low_threshold_xvtr; }
            set { waterfall_low_threshold_xvtr = value; }
        }

        private float rx2_waterfall_high_threshold_160m = -80.0F;
        public float RX2WaterfallHighThreshold160m
        {
            get { return rx2_waterfall_high_threshold_160m; }
            set { rx2_waterfall_high_threshold_160m = value; }
        }

        private float rx2_waterfall_low_threshold_160m = -120.0F;
        public float RX2WaterfallLowThreshold160m
        {
            get { return rx2_waterfall_low_threshold_160m; }
            set { rx2_waterfall_low_threshold_160m = value; }
        }

        private float rx2_waterfall_high_threshold_80m = -80.0F;
        public float RX2WaterfallHighThreshold80m
        {
            get { return rx2_waterfall_high_threshold_80m; }
            set { rx2_waterfall_high_threshold_80m = value; }
        }

        private float rx2_waterfall_low_threshold_80m = -120.0F;
        public float RX2WaterfallLowThreshold80m
        {
            get { return rx2_waterfall_low_threshold_80m; }
            set { rx2_waterfall_low_threshold_80m = value; }
        }

        private float rx2_waterfall_high_threshold_60m = -80.0F;
        public float RX2WaterfallHighThreshold60m
        {
            get { return rx2_waterfall_high_threshold_60m; }
            set { rx2_waterfall_high_threshold_60m = value; }
        }

        private float rx2_waterfall_low_threshold_60m = -120.0F;
        public float RX2WaterfallLowThreshold60m
        {
            get { return rx2_waterfall_low_threshold_60m; }
            set { rx2_waterfall_low_threshold_60m = value; }
        }

        private float rx2_waterfall_high_threshold_40m = -80.0F;
        public float RX2WaterfallHighThreshold40m
        {
            get { return rx2_waterfall_high_threshold_40m; }
            set { rx2_waterfall_high_threshold_40m = value; }
        }

        private float rx2_waterfall_low_threshold_40m = -120.0F;
        public float RX2WaterfallLowThreshold40m
        {
            get { return rx2_waterfall_low_threshold_40m; }
            set { rx2_waterfall_low_threshold_40m = value; }
        }

        private float rx2_waterfall_high_threshold_30m = -80.0F;
        public float RX2WaterfallHighThreshold30m
        {
            get { return rx2_waterfall_high_threshold_30m; }
            set { rx2_waterfall_high_threshold_30m = value; }
        }

        private float rx2_waterfall_low_threshold_30m = -130.0F;
        public float RX2WaterfallLowThreshold30m
        {
            get { return rx2_waterfall_low_threshold_30m; }
            set { rx2_waterfall_low_threshold_30m = value; }
        }

        private float rx2_waterfall_high_threshold_20m = -80.0F;
        public float RX2WaterfallHighThreshold20m
        {
            get { return rx2_waterfall_high_threshold_20m; }
            set { rx2_waterfall_high_threshold_20m = value; }
        }

        private float rx2_waterfall_low_threshold_20m = -130.0F;
        public float RX2WaterfallLowThreshold20m
        {
            get { return rx2_waterfall_low_threshold_20m; }
            set { rx2_waterfall_low_threshold_20m = value; }
        }

        private float rx2_waterfall_high_threshold_17m = -80.0F;
        public float RX2WaterfallHighThreshold17m
        {
            get { return rx2_waterfall_high_threshold_17m; }
            set { rx2_waterfall_high_threshold_17m = value; }
        }

        private float rx2_waterfall_low_threshold_17m = -130.0F;
        public float RX2WaterfallLowThreshold17m
        {
            get { return rx2_waterfall_low_threshold_17m; }
            set { rx2_waterfall_low_threshold_17m = value; }
        }

        private float rx2_waterfall_high_threshold_15m = -80.0F;
        public float RX2WaterfallHighThreshold15m
        {
            get { return rx2_waterfall_high_threshold_15m; }
            set { rx2_waterfall_high_threshold_15m = value; }
        }

        private float rx2_waterfall_low_threshold_15m = -130.0F;
        public float RX2WaterfallLowThreshold15m
        {
            get { return rx2_waterfall_low_threshold_15m; }
            set { rx2_waterfall_low_threshold_15m = value; }
        }

        private float rx2_waterfall_high_threshold_12m = -80.0F;
        public float RX2WaterfallHighThreshold12m
        {
            get { return rx2_waterfall_high_threshold_12m; }
            set { rx2_waterfall_high_threshold_12m = value; }
        }

        private float rx2_waterfall_low_threshold_12m = -140.0F;
        public float RX2WaterfallLowThreshold12m
        {
            get { return rx2_waterfall_low_threshold_12m; }
            set { rx2_waterfall_low_threshold_12m = value; }
        }

        private float rx2_waterfall_high_threshold_10m = -80.0F;
        public float RX2WaterfallHighThreshold10m
        {
            get { return rx2_waterfall_high_threshold_10m; }
            set { rx2_waterfall_high_threshold_10m = value; }
        }

        private float rx2_waterfall_low_threshold_10m = -140.0F;
        public float RX2WaterfallLowThreshold10m
        {
            get { return rx2_waterfall_low_threshold_10m; }
            set { rx2_waterfall_low_threshold_10m = value; }
        }

        private float rx2_waterfall_high_threshold_6m = -80.0F;
        public float RX2WaterfallHighThreshold6m
        {
            get { return rx2_waterfall_high_threshold_6m; }
            set { rx2_waterfall_high_threshold_6m = value; }
        }

        private float rx2_waterfall_low_threshold_6m = -140.0F;
        public float RX2WaterfallLowThreshold6m
        {
            get { return rx2_waterfall_low_threshold_6m; }
            set { rx2_waterfall_low_threshold_6m = value; }
        }

        private float rx2_waterfall_high_threshold_wwv = -80.0F;
        public float RX2WaterfallHighThresholdWWV
        {
            get { return rx2_waterfall_high_threshold_wwv; }
            set { rx2_waterfall_high_threshold_wwv = value; }
        }

        private float rx2_waterfall_low_threshold_wwv = -130.0F;
        public float RX2WaterfallLowThresholdWWV
        {
            get { return rx2_waterfall_low_threshold_wwv; }
            set { rx2_waterfall_low_threshold_wwv = value; }
        }

        private float rx2_waterfall_high_threshold_gen = -80.0F;
        public float RX2WaterfallHighThresholdGEN
        {
            get { return rx2_waterfall_high_threshold_gen; }
            set { rx2_waterfall_high_threshold_gen = value; }
        }

        private float rx2_waterfall_low_threshold_gen = -130.0F;
        public float RX2WaterfallLowThresholdGEN
        {
            get { return rx2_waterfall_low_threshold_gen; }
            set { rx2_waterfall_low_threshold_gen = value; }
        }

        private float rx2_waterfall_high_threshold_xvtr = -80.0F;
        public float RX2WaterfallHighThresholdXVTR
        {
            get { return rx2_waterfall_high_threshold_xvtr; }
            set { rx2_waterfall_high_threshold_xvtr = value; }
        }

        private float rx2_waterfall_low_threshold_xvtr = -140.0F;
        public float RX2WaterfallLowThresholdXVTR
        {
            get { return rx2_waterfall_low_threshold_xvtr; }
            set { rx2_waterfall_low_threshold_xvtr = value; }
        }

        //grid levels
        private float display_grid_max_160m = -40.0F;
        public float DisplayGridMax160m
        {
            get { return display_grid_max_160m; }
            set { display_grid_max_160m = value; }
        }

        private float display_grid_min_160m = -140.0F;
        public float DisplayGridMin160m
        {
            get { return display_grid_min_160m; }
            set { display_grid_min_160m = value; }
        }

        private float display_grid_max_80m = -40.0F;
        public float DisplayGridMax80m
        {
            get { return display_grid_max_80m; }
            set { display_grid_max_80m = value; }
        }

        private float display_grid_min_80m = -140.0F;
        public float DisplayGridMin80m
        {
            get { return display_grid_min_80m; }
            set { display_grid_min_80m = value; }
        }

        private float display_grid_max_60m = -40.0F;
        public float DisplayGridMax60m
        {
            get { return display_grid_max_60m; }
            set { display_grid_max_60m = value; }
        }

        private float display_grid_min_60m = -140.0F;
        public float DisplayGridMin60m
        {
            get { return display_grid_min_60m; }
            set { display_grid_min_60m = value; }
        }

        private float display_grid_max_40m = -40.0F;
        public float DisplayGridMax40m
        {
            get { return display_grid_max_40m; }
            set { display_grid_max_40m = value; }
        }

        private float display_grid_min_40m = -140.0F;
        public float DisplayGridMin40m
        {
            get { return display_grid_min_40m; }
            set { display_grid_min_40m = value; }
        }

        private float display_grid_max_30m = -40.0F;
        public float DisplayGridMax30m
        {
            get { return display_grid_max_30m; }
            set { display_grid_max_30m = value; }
        }

        private float display_grid_min_30m = -140.0F;
        public float DisplayGridMin30m
        {
            get { return display_grid_min_30m; }
            set { display_grid_min_30m = value; }
        }

        private float display_grid_max_20m = -40.0F;
        public float DisplayGridMax20m
        {
            get { return display_grid_max_20m; }
            set { display_grid_max_20m = value; }
        }

        private float display_grid_min_20m = -140.0F;
        public float DisplayGridMin20m
        {
            get { return display_grid_min_20m; }
            set { display_grid_min_20m = value; }
        }

        private float display_grid_max_17m = -40.0F;
        public float DisplayGridMax17m
        {
            get { return display_grid_max_17m; }
            set { display_grid_max_17m = value; }
        }

        private float display_grid_min_17m = -140.0F;
        public float DisplayGridMin17m
        {
            get { return display_grid_min_17m; }
            set { display_grid_min_17m = value; }
        }

        private float display_grid_max_15m = -40.0F;
        public float DisplayGridMax15m
        {
            get { return display_grid_max_15m; }
            set { display_grid_max_15m = value; }
        }

        private float display_grid_min_15m = -140.0F;
        public float DisplayGridMin15m
        {
            get { return display_grid_min_15m; }
            set { display_grid_min_15m = value; }
        }

        private float display_grid_max_12m = -40.0F;
        public float DisplayGridMax12m
        {
            get { return display_grid_max_12m; }
            set { display_grid_max_12m = value; }
        }

        private float display_grid_min_12m = -140.0F;
        public float DisplayGridMin12m
        {
            get { return display_grid_min_12m; }
            set { display_grid_min_12m = value; }
        }

        private float display_grid_max_10m = -40.0F;
        public float DisplayGridMax10m
        {
            get { return display_grid_max_10m; }
            set { display_grid_max_10m = value; }
        }

        private float display_grid_min_10m = -140.0F;
        public float DisplayGridMin10m
        {
            get { return display_grid_min_10m; }
            set { display_grid_min_10m = value; }
        }

        private float display_grid_max_6m = -40.0F;
        public float DisplayGridMax6m
        {
            get { return display_grid_max_6m; }
            set { display_grid_max_6m = value; }
        }

        private float display_grid_min_6m = -140.0F;
        public float DisplayGridMin6m
        {
            get { return display_grid_min_6m; }
            set { display_grid_min_6m = value; }
        }

        private float display_grid_max_wwv = -40.0F;
        public float DisplayGridMaxWWV
        {
            get { return display_grid_max_wwv; }
            set { display_grid_max_wwv = value; }
        }

        private float display_grid_min_wwv = -140.0F;
        public float DisplayGridMinWWV
        {
            get { return display_grid_min_wwv; }
            set { display_grid_min_wwv = value; }
        }

        private float display_grid_max_gen = -40.0F;
        public float DisplayGridMaxGEN
        {
            get { return display_grid_max_gen; }
            set { display_grid_max_gen = value; }
        }

        private float display_grid_min_gen = -140.0F;
        public float DisplayGridMinGEN
        {
            get { return display_grid_min_gen; }
            set { display_grid_min_gen = value; }
        }

        private float display_grid_max_xvtr = -40.0F;
        public float DisplayGridMaxXVTR
        {
            get { return display_grid_max_xvtr; }
            set { display_grid_max_xvtr = value; }
        }

        private float display_grid_min_xvtr = -140.0F;
        public float DisplayGridMinXVTR
        {
            get { return display_grid_min_xvtr; }
            set { display_grid_min_xvtr = value; }
        }

        // rx2 grid levels
        private float rx2_display_grid_max_160m = -40.0F;
        public float RX2DisplayGridMax160m
        {
            get { return rx2_display_grid_max_160m; }
            set { rx2_display_grid_max_160m = value; }
        }

        private float rx2_display_grid_min_160m = -140.0F;
        public float RX2DisplayGridMin160m
        {
            get { return rx2_display_grid_min_160m; }
            set { rx2_display_grid_min_160m = value; }
        }

        private float rx2_display_grid_max_80m = -40.0F;
        public float RX2DisplayGridMax80m
        {
            get { return rx2_display_grid_max_80m; }
            set { rx2_display_grid_max_80m = value; }
        }

        private float rx2_display_grid_min_80m = -140.0F;
        public float RX2DisplayGridMin80m
        {
            get { return rx2_display_grid_min_80m; }
            set { rx2_display_grid_min_80m = value; }
        }

        private float rx2_display_grid_max_60m = -40.0F;
        public float RX2DisplayGridMax60m
        {
            get { return rx2_display_grid_max_60m; }
            set { rx2_display_grid_max_60m = value; }
        }

        private float rx2_display_grid_min_60m = -140.0F;
        public float RX2DisplayGridMin60m
        {
            get { return rx2_display_grid_min_60m; }
            set { rx2_display_grid_min_60m = value; }
        }

        private float rx2_display_grid_max_40m = -40.0F;
        public float RX2DisplayGridMax40m
        {
            get { return rx2_display_grid_max_40m; }
            set { rx2_display_grid_max_40m = value; }
        }

        private float rx2_display_grid_min_40m = -140.0F;
        public float RX2DisplayGridMin40m
        {
            get { return rx2_display_grid_min_40m; }
            set { rx2_display_grid_min_40m = value; }
        }

        private float rx2_display_grid_max_30m = -40.0F;
        public float RX2DisplayGridMax30m
        {
            get { return rx2_display_grid_max_30m; }
            set { rx2_display_grid_max_30m = value; }
        }

        private float rx2_display_grid_min_30m = -140.0F;
        public float RX2DisplayGridMin30m
        {
            get { return rx2_display_grid_min_30m; }
            set { rx2_display_grid_min_30m = value; }
        }

        private float rx2_display_grid_max_20m = -40.0F;
        public float RX2DisplayGridMax20m
        {
            get { return rx2_display_grid_max_20m; }
            set { rx2_display_grid_max_20m = value; }
        }

        private float rx2_display_grid_min_20m = -140.0F;
        public float RX2DisplayGridMin20m
        {
            get { return rx2_display_grid_min_20m; }
            set { rx2_display_grid_min_20m = value; }
        }

        private float rx2_display_grid_max_17m = -40.0F;
        public float RX2DisplayGridMax17m
        {
            get { return rx2_display_grid_max_17m; }
            set { rx2_display_grid_max_17m = value; }
        }

        private float rx2_display_grid_min_17m = -140.0F;
        public float RX2DisplayGridMin17m
        {
            get { return rx2_display_grid_min_17m; }
            set { rx2_display_grid_min_17m = value; }
        }

        private float rx2_display_grid_max_15m = -40.0F;
        public float RX2DisplayGridMax15m
        {
            get { return rx2_display_grid_max_15m; }
            set { rx2_display_grid_max_15m = value; }
        }

        private float rx2_display_grid_min_15m = -140.0F;
        public float RX2DisplayGridMin15m
        {
            get { return rx2_display_grid_min_15m; }
            set { rx2_display_grid_min_15m = value; }
        }

        private float rx2_display_grid_max_12m = -40.0F;
        public float RX2DisplayGridMax12m
        {
            get { return rx2_display_grid_max_12m; }
            set { rx2_display_grid_max_12m = value; }
        }

        private float rx2_display_grid_min_12m = -140.0F;
        public float RX2DisplayGridMin12m
        {
            get { return rx2_display_grid_min_12m; }
            set { rx2_display_grid_min_12m = value; }
        }

        private float rx2_display_grid_max_10m = -40.0F;
        public float RX2DisplayGridMax10m
        {
            get { return rx2_display_grid_max_10m; }
            set { rx2_display_grid_max_10m = value; }
        }

        private float rx2_display_grid_min_10m = -140.0F;
        public float RX2DisplayGridMin10m
        {
            get { return rx2_display_grid_min_10m; }
            set { rx2_display_grid_min_10m = value; }
        }

        private float rx2_display_grid_max_6m = -40.0F;
        public float RX2DisplayGridMax6m
        {
            get { return rx2_display_grid_max_6m; }
            set { rx2_display_grid_max_6m = value; }
        }

        private float rx2_display_grid_min_6m = -140.0F;
        public float RX2DisplayGridMin6m
        {
            get { return rx2_display_grid_min_6m; }
            set { rx2_display_grid_min_6m = value; }
        }

        private float rx2_display_grid_max_wwv = -40.0F;
        public float RX2DisplayGridMaxWWV
        {
            get { return rx2_display_grid_max_wwv; }
            set { rx2_display_grid_max_wwv = value; }
        }

        private float rx2_display_grid_min_wwv = -140.0F;
        public float RX2DisplayGridMinWWV
        {
            get { return rx2_display_grid_min_wwv; }
            set { rx2_display_grid_min_wwv = value; }
        }

        private float rx2_display_grid_max_gen = -40.0F;
        public float RX2DisplayGridMaxGEN
        {
            get { return rx2_display_grid_max_gen; }
            set { rx2_display_grid_max_gen = value; }
        }

        private float rx2_display_grid_min_gen = -140.0F;
        public float RX2DisplayGridMinGEN
        {
            get { return rx2_display_grid_min_gen; }
            set { rx2_display_grid_min_gen = value; }
        }

        private float rx2_display_grid_max_xvtr = -40.0F;
        public float RX2DisplayGridMaxXVTR
        {
            get { return rx2_display_grid_max_xvtr; }
            set { rx2_display_grid_max_xvtr = value; }
        }

        private float rx2_display_grid_min_xvtr = -140.0F;
        public float RX2DisplayGridMinXVTR
        {
            get { return rx2_display_grid_min_xvtr; }
            set { rx2_display_grid_min_xvtr = value; }
        }

        private int digu_click_tune_offset = 1500;
        public int DIGUClickTuneOffset
        {
            get { return digu_click_tune_offset; }
            set
            {
                digu_click_tune_offset = value;
                digu_click_tune_offset = value;
                Filter filter1 = RX1Filter;     // save RX1 filter
                Filter filter2 = RX2Filter;     // save RX2 filter
                //reset preset filter's center frequency - W4TME

                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    int low = rx1_filters[(int)DSPMode.DIGU].GetLow(f);
                    int high = rx1_filters[(int)DSPMode.DIGU].GetHigh(f);
                    string name = rx1_filters[(int)DSPMode.DIGU].GetName(f);

                    int bw = high - low;
                    low = digu_click_tune_offset - bw / 2;
                    high = digu_click_tune_offset + bw / 2;
                    rx1_filters[(int)DSPMode.DIGU].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.DIGU].SetFilter(f, low, high, name);
                }
                RX1Filter = filter1;            // restore RX1 filter
                RX2Filter = filter2;            // restore RX2 filter                     
            }
        }

        private int digl_click_tune_offset = 2210;
        public int DIGLClickTuneOffset
        {
            get { return digl_click_tune_offset; }
            set
            {
                digl_click_tune_offset = value;
                Filter filter1 = RX1Filter;     // save RX1 filter
                Filter filter2 = RX2Filter;     // save RX2 filter
                //reset preset filter's center frequency - W4TME

                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    int low = rx1_filters[(int)DSPMode.DIGL].GetLow(f);
                    int high = rx1_filters[(int)DSPMode.DIGL].GetHigh(f);
                    string name = rx1_filters[(int)DSPMode.DIGL].GetName(f);

                    int bw = high - low;
                    low = -digl_click_tune_offset - bw / 2;
                    high = -digl_click_tune_offset + bw / 2;
                    rx1_filters[(int)DSPMode.DIGL].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.DIGL].SetFilter(f, low, high, name);
                }
                RX1Filter = filter1;        // restore RX1 filter
                RX2Filter = filter2;        // restore RX2 filter          
            }
        }

        private double vox_hang_time = 250.0;
        public double VOXHangTime
        {
            get { return vox_hang_time; }
            set
            {
                vox_hang_time = value;
                if (SetupForm != null) SetupForm.VOXHangTime = (int)value;
            }
        }

        private bool vox_active = false;
        public bool VOXActive
        {
            get { return vox_active; }
            set { vox_active = value; }
        }

        private bool save_txprofile_on_exit = true;
        public bool SaveTXProfileOnExit
        {
            get { return save_txprofile_on_exit; }
            set { save_txprofile_on_exit = value; }
        }

        private HPSDRModel current_hpsdr_model = HPSDRModel.HPSDR;
        public HPSDRModel CurrentHPSDRModel
        {
            get { return current_hpsdr_model; }
            set
            {
                HPSDRModel saved_hpsdr_model = current_hpsdr_model;
                current_hpsdr_model = value;
                Display.CurrentHPSDRModel = value;
                chkFullDuplex.Visible = false;

                switch (current_hpsdr_model)
                {
                    case HPSDRModel.HPSDR:
                    case HPSDRModel.HERMES:
                        chkDX.Checked = false;
                        chkDX.Visible = false;
                        break;
                    case HPSDRModel.ANAN10:
                    case HPSDRModel.ANAN10E:
                    case HPSDRModel.ANAN100:
                    case HPSDRModel.ANAN100B:
                        if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                            comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                        if (!comboMeterTXMode.Items.Contains("SWR"))
                            comboMeterTXMode.Items.Insert(2, "SWR");
                        if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                        {
                            if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                                comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                        }
                        chkDX.Checked = false;
                        chkDX.Visible = false;
                        break;
                    case HPSDRModel.ANAN100D:
                    case HPSDRModel.ANAN200D:
                    case HPSDRModel.ORIONMKII:
                    case HPSDRModel.ANAN7000D:
                    case HPSDRModel.ANAN8000D:
                        if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                            comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                        if (!comboMeterTXMode.Items.Contains("SWR"))
                            comboMeterTXMode.Items.Insert(2, "SWR");
                        if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                        {
                            if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                                comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                        }
                        chkDX.Visible = true;
                        break;

                }

                SetComboPreampForHPSDR();
                UpdateDDCs(rx2_enabled);

                if (!initializing)
                {
                    rx1_meter_cal_offset = rx_meter_cal_offset_by_radio[(int)current_hpsdr_model];
                    RX1DisplayCalOffset = rx_display_cal_offset_by_radio[(int)current_hpsdr_model];
                }

                if (SetupForm != null && saved_hpsdr_model != current_hpsdr_model)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                cmaster.CMSetTXOutputLevelRun();

            }
        }

        private HPSDRHW current_hpsdr_hardware = HPSDRHW.Atlas;
        public HPSDRHW CurrentHPSDRHardware
        {
            get { return current_hpsdr_hardware; }
            set
            {
                current_hpsdr_hardware = value;
            }
        }

        private Model current_model = Model.HERMES;
        public Model CurrentModel
        {
            get { return current_model; }
            set
            {
                Model saved_model = current_model;
                current_model = value;
                // Display.CurrentModel = value;
                chkFullDuplex.Visible = false;
                switch (current_model)
                {
                    //case Model.FLEX5000:
                    //    MinFreq = 0.0; //Math.Max(if_freq, 0.0000010);
                    //    MaxFreq = 65.0;
                    //    chkPower.Enabled = false;
                    //    break;

                    case Model.HPSDR:
                    case Model.HERMES:
                        MinFreq = 0.000000;
                        MaxFreq = 61.0;
                        // SetComboPreampForHPSDR();
                        // comboPreamp.Text = "0dB";
                        //comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                        // chkBCI.Visible = false;
                        chkFWCATU.Visible = true;
                        // chkFWCATUBypass.Visible = false;
                        //  panelAntenna.Visible = false;
                        // chkX2TR.Visible = false;

                        if (alexpresent || apollopresent)
                        {
                            if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                                comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                            if (!comboMeterTXMode.Items.Contains("SWR"))
                                comboMeterTXMode.Items.Insert(2, "SWR");
                            if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                            {
                                if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                                    comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                            }
                        }
                        break;
                }

                if (SetupForm != null && saved_model != current_model)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                cmaster.CMSetTXOutputLevelRun();
            }
        }

        private DateTimeMode current_datetime_mode = DateTimeMode.LOCAL;
        public DateTimeMode CurrentDateTimeMode
        {
            get { return current_datetime_mode; }
            set
            {
                current_datetime_mode = value;
                if (current_datetime_mode == DateTimeMode.OFF)
                {
                    panelDateTime.Text = "Date/Time - Off";
                    timer_clock.Enabled = false;
                    txtDate.Text = "";
                    txtTime.Text = "";
                }
                else
                {
                    if (panelDateTime.Text != "Date/Time")
                        panelDateTime.Text = "Date/Time";
                    if (!timer_clock.Enabled)
                        timer_clock.Enabled = true;
                }
            }
        }

        private int alex_preamp_offset = 0;
        public int AlexPreampOffset
        {
            get { return alex_preamp_offset; }
            set
            {
                alex_preamp_offset = value;
                Display.AlexPreampOffset = alex_preamp_offset;
            }
        }

        private double saved_vfoa_freq = 7.1;
        /*		public float SavedVFOAFreq
                {
                    get { return saved_vfoa_freq; }
                    set { saved_vfoa_freq = value; }
                }
        */

        private double saved_vfoa_sub_freq = 7.1;

        private double saved_vfob_freq = 7.1;
        /*		public float SavedVFOBFreq
                {
                    get { return saved_vfob_freq; }
                    set { saved_vfob_freq = value; }
                }
        */

        private bool penny_ext_ctrl_enabled = false;
        public bool PennyExtCtrlEnabled
        {
            get { return penny_ext_ctrl_enabled; }
            set
            {
                Band lo_band = Band.FIRST;
                Band lo_bandb = Band.FIRST;
                penny_ext_ctrl_enabled = value;

                if (!initializing)
                {
                    //if (rx1_xvtr_index >= 0)
                    //{
                    //lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), -1, false, current_region);
                    // Fix Penny O/C VHF control Vk4xv
                    lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);
                    lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region, false);
                    // if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(lo_band, mox);
                    Penny.getPenny().ExtCtrlEnable(value, lo_band, lo_bandb, mox);
                    // if (alex_ant_ctrl_enabled)
                    //  Alex.getAlex().UpdateAlexAntSelection(lo_band, mox);
                    //}
                    //else
                    //{
                    //    //  if (penny_ext_ctrl_enabled)
                    //    //  Penny.getPenny().UpdateExtCtrl(RX1Band, mox);
                    //    Penny.getPenny().ExtCtrlEnable(value, RX1Band, RX2Band, mox);
                    //    // if (alex_ant_ctrl_enabled)
                    //    //Alex.getAlex().UpdateAlexAntSelection(RX1Band, mox);
                    //}

                    //  Penny.getPenny().ExtCtrlEnable(value, RX1Band, mox);
                }
            }
        }

        private bool alex_ant_ctrl_enabled = false;
        public bool AlexAntCtrlEnabled
        {
            get { return alex_ant_ctrl_enabled; }
            set
            {
                Band lo_band = Band.FIRST;
                alex_ant_ctrl_enabled = value;

                UpdateTRXAnt();
                if (rx1_xvtr_index >= 0)
                {
                    //lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), -1, false, current_region);
                    // Fix Penny O/C VHF control Vk4xv
                    lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);

                    // if (penny_ext_ctrl_enabled)
                    //   Penny.getPenny().UpdateExtCtrl(lo_band, mox);

                    // if (alex_ant_ctrl_enabled)
                    Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, alex_ant_ctrl_enabled, true);
                }
                else
                {
                    // if (penny_ext_ctrl_enabled)
                    //   Penny.getPenny().UpdateExtCtrl(RX1Band, mox);

                    //  if (alex_ant_ctrl_enabled)
                    Alex.getAlex().UpdateAlexAntSelection(RX1Band, mox, alex_ant_ctrl_enabled, false);
                }

                UpdateTRXAnt();
            }
        }

        private void UpdateTRXAnt()
        {
            if (chkRxAnt.Checked)
            {
                if (!Alex.trx_ant_not_same)
                {
                    chkRxAnt.Checked = false;
                    return;
                }
                Alex.TRxAnt = true;
                chkRxAnt.Text = "Tx Ant";
                chkRxAnt.ForeColor = Color.Yellow;
            }
            else
            {
                Alex.TRxAnt = false;
                chkRxAnt.Text = "Rx Ant";
                if (Alex.trx_ant_not_same) chkRxAnt.ForeColor = Color.SpringGreen;
                else chkRxAnt.ForeColor = SystemColors.ControlLightLight;
            }

        }

        private bool rx_out_override = false;
        public bool RxOutOverride
        {
            get { return rx_out_override; }
            set
            {
                rx_out_override = value;
                Alex.rx_out_override = value;
                AlexAntCtrlEnabled = alex_ant_ctrl_enabled;
            }
        }

        private bool cw_semi_break_in_enabled = true;
        public bool CWSemiBreakInEnabled
        {
            get { return cw_semi_break_in_enabled; }
            set { cw_semi_break_in_enabled = value; }
        }

        private bool cw_sidetone = true;
        public bool CWSidetone
        {
            get { return cw_sidetone; }
            set
            {
                cw_sidetone = value;
                if (chkCWSidetone != null) chkCWSidetone.Checked = value;

                DSPMode tx_mode = rx1_dsp_mode;
                if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

                if (tx_mode == DSPMode.CWL || tx_mode == DSPMode.CWU)
                    chkMON.Checked = value;
            }
        }

        private PTTMode current_ptt_mode = PTTMode.NONE;
        public PTTMode CurrentPTTMode
        {
            get { return current_ptt_mode; }
            set { current_ptt_mode = value; }
        }

        private bool rx2_preamp_present = false;
        public bool RX2PreampPresent
        {
            get { return rx2_preamp_present; }
            set
            {
                rx2_preamp_present = value;
                if (rx2_preamp_present)
                {
                    if (current_hpsdr_model == HPSDRModel.HPSDR)
                    {
                        RX2StepAttPresent = false;
                    }
                    else
                    {
                        rx2_step_att_present = true;
                        // JanusAudio.EnableADC2StepAtten(0);
                        comboRX2Preamp.Show();
                        udRX2StepAttData.Show();
                        lblRX2Preamp.Visible = true;
                    }

                }
                else
                {
                    //rx2_step_att_present = false;
                    // NetworkIO.EnableADC2StepAtten(0);
                    comboRX2Preamp.Hide();
                    udRX2StepAttData.Hide();
                    lblRX2Preamp.Visible = false;
                }
            }
        }

        private int rx_adc_ctrl1 = 4;
        public int RXADCCtrl1
        {
            get { return rx_adc_ctrl1; }
            set
            {
                rx_adc_ctrl1 = value;
                UpdateRXADCCtrl();
            }
        }

        private int rx_adc_ctrl2 = 0;
        public int RXADCCtrl2
        {
            get { return rx_adc_ctrl2; }
            set
            {
                rx_adc_ctrl2 = value;
                UpdateRXADCCtrl();
            }
        }

        private CheckState vfo_lock = CheckState.Unchecked;
        public CheckState VFOLock
        {
            get { return vfo_lock; }
            set { vfo_lock = value; }
        }

        //private bool vfo_lock = false;
        //public bool VFOLock
        //{
        //    get { return vfo_lock; }
        //    set
        //    {
        //        vfo_lock = value;
        //        bool enabled = !value;
        //        txtVFOAFreq.Enabled = enabled;
        //        radBand160.Enabled = enabled;
        //        radBand80.Enabled = enabled;
        //        radBand60.Enabled = enabled;
        //        radBand40.Enabled = enabled;
        //        radBand30.Enabled = enabled;
        //        radBand20.Enabled = enabled;
        //        radBand17.Enabled = enabled;
        //        radBand15.Enabled = enabled;
        //        radBand12.Enabled = enabled;
        //        radBand10.Enabled = enabled;
        //        radBand6.Enabled = enabled;
        //        radBand2.Enabled = enabled;
        //        radBandWWV.Enabled = enabled;
        //        radBandGEN.Enabled = enabled;
        //        btnBandHF.Enabled = enabled;
        //        btnBandVHF.Enabled = enabled;
        //        radBandVHF0.Enabled = enabled;
        //        radBandVHF1.Enabled = enabled;
        //        radBandVHF2.Enabled = enabled;
        //        radBandVHF3.Enabled = enabled;
        //        radBandVHF4.Enabled = enabled;
        //        radBandVHF5.Enabled = enabled;
        //        radBandVHF6.Enabled = enabled;
        //        radBandVHF7.Enabled = enabled;
        //        radBandVHF8.Enabled = enabled;
        //        radBandVHF5.Enabled = enabled;
        //        radBandVHF9.Enabled = enabled;
        //        radBandVHF10.Enabled = enabled;
        //        radBandVHF11.Enabled = enabled;
        //        radBandVHF12.Enabled = enabled;
        //        radBandVHF13.Enabled = enabled;

        //        radModeLSB.Enabled = enabled;
        //        radModeUSB.Enabled = enabled;
        //        radModeDSB.Enabled = enabled;
        //        radModeCWL.Enabled = enabled;
        //        radModeCWU.Enabled = enabled;
        //        radModeFMN.Enabled = enabled;
        //        radModeAM.Enabled = enabled;
        //        radModeSAM.Enabled = enabled;
        //        radModeSPEC.Enabled = enabled;
        //        radModeDIGL.Enabled = enabled;
        //        radModeDIGU.Enabled = enabled;
        //        radModeDRM.Enabled = enabled;

        //        btnVFOBtoA.Enabled = enabled;
        //        btnVFOSwap.Enabled = enabled;

        //        btnMemoryQuickRestore.Enabled = enabled;
        //    }
        //}

        //-W2PA Separate locking functions for VFOA and B

        //-W2PA VFOA's individual lock not yet used
        private bool vfoA_lock = false;
        public bool VFOALock
        {
            get { return vfoA_lock; }
            set
            {
                bool enabled = true;
                vfoA_lock = value;
                switch (vfoA_lock)
                {
                    case false:
                        txtVFOAFreq.Enabled = true;
                        break;
                    case true:
                        enabled = false;
                        txtVFOAFreq.Enabled = false;
                        break;
                }

                radBand160.Enabled = enabled;
                radBand80.Enabled = enabled;
                radBand60.Enabled = enabled;
                radBand40.Enabled = enabled;
                radBand30.Enabled = enabled;
                radBand20.Enabled = enabled;
                radBand17.Enabled = enabled;
                radBand15.Enabled = enabled;
                radBand12.Enabled = enabled;
                radBand10.Enabled = enabled;
                radBand6.Enabled = enabled;
                radBand2.Enabled = enabled;
                radBandWWV.Enabled = enabled;
                radBandGEN.Enabled = enabled;
                btnBandHF.Enabled = enabled;
                btnBandVHF.Enabled = enabled;
                radBandVHF0.Enabled = enabled;
                radBandVHF1.Enabled = enabled;
                radBandVHF2.Enabled = enabled;
                radBandVHF3.Enabled = enabled;
                radBandVHF4.Enabled = enabled;
                radBandVHF5.Enabled = enabled;
                radBandVHF6.Enabled = enabled;
                radBandVHF7.Enabled = enabled;
                radBandVHF8.Enabled = enabled;
                radBandVHF5.Enabled = enabled;
                radBandVHF9.Enabled = enabled;
                radBandVHF10.Enabled = enabled;
                radBandVHF11.Enabled = enabled;
                radBandVHF12.Enabled = enabled;
                radBandVHF13.Enabled = enabled;

                radModeLSB.Enabled = enabled;
                radModeUSB.Enabled = enabled;
                radModeDSB.Enabled = enabled;
                radModeCWL.Enabled = enabled;
                radModeCWU.Enabled = enabled;
                radModeFMN.Enabled = enabled;
                radModeAM.Enabled = enabled;
                radModeSAM.Enabled = enabled;
                radModeSPEC.Enabled = enabled;
                radModeDIGL.Enabled = enabled;
                radModeDIGU.Enabled = enabled;
                radModeDRM.Enabled = enabled;

                btnVFOBtoA.Enabled = enabled;
                btnVFOSwap.Enabled = enabled;

                btnMemoryQuickRestore.Enabled = enabled;
            }
        }

        private bool vfoB_lock = false;
        public bool VFOBLock
        {
            get { return vfoB_lock; }
            set
            {
                bool enabled = true;
                vfoB_lock = value;
                switch (vfoB_lock)
                {
                    case false:
                        txtVFOBFreq.Enabled = true;
                        break;
                    case true:
                        enabled = false;
                        txtVFOBFreq.Enabled = false;
                        chkVFOSync.Checked = false;
                        break;
                }

                comboRX2Band.Enabled = enabled;
                btnVFOAtoB.Enabled = enabled;
                chkVFOSync.Enabled = enabled;
                radRX2ModeLSB.Enabled = enabled;
                radRX2ModeUSB.Enabled = enabled;
                radRX2ModeDSB.Enabled = enabled;
                radRX2ModeCWL.Enabled = enabled;
                radRX2ModeCWU.Enabled = enabled;
                radRX2ModeFMN.Enabled = enabled;
                radRX2ModeAM.Enabled = enabled;
                radRX2ModeSAM.Enabled = enabled;
                radRX2ModeSPEC.Enabled = enabled;
                radRX2ModeDIGL.Enabled = enabled;
                radRX2ModeDIGU.Enabled = enabled;
                radRX2ModeDRM.Enabled = enabled;

            }

        }

        private double wave_freq = 0.0;
        private bool wave_playback = false;
        public bool WavePlayback
        {
            get { return wave_playback; }
            set
            {
                wave_playback = value;
                if (wave_playback)
                {
                    wave_freq = (VFOAFreq * 1e6) % sample_rate1;
                }
                else
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
            }
        }

        private bool saved_rx_only = false;
        private bool rx_only = false;
        public bool RXOnly
        {
            get { return rx_only; }
            set
            {
                rx_only = value;
                if (rx1_dsp_mode != DSPMode.SPEC &&
                    rx1_dsp_mode != DSPMode.DRM &&
                    chkPower.Checked)
                    chkMOX.Enabled = !rx_only;
                chkTUN.Enabled = !rx_only;
                chkVOX.Enabled = !rx_only;
                if (rx_only && chkMOX.Checked)
                    chkMOX.Checked = false;

                if (SetupForm != null)
                {
                    if (SetupForm.RXOnly != rx_only)
                        SetupForm.RXOnly = rx_only;
                }
            }
        }

        public bool tx_inhibit_enabled = false;
        public bool tx_inhibit_sense = false;
        private bool tx_inhibit = false;
        public bool TXInhibit
        {
            get { return tx_inhibit; }
            set
            {
                tx_inhibit = value;
                if (rx1_dsp_mode != DSPMode.SPEC &&
                    rx1_dsp_mode != DSPMode.DRM &&
                    chkPower.Checked)
                    chkMOX.Enabled = !tx_inhibit;
                chkTUN.Enabled = !tx_inhibit;
                chkVOX.Enabled = !tx_inhibit;
                if ((rx1_dsp_mode == DSPMode.CWL ||
                    rx1_dsp_mode == DSPMode.CWU) &&
                    chkPower.Checked)
                    chkMOX.Enabled = !tx_inhibit;

                if (tx_inhibit && chkMOX.Checked)
                    chkMOX.Checked = false;
            }
        }

        private XVTRTRMode current_xvtr_tr_mode = XVTRTRMode.NEGATIVE;
        public XVTRTRMode CurrentXVTRTRMode
        {
            get { return current_xvtr_tr_mode; }
            set
            {
                //if (current_model != Model.SDR1000) return;//w5wc
                current_xvtr_tr_mode = value;
                switch (current_xvtr_tr_mode)
                {
                    case XVTRTRMode.NEGATIVE:
                        //  Hdw.XVTR_TR = true;			// Set to receive
                        break;
                    case XVTRTRMode.POSITIVE:
                        //  Hdw.XVTR_TR = false;			// Set to receive
                        break;
                    case XVTRTRMode.NONE:
                        //Hdw.XVTR_TR = false;
                        break;
                }
            }
        }

        private FRSRegion current_region; // = FRSRegion.US; 
        public FRSRegion CurrentRegion
        {
            get { return current_region; }
            set { current_region = value; }
        }

        private bool spur_reduction = true;
        public bool SpurReduction
        {
            get { return spur_reduction; }
            set
            {
                spur_reduction = value;
                // if (SetupForm != null) txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                // chkSR.Checked = value;
            }
        }

        private static bool display_duplex = false;
        public static bool DisplayDuplex
        {
            get { return display_duplex; }
            set { display_duplex = value; }
        }

        //private long Freq2TW(double freq)
        //{
        //    long tw = 0;
        //    switch (current_model)
        //    {
        //        case Model.HPSDR:
        //        case Model.HERMES:
        //        case Model.SDR1000:
        //            tw = (long)(0xFFFFFFFFFFFF * freq / corrected_dds_clock);
        //            break;
        //        case Model.FLEX3000:
        //        case Model.FLEX5000:
        //            tw = (long)(0xFFFFFFFF * freq / fwc_corrected_dds_clock);
        //            break;
        //    }
        //    return tw;
        //}

        //public double TW2Freq(long tw)
        //{
        //    double freq = 0.0;
        //    switch (current_model)
        //    {
        //        case Model.HPSDR:
        //        case Model.HERMES:
        //        case Model.SDR1000:
        //            freq = tw * corrected_dds_clock / 0xFFFFFFFFFFFF;
        //            break;
        //        case Model.FLEX3000:
        //        case Model.FLEX5000:
        //            freq = tw * fwc_corrected_dds_clock / 0xFFFFFFFF;
        //            break;


        //    }
        //    return freq;
        //}

        bool rx1_dds_freq_updated = false;
        //uint rx1_dds_freq_tw;
        double rx1_dds_freq_mhz;
        private void UpdateRX1DDSFreq()
        {
            rx1_dds_freq_updated = false;
            //  if (chkPower.Checked)
            //   {
            SetAlexHPF(fwc_dds_freq);
            UpdateAlexTXFilter();
            UpdateAlexRXFilter();
            // }

            if (initializing) return;

            switch (CurrentHPSDRModel)
            {
                case HPSDRModel.HERMES:
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN10E:
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100B:
                    NetworkIO.VFOfreq(0, rx1_dds_freq_mhz, 0);
                    break;
                default:
                    NetworkIO.VFOfreq(0, rx1_dds_freq_mhz, 0);
                    NetworkIO.VFOfreq(1, rx1_dds_freq_mhz, 0);
                    NetworkIO.VFOfreq(2, rx1_dds_freq_mhz, 0);
                    break;
            }

            //if (RX2Enabled && stereo_diversity)
            //    psform.RX2freq = rx1_dds_freq_mhz;
        }

        // bool rx2_dds_freq_updated = false;
        double rx2_dds_freq_mhz;
        private void UpdateRX2DDSFreq()
        {
            // if (chkPower.Checked)
            // {
            // rx2_dds_freq_updated = false;
            UpdateAlexTXFilter();
            UpdateAlexRXFilter();

            if (current_hpsdr_model == HPSDRModel.ORIONMKII ||
                current_hpsdr_model == HPSDRModel.ANAN7000D ||
                current_hpsdr_model == HPSDRModel.ANAN8000D)
            {
                SetAlex2HPF(rx2_dds_freq_mhz);
            }

            // if (!stereo_diversity)
            // psform.RX2freq = rx2_dds_freq_mhz;

            switch (CurrentHPSDRModel)
            {
                case HPSDRModel.HERMES:
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN10E:
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100B:
                    NetworkIO.VFOfreq(1, rx2_dds_freq_mhz, 0);
                    break;
                default:
                    NetworkIO.VFOfreq(3, rx2_dds_freq_mhz, 0);
                    break;
            }

            //if (!stereo_diversity)
            //    psform.RX2freq = rx2_dds_freq_mhz;
            // }
        }

        bool tx_dds_freq_updated = false;
        // uint tx_dds_freq_tw;
        double tx_dds_freq_mhz = 14;
        private void UpdateTXDDSFreq()
        {
            // if (chkPower.Checked)// && tx_dds_freq_updated)
            //  {

            if (mox)
            {
                SetAlexHPF(fwc_dds_freq);
                SetAlexLPF(tx_dds_freq_mhz);
                // SetAlex2LPF(tx_dds_freq_mhz);
            }

            // psform.TXfreq = tx_dds_freq_mhz;
            NetworkIO.VFOfreq(0, tx_dds_freq_mhz, 1);

            //  }
        }

        private void UpdateAlexTXFilter()
        {
            if (!mox)
            {
                if (!rx2_preamp_present && chkRX2.Checked)
                {
                    if (rx1_dds_freq_mhz > rx2_dds_freq_mhz) SetAlexLPF(rx1_dds_freq_mhz);
                    else SetAlexLPF(rx2_dds_freq_mhz);
                }
                else SetAlexLPF(rx1_dds_freq_mhz);
            }
        }

        private void UpdateAlexRXFilter()
        {
            if (!mox)
            {
                if (!rx2_preamp_present && chkRX2.Checked)
                {
                    if (rx1_dds_freq_mhz < rx2_dds_freq_mhz) SetAlexHPF(rx1_dds_freq_mhz);
                    else SetAlexHPF(rx2_dds_freq_mhz);
                }
            }
        }

        //private uint last_tw = 0;
        private double fwc_dds_freq = 14;
        public double FWCDDSFreq
        {
            get { return fwc_dds_freq; }
            set
            {
                fwc_dds_freq = value;

                double f = fwc_dds_freq + vfo_offset;
                rx1_dds_freq_mhz = f;
                rx1_dds_freq_updated = true;
                // radio.GetDSPRX(0, 0).RXOsc = 0.0;
                UpdateRX1DDSFreq();
                // System.Console.WriteLine("rx1dds: " + rx1_dds_freq_mhz);
            }
        }

        private double rx2_dds_freq = 14;
        public double RX2DDSFreq
        {
            get { return rx2_dds_freq; }
            set
            {
                rx2_dds_freq = value;

                double f = rx2_dds_freq + rx2_vfo_offset;
                rx2_dds_freq_mhz = f;// (float)f;
                // rx2_dds_freq_updated = true;
                //  radio.GetDSPRX(1, 0).RXOsc = 0.0;
                UpdateRX2DDSFreq();
                // System.Console.WriteLine("rx2dds: " + rx2_dds_freq_mhz);
            }
        }

        private double dds_freq = 14;
        public double DDSFreq
        {
            get { return dds_freq; }
            set
            {
                dds_freq = value;
                //Debug.WriteLine("dds_freq: "+dds_freq.ToString("f6"));

                double vfoFreq = value, f = value;
               // double dsp_osc_freq = 0.0;

                //calculate DDS Tuning Word
                if (xvtr_present && f >= 144 && f <= 146)		// If transverter enabled compute 28MHz IF frequency
                    f -= 116;									// Subtract 116MHz (144-28) from VFO display frequency

                //if(if_shift) 
                //{
                //	f -= if_freq;								// adjust for IF shift
                //	dsp_osc_freq = -if_freq * 1000000.0;
                //}

                f += vfo_offset;								// adjust for vfo offset
                /*if(mox && current_dsp_mode == DSPMode.DRM)
                    f -= 0.008;*/
                //long tuning_word = (long)(f / corrected_dds_clock * Math.Pow(2, 48));
                // long tuning_word = (long)(0xFFFFFFFFFFFF * f / corrected_dds_clock);

                /* if (!mox && current_click_tune_mode == ClickTuneMode.VFOA)
                 {
                     //dsp_osc_freq = (int)(((vfoFreq * 1000000.0) - freq_center));
                     dsp_osc_freq = (int)((freq_center - (vfoFreq * 1000000.0)));
                 }*/

                // if (!mox)
                //  radio.GetDSPRX(0, 0).RXOsc = dsp_osc_freq;

                /*  if (PowerOn && ModelIsHPSDRorHermes())
                  {
                      JanusAudio.SetVFOfreqRX1(f);
                      if (SetupForm.radAlexManualCntl.Checked)
                          SetHWFilters(f);

                      if (alexpresent && SetupForm.radAlexAutoCntl.Checked && (f >= 50.0) ||
                          (SetupForm.rad6BPFled.Checked))
                          AlexPreampOffset = 23;
                      else
                          AlexPreampOffset = 0;
                  }
                  else*.
                  {
                      Hdw.DDSTuningWord = tuning_word;
                      SetHWFilters(dds_freq);
                  }

             // if(mox)
                 // JanusAudio.SetVFOfreqTX(f);


            //  }
              //if(PowerOn)
             // SetupForm.textBoxTS5.Text = freq_center.ToString();
           /*   if (!mox && current_click_tune_mode == ClickTuneMode.VFOA)
              {
                  //dsp_osc_freq = (int)(((vfoFreq * 1000000.0) - freq_center));
                  dsp_osc_freq = (int)((freq_center - (vfoFreq * 1000000.0)));
              }
                
              if (!mox) 
                  radio.GetDSPRX(0, 0).RXOsc = dsp_osc_freq;*/

                // if (PowerOn)
                //  {
                //SetupForm.textBoxTS10.Text = dsp_osc_freq.ToString();
                //SetupForm.textBoxTS1.Text = freq_center.ToString();
                //SetupForm.textBoxTS2.Text = vfoFreq.ToString();
                // SetupForm.textBoxTS9.Text = dsp_osc_freq.ToString();
                // }
            }
        }

        //public double TuningWordToFreq(long word)
        //{
        //    return word * corrected_dds_clock / Math.Pow(2, 48);
        //}

        private double min_freq = 0.0;
        public double MinFreq
        {
            get { return min_freq; }
            set
            {
                min_freq = value;
                if (VFOAFreq < min_freq)
                    VFOAFreq = min_freq;
            }
        }

        private double max_freq = 61.44;
        public double MaxFreq
        {
            get { return max_freq; }
            set
            {
                max_freq = value;

                if (SetupForm == null) return;
                if (VFOAFreq > max_freq && rx1_xvtr_index < 0)
                    VFOAFreq = max_freq;
            }
        }

        private double vfo_offset = 0.0;
        public double VFOOffset
        {
            get { return vfo_offset; }
            set { vfo_offset = value; }
        }

        private double rx2_vfo_offset = 0.0;
        public double RX2VFOOffset
        {
            get { return rx2_vfo_offset; }
            set { rx2_vfo_offset = value; }
        }

        private bool if_shift = false;
        public bool IFShift
        {
            get { return if_shift; }
            set { if_shift = value; }
        }

        private bool extended = false;
        public bool Extended
        {
            get { return extended; }
            set { extended = value; }
        }

        private int latch_delay = 0;
        public int LatchDelay
        {
            get { return latch_delay; }
            set { latch_delay = value; }
        }

        public bool CPDR
        {
            get { return chkCPDR.Checked; }
            set
            {
                if (SetupForm == null)
                    return;

                chkCPDR.Checked = value;
            }
        }

        public int CPDRLevel
        {
            get { return ptbCPDR.Value; }
            set
            {
                if (SetupForm == null) return;
                ptbCPDR.Value = value;
                ptbCPDR_Scroll(this, EventArgs.Empty);
            }
        }

        public int Mic
        {
            get { return ptbMic.Value; }
            set
            {
                if (SetupForm == null)
                    return;

                ptbMic.Value = value;
                ptbMic_Scroll(this, EventArgs.Empty);
            }
        }

        public int FMMic  // W4TME
        {
            get { return ptbFMMic.Value; }
            set
            {
                if (SetupForm == null)
                    return;
                ptbFMMic.Value = value;
                ptbFMMic_Scroll(this, EventArgs.Empty);
            }
        }

        #region CAT Properties

        // props for cat control 

        public double CATVFOA
        {
            get { return saved_vfoa_freq; }
        }

        public double CATVFOB
        {
            get { return saved_vfob_freq; }
        }

        //-W2PA Added three new functions to make CAT functions match behavior of equivalent console functions.
        //   i.e. not just copy frequency alone
        public void CATVFOAtoB()
        {
            btnVFOAtoB_Click(this, EventArgs.Empty);
        }
        public void CATVFOBtoA()
        {
            btnVFOBtoA_Click(this, EventArgs.Empty);
        }
        public void CATVFOABSwap()
        {
            btnVFOSwap_Click(this, EventArgs.Empty);
        }

        public int CATTXProfileCount
        {
            get
            {
                return comboTXProfile.Items.Count;
            }
        }

        public int CATTXProfile
        {
            get
            {
                return comboTXProfile.SelectedIndex;
            }
            set
            {
                comboTXProfile.SelectedIndex = value;
            }
        }

        public string CATPanSwap
        {
            get
            {
                if (chkPanSwap.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkPanSwap.Checked = true;
                else
                    chkPanSwap.Checked = false;
            }
        }

        public string CATPhoneDX
        {
            get
            {
                if (chkDX.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkDX.Checked = true;
                else
                    chkDX.Checked = false;
            }
        }

        public string CATMultRX
        {
            get
            {
                if (chkEnableMultiRX.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkEnableMultiRX.Checked = true;
                else
                    chkEnableMultiRX.Checked = false;
            }

        }

        public string CATRXEQ
        {
            get
            {
                if (chkRXEQ.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkRXEQ.Checked = true;
                else
                    chkRXEQ.Checked = false;
            }
        }

        public string CATTXEQ
        {
            get
            {
                if (chkTXEQ.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkTXEQ.Checked = true;
                else
                    chkTXEQ.Checked = false;
            }
        }

        public string CATDispPeak
        {
            get
            {
                if (chkDisplayPeak.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkDisplayPeak.Checked = true;
                else
                    chkDisplayPeak.Checked = false;
            }

        }

        public string CATDispCenter
        {
            set
            {
                btnDisplayPanCenter.PerformClick();
            }
        }

        public string CATDispZoom
        {
            set
            {
                switch (value)
                {
                    case "0":
                        radDisplayZoom05.PerformClick();
                        break;
                    case "1":
                        radDisplayZoom1x.PerformClick();
                        break;
                    case "2":
                        radDisplayZoom2x.PerformClick();
                        break;
                    case "3":
                        radDisplayZoom4x.PerformClick();
                        break;
                    default:
                        radDisplayZoom1x.PerformClick();
                        break;
                }
            }

            get
            {
                if (radDisplayZoom05.Checked)
                    return "0";
                else if (radDisplayZoom1x.Checked)
                    return "1";
                else if (radDisplayZoom2x.Checked)
                    return "2";
                else if (radDisplayZoom4x.Checked)
                    return "3";
                else
                    return "4";
            }
        }

        public string CATZB
        {
            set
            {
                btnZeroBeat.PerformClick();
            }
        }

        public void CATTuneStepUp()
        {
            ChangeTuneStepUp();
        }

        public void CATTuneStepDown()
        {
            ChangeTuneStepDown();
        }

        //-W2PA This specifies the number of MIDI messages that cause a single tune step increment
        // It is useful when using coarse increments, such as 100kHz, and wanting more wheel rotation for each one
        // so that tuning isn't so critical. Midi2Cat support functions follow.
        private int midi_messages_per_tune_step = 1;
        public int MidiMessagesPerTuneStep
        {
            get
            {
                return midi_messages_per_tune_step;
            }
            set
            {
                if ((value <= max_midi_messages_per_tune_step) && (value > 0))
                    midi_messages_per_tune_step = value;
            }
        }

        private int max_midi_messages_per_tune_step = 64;  // Upper limit 
        public int MaxMIDIMessagesPerTuneStep
        {
            get
            {
                return max_midi_messages_per_tune_step;
            }
            set
            {
                if (value <= 64 && value > 1)
                {
                    max_midi_messages_per_tune_step = value;
                }
            }
        }

        private int min_midi_messages_per_tune_step = 1;  // Lower limit 
        public int MinMIDIMessagesPerTuneStep
        {
            get
            {
                return min_midi_messages_per_tune_step;
            }
            set
            {
                if (value <= 9 && value > 0)
                {
                    min_midi_messages_per_tune_step = value;
                }
            }
        }

        //-W2PA These are the methods called by Midi2Cat
        public void CATMidiMessagesPerTuneStepUp()
        {
            int oldM = MidiMessagesPerTuneStep;
            MidiMessagesPerTuneStep = oldM * 2;  // Increment by 2x
        }
        public void CATMidiMessagesPerTuneStepDown()
        {
            int oldM = MidiMessagesPerTuneStep;
            MidiMessagesPerTuneStep = oldM / 2;  // Decrement by half
        }
        public void CATMidiMessagesPerTuneStepToggle()
        {
            if (midi_messages_per_tune_step == min_midi_messages_per_tune_step)
                midi_messages_per_tune_step = max_midi_messages_per_tune_step;
            else
                midi_messages_per_tune_step = min_midi_messages_per_tune_step;
        }

        //Added 03/18/07 BT BCI Reject
        private int cat_bci_reject = 0;
        public int CATBCIReject
        {
            get
            {
                //  if (chkBCI.Checked)
                //     cat_bci_reject = 1;
                //  else
                cat_bci_reject = 0;
                return cat_bci_reject;
            }
            set
            {
                //  if (value == 1)
                //     chkBCI.Checked = true;
                //  else
                //     chkBCI.Checked = false;
            }
        }

        //-W2PA Added to enable CAT control of APF
        private int cat_apf_status = 0;
        public int CATAPF
        {
            get { return cat_apf_status; }
            set
            {
                if (value == 0)
                    chkCWAPFEnabled.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkCWAPFEnabled.CheckState = CheckState.Checked;
            }
        }

        //-W2PA Added to enable CAT control of two-tone test
        private int cat_TTT_status = 0;
        public int CATTTTest
        {
            get
            {
                cat_TTT_status = Convert.ToInt32(SetupForm.TTgenrun);
                return cat_TTT_status;
            }
            set
            {
                if (value == 0)
                {
                    SetupForm.TTgenrun = false;
                    cat_TTT_status = 0;
                }
                else if (value == 1)
                {
                    SetupForm.TTgenrun = true;
                    cat_TTT_status = 1;
                }

            }
        }

        //-W2PA Added to enable CAT control of PS Single Cal
        public void CATSingleCal()
        {
            psform.SingleCalrun();           
        }

        // Added 06/20/05 BT for CAT commands
        private int cat_nr_status = 0;
        public int CATNR
        {
            get { return cat_nr_status; }
            set
            {
                if (value == 0)
                    chkNR.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkNR.CheckState = CheckState.Checked;
            }
        }

        private int cat_nr2_status = 0;
        public int CATNR2
        {
            get { return cat_nr2_status; }
            set
            {
                if (value == 0)
                    chkNR.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkNR.CheckState = CheckState.Indeterminate;
            }
        }

        private int cat_rx2_nr_status = 0;
        public int CATRX2NR
        {
            get { return cat_rx2_nr_status; }
            set
            {
                if (value == 0)
                    chkRX2NR.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkRX2NR.CheckState = CheckState.Checked;
            }
        }

        private int cat_rx2_nr2_status = 0;
        public int CATRX2NR2
        {
            get { return cat_rx2_nr2_status; }
            set
            {
                if (value == 0)
                    chkRX2NR.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkRX2NR.CheckState = CheckState.Indeterminate;
            }
        }

        // Added 06/20/05 BT for CAT commands
        private int cat_anf_status = 0;
        public int CATANF
        {
            get { return cat_anf_status; }
            set
            {
                if (value == 0)
                    chkANF.Checked = false;
                else if (value == 1)
                    chkANF.Checked = true;
            }
        }

        // Added 01/13/17 BT for CAT commands
        private int catrx2_anf_status = 0;
        public int CATRX2ANF
        {
            get { return catrx2_anf_status; }
            set
            {
                if (value == 0)
                    chkRX2ANF.Checked = false;
                else if (value == 1)
                    chkRX2ANF.Checked = true;
            }
        }


        // Added 06/21/05 BT for CAT Commands
        private int cat_nb1_status = 0;
        public int CATNB1
        {
            get { return cat_nb1_status; }
            set
            {
                if (value == 0)
                    chkNB.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkNB.CheckState = CheckState.Checked;
            }
        }

        // Added 06/21/05 BT for CAT commands
        private int cat_nb2_status = 0;
        public int CATNB2
        {
            get { return cat_nb2_status; }
            set
            {
                if (value == 0)
                    chkNB.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkNB.CheckState = CheckState.Indeterminate;
            }
        }

        private int cat_rx2nb1_status = 0;
        public int CATRX2NB1
        {
            get
            {
                return cat_rx2nb1_status;

            }
            set
            {
                if (value == 0)
                    chkRX2NB.CheckState = CheckState.Unchecked;
                else if (value == 1)
                    chkRX2NB.CheckState = CheckState.Checked;
            }
        }

        private int cat_snb_status = 0;
        public int CATSNB
        {
            get { return cat_snb_status; }
            set
            {
                if (value == 0)
                    chkDSPNB2.Checked = false;
                else if (value == 1)
                    chkDSPNB2.Checked = true;
            }
        }

        private int cat_rx2snb_status = 0;
        public int CATRX2SNB
        {
            get
            {
                return cat_rx2snb_status;

            }
            set
            {
                if (value == 0)
                    chkRX2NB2.Checked = false;
                else if (value == 1)
                    chkRX2NB2.Checked = true;
            }
        }

        public void CATRX2BandUpDown(int direction)
        {
            comboRX2Band.Focus();

            string filter = "", mode = "", next = "", previous = "";
            string new_band = "";
            double freq = 0.0;
            bool b = false;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            switch (comboRX2Band.Text)
            {
                case "160m": next = "80m"; previous = "GEN"; break;
                case "80m": next = "60m"; previous = "160m"; break;
                case "60m": next = "40m"; previous = "80m"; break;
                case "40m": next = "30m"; previous = "60m"; break;
                case "30m": next = "20m"; previous = "40m"; break;
                case "20m": next = "17m"; previous = "30m"; break;
                case "17m": next = "15m"; previous = "20m"; break;
                case "15m": next = "12m"; previous = "17m"; break;
                case "12m": next = "10m"; previous = "12m"; break;
                case "10m": next = "6m"; previous = "12m"; break;
                case "6m": next = "2m"; previous = "10m"; break;
                case "2m": next = "WWV"; previous = "6m"; break;
                case "GEN": next = "160m"; previous = "VHF13"; break;
                case "WWV": next = "VHF0"; previous = "6m"; break;
                case "VU 2m": next = "VHF1"; previous = "WWV"; break;
                case "VU 70cm": next = "VHF2"; previous = "VHF0"; break;
                case "VHF2": next = "VHF3"; previous = "VHF1"; break;
                case "VHF3": next = "VHF4"; previous = "VHF2"; break;
                case "VHF4": next = "VHF5"; previous = "VHF3"; break;
                case "VHF5": next = "VHF6"; previous = "VHF4"; break;
                case "VHF6": next = "VHF7"; previous = "VHF5"; break;
                case "VHF7": next = "VHF8"; previous = "VHF6"; break;
                case "VHF8": next = "VHF9"; previous = "VHF7"; break;
                case "VHF9": next = "VHF10"; previous = "VHF8"; break;
                case "VHF10": next = "VHF11"; previous = "VHF9"; break;
                case "VHF11": next = "VHF12"; previous = "VHF10"; break;
                case "VHF12": next = "VHF13"; previous = "VHF11"; break;
                case "VHF13": next = "GEN"; previous = "VHF12"; break;
            }


            if (next.StartsWith("VHF"))                                 //see if the next vhf entry is enabled
            {
                int next_ndx = Convert.ToInt32(next.Substring(3));
                if (!this.XVTRForm.GetEnabled(next_ndx))
                    next = "GEN";                                       //if not, go back to GEN
            }

            if (previous.StartsWith("VHF"))
            {
                int previous_ndx = Convert.ToInt32(previous.Substring(3));
                if (previous_ndx != 0)
                {
                    if (previous_ndx > 0)
                    {
                        for (int n = previous_ndx - 1; n >= 0; n--)     //find the last enabled VHF entry
                        {
                            if (this.XVTRForm.GetEnabled(n))
                            {
                                previous = "VHF" + n.ToString();
                                break;
                            }
                            else
                                previous = "WWV";                       //or default to the value just below the VHF selections
                        }
                    }
                    else
                        previous = "WWV";
                }
            }


            if (direction == 1)
                new_band = next;
            else
                new_band = previous;


            int register = -1;
            switch (new_band)
            {
                case "160m": register = band_160m_register; break;
                case "80m": register = band_80m_register; break;
                case "60m": register = band_60m_register; break;
                case "40m": register = band_40m_register; break;
                case "30m": register = band_30m_register; break;
                case "20m": register = band_20m_register; break;
                case "17m": register = band_17m_register; break;
                case "15m": register = band_15m_register; break;
                case "12m": register = band_12m_register; break;
                case "10m": register = band_10m_register; break;
                case "6m": register = band_6m_register; break;
                case "2m": register = band_2m_register; break;
                case "GEN": register = band_gen_register; break;
                case "WWV": register = band_wwv_register; break;

                case "LMF": register = band_LMF_register; break; // ke9ns add
                case "120M": register = band_120m_register; break;
                case "90M": register = band_90m_register; break;
                case "61M": register = band_61m_register; break;
                case "49M": register = band_49m_register; break;
                case "41M": register = band_41m_register; break;
                case "31M": register = band_31m_register; break;
                case "25M": register = band_25m_register; break;
                case "22M": register = band_22m_register; break;
                case "19M": register = band_19m_register; break;
                case "16M": register = band_16m_register; break;
                case "14M": register = band_14m_register; break;
                case "13M": register = band_13m_register; break;
                case "11M": register = band_11m_register; break;

                case "VHF0": register = band_vhf0_register; break;
                case "VHF1": register = band_vhf1_register; break;
                case "VHF2": register = band_vhf2_register; break;
                case "VHF3": register = band_vhf3_register; break;
                case "VHF4": register = band_vhf4_register; break;
                case "VHF5": register = band_vhf5_register; break;
                case "VHF6": register = band_vhf6_register; break;
                case "VHF7": register = band_vhf7_register; break;
                case "VHF8": register = band_vhf8_register; break;
                case "VHF9": register = band_vhf9_register; break;
                case "VHF10": register = band_vhf10_register; break;
                case "VHF11": register = band_vhf11_register; break;
                case "VHF12": register = band_vhf12_register; break;
                case "VHF13": register = band_vhf13_register; break;
            }

            //if(new_band.StartsWith("VHF"))
            //{
            //    int ndx = Convert.ToInt32(new_band.Substring(3));
            //    if (this.xvtrForm.GetEnabled(ndx))
            //        b = DB.GetBandStack(new_band, 0, out mode, out filter, out freq);
            //    else
            //        b = DB.GetBandStack("160m", 0, out mode, out filter, out freq);
            //}
            //else
            b = DB.GetBandStack(new_band, 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);


            if (b)
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                VFOBFreq = freq;
                RX2DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode);
                VFOBFreq = freq;
                RX2Filter = (Filter)Enum.Parse(typeof(Filter), filter);
            }

            btnHidden.Focus();
        }

        private int cat_rx2nb2_status = 0;
        public int CATRX2NB2
        {
            get
            {
                return cat_rx2nb2_status;
            }
            set
            {
                if (value == 0)
                    chkRX2NB.CheckState = CheckState.Unchecked;             // edited 30/3/2018 G8NJJ to access the NB control not SNB
                else if (value == 1)
                    chkRX2NB.CheckState = CheckState.Indeterminate;         // edited 30/3/2018 G8NJJ to access the NB control not SNB
            }
        }

        // Added 06/22/05 BT for CAT commands
        private int cat_cmpd_status = 0;
        public int CATCmpd
        {
            get { return cat_cmpd_status; }
            set
            {
                if (value == 0)
                    chkCPDR.Checked = false;
                else if (value == 1)
                    chkCPDR.Checked = true;
            }
        }

        // Added 06/22/05 BT for CAT commands
        private int cat_mic_status = 0;
        public int CATMIC
        {
            get
            {
                cat_mic_status = ptbMic.Value;
                return cat_mic_status;
            }
            set
            {
                value = Math.Max(-96, value);
                value = Math.Min(70, value);
                ptbMic.Value = value;
                ptbMic_Scroll(this, EventArgs.Empty);
            }
        }

        // Added 06/22/05 BT for CAT commands
        // modified 07/22/05 to fix display problem
        private int cat_filter_width = 0;
        public int CATFilterWidth
        {
            get
            {
                cat_filter_width = ptbFilterWidth.Value;
                return cat_filter_width;
            }
            set
            {
                value = Math.Max(1, value);
                value = Math.Min(10000, value);
                ptbFilterWidth.Value = value;
                ptbFilterWidth_Scroll(this.ptbFilterWidth, EventArgs.Empty);	// added
            }
        }

        // Added 07/22/05 for cat commands
        public int CATFilterShift
        {
            get
            {
                return ptbFilterShift.Value;
            }
            set
            {
                value = Math.Max(-1000, value);
                value = Math.Min(1000, value);
                ptbFilterShift.Value = value;
                ptbFilterShift_Scroll(this.ptbFilterShift, EventArgs.Empty);
            }
        }

        // Added 07/22/05 for CAT commands
        public int CATFilterShiftReset
        {
            set
            {
                if (value == 1)
                    btnFilterShiftReset.PerformClick();
            }
        }

        // Added 06/22/05 BT for CAT commands
        private int cat_bin_status = 0;
        public int CATBIN
        {
            get
            {
                if (chkBIN.Checked)
                    cat_bin_status = 1;
                else
                    cat_bin_status = 0;

                return cat_bin_status;
            }
            set
            {
                if (value == 1)
                    chkBIN.Checked = true;
                else if (value == 0)
                    chkBIN.Checked = false;
            }
        }

        // Added/repaired 7/10/05 BT for cat commands
        public PreampMode CATPreamp
        {
            set { RX1PreampMode = value; }
            get { return RX1PreampMode; }
        }

        // Added 06/30/05 BT for CAT commands
        public int CATCWSpeed
        {
            get
            {
                return ptbCWSpeed.Value;
            }
            set
            {
                value = Math.Max(1, value);
                value = Math.Min(60, value);
                ptbCWSpeed.Value = value;
                ptbCWSpeed_Scroll(this, EventArgs.Empty);
            }
        }

        // Added 06/30/05 BT for CAT commands
        private int cat_display_avg_status = 0;
        public int CATDisplayAvg
        {
            get
            {
                if (chkDisplayAVG.Checked)
                    cat_display_avg_status = 1;
                else
                    cat_display_avg_status = 0;

                return cat_display_avg_status;
            }
            set
            {
                if (value == 1)
                    chkDisplayAVG.Checked = true;
                else
                    chkDisplayAVG.Checked = false;
            }
        }

        // Added 06/30/05 BT for CAT commands
        private int cat_squelch_status = 0;
        public int CATSquelch
        {
            get
            {
                if (chkSquelch.Checked)
                    cat_squelch_status = 1;
                else
                    cat_squelch_status = 0;

                return cat_squelch_status;
            }
            set
            {
                if (value == 1)
                    chkSquelch.Checked = true;
                else
                    chkSquelch.Checked = false;
            }
        }

        public string CATSquelch2
        {
            get
            {
                if (chkRX2Squelch.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (value == "1")
                    chkRX2Squelch.Checked = true;
                else
                    chkRX2Squelch.Checked = false;
            }
        }

        // Added 7/9/05 BT for cat commands
        public string CATQMSValue
        {
            get { return this.txtMemoryQuick.Text; }
        }

        private Parity cat_parity;
        public Parity CATParity
        {
            set { cat_parity = value; }
            get { return cat_parity; }
        }

        private Parity cat2_parity;
        public Parity CAT2Parity
        {
            set { cat2_parity = value; }
            get { return cat2_parity; }
        }

        private Parity cat3_parity;
        public Parity CAT3Parity
        {
            set { cat3_parity = value; }
            get { return cat3_parity; }
        }

        private Parity cat4_parity;
        public Parity CAT4Parity
        {
            set { cat4_parity = value; }
            get { return cat4_parity; }
        }

        private StopBits cat_stop_bits;
        public StopBits CATStopBits
        {
            set { cat_stop_bits = value; }
            get { return cat_stop_bits; }
        }

        private StopBits cat2_stop_bits;
        public StopBits CAT2StopBits
        {
            set { cat2_stop_bits = value; }
            get { return cat2_stop_bits; }
        }

        private StopBits cat3_stop_bits;
        public StopBits CAT3StopBits
        {
            set { cat3_stop_bits = value; }
            get { return cat3_stop_bits; }
        }

        private StopBits cat4_stop_bits;
        public StopBits CAT4StopBits
        {
            set { cat4_stop_bits = value; }
            get { return cat4_stop_bits; }
        }

        private int cat_data_bits;
        public int CATDataBits
        {
            set { cat_data_bits = value; }
            get { return cat_data_bits; }
        }

        private int cat2_data_bits;
        public int CAT2DataBits
        {
            set { cat2_data_bits = value; }
            get { return cat2_data_bits; }
        }

        private int cat3_data_bits;
        public int CAT3DataBits
        {
            set { cat3_data_bits = value; }
            get { return cat3_data_bits; }
        }

        private int cat4_data_bits;
        public int CAT4DataBits
        {
            set { cat4_data_bits = value; }
            get { return cat4_data_bits; }
        }

        private int cat_baud_rate;
        public int CATBaudRate
        {
            set { cat_baud_rate = value; }
            get { return cat_baud_rate; }
        }

        private int cat2_baud_rate;
        public int CAT2BaudRate
        {
            set { cat2_baud_rate = value; }
            get { return cat2_baud_rate; }
        }

        private int cat3_baud_rate;
        public int CAT3BaudRate
        {
            set { cat3_baud_rate = value; }
            get { return cat3_baud_rate; }
        }

        private int cat4_baud_rate;
        public int CAT4BaudRate
        {
            set { cat4_baud_rate = value; }
            get { return cat_baud_rate; }
        }

        private bool cat_enabled;
        public bool CATEnabled
        {
            set
            {
                try
                {
                    cat_enabled = value;
                    // Keyer.CATEnabled = value;
                    if (siolisten != null)  // if we've got a listener tell them about state change 
                    {
                        if (cat_enabled)
                        {
                            Siolisten.enableCAT();
                        }
                        else
                        {
                            Siolisten.disableCAT();
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Error enabling CAT on COM" + cat_port + ".\n" +
                        "Please check CAT settings and try again.",
                        "CAT Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    if (SetupForm != null) SetupForm.CATEnabled = false;
                }
            }
            get { return cat_enabled; }
        }

        private bool cat2_enabled;
        public bool CAT2Enabled
        {
            set
            {
                try
                {
                    cat2_enabled = value;
                    // Keyer.CATEnabled = value;
                    if (sio2listen != null)  // if we've got a listener tell them about state change 
                    {
                        if (cat2_enabled)
                        {
                            Sio2listen.enableCAT2();
                        }
                        else
                        {
                            Sio2listen.disableCAT2();
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Error enabling CAT on COM" + cat_port + ".\n" +
                        "Please check CAT settings and try again.",
                        "CAT Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    if (SetupForm != null) SetupForm.CAT2Enabled = false;
                }
            }
            get { return cat2_enabled; }
        }

        private bool cat3_enabled;
        public bool CAT3Enabled
        {
            set
            {
                try
                {
                    cat3_enabled = value;
                    // Keyer.CATEnabled = value;
                    if (sio3listen != null)  // if we've got a listener tell them about state change 
                    {
                        if (cat3_enabled)
                        {
                            Sio3listen.enableCAT3();
                        }
                        else
                        {
                            Sio3listen.disableCAT3();
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Error enabling CAT on COM" + cat_port + ".\n" +
                        "Please check CAT settings and try again.",
                        "CAT Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    if (SetupForm != null) SetupForm.CAT3Enabled = false;
                }
            }
            get { return cat3_enabled; }
        }

        private bool cat4_enabled;
        public bool CAT4Enabled
        {
            set
            {
                try
                {
                    cat4_enabled = value;
                    // Keyer.CATEnabled = value;
                    if (sio4listen != null)  // if we've got a listener tell them about state change 
                    {
                        if (cat4_enabled)
                        {
                            Sio4listen.enableCAT4();
                        }
                        else
                        {
                            Sio4listen.disableCAT4();
                        }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Error enabling CAT on COM" + cat_port + ".\n" +
                        "Please check CAT settings and try again.",
                        "CAT Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    if (SetupForm != null) SetupForm.CAT4Enabled = false;
                }
            }
            get { return cat4_enabled; }
        }

        private int cat_rig_type;
        public int CATRigType
        {
            get { return cat_rig_type; }
            set { cat_rig_type = value; }
        }

        private int cat_port;
        public int CATPort
        {
            get { return cat_port; }
            set { cat_port = value; }
        }

        private int cat2_port;
        public int CAT2Port
        {
            get { return cat2_port; }
            set { cat2_port = value; }
        }

        private int cat3_port;
        public int CAT3Port
        {
            get { return cat3_port; }
            set { cat3_port = value; }
        }

        private int cat4_port;
        public int CAT4Port
        {
            get { return cat4_port; }
            set { cat4_port = value; }
        }

        private bool cat_ptt_rts = false;
        public bool CATPTTRTS
        {
            get { return cat_ptt_rts; }
            set { cat_ptt_rts = value; }
        }

        private bool cat_ptt_dtr;
        public bool CATPTTDTR
        {
            get { return cat_ptt_dtr; }
            set { cat_ptt_dtr = value; }
        }

        public SerialPortPTT serialPTT = null;
        private bool ptt_bit_bang_enabled;
        public bool PTTBitBangEnabled
        {
            get { return ptt_bit_bang_enabled; }
            set
            {
                ptt_bit_bang_enabled = value;
                if (serialPTT != null)  // kill current serial PTT if we have one 
                {
                    serialPTT.Destroy();
                    serialPTT = null;
                }
                if (ptt_bit_bang_enabled)
                {
                    // wjt -- don't really like popping a msg box in here ...   nasty when we do a remoted 
                    // setup ... will let that wait for the great console refactoring 
                    try
                    {
                        serialPTT = new SerialPortPTT(cat_ptt_bit_bang_port, cat_ptt_rts, cat_ptt_dtr);
                        serialPTT.Init();
                    }
                    catch (Exception ex)
                    {
                        ptt_bit_bang_enabled = false;
                        if (SetupForm != null)
                        {
                            SetupForm.copyCATPropsToDialogVars(); // need to make sure the props on the setup page get reset 
                        }
                        MessageBox.Show("Could not initialize PTT Bit Bang control.  Exception was:\n\n " + ex.Message +
                            "\n\nPTT Bit Bang control has been disabled.", "Error Initializing PTT control",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);

                    }
                }
            }
        }

        private int cat_ptt_bit_bang_port;
        public int CATPTTBitBangPort
        {
            get { return cat_ptt_bit_bang_port; }
            set { cat_ptt_bit_bang_port = value; }
        }


        #endregion

        private bool tx_tune_power = true;
        public bool TXTunePower
        {
            get { return tx_tune_power; }
            set { tx_tune_power = value; }
        }

        private int tune_power;								// power setting to use when TUN button is pressed
        public int TunePower
        {
            get { return tune_power; }
            set
            {
                tune_power = value;
                if (SetupForm != null)
                    SetupForm.TunePower = tune_power;

                if (chkTUN.Checked && !tx_tune_power)
                    PWR = tune_power;
            }
        }

        private bool disable_swr_protection = false;
        public bool DisableSWRProtection
        {
            get { return disable_swr_protection; }
            set { disable_swr_protection = value; }
        }

        private int previous_pwr = 50;
        public int PreviousPWR
        {
            get { return previous_pwr; }
            set { previous_pwr = value; }
        }

        //private bool no_hardware_offset = false;
        //public bool NoHardwareOffset
        //{
        //    get { return no_hardware_offset; }
        //    set
        //    {
        //        no_hardware_offset = value;
        //        comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
        //    }
        //}

        #region CAT Properties

        private Band rx1_band;
        public Band RX1Band
        {
            get { return rx1_band; }  
            set
            {
                Band old_band = rx1_band;
                rx1_band = value;

                Band lo_band = Band.FIRST;
                if (rx1_xvtr_index >= 0)
                    //lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), -1, false, current_region);
                    // Fix Penny O/C VHF control Vk4xv
                    lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);

                if (!initializing && rx1_preamp_mode > PreampMode.FIRST)
                {
                    // comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                    // RX1PreampMode = rx1_preamp_by_band[(int)old_band];
                    // RX1AttenuatorData = rx1_step_attenuator_by_band[(int)old_band];

                    rx1_preamp_by_band[(int)old_band] = rx1_preamp_mode;
                    rx1_step_attenuator_by_band[(int)old_band] = rx1_attenuator_data;
                }

                if (rx1_band != old_band || initializing)
                {
                    // save values for old band
                    rx1_agcm_by_band[(int)old_band] = (AGCMode)comboAGC.SelectedIndex;
                    rx1_agct_by_band[(int)old_band] = ptbRF.Value;
                    SetupForm.ATTOnTX = tx_step_attenuator_by_band[(int)value];
                    RX1PreampMode = rx1_preamp_by_band[(int)value];
                    RX1AttenuatorData = rx1_step_attenuator_by_band[(int)value];
                    RX1AGCMode = rx1_agcm_by_band[(int)value];
                    RF = rx1_agct_by_band[(int)value];
                    ptbRF_Scroll(this, EventArgs.Empty);

                    //================================================================================           
                    // ke9ns ADD for use by scanner so it knows which band button your on currently

                    ScanControl.ScanRST = 0;


                    if (RX1Band == Band.B160M)
                    {
                        ScanControl.freq_Low = 1.8;
                        ScanControl.freq_High = 2.0;
                    }
                    else if (RX1Band == Band.B80M)
                    {
                        ScanControl.freq_Low = 3.6;
                        ScanControl.freq_High = 4.0;
                    }
                    else if (RX1Band == Band.B60M)
                    {
                        ScanControl.freq_Low = 5.3;
                        ScanControl.freq_High = 5.6;
                    }
                    else if (RX1Band == Band.B40M)
                    {
                        ScanControl.freq_Low = 7.0;
                        ScanControl.freq_High = 7.3;
                    }
                    else if (RX1Band == Band.B30M)
                    {
                        ScanControl.freq_Low = 10.1;
                        ScanControl.freq_High = 10.15;
                    }
                    else if (RX1Band == Band.B20M)
                    {
                        ScanControl.freq_Low = 14.150;
                        ScanControl.freq_High = 14.35;
                    }
                    else if (RX1Band == Band.B17M)
                    {
                        ScanControl.freq_Low = 18.11;
                        ScanControl.freq_High = 18.168;
                    }
                    else if (RX1Band == Band.B15M)
                    {
                        ScanControl.freq_Low = 21.2;
                        ScanControl.freq_High = 21.45;
                    }
                    else if (RX1Band == Band.B12M)
                    {
                        ScanControl.freq_Low = 24.93;
                        ScanControl.freq_High = 24.990;
                    }
                    else if (RX1Band == Band.B10M)
                    {
                        ScanControl.freq_Low = 28.0;
                        ScanControl.freq_High = 29.7;
                    }
                    else if (RX1Band == Band.B6M)
                    {
                        ScanControl.freq_Low = 50.0;
                        ScanControl.freq_High = 54.0;
                    }
                    else if (RX1Band == Band.B2M)
                    {
                        ScanControl.freq_Low = 144.0;
                        ScanControl.freq_High = 148.0;
                    }
                    else if (RX1Band == Band.VHF0)
                    {
                        ScanControl.freq_Low = 144.0;
                        ScanControl.freq_High = 148.0;
                    }
                    else if (RX1Band == Band.VHF1)
                    {
                        ScanControl.freq_Low = 430.0;
                        ScanControl.freq_High = 450.0;
                    }
                    else if (RX1Band == Band.BLMF)
                    {
                        ScanControl.freq_Low = 0.2;
                        ScanControl.freq_High = 1.8;
                    }
                    else if (RX1Band == Band.B120M)
                    {
                        ScanControl.freq_Low = 2.3;
                        ScanControl.freq_High = 3.0;
                    }
                    else if (RX1Band == Band.B90M)
                    {
                        ScanControl.freq_Low = 3.0;
                        ScanControl.freq_High = 3.5;
                    }
                    else if (RX1Band == Band.B61M)
                    {
                        ScanControl.freq_Low = 4.0;
                        ScanControl.freq_High = 5.3;
                    }
                    else if (RX1Band == Band.B49M)
                    {
                        ScanControl.freq_Low = 5.4;
                        ScanControl.freq_High = 7.0;
                    }
                    else if (RX1Band == Band.B41M)
                    {
                        ScanControl.freq_Low = 7.2;
                        ScanControl.freq_High = 9.0;
                    }
                    else if (RX1Band == Band.B31M)
                    {
                        ScanControl.freq_Low = 9.0;
                        ScanControl.freq_High = 9.99;
                    }
                    else if (RX1Band == Band.B25M)
                    {
                        ScanControl.freq_Low = 10.0;
                        ScanControl.freq_High = 13.57;
                    }
                    else if (RX1Band == Band.B22M)
                    {
                        ScanControl.freq_Low = 13.57;
                        ScanControl.freq_High = 13.87;
                    }
                    else if (RX1Band == Band.B19M)
                    {
                        ScanControl.freq_Low = 15.1;
                        ScanControl.freq_High = 17.0;
                    }
                    else if (RX1Band == Band.B16M)
                    {
                        ScanControl.freq_Low = 17.0;
                        ScanControl.freq_High = 18.0;
                    }
                    else if (RX1Band == Band.B14M)
                    {
                        ScanControl.freq_Low = 18.0;
                        ScanControl.freq_High = 21.0;
                    }
                    else if (RX1Band == Band.B13M)
                    {
                        ScanControl.freq_Low = 21.0;
                        ScanControl.freq_High = 25.0;
                    }
                    else if (RX1Band == Band.B11M)
                    {
                        ScanControl.freq_Low = 25.0;
                        ScanControl.freq_High = 28.0;
                    }


                    ScanForm.lowFBox.Text = ScanControl.freq_Low.ToString("f6");

                    ScanForm.highFBox.Text = ScanControl.freq_High.ToString("f6");

                    //============================================================== ke9ns end

                }
            }
        }

        private string BandToString(Band b)
        {
            string ret = "GEN";
            switch (b)
            {
                case Band.GEN: ret = "GEN"; break;
                case Band.B160M: ret = "160m"; break;
                case Band.B80M: ret = "80m"; break;
                case Band.B60M: ret = "60m"; break;
                case Band.B40M: ret = "40m"; break;
                case Band.B30M: ret = "30m"; break;
                case Band.B20M: ret = "20m"; break;
                case Band.B17M: ret = "17m"; break;
                case Band.B15M: ret = "15m"; break;
                case Band.B12M: ret = "12m"; break;
                case Band.B10M: ret = "10m"; break;
                case Band.B6M: ret = "6m"; break;
                case Band.B2M: ret = "2m"; break;
                case Band.WWV: ret = "WWV"; break;
                case Band.BLMF: ret = "LMF"; break;  // ke9ns add
                case Band.B120M: ret = "120m"; break;
                case Band.B90M: ret = "90m"; break;
                case Band.B61M: ret = "61m"; break;
                case Band.B49M: ret = "49m"; break;
                case Band.B41M: ret = "41m"; break;
                case Band.B31M: ret = "31m"; break;
                case Band.B25M: ret = "25m"; break;
                case Band.B22M: ret = "22m"; break;
                case Band.B19M: ret = "19m"; break;
                case Band.B16M: ret = "16m"; break;
                case Band.B14M: ret = "14m"; break;
                case Band.B13M: ret = "13m"; break;
                case Band.B11M: ret = "11m"; break;
                case Band.VHF0: ret = "VU 2m"; break;
                case Band.VHF1: ret = "VU 70cm"; break;
                case Band.VHF2: ret = "VHF2"; break;
                case Band.VHF3: ret = "VHF3"; break;
                case Band.VHF4: ret = "VHF4"; break;
                case Band.VHF5: ret = "VHF5"; break;
                case Band.VHF6: ret = "VHF6"; break;
                case Band.VHF7: ret = "VHF7"; break;
                case Band.VHF8: ret = "VHF8"; break;
                case Band.VHF9: ret = "VHF9"; break;
                case Band.VHF10: ret = "VHF10"; break;
                case Band.VHF11: ret = "VHF11"; break;
                case Band.VHF12: ret = "VHF12"; break;
                case Band.VHF13: ret = "VHF13"; break;
                default: ret = "GEN"; break;
            }

            return ret;
        }

        private Band StringToBand(string s)
        {
            Band b = Band.GEN;
            switch (s)
            {
                case "GEN": b = Band.GEN; break;
                case "160m": b = Band.B160M; break;
                case "80m": b = Band.B80M; break;
                case "60m": b = Band.B60M; break;
                case "40m": b = Band.B40M; break;
                case "20m": b = Band.B20M; break;
                case "17m": b = Band.B17M; break;
                case "15m": b = Band.B15M; break;
                case "12m": b = Band.B12M; break;
                case "10m": b = Band.B10M; break;
                case "6m": b = Band.B6M; break;
                case "2m": b = Band.B2M; break;
                case "WWV": b = Band.WWV; break;
                case "LMF": b = Band.BLMF; break; // ke9ns add
                case "120m": b = Band.B120M; break;
                case "90m": b = Band.B90M; break;
                case "61m": b = Band.B61M; break;
                case "49m": b = Band.B49M; break;
                case "41m": b = Band.B41M; break;
                case "31m": b = Band.B31M; break;
                case "25m": b = Band.B25M; break;
                case "22m": b = Band.B22M; break;
                case "19m": b = Band.B19M; break;
                case "16m": b = Band.B16M; break;
                case "14m": b = Band.B14M; break;
                case "13m": b = Band.B13M; break;
                case "11m": b = Band.B11M; break;

                case "VU 2m": b = Band.VHF0; break;
                case "VU 70cm": b = Band.VHF1; break;
                case "VHF2": b = Band.VHF2; break;
                case "VHF3": b = Band.VHF3; break;
                case "VHF4": b = Band.VHF4; break;
                case "VHF5": b = Band.VHF5; break;
                case "VHF6": b = Band.VHF6; break;
                case "VHF7": b = Band.VHF7; break;
                case "VHF8": b = Band.VHF8; break;
                case "VHF9": b = Band.VHF9; break;
                case "VHF10": b = Band.VHF10; break;
                case "VHF11": b = Band.VHF11; break;
                case "VHF12": b = Band.VHF12; break;
                case "VHF13": b = Band.VHF13; break;
            }

            return b;
        }

        private Band rx2_band;
        public Band RX2Band
        {
            get { return rx2_band; }
            set
            {
                Band old_band = rx2_band;
                rx2_band = value;

                //comboRX2Band.SelectedIndex = Math.Min(Math.Max(0, (int)value), comboRX2Band.Items.Count-1);
                comboRX2Band.Text = BandToString(rx2_band);

                Band lo_band = Band.FIRST;
                if (rx2_xvtr_index >= 0)
                    lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), -1, false, current_region, false);

                if (!initializing && rx2_preamp_mode > PreampMode.FIRST)
                {
                    rx2_preamp_by_band[(int)old_band] = rx2_preamp_mode;
                    rx2_step_attenuator_by_band[(int)old_band] = rx2_attenuator_data;
                }

                if (rx2_band != old_band || initializing)
                {
                    // save values for old band
                    rx2_agcm_by_band[(int)old_band] = (AGCMode)comboRX2AGC.SelectedIndex;
                    rx2_agct_by_band[(int)old_band] = ptbRX2RF.Value;

                    // if(rx2_preamp_present)
                    RX2PreampMode = rx2_preamp_by_band[(int)value];
                    RX2ATT = rx2_step_attenuator_by_band[(int)value];
                    RX2AGCMode = rx2_agcm_by_band[(int)value];
                    RX2RF = rx2_agct_by_band[(int)value];
                    ptbRX2RF_Scroll(this, EventArgs.Empty);

                    /*
                    Band b = rx2_band;
                    if (rx2_xvtr_index >= 0) b = lo_band;
                    RX2DisplayCalOffset = rx2_level_table[(int)b][0];
                    rx2_preamp_offset[(int)PreampMode.OFF] = 0.0f;
                    rx2_preamp_offset[(int)PreampMode.HIGH] = rx2_level_table[(int)b][1];
                    rx2_meter_cal_offset = rx2_level_table[(int)b][2];
                    UpdateDisplayOffsets();*/

                }
            }
        }

        private Band tx_band;
        public Band TXBand
        {
            get { return tx_band; }
            set
            {
                Band old_band = tx_band;
                tx_band = value;

                Band lo_band = Band.FIRST;
                if (tx_xvtr_index >= 0)
                    // Fix Penny O/C VHF control Vk4xv
                    lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);
                //lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), -1, true, current_region);

                if (tx_band != old_band || initializing)
                {
                    // save values for old band
                    int old_pwr = ptbPWR.Value;
                    //if(rx1_dsp_mode == DSPMode.FM) old_pwr = (int)(old_pwr*2.5);
                    power_by_band[(int)old_band] = old_pwr;

                    //if(tx_xvtr_index < 0)
                    PWR = power_by_band[(int)value];

                    ptbPWR_Scroll(this, EventArgs.Empty);

                    // save FM TX Offset
                    fm_tx_offset_by_band_mhz[(int)old_band] = fm_tx_offset_mhz;
                    udFMOffset.Value = (decimal)(fm_tx_offset_by_band_mhz[(int)value]);
                }

                if (old_band != Band.B60M && !initializing)
                {
                    SetupForm.TXFilterHighSave = tx_filter_high;
                    SetupForm.TXFilterLowSave = tx_filter_low;
                }

                if (tx_band == Band.B60M)
                {
                    if (tx_filter_high > 2900)
                        SetupForm.TXFilterHigh = 2900;
                    if (tx_filter_low < 100)
                        SetupForm.TXFilterLow = 100;
                }

                if (tx_band != old_band || initializing)
                {
                    if (old_band == Band.B60M)
                    {
                        if (tx_filter_high != SetupForm.TXFilterHighSave)
                            SetupForm.TXFilterHigh = SetupForm.TXFilterHighSave;
                        if (tx_filter_low != SetupForm.TXFilterLowSave)
                            SetupForm.TXFilterLow = SetupForm.TXFilterLowSave;
                    }
                }
            }
        }

        // Added 06/24/05 BT for CAT commands
        public bool CATVFOLock
        {
            get { return chkVFOLock.Checked; }
            set { chkVFOLock.Checked = value; }
        }

        public bool CATVFOBLock
        {
            get { return chkVFOBLock.Checked; }
            set { chkVFOBLock.Checked = value; }
        }

        public string CATGetVersion()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
            //			int current_version = VersionTextToInt(fvi.FileVersion);
            return fvi.FileVersion;
        }

        // Added 07/30/05 BT for cat commands next 8 functions

        public string CATReadSigStrength()
        {
            float num = 0f;
            float rx1PreampOffset = 0.0f;

            if (rx1_step_att_present) rx1PreampOffset = (float)rx1_attenuator_data;
            else rx1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];

            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                // rx1_preamp_offset[(int)rx1_preamp_mode] +
                rx1PreampOffset +
                //rx1_filter_size_cal_offset +
                //  rx1_path_offset +
                rx1_xvtr_gain_offset;
            return num.ToString("f1") + " dBm";
        }

        public string CATReadAvgStrength()
        {
            float num = 0f;
            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                //rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
            return num.ToString("f1") + " dBm";
        }

        public string CATReadADC_L()
        {
            float num = 0f;
            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_REAL);
            return num.ToString("f1") + " dBFS";
        }

        public string CATReadADC_R()
        {
            float num = 0f;
            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_IMAG);
            return num.ToString("f1") + " dBFS";
        }

        public string CATReadALC()
        {
            float num = 0f;

            if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
            {
                num = (float)Math.Max(-20.0, -WDSP.CalculateTXMeter(0, WDSP.MeterType.ALC));
                return num.ToString("f1") + " dB";
            }
            else return "0" + separator + "0 dB";
        }

        public string CATReadFwdPwr()
        {
            double power = 0.0;
            float num = 0f;

            if (alexpresent)
            {
                //pa_power_mutex.WaitOne();
                power = calfwdpower; // PAPower(pa_fwd_power);
                //pa_power_mutex.ReleaseMutex();

                return power.ToString("f0") + " W";
            }
            else
            {
                //if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                //{
                //    num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(0, DttSP.MeterType.PWR));
                //    num *= (float)((double)ptbPWR.Value * 0.01);
                //    return num.ToString("f2") + " W";
                //}
                // else 
                return "0" + separator + "00 W";
            }
        }

        public string CATReadPeakPwr()
        {
            float num = 0f;
            if (alexpresent)
            {
                if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                {
                    num = (float)Math.Max(0.0, WDSP.CalculateTXMeter(0, WDSP.MeterType.ALC));
                    num *= (float)ptbPWR.Value;

                    meter_text_history[meter_text_history_index] = num;
                    meter_text_history_index = (meter_text_history_index + 1) % multimeter_text_peak_samples;
                    float max = float.MinValue;
                    for (int i = 0; i < multimeter_text_peak_samples; i++)
                    {
                        if (meter_text_history[i] > max)
                            max = meter_text_history[i];
                    }
                    num = max;

                    return num.ToString("f0") + " W";
                }
                else return "0 W";
            }
            else
            {
                if (Audio.CurrentAudioState1 == Audio.AudioState.DTTSP)
                {
                    num = (float)Math.Max(0.0, WDSP.CalculateTXMeter(0, WDSP.MeterType.ALC));
                    num *= (float)((float)ptbPWR.Value * 0.01);
                    return num.ToString("f2") + " W";
                }
                else return "0" + separator + "00 W";
            }
        }

        public string CATReadRevPwr()
        {
            double power = 0.0;
            //pa_power_mutex.WaitOne();
            power = alex_rev; // PAPower(pa_rev_power);
            //pa_power_mutex.ReleaseMutex();
            return power.ToString("f0") + " W";
        }

        public string CATReadSWR()
        {
            double swr = 1.0;
            //pa_power_mutex.WaitOne();
            swr = alex_swr;// SWR(pa_fwd_power, pa_rev_power);
            //pa_power_mutex.ReleaseMutex();
            return swr.ToString("f1") + " : 1";
        }

        //*************end of 8 functions.

        //=======================================================================================
        // ke9ns add
        public int ReadAvgStrength(uint sub) // DttSP.MeterType.AVG_SIGNAL_STRENGTH
        {
            float num = 0f;
            num = WDSP.CalculateRXMeter(0, sub, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                // rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
            return (int)num;
        }

        //=======================================================================================
        // ke9ns add
        public int ReadStrength(uint sub) // DttSP.MeterType.AVG_SIGNAL_STRENGTH
        {
            float num = 0f;
            num = WDSP.CalculateRXMeter(0, sub, WDSP.MeterType.SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                // rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
            return (int)num;

        } // int ReadStrength(uint sub)

        public Mutex WWV_mutex = new Mutex();                // ke9ns add 
        public float[] WWV_data = new float[16384];          // ke9ns add    used to get out_l_ptr1 audio stream in 2048 pieces at a time
        public int WWVframeCount = 0;
        public int WWV_Count = 0;
        public int WWVTone = 0;                             // ke9ns add   Magnetude of the Tone received in audio.cs routine
        public bool WWVReady = false;                       // ke9ns add  let you know when a new magnetude is updated
        public Stopwatch WWVST = new Stopwatch();           // ke9ns add 
        public float[] wwvbuf = new float[Display.BUFFER_SIZE];
        public int wwvVal = -300;

        //=======================================================================================
        // ke9ns add
        public void ReadScope()      // get dBm value at dead center of current spectrum (defined by LOW / HIGH filters)
        {
            WWV_mutex.WaitOne();

            //  Debug.WriteLine("scopetime" + scope_time);
            fixed (float* ptr = &wwvbuf[0])
            {
                //  WDSP.GetScope(0, ptr, 2048);  // scope time = 50
            }

            WWV_mutex.ReleaseMutex();


        } //  ReadScope()


        //=======================================================================================
        // ke9ns add
        public int ReadSpectrum()      // get dBm value at dead center of current spectrum (defined by LOW / HIGH filters)
        {
            float[] buf = new float[Display.BUFFER_SIZE];

            float num = 0f;

            WWV_mutex.WaitOne();

            fixed (float* ptr = &buf[0])            // ke9ns prevent garbage collecion from moving this pointer data
            {
                // WDSP.GetSpectrum(0, ptr);      // get the spectrum values
            }

            WWV_mutex.ReleaseMutex();

            num = buf[2047]; // get data from middle of spectrum 

            num = num + Display.RX1DisplayCalOffset + Display.RX1PreampOffset;


            return (int)num;

        } //  ReadSpectrum(uint sub) 


        private bool kw_auto_information = false;
        public bool KWAutoInformation
        {
            get { return kw_auto_information; }
            set { kw_auto_information = value; }
        }

        #endregion

        private DSPMode rx1_dsp_mode = DSPMode.FIRST;
        public DSPMode RX1DSPMode
        {
            get { return rx1_dsp_mode; }
            set
            {
                RadioButtonTS r = null;
                switch (value)
                {
                    case DSPMode.LSB:
                        r = radModeLSB;
                        break;
                    case DSPMode.USB:
                        r = radModeUSB;
                        break;
                    case DSPMode.DSB:
                        r = radModeDSB;
                        break;
                    case DSPMode.CWL:
                        r = radModeCWL;
                        break;
                    case DSPMode.CWU:
                        r = radModeCWU;
                        break;
                    case DSPMode.FM:
                        r = radModeFMN;
                        break;
                    case DSPMode.AM:
                        r = radModeAM;
                        break;
                    case DSPMode.SAM:
                        r = radModeSAM;
                        break;
                    case DSPMode.SPEC:
                        r = radModeSPEC;
                        break;
                    case DSPMode.DIGL:
                        r = radModeDIGL;
                        break;
                    case DSPMode.DIGU:
                        r = radModeDIGU;
                        break;
                    case DSPMode.DRM:
                        r = radModeDRM;
                        break;
                }
                //r.Select();
                //r.PerformClick();
                r.Checked = true;
            }
        }

        private DSPMode rx2_dsp_mode = DSPMode.FIRST;
        public DSPMode RX2DSPMode
        {
            get { return rx2_dsp_mode; }
            set
            {
                RadioButtonTS r = null;
                switch (value)
                {
                    case DSPMode.LSB:
                        r = radRX2ModeLSB;
                        break;
                    case DSPMode.USB:
                        r = radRX2ModeUSB;
                        break;
                    case DSPMode.DSB:
                        r = radRX2ModeDSB;
                        break;
                    case DSPMode.CWL:
                        r = radRX2ModeCWL;
                        break;
                    case DSPMode.CWU:
                        r = radRX2ModeCWU;
                        break;
                    case DSPMode.FM:
                        r = radRX2ModeFMN;
                        break;
                    case DSPMode.AM:
                        r = radRX2ModeAM;
                        break;
                    case DSPMode.SAM:
                        r = radRX2ModeSAM;
                        break;
                    case DSPMode.DIGL:
                        r = radRX2ModeDIGL;
                        break;
                    case DSPMode.DIGU:
                        r = radRX2ModeDIGU;
                        break;
                    case DSPMode.DRM:
                        r = radRX2ModeDRM;
                        break;
                }

                r.Checked = true;
            }
        }

        private Filter rx1_filter = Filter.FIRST;
        public Filter RX1Filter
        {
            get { return rx1_filter; }
            set
            {
                RadioButtonTS r = null;
                switch (value)
                {
                    case Filter.F1:
                        r = radFilter1;
                        break;
                    case Filter.F2:
                        r = radFilter2;
                        break;
                    case Filter.F3:
                        r = radFilter3;
                        break;
                    case Filter.F4:
                        r = radFilter4;
                        break;
                    case Filter.F5:
                        r = radFilter5;
                        break;
                    case Filter.F6:
                        r = radFilter6;
                        break;
                    case Filter.F7:
                        r = radFilter7;
                        break;
                    case Filter.F8:
                        r = radFilter8;
                        break;
                    case Filter.F9:
                        r = radFilter9;
                        break;
                    case Filter.F10:
                        r = radFilter10;
                        break;
                    case Filter.VAR1:
                        r = radFilterVar1;
                        break;
                    case Filter.VAR2:
                        r = radFilterVar2;
                        break;
                    case Filter.NONE:
                        SetRX1Filter(Filter.NONE);
                        break;
                }

                if (r != null)
                {
                    if (r.Checked)
                    {
                        r.Checked = false;
                    }

                    r.Checked = true;
                }

                //SetFilter(value);  // kd5tfd added for cat zzsf support 
                // commented as changed order in CATCommands.cs should no longer require this
            }
        }

        private Filter rx2_filter = Filter.FIRST;
        public Filter RX2Filter
        {
            get { return rx2_filter; }
            set
            {
                //comboRX2Filter.SelectedIndex = (int)value;
                RadioButtonTS r = null;
                switch (value)
                {
                    case Filter.F1:
                        r = radRX2Filter1;
                        break;
                    case Filter.F2:
                        r = radRX2Filter2;
                        break;
                    case Filter.F3:
                        r = radRX2Filter3;
                        break;
                    case Filter.F4:
                        r = radRX2Filter4;
                        break;
                    case Filter.F5:
                        r = radRX2Filter5;
                        break;
                    case Filter.F6:
                        r = radRX2Filter6;
                        break;
                    case Filter.F7:
                        r = radRX2Filter7;
                        break;
                    case Filter.VAR1:
                        r = radRX2FilterVar1;
                        break;
                    case Filter.VAR2:
                        r = radRX2FilterVar2;
                        break;
                    case Filter.NONE:
                        SetRX2Filter(Filter.NONE);
                        break;
                }

                if (r != null)
                {
                    if (r.Checked)
                    {
                        r.Checked = false;
                    }

                    r.Checked = true;
                }

                //SetFilter(value);  // kd5tfd added for cat zzsf support 
                // commented as changed order in CATCommands.cs should no longer require this
            }
        }

        private MeterRXMode current_meter_rx_mode = MeterRXMode.SIGNAL_STRENGTH;
        public MeterRXMode CurrentMeterRXMode
        {
            get { return current_meter_rx_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterRXMode.SIGNAL_STRENGTH:
                        text = "Signal";
                        break;
                    case MeterRXMode.SIGNAL_AVERAGE:
                        text = "Sig Avg";
                        break;
                    case MeterRXMode.ADC_L:
                        text = "ADC L";
                        break;
                    case MeterRXMode.ADC_R:
                        text = "ADC R";
                        break;
                    case MeterRXMode.ADC2_L:
                        text = "ADC2 L";
                        break;
                    case MeterRXMode.ADC2_R:
                        text = "ADC2 R";
                        break;
                    case MeterRXMode.OFF:	// BT Added 7/24/05 for CAT commands
                        text = "Off";
                        break;
                }

                if (text == "") return;

                comboMeterRXMode.Text = text;
            }
        }

        private MeterRXMode rx2_meter_mode = MeterRXMode.SIGNAL_STRENGTH;
        public MeterRXMode RX2MeterMode
        {
            get { return rx2_meter_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterRXMode.SIGNAL_STRENGTH:
                        text = "Signal";
                        break;
                    case MeterRXMode.SIGNAL_AVERAGE:
                        text = "Sig Avg";
                        break;
                    case MeterRXMode.ADC_L:
                        text = "ADC L";
                        break;
                    case MeterRXMode.ADC_R:
                        text = "ADC R";
                        break;
                    case MeterRXMode.ADC2_L:
                        text = "ADC2 L";
                        break;
                    case MeterRXMode.ADC2_R:
                        text = "ADC2 R";
                        break;
                    case MeterRXMode.OFF:	// BT Added 7/24/05 for CAT commands
                        text = "Off";
                        break;
                }

                if (text == "") return;

                comboRX2MeterMode.Text = text;
            }
        }

        private MeterTXMode current_meter_tx_mode = MeterTXMode.FORWARD_POWER;
        public MeterTXMode CurrentMeterTXMode
        {
            get { return current_meter_tx_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterTXMode.FORWARD_POWER:
                        text = "Fwd Pwr";
                        break;
                    case MeterTXMode.REVERSE_POWER:
                        text = "Ref Pwr";
                        break;
                    case MeterTXMode.SWR_POWER:
                        text = "Fwd SWR";
                        break;
                    case MeterTXMode.MIC:
                        text = "Mic";
                        break;
                    case MeterTXMode.EQ:
                        text = "EQ";
                        break;
                    case MeterTXMode.LEVELER:
                        text = "Leveler";
                        break;
                    case MeterTXMode.LVL_G:
                        text = "Lvl Gain";
                        break;
                    case MeterTXMode.CFC_PK:
                        text = "CFC";
                        break;
                    case MeterTXMode.CFC_G:
                        text = "CFC Comp";
                        break;
                    case MeterTXMode.COMP:
                        text = "COMP";
                        break;
                    case MeterTXMode.ALC:
                        text = "ALC";
                        break;
                    case MeterTXMode.ALC_G:
                        text = "ALC Comp";
                        break;
                    case MeterTXMode.SWR:
                        text = "SWR";
                        break;
                    case MeterTXMode.OFF:		// BT Added 07/24/05 for CAT commands
                        text = "Off";
                        break;
                }
                if (text == "") return;

                comboMeterTXMode.Text = text;
            }
        }

        private int cw_pitch = 600;
        public int CWPitch
        {
            get { return cw_pitch; }
            set
            {
                int diff = cw_pitch - value;
                cw_pitch = value;
                if (cw_pitch <= 0) cw_pitch = 0;  //-W2PA
                udCWPitch.Value = cw_pitch;
                Display.CWPitch = cw_pitch;
                NetworkIO.SetCWSidetoneFreq(cw_pitch);

                //-W2PA June 2017
                //      This centers the passband of the CW filters on the pitch frequency, but if CWPitch setter is called by mode buttons,  
                //      it prevents filter setting from persisting when the mode changes or band changes, since band changes trigger mode changes.
                //      This happened because of a line:  CWPitch = cw_pitch;  in SetRX1Mode and SetRX2Mode.  
                //      Those are now commented out. This should only be called by the CW Pitch control in the UI and Setup, or by a CAT command.
                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    // Adjust CWL filters
                    int low = rx1_filters[(int)DSPMode.CWL].GetLow(f);
                    int high = rx1_filters[(int)DSPMode.CWL].GetHigh(f);
                    string name = rx1_filters[(int)DSPMode.CWL].GetName(f);

                    int bw = high - low;
                    low = -cw_pitch - bw / 2;
                    high = -cw_pitch + bw / 2;

                    if (high > 0) // stop shifting the passband when it hits the image limit, while allowing pitch to continue to decrease
                    {
                        low = low - high;  // slide the passband down to put its edge at zero
                        high = 0;
                    }

                    rx1_filters[(int)DSPMode.CWL].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.CWL].SetFilter(f, low, high, name); // n6vl

                    // Adjust CWU filters
                    low = rx1_filters[(int)DSPMode.CWU].GetLow(f);
                    high = rx1_filters[(int)DSPMode.CWU].GetHigh(f);
                    name = rx1_filters[(int)DSPMode.CWU].GetName(f);

                    bw = high - low;
                    low = cw_pitch - bw / 2;
                    high = cw_pitch + bw / 2;

                    if (low < 0) // stop adjusting the passband when it hits the image limit, while allowing pitch to continue to decrease
                    {
                        high = high - low;  // slide the passband up to put its edge at zero
                        low = 0;
                    }

                    rx1_filters[(int)DSPMode.CWU].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.CWU].SetFilter(f, low, high, name); // n6vl
                }

                switch (rx1_dsp_mode)
                {
                    case DSPMode.CWL:
                        diff = -diff;
                        if (mox)
                        {
                            VFOAFreq += (double)diff / 1e6;
                            if (chkVFOSplit.Checked) VFOBFreq += (double)diff / 1e6;
                        }
                        else
                        {
                            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty); // n6vl
                        }
                        RX1Filter = rx1_filter;
                        RX2Filter = rx2_filter; // n6vl
                        break;
                    case DSPMode.CWU:
                        if (mox)
                        {
                            VFOAFreq += (double)diff / 1e6;
                            if (chkVFOSplit.Checked) VFOBFreq += (double)diff / 1e6;
                        }
                        else
                        {
                            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty); // n6vl
                        }
                        RX1Filter = rx1_filter;
                        RX2Filter = rx2_filter; // n6vl
                        break;
                }
                if (SetupForm != null)
                {
                    if (SetupForm.RX1APFControls)
                        SetupForm.RX1APFFreq = ptbCWAPFFreq.Value;
                    if (SetupForm.RX1subAPFControls)
                        SetupForm.RX1subAPFFreq = ptbCWAPFFreq.Value;
                    if (SetupForm.RX2APFControls)
                        SetupForm.RX2APFFreq = ptbCWAPFFreq.Value;
                }
            }
        }

        private int histogram_hang_time = 100;
        public int HistogramHangTime
        {
            get { return histogram_hang_time; }
            set { histogram_hang_time = value; }
        }

        public double VFOAFreq
        {
            get
            {
                try
                {
                    return double.Parse(txtVFOAFreq.Text);
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set
            {
                if ((vfo_lock != CheckState.Unchecked) || vfoA_lock == true || SetupForm == null) return;
                if (!this.InvokeRequired)
                {
                    // UpdateVFOAFreq(value.ToString("f6"));
                    txtVFOAFreq.Text = value.ToString("f6");
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    VFOUpdateDel del = new VFOUpdateDel(VFOAUpdate);
                    Invoke(del, new object[] { value });
                }
            }
        }

        private delegate void VFOUpdateDel(double freq);
        private void VFOAUpdate(double freq)
        {
            //UpdateVFOAFreq(freq.ToString("f6"));
            txtVFOAFreq.Text = freq.ToString("f6");
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
        }

        public double VFOASubFreq //rx2
        {
            get
            {
                if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return -999.999;
                try
                {
                    return double.Parse(txtVFOABand.Text);
                }
                catch (Exception)
                {
                    return -999.999;
                }
            }

            set
            {
                if ((vfo_lock != CheckState.Unchecked) || vfoA_lock == true || SetupForm == null) return;
                txtVFOABand.Text = value.ToString("f6");
                txtVFOABand_LostFocus(this, EventArgs.Empty);
            }
        }

        public double VFOBFreq
        {
            get
            {
                try
                {
                    return double.Parse(txtVFOBFreq.Text);
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            set
            {
                if ((vfo_lock == CheckState.Indeterminate) || SetupForm == null || vfoB_lock == true) return;
                value = Math.Max(0, value);
                txtVFOBFreq.Text = value.ToString("f6");
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        public int PWR
        {
            get { return ptbPWR.Value; }
            set
            {
                value = Math.Max(0, value);			// lower bound
                value = Math.Min(100, value);		// upper bound

                ptbPWR.Value = value;
                ptbPWR_Scroll(this, EventArgs.Empty);
            }
        }

        private bool pa_values = false;
        public bool PAValues
        {
            get { return pa_values; }
            set { pa_values = value; }
        }

        public int AF
        {
            get { return ptbAF.Value; }
            set
            {
                value = Math.Max(0, value);			// lower bound
                value = Math.Min(100, value);		// upper bound

                ptbAF.Value = value;
                ptbAF_Scroll(this, EventArgs.Empty);
            }
        }

        private int rxaf = 50;
        public int RXAF
        {
            get { return rxaf; }
            set { rxaf = value; }
        }

        private int txaf = 50;
        public int TXAF
        {
            get { return txaf; }
            set
            {
                txaf = value;
                if (QSKEnabled && chkCWSidetone.Checked)
                {
                    qsk_sidetone_volume = value;  // For QSK sidetone separate from rx audio level
                    NetworkIO.SetCWSidetoneVolume((int)(qsk_sidetone_volume * 1.27)); 
                }
                if (SetupForm != null)
                {
                    SetupForm.TXAF = txaf;
                    if (MOX)
                    {
                        ptbAF.Value = txaf;

                        if (cw_sidetone)
                        {
                            NetworkIO.SetCWSidetoneVolume((int)(ptbAF.Value * 1.27));
                        }
                        else NetworkIO.SetCWSidetoneVolume(0);

                    }
                }
            }
        }

        public bool DisplayAVG
        {
            get { return chkDisplayAVG.Checked; }
            set { chkDisplayAVG.Checked = value; }
        }

        private double break_in_delay = 300;
        public double BreakInDelay
        {
            get { return break_in_delay; }
            set
            {
                break_in_delay = value;
                udCWBreakInDelay.Value = (int)value;
                if (BreakInEnabled) NetworkIO.SetCWHangTime((int)value + key_up_delay);
                else NetworkIO.SetCWHangTime(0);
            }
        }

        private int apf_freq = 0;
        public int APFFreq
        {
            get { return apf_freq; }
            set
            {
                apf_freq = value;
                ptbCWAPFFreq.Value = value;
                lblCWAPFTune.Text = "Tune:  " + ptbCWAPFFreq.Value.ToString();
            }
        }

        private int apf_bandwidth = 150;
        public int APFBandwidth
        {
            get { return apf_bandwidth; }
            set
            {
                apf_bandwidth = value;
                ptbCWAPFBandwidth.Value = value;
                lblCWAPFBandwidth.Text = "Bandwidth:  " + ptbCWAPFBandwidth.Value.ToString();
            }
        }

        private int apf_gain = 0;
        public int APFGain
        {
            get { return apf_gain; }
            set
            {
                if (ptbCWAPFGain != null)
                {
                    apf_gain = value;
                    ptbCWAPFGain.Value = value;
                    double gain_value = Math.Round(ptbCWAPFGain.Value / 10.0, 0);
                    lblCWAPFGain.Text = "Gain:  " + gain_value.ToString();
                }
            }
        }

        private bool cat_ptt = false;
        public bool CATPTT
        {
            get { return cat_ptt; }
            set { cat_ptt = value; }
        }

        private bool reverse_paddles = false;
        public bool ReversePaddles
        {
            get { return reverse_paddles; }
            set
            {
                reverse_paddles = value;
                NetworkIO.ReversePaddles(Convert.ToInt32(value));
            }
        }

        private bool cw_auto_mode_switch = false;
        public bool CWAutoModeSwitch
        {
            get { return cw_auto_mode_switch; }
            set
            {
                cw_auto_mode_switch = value;
                if (!cw_auto_mode_switch)
                {
                    if (rx1_dsp_mode != DSPMode.CWL &&
                        rx1_dsp_mode != DSPMode.CWU)
                        ;//CWFWKeyer = false;
                }
                // chkCWFWKeyer_CheckedChanged(this, EventArgs.Empty);
            }
        }

        private DSPMode saved_cw_auto_switch_dsp_mode = DSPMode.FIRST;
        public void SetConsoleMox(bool b)
        {
            if (disable_ptt && b) return;
            DSPMode tx_mode = radio.GetDSPTX(0).CurrentDSPMode;

            if (cw_auto_mode_switch)
            {
                CWAutoSwitchMode(b, tx_mode);
            }
            else
            {
                switch (tx_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        MOX = b;
                        break;
                }
            }
        }

        private void CWAutoSwitchMode(bool b, DSPMode tx_mode)
        {
            if (b)
            {
                if (saved_cw_auto_switch_dsp_mode != tx_mode)
                    saved_cw_auto_switch_dsp_mode = tx_mode;

                switch (tx_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break; // do nothing
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        if (rx2_enabled && chkVFOBTX.Checked)
                            Invoke(new MethodInvoker(radRX2ModeCWL.Select)); // switch RX2 to CWL mode
                        else Invoke(new MethodInvoker(radModeCWL.Select)); // switch RX1 to CWL mode
                        break;
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                    case DSPMode.DRM:
                        if (rx2_enabled && chkVFOBTX.Checked)
                            Invoke(new MethodInvoker(radRX2ModeCWU.Select)); // switch RX2 to CWU mode    
                        else Invoke(new MethodInvoker(radModeCWU.Select)); // switch RX1 to CWU mode
                        break;
                }

                MOX = true;
            }
            else
            {
                MOX = false;
                switch (saved_cw_auto_switch_dsp_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break; // do nothing
                    default:
                        RadioButtonTS rad = null;
                        bool rx2 = (rx2_enabled && chkVFOBTX.Checked);
                        switch (saved_cw_auto_switch_dsp_mode)
                        {
                            case DSPMode.LSB:
                                if (rx2) rad = radRX2ModeLSB;
                                else rad = radModeLSB;
                                break;
                            case DSPMode.USB:
                                if (rx2) rad = radRX2ModeUSB;
                                else rad = radModeUSB;
                                break;
                            case DSPMode.DSB:
                                if (rx2) rad = radRX2ModeDSB;
                                else rad = radModeDSB;
                                break;
                            case DSPMode.FM:
                                if (rx2) rad = radRX2ModeFMN;
                                else rad = radModeFMN;
                                break;
                            case DSPMode.AM:
                                if (rx2) rad = radRX2ModeAM;
                                else rad = radModeAM;
                                break;
                            case DSPMode.SAM:
                                if (rx2) rad = radRX2ModeSAM;
                                else rad = radModeSAM;
                                break;
                            case DSPMode.DIGL:
                                if (rx2) rad = radRX2ModeDIGL;
                                else rad = radModeDIGL;
                                break;
                            case DSPMode.DIGU:
                                if (rx2) rad = radRX2ModeDIGU;
                                else rad = radModeDIGU;
                                break;
                            case DSPMode.DRM:
                                if (rx2) rad = radRX2ModeDRM;
                                else rad = radModeDRM;
                                break;
                        }

                        if (rad != null)
                            Invoke(new MethodInvoker(rad.Select));
                        break;
                }
            }
        }

        private void SetTRMute(bool b)
        {
            if (!b) // RX
            {
                switch (radio.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        Audio.MuteOutput = false;
                        break;
                    default:
                        //USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
                        break;
                }
            }
            else // TX
            {
                //USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
            }
        }

        // Sets or reads the PS-A button
        public bool PSA
        {
            get { return chkFWCATUBypass.Checked; }
            set { chkFWCATUBypass.Checked = value; }
        }

        public bool MOX
        {
            get { return chkMOX.Checked; }
            set { chkMOX.Checked = value; }
        }

        public bool MOXEnabled
        {
            get { return chkMOX.Enabled; }
            set { chkMOX.Enabled = value; }
        }

        public bool MON
        {
            get { return chkMON.Checked; }
            set { chkMON.Checked = value; }
        }

        public bool MUT
        {
            get { return chkMUT.Checked; }
            set { chkMUT.Checked = value; }
        }

        public bool MUT2
        {
            get { return chkRX2Mute.Checked; }
            set { chkRX2Mute.Checked = value; }
        }

        public bool TUN
        {
            get { return chkTUN.Checked; }
            set
            {
                chkTUN.Checked = value;
            }
        }

        public bool TUNEnabled
        {
            get { return chkTUN.Enabled; }
            set { chkTUN.Enabled = value; }
        }

        public int RX1FilterLow
        {
            get { return (int)udFilterLow.Value; }
            set { udFilterLow.Value = value; }
        }

        public int RX1FilterHigh
        {
            get { return (int)udFilterHigh.Value; }
            set { udFilterHigh.Value = value; }
        }

        public int RX2FilterLow
        {
            get { return (int)udRX2FilterLow.Value; }
            set { udRX2FilterLow.Value = value; }
        }

        public int RX2FilterHigh
        {
            get { return (int)udRX2FilterHigh.Value; }
            set { udRX2FilterHigh.Value = value; }
        }

        public int FilterShiftValue
        {
            get { return ptbFilterShift.Value; }
            set { ptbFilterShift.Value = value; }
        }

        private static List<Channel> channels_60m;
        public static List<Channel> Channels60m
        {
            get
            {
                return channels_60m;
            }
        }

        private bool pennylanepresent = false;
        public bool PennyLanePresent
        {
            get { return pennylanepresent; }
            set
            {
                pennylanepresent = value;
                cmaster.CMSetTXOutputLevelRun();
            }
        }

        //public bool PennyLanePresent = false; 
        public bool PennyPresent = false;
        //public bool AlexPresent = false; 
        public bool MercuryPresent = false;
        public bool JanusPresent = false;
        // public bool HPSDRisMetis = false;

        private bool disable_6m_lna_on_rx = false;
        public bool Disable6mLNAonRX
        {
            get { return disable_6m_lna_on_rx; }
            set
            {
                disable_6m_lna_on_rx = value;
                double freq = Double.Parse(txtVFOAFreq.Text);
                double freq2 = Double.Parse(txtVFOBFreq.Text);
                SetAlexHPF(freq);
                if (anan7000dpresent || anan8000dpresent)
                {
                    SetAlex2HPF(freq2);
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private bool disable_6m_lna_on_tx = true;
        public bool Disable6mLNAonTX
        {
            get { return disable_6m_lna_on_tx; }
            set
            {
                disable_6m_lna_on_tx = value;
                // if (chkPower.Checked)
                // {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                // }
            }
        }

        private bool disable_hpf_on_tx = false;
        public bool DisableHPFonTX
        {
            get { return disable_hpf_on_tx; }
            set
            {
                disable_hpf_on_tx = value;
                //  if (chkPower.Checked)
                // {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                // }
            }
        }

        private bool lpf_bypass = false;
        public bool LPFBypass
        {
            get { return lpf_bypass; }
            set
            {
                lpf_bypass = value;
                if (chkPower.Checked)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    if (mox) freq = tx_dds_freq_mhz;
                    SetAlexLPF(freq);
                    if (!initializing)
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
            }
        }

        private bool alex_hpf_bypass = false;
        public bool AlexHPFBypass
        {
            get { return alex_hpf_bypass; }
            set
            {
                alex_hpf_bypass = value;
                //  if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //if(XVTRForm != null && SetupForm != null)
                if (!initializing)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                // }
            }
        }

        private bool alex2_hpf_bypass = false;
        public bool Alex2HPFBypass
        {
            get { return alex2_hpf_bypass; }
            set
            {
                alex2_hpf_bypass = value;
                //  if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                if (!initializing)
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                // }
            }
        }

        private bool alex1_5bphpf_bypass = false;
        public bool Alex1_5BPHPFBypass
        {
            get { return alex1_5bphpf_bypass; }
            set
            {
                alex1_5bphpf_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool bpf1_1_5bp_bypass = false;
        public bool BPF1_1_5BPBypass
        {
            get { return bpf1_1_5bp_bypass; }
            set
            {
                bpf1_1_5bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex21_5bphpf_bypass = false;
        public bool Alex21_5BPHPFBypass
        {
            get { return alex21_5bphpf_bypass; }
            set
            {
                alex21_5bphpf_bypass = value;
                //  if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //   }
            }
        }

        private bool alex6_5bphpf_bypass = false;
        public bool Alex6_5BPHPFBypass
        {
            get { return alex6_5bphpf_bypass; }
            set
            {
                alex6_5bphpf_bypass = value;
                //    if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //    }
            }
        }

        private bool bpf1_6_5bp_bypass = false;
        public bool BPF1_6_5BPBypass
        {
            get { return bpf1_6_5bp_bypass; }
            set
            {
                bpf1_6_5bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex26_5bphpf_bypass = false;
        public bool Alex26_5BPHPFBypass
        {
            get { return alex26_5bphpf_bypass; }
            set
            {
                alex26_5bphpf_bypass = value;
                //    if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //   }
            }
        }

        private bool alex9_5bphpf_bypass = false;
        public bool Alex9_5BPHPFBypass
        {
            get { return alex9_5bphpf_bypass; }
            set
            {
                alex9_5bphpf_bypass = value;
                //  if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //  }
            }
        }

        private bool bpf1_9_5bp_bypass = false;
        public bool BPF1_9_5BPBypass
        {
            get { return bpf1_9_5bp_bypass; }
            set
            {
                bpf1_9_5bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex29_5bphpf_bypass = false;
        public bool Alex29_5BPHPFBypass
        {
            get { return alex29_5bphpf_bypass; }
            set
            {
                alex29_5bphpf_bypass = value;
                //    if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //   }
            }
        }

        private bool alex13bphpf_bypass = false;
        public bool Alex13BPHPFBypass
        {
            get { return alex13bphpf_bypass; }
            set
            {
                alex13bphpf_bypass = value;
                //    if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool bpf1_13bp_bypass = false;
        public bool BPF1_13BPBypass
        {
            get { return bpf1_13bp_bypass; }
            set
            {
                bpf1_13bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex213bphpf_bypass = false;
        public bool Alex213BPHPFBypass
        {
            get { return alex213bphpf_bypass; }
            set
            {
                alex213bphpf_bypass = value;
                //   if (chkPower.Checked)
                //    {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //   }
            }
        }

        private bool alex20bphpf_bypass = false;
        public bool Alex20BPHPFBypass
        {
            get { return alex20bphpf_bypass; }
            set
            {
                alex20bphpf_bypass = value;
                //   if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool bpf1_20bp_bypass = false;
        public bool BPF1_20BPBypass
        {
            get { return bpf1_20bp_bypass; }
            set
            {
                bpf1_20bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex220bphpf_bypass = false;
        public bool Alex220BPHPFBypass
        {
            get { return alex220bphpf_bypass; }
            set
            {
                alex220bphpf_bypass = value;
                //  if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //  }
            }
        }

        private bool alex6bphpf_bypass = false;
        public bool Alex6BPHPFBypass
        {
            get { return alex6bphpf_bypass; }
            set
            {
                alex6bphpf_bypass = value;
                //   if (chkPower.Checked)
                //  {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                //  }
            }
        }

        private bool bpf1_6bp_bypass = false;
        public bool BPF1_6BPBypass
        {
            get { return bpf1_6bp_bypass; }
            set
            {
                bpf1_6bp_bypass = value;
                //   if (chkPower.Checked)
                //   {
                double freq = Double.Parse(txtVFOAFreq.Text);
                SetAlexHPF(freq);
                //   }
            }
        }

        private bool alex26bphpf_bypass = false;
        public bool Alex26BPHPFBypass
        {
            get { return alex26bphpf_bypass; }
            set
            {
                alex26bphpf_bypass = value;
                //   if (chkPower.Checked)
                //    {
                double freq = Double.Parse(txtVFOBFreq.Text);
                SetAlex2HPF(freq);
                //  }
            }
        }

        private bool swrprotection = true;
        public bool SWRProtection
        {
            get { return swrprotection; }
            set
            {
                swrprotection = value;
            }
        }

        private bool disable_swr_on_tune = true;
        public bool DisableSWRonTune
        {
            get { return disable_swr_on_tune; }
            set
            {
                disable_swr_on_tune = value;
            }
        }

        private bool attontx = true;
        public bool ATTOnTX
        {
            get { return attontx; }
            set
            {
                attontx = value;
                if (PowerOn)
                {
                    if (attontx) NetworkIO.SetTxAttenData(tx_step_attenuator_by_band[(int)rx1_band]);
                    else NetworkIO.SetTxAttenData(0);

                    if (MercuryPresent)
                        NetworkIO.SetMercTxAtten(Convert.ToInt32(attontx));
                }

            }
        }

        private bool anan10present = false;
        public bool ANAN10Present
        {
            get { return anan10present; }
            set
            {
                anan10present = value;
                CurrentHPSDRHardware = HPSDRHW.Hermes;

                if (anan10present)
                {
                    if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    {

                        if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                    }
                }
                else
                {
                    if (!initializing)
                    {
                        if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Remove("Fwd SWR");
                    }
                }
            }
        }

        private bool anan10Epresent = false;
        public bool ANAN10EPresent
        {
            get { return anan10Epresent; }
            set
            {
                anan10Epresent = value;
                CurrentHPSDRHardware = HPSDRHW.HermesII;

                if (anan10Epresent)
                {
                    if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    {

                        if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                    }
                }
                else
                {
                    if (!initializing)
                    {
                        if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Remove("Fwd SWR");
                    }
                }
            }
        }

        private bool anan100Bpresent = false;
        public bool ANAN100BPresent
        {
            get { return anan100Bpresent; }
            set
            {
                anan100Bpresent = value;
                CurrentHPSDRHardware = HPSDRHW.HermesII;

                if (anan100Bpresent)
                {
                    if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    {

                        if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                    }
                }
                else
                {
                    if (!initializing)
                    {
                        if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Remove("Fwd SWR");
                    }
                }
            }
        }

        private bool anan100dpresent = false;
        public bool ANAN100DPresent
        {
            get { return anan100dpresent; }
            set
            {
                anan100dpresent = value;
                CurrentHPSDRHardware = HPSDRHW.Angelia;
                /*  if (anan100dpresent)
                  {
                      if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                          comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                  }
                  else
                  {
                      if (!initializing)
                      {
                          if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                              comboMeterTXMode.Items.Remove("Fwd SWR");
                      }
                  } */
            }
        }

        private bool anan200dpresent = false;
        public bool ANAN200DPresent
        {
            get { return anan200dpresent; }
            set
            {
                anan200dpresent = value;
                CurrentHPSDRHardware = HPSDRHW.Orion;

                /*  if (anan100dpresent)
                  {
                      if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                          comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                  }
                  else
                  {
                      if (!initializing)
                      {
                          if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                              comboMeterTXMode.Items.Remove("Fwd SWR");
                      }
                  } */
            }
        }

        private bool orionmkiipresent = false;
        public bool ORIONMKIIPresent
        {
            get { return orionmkiipresent; }
            set
            {
                orionmkiipresent = value;
                CurrentHPSDRHardware = HPSDRHW.OrionMKII;
            }
        }

        private bool anan7000dpresent = false;
        public bool ANAN7000DPresent
        {
            get { return anan7000dpresent; }
            set
            {
                anan7000dpresent = value;
                CurrentHPSDRHardware = HPSDRHW.OrionMKII;
            }
        }

        private bool anan8000dpresent = false;
        public bool ANAN8000DPresent
        {
            get { return anan8000dpresent; }
            set
            {
                anan8000dpresent = value;
                CurrentHPSDRHardware = HPSDRHW.OrionMKII;
            }
        }

        private bool mkiibpfpresent = false;
        public bool MKIIBPFPresent
        {
            get { return mkiibpfpresent; }
            set
            {
                mkiibpfpresent = value;
                if (value) NetworkIO.SetMKIIBPF(1);
                else NetworkIO.SetMKIIBPF(0);
            }
        }

        private bool apollopresent = false;
        public bool ApolloPresent
        {
            get { return apollopresent; }
            set
            {
                apollopresent = value;
                if (apollopresent)
                {
                    if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                        comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                    if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    {
                        if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                    }
                }
                else
                {
                    if (!initializing)
                    {
                        if (comboMeterTXMode.Items.Contains("Ref Pwr"))
                            comboMeterTXMode.Items.Remove("Ref Pwr");
                        if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Remove("Fwd SWR");
                    }
                }

            }
        }

        private bool apollo_tuner_enabled = false;
        public bool ApolloTunerEnabled
        {
            get { return apollo_tuner_enabled; }
            set
            {
                apollo_tuner_enabled = value;
                if (apollo_tuner_enabled) NetworkIO.EnableApolloTuner(1);
                else NetworkIO.EnableApolloTuner(0);
            }
        }

        private bool alexpresent = true;
        public bool AlexPresent
        {
            get { return alexpresent; }
            set
            {
                alexpresent = value;
                if (alexpresent)
                {
                    if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                        comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                    if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                    {
                        if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Insert(3, "Fwd SWR");
                    }

                    if (!comboMeterTXMode.Items.Contains("SWR"))
                        comboMeterTXMode.Items.Insert(2, "SWR");

                    if (comboMeterTXMode.SelectedIndex < 0)
                        comboMeterTXMode.SelectedIndex = 0;
                    //  if (chkPower.Checked)
                    // {
                    SetAlexHPF(fwc_dds_freq);
                    SetAlexLPF(tx_dds_freq_mhz);

                    SetAlex2HPF(rx2_dds_freq_mhz);
                    //SetAlex2LPF(rx2_dds_freq_mhz);
                    //  }

                }
                else
                {
                    string cur_txt = comboMeterTXMode.Text;

                    if (!initializing)
                    {
                        if (comboMeterTXMode.Items.Contains("Ref Pwr"))
                            comboMeterTXMode.Items.Remove("Ref Pwr");
                        if (comboMeterTXMode.Items.Contains("SWR"))
                            comboMeterTXMode.Items.Remove("SWR");
                        if (comboMeterTXMode.Items.Contains("Fwd SWR"))
                            comboMeterTXMode.Items.Remove("Fwd SWR");
                    }

                    comboMeterTXMode.Text = cur_txt;
                    if (comboMeterTXMode.SelectedIndex < 0 &&
                        comboMeterTXMode.Items.Count > 0)
                        comboMeterTXMode.SelectedIndex = 0;
                }
            }
        }

        private string hpsdr_network_ip_addr;
        public string HPSDRNetworkIPAddr
        {
            get { return hpsdr_network_ip_addr; }
            set
            {
                bool changed = false;
                if (hpsdr_network_ip_addr != null && !hpsdr_network_ip_addr.Equals(value))
                {
                    changed = true;
                }
                hpsdr_network_ip_addr = value;
            }
        }

        private int mic_gain_min = -40;
        public int MicGainMin
        {
            get { return mic_gain_min; }
            set
            {
                mic_gain_min = value;
                ptbMic_Scroll(this, EventArgs.Empty);
            }
        }

        private int mic_gain_max = 10;
        public int MicGainMax
        {
            get { return mic_gain_max; }
            set
            {
                mic_gain_max = value;
                ptbMic_Scroll(this, EventArgs.Empty);
            }
        }

        private int alex_atten;
        private PreampMode rx1_preamp_mode = PreampMode.HPSDR_OFF;
        public PreampMode RX1PreampMode
        {
            get { return rx1_preamp_mode; }
            set
            {
                rx1_preamp_mode = value;
                if (initializing) return;

                if (!alexpresent && ((rx1_preamp_mode == PreampMode.HPSDR_MINUS10) ||
                                    (rx1_preamp_mode == PreampMode.HPSDR_MINUS20) ||
                                    (rx1_preamp_mode == PreampMode.HPSDR_MINUS30) ||
                                    (rx1_preamp_mode == PreampMode.HPSDR_MINUS40) ||
                                    (rx1_preamp_mode == PreampMode.HPSDR_MINUS50)))
                {
                    rx1_preamp_mode = PreampMode.HPSDR_OFF;
                }

                alex_atten = 0;
                int merc_preamp = 0;
                int rx1_att_value = 0;
                switch (rx1_preamp_mode)
                {
                    case PreampMode.HPSDR_ON:  //0dB
                        rx1_att_value = 0;
                        merc_preamp = 1; //no attn
                        alex_atten = 0;
                        break;
                    case PreampMode.HPSDR_OFF: //-20dB
                        rx1_att_value = 20;
                        merc_preamp = 0; //attn inline
                        alex_atten = 0;
                        break;
                    case PreampMode.HPSDR_MINUS10:
                        rx1_att_value = 0;
                        merc_preamp = 1;
                        alex_atten = 1;
                        break;
                    case PreampMode.HPSDR_MINUS20:
                        rx1_att_value = 0;
                        merc_preamp = 1;
                        alex_atten = 2;
                        break;
                    case PreampMode.HPSDR_MINUS30:
                        rx1_att_value = 0;
                        merc_preamp = 1;
                        alex_atten = 3;
                        break;
                    case PreampMode.HPSDR_MINUS40:
                        rx1_att_value = 20;
                        merc_preamp = 0;
                        alex_atten = 2;
                        break;
                    case PreampMode.HPSDR_MINUS50:
                        rx1_att_value = 20;
                        merc_preamp = 0;
                        alex_atten = 3;
                        break;
                    case PreampMode.SA_MINUS10:
                        rx1_att_value = 10;
                        merc_preamp = 0;
                        alex_atten = 0;
                        break;
                    case PreampMode.SA_MINUS30:
                        rx1_att_value = 30;
                        merc_preamp = 0;
                        alex_atten = 0;
                        break;
                }
                if (current_hpsdr_model != HPSDRModel.HPSDR)
                {
                    if (!rx1_step_att_present)
                    {
                        NetworkIO.SetADC1StepAttenData(rx1_att_value);
                        // NetworkIO.EnableADC1StepAtten(1);
                    }
                }
                else
                {
                    NetworkIO.SetRX1Preamp(merc_preamp);
                    // NetworkIO.EnableADC1StepAtten(0);
                }

                NetworkIO.SetAlexAtten(alex_atten);

                //  if (rx2_preamp_present && current_hpsdr_model == HPSDRModel.HPSDR)
                //  {
                // JanusAudio.SetRX2Preamp(merc_preamp);
                //  Display.RX2PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];
                //  }

                rx1_preamp_by_band[(int)rx1_band] = rx1_preamp_mode;

                switch (rx1_preamp_mode)
                {
                    case PreampMode.HPSDR_ON:
                        comboPreamp.Text = "0dB";
                        break;

                    case PreampMode.HPSDR_OFF:
                        comboPreamp.Text = "-20dB";
                        break;

                    case PreampMode.HPSDR_MINUS10:
                        comboPreamp.Text = "-10db";
                        break;

                    case PreampMode.HPSDR_MINUS20:
                        comboPreamp.Text = "-20db";
                        break;

                    case PreampMode.HPSDR_MINUS30:
                        comboPreamp.Text = "-30db";
                        break;

                    case PreampMode.HPSDR_MINUS40:
                        comboPreamp.Text = "-40dB";
                        break;

                    case PreampMode.HPSDR_MINUS50:
                        comboPreamp.Text = "-50dB";
                        break;

                    case PreampMode.SA_MINUS10:
                        comboPreamp.Text = "-10dB";
                        break;

                    case PreampMode.SA_MINUS30:
                        comboPreamp.Text = "-30dB";
                        break;
                }

                UpdateRX1DisplayOffsets();

                if (chkSquelch.Checked)
                    ptbSquelch_Scroll(this, EventArgs.Empty);

                if (!mox)
                {
                    update_preamp = true;
                    UpdatePreamps();
                }

            }
        }

        private PreampMode rx2_preamp_mode = PreampMode.HPSDR_OFF;
        public PreampMode RX2PreampMode
        {
            get { return rx2_preamp_mode; }
            set
            {
                rx2_preamp_mode = value;
                if (initializing) return;
                int rx2_preamp = 0;
                int rx2_att_value = 0;

                switch (rx2_preamp_mode)
                {
                    case PreampMode.HPSDR_ON: //0dB HPSDR_ON
                        rx2_preamp = 1;
                        rx2_att_value = 0;
                        comboRX2Preamp.Text = "0dB";
                        break;
                    case PreampMode.HPSDR_OFF: // -20dB HPSDR_OFF
                        rx2_preamp = 0;
                        rx2_att_value = 20;
                        comboRX2Preamp.Text = "-20dB";
                        break;
                    case PreampMode.HPSDR_MINUS10:
                        // rx2_preamp = 1;
                        rx2_att_value = 10;
                        comboRX2Preamp.Text = "-10dB";
                        break;
                    case PreampMode.HPSDR_MINUS20:
                        // rx2_preamp = 1;
                        rx2_att_value = 20;
                        comboRX2Preamp.Text = "-20dB";
                        break;
                    case PreampMode.HPSDR_MINUS30:
                        // rx2_preamp = 1;
                        rx2_att_value = 30;
                        comboRX2Preamp.Text = "-30dB";
                        break;
                }

                if (current_hpsdr_model == HPSDRModel.ANAN100D ||
                    current_hpsdr_model == HPSDRModel.ANAN200D ||
                    current_hpsdr_model == HPSDRModel.ORIONMKII ||
                    current_hpsdr_model == HPSDRModel.ANAN7000D ||
                    current_hpsdr_model == HPSDRModel.ANAN8000D)
                {
                    // NetworkIO.EnableADC2StepAtten(1);
                    NetworkIO.SetADC2StepAttenData(rx2_att_value);
                }

                if (current_hpsdr_model == HPSDRModel.HPSDR)
                    NetworkIO.SetRX2Preamp(rx2_preamp);
                rx2_preamp_by_band[(int)rx2_band] = rx2_preamp_mode;
                UpdateRX2DisplayOffsets();

                if (chkRX2Squelch.Checked)
                    ptbRX2Squelch_Scroll(this, EventArgs.Empty);
            }
        }

        public int Squelch
        {
            get { return ptbSquelch.Value; }
            set
            {
                ptbSquelch.Value = value;
                if (chkSquelch.Checked)
                    ptbSquelch_Scroll(this, EventArgs.Empty);
            }
        }

        public int Squelch2
        {
            get { return ptbRX2Squelch.Value; }
            set
            {
                ptbRX2Squelch.Value = value;
                if (chkRX2Squelch.Checked)
                    ptbRX2Squelch_Scroll(this, EventArgs.Empty);
            }
        }

        public int Zoom
        {
            get { return ptbDisplayZoom.Value; }
            set
            {
                ptbDisplayZoom.Value = value;
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
            }
        }

        public int Pan
        {
            get { return ptbDisplayPan.Value; }
            set
            {
                ptbDisplayPan.Value = value;
                ptbDisplayPan_Scroll(this, EventArgs.Empty);
            }
        }

        public AGCMode RX1AGCMode
        {
            get { return (AGCMode)comboAGC.SelectedIndex; }
            set { comboAGC.SelectedIndex = (int)value; }
        }

        public AGCMode RX2AGCMode
        {
            get
            {
                return (AGCMode)comboRX2AGC.SelectedIndex;
            }
            set
            {
                comboRX2AGC.SelectedIndex = (int)value;
            }
        }

        public bool VFOSplit
        {
            get { return chkVFOSplit.Checked; }
            set { chkVFOSplit.Checked = value; }
        }

        public bool RIT
        {
            get { return chkRIT.Checked; }
            set { chkRIT.Checked = value; }
        }

        public bool RITOn
        {
            get { return chkRIT.Checked; }
            set { chkRIT.Checked = value; }
        }

        public int RITValue
        {
            get { return (int)udRIT.Value; }
            set { udRIT.Value = value; }
        }

        public bool XITOn
        {
            get { return chkXIT.Checked; }
            set { chkXIT.Checked = value; }
        }

        public int XITValue
        {
            get { return (int)udXIT.Value; }
            set { udXIT.Value = value; }
        }

        private int fm_tx_bw = 6000;
        public int FMtxBW
        {
            get { return fm_tx_bw; }
            set { fm_tx_bw = value; }
        }

        private int mox_delay = 10;
        public int MoxDelay
        {
            get { return mox_delay; }
            set
            {
                mox_delay = value;
            }
        }

        private int key_up_delay = 10;
        public int KeyUpDelay
        {
            get { return key_up_delay; }
            set
            {
                key_up_delay = value;
            }
        }

        private int rf_delay = 30;
        public int RFDelay
        {
            get { return rf_delay; }
            set { rf_delay = value; }
        }

        //private bool ptto_delay_control = false;
        //public bool PTTODelayControl
        //{
        //    get { return ptto_delay_control; }
        //    set { ptto_delay_control = value; }
        //}

        private int ptt_out_delay = 20;
        public int PTTOutDelay
        {
            get { return ptt_out_delay; }
            set { ptt_out_delay = value; }
        }

        private int tx_filter_high = 3100;
        public int TXFilterHigh
        {
            get { return tx_filter_high; }
            set
            {
                tx_filter_high = value;
                udTXFilterHigh.Value = value;
                SetTXFilters(rx1_dsp_mode, tx_filter_low, tx_filter_high);
                if (Display.DrawTXFilter && !chkPower.Checked)
                {
                    switch (Display.CurrentDisplayMode)
                    {
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.SPECTRUM:
                        case DisplayMode.HISTOGRAM:
                        case DisplayMode.WATERFALL:
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANASCOPE:
                        case DisplayMode.SPECTRASCOPE:
                            //  Display.DrawBackground();
                            break;
                    }
                }
            }
        }

        private int tx_filter_low = 200;
        public int TXFilterLow
        {
            get { return tx_filter_low; }
            set
            {
                tx_filter_low = value;
                udTXFilterLow.Value = value;
                SetTXFilters(rx1_dsp_mode, tx_filter_low, tx_filter_high);
                if (Display.DrawTXFilter && !chkPower.Checked)
                {
                    switch (Display.CurrentDisplayMode)
                    {
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.SPECTRUM:
                        case DisplayMode.HISTOGRAM:
                        case DisplayMode.WATERFALL:
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANASCOPE:
                        case DisplayMode.SPECTRASCOPE:
                            // Display.DrawBackground();
                            break;
                    }
                }
            }
        }

        private delegate void SetTimerDel(System.Windows.Forms.Timer t, bool enable);
        private void SetTimer(System.Windows.Forms.Timer t, bool enable)
        {
            t.Enabled = enable;
        }

        private bool high_swr = false;
        public bool HighSWR
        {
            get { return high_swr; }
            set
            {
                high_swr = value;
                Display.HighSWR = value;
                //Display.DrawBackground();
            }
        }

        private bool disable_ptt = false;
        public bool DisablePTT
        {
            get { return disable_ptt; }
            set { disable_ptt = value; }
        }

        private bool mic_ptt_disabled = false;
        public bool MicPTTDisabled
        {
            get { return mic_ptt_disabled; }
            set
            {
                mic_ptt_disabled = value;
                NetworkIO.SetMicPTT(Convert.ToInt32(value));
            }
        }

        public bool PowerOn
        {
            get { return chkPower.Checked; }
            set { chkPower.Checked = value; }
        }

        public bool PowerEnabled
        {
            get { return chkPower.Enabled; }
            set { chkPower.Enabled = value; }
        }

        private bool vac_sound_card_stereo = false;
        public bool VACSoundCardStereo
        {
            get { return vac_sound_card_stereo; }
            set
            {
                vac_sound_card_stereo = value;
                Audio.VACStereo = value;
            }
        }

        private bool vac2_sound_card_stereo = false;
        public bool VAC2SoundCardStereo
        {
            get { return vac2_sound_card_stereo; }
            set
            {
                vac2_sound_card_stereo = value;
                Audio.VAC2Stereo = value;
            }
        }

        private bool vac_enabled = false;
        public bool VACEnabled
        {
            get { return vac_enabled; }
            set
            {
                vac_enabled = value;
                Audio.VACEnabled = value;
                if (chkVAC1 != null) chkVAC1.Checked = value;
            }
        }

        private bool vac2_enabled = false;
        public bool VAC2Enabled
        {
            get { return vac2_enabled; }
            set
            {
                vac2_enabled = value;
                Audio.VAC2Enabled = value;
                if (chkVAC2 != null) chkVAC2.Checked = value;
                chkVFOBTX_CheckedChanged(this, EventArgs.Empty);
            }
        }

        private int audio_driver_index2 = 0;
        public int AudioDriverIndex2
        {
            get { return audio_driver_index2; }
            set { audio_driver_index2 = value; }
        }

        private int audio_driver_index3 = 0;
        public int AudioDriverIndex3
        {
            get { return audio_driver_index3; }
            set { audio_driver_index3 = value; }
        }

        private int audio_input_index2 = 0;
        public int AudioInputIndex2
        {
            get { return audio_input_index2; }
            set { audio_input_index2 = value; }
        }

        private int audio_input_index3 = 0;
        public int AudioInputIndex3
        {
            get { return audio_input_index3; }
            set { audio_input_index3 = value; }
        }

        private int audio_output_index2 = 0;
        public int AudioOutputIndex2
        {
            get { return audio_output_index2; }
            set { audio_output_index2 = value; }
        }

        private int audio_output_index3 = 0;
        public int AudioOutputIndex3
        {
            get { return audio_output_index3; }
            set { audio_output_index3 = value; }
        }

        private double audio_volts1 = 2.23;
        public double AudioVolts1
        {
            get { return audio_volts1; }
            set
            {
                audio_volts1 = value;
                Audio.AudioVolts1 = audio_volts1;
                ptbPWR_Scroll(this, EventArgs.Empty);
            }
        }

        private int sample_rate1 = 48000;
        public int SampleRate1
        {
            get { return sample_rate1; }
            set
            {
                sample_rate1 = value;
                RadioDSP.SampleRate = value;
                Audio.SampleRate1 = value;
                Display.SampleRateRX1 = value;
                // NetworkIO.SetSampleRate(0, value);
                // NetworkIO.SetSampleRate(2, value);
                //CWSynth.SampleRate = value;
                switch (rx1_dsp_mode)
                {
                    case DSPMode.SPEC:
                        SetRX1Mode(DSPMode.SPEC);
                        break;
                }

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                        CalcDisplayFreq();
                        //CalcRX2DisplayFreq();
                        btnDisplayPanCenter.PerformClick();
                        break;
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.HISTOGRAM:
                        UpdateRXSpectrumDisplayVars();
                        break;
                }
            }
        }

        private int sample_rate_rx2 = 48000;
        public int SampleRateRX2
        {
            get { return sample_rate_rx2; }
            set
            {
                sample_rate_rx2 = value;

                Audio.SampleRateRX2 = value;
                Display.SampleRateRX2 = value;
                // NetworkIO.SetSampleRate(1, value);
                // NetworkIO.SetSampleRate(3, value);
                switch (rx1_dsp_mode)
                {
                    case DSPMode.SPEC:
                        SetRX1Mode(DSPMode.SPEC);
                        break;
                }

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                        // CalcDisplayFreq();
                        CalcRX2DisplayFreq();
                        btnDisplayPanCenter.PerformClick();
                        break;
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.HISTOGRAM:
                        UpdateRXSpectrumDisplayVars();
                        break;
                }
            }
        }

        private int sample_rate_tx = 192000;
        public int SampleRateTX
        {
            get { return sample_rate_tx; }
            set
            {
                sample_rate_tx = value;
                // specRX.GetSpecRX(cmaster.inid(1, 0)).SampleRate = value;
                Audio.SampleRateTX = value;
                Display.SampleRateTX = value;
                //NetworkIO.SetSampleRate(0, value, 1);
                // specRX.GetSpecRX(cmaster.inid(1, 0)).BlockSize = cmaster.GetBuffSize(value);
                cmaster.SetXmtrChannelOutrate(0, value, cmaster.MONMixState);

                switch (rx1_dsp_mode)
                {
                    case DSPMode.SPEC:
                        // SetRX1Mode(DSPMode.SPEC);
                        break;
                }

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                        CalcTXDisplayFreq();
                        btnDisplayPanCenter.PerformClick();
                       // UpdateTXSpectrumDisplayVars();
                        break;
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.HISTOGRAM:
                        UpdateTXSpectrumDisplayVars();
                       // UpdateTXDisplayVars((int)udTXFilterLow.Value, (int)udTXFilterHigh.Value);
                        break;
                }
            }
        }

        private int sample_rate2 = 48000;
        public int SampleRate2
        {
            get { return sample_rate2; }
            set
            {
                sample_rate2 = value;
                Audio.SampleRate2 = value;
            }
        }

        private int sample_rate3 = 48000;
        public int SampleRate3
        {
            get { return sample_rate3; }
            set
            {
                sample_rate3 = value;
                Audio.SampleRate3 = value;
            }
        }

        private int block_size1;
        public int BlockSize1
        {
            get { return block_size1; }
            set
            {
                block_size1 = value;
                Audio.BlockSize = value;
                // radio.GetDSPRX(0, 0).AudioSize = value;      // wcp
                // radio.GetDSPRX(0, 1).AudioSize = value;      // wcp
                // radio.GetDSPRX(1, 0).AudioSize = value;
                // radio.GetDSPRX(1, 1).AudioSize = value;
                // WDSP.SetEXTDIVBuffsize(0, value);
                // cmaster.Size = value;  // wcp
            }
        }

        private int block_size_rx2;
        public int BlockSizeRX2
        {
            get { return block_size_rx2; }
            set
            {
                block_size_rx2 = value;
                Audio.BlockSizeRX2 = value;
                // radio.GetDSPRX(0, 0).AudioSize = value;
                // radio.GetDSPRX(0, 1).AudioSize = value;
                // radio.GetDSPRX(1, 0).AudioSize = value;      // wcp
                // radio.GetDSPRX(1, 1).AudioSize = value;      // wcp
                //WDSP.SetEXTDIVBuffsize(1, value);
                // cmaster.Size = value;
            }
        }

        private int block_size2;
        public int BlockSize2
        {
            get { return block_size2; }
            set
            {
                block_size2 = value;
                Audio.BlockSizeVAC = value;
            }
        }

        private int block_size3;
        public int BlockSize3
        {
            get { return block_size3; }
            set
            {
                block_size3 = value;
                Audio.BlockSizeVAC2 = value;
            }
        }

        private int peak_text_delay = 500;
        public int PeakTextDelay
        {
            get { return peak_text_delay; }
            set
            {
                peak_text_delay = value;
                timer_peak_text.Interval = value;
            }
        }

        private int meter_delay = 50;
        public int MeterDelay
        {
            get { return meter_delay; }
            set
            {
                meter_delay = value;
                MultimeterPeakHoldTime = MultimeterPeakHoldTime;
            }
        }

        private int meter_dig_delay = 200;
        public int MeterDigDelay
        {
            get { return meter_dig_delay; }
            set { meter_dig_delay = value; }
        }

        private int cpu_meter_delay = 1000;
        public int CPUMeterDelay
        {
            get { return cpu_meter_delay; }
            set
            {
                cpu_meter_delay = value;
                timer_cpu_meter.Interval = value;
            }
        }

        private int display_grid_x = 0;
        public int DisplayGridX
        {
            get { return display_grid_x; }
            set
            {
                display_grid_x = value;
            }
        }

        private int display_grid_w = 0;
        public int DisplayGridW
        {
            get { return display_grid_w; }
            set
            {
                display_grid_w = value;
            }
        }

        private int display_fps = 60;
        private int display_delay = 1000 / 60;
        public int DisplayFPS
        {
            get { return display_fps; }
            set
            {
                display_fps = value;
                display_delay = 1000 / display_fps;
            }
        }

        private int multimeter_peak_hold_time = 500;
        private int multimeter_peak_hold_samples = 10;
        public int MultimeterPeakHoldTime
        {
            get { return multimeter_peak_hold_time; }
            set
            {
                multimeter_peak_hold_time = value;
                multimeter_peak_hold_samples = value / meter_delay;
            }
        }

        private int multimeter_text_peak_time = 500;
        private int multimeter_text_peak_samples = 5;
        public int MultimeterTextPeakTime
        {
            get { return multimeter_text_peak_time; }
            set
            {
                multimeter_text_peak_time = value;
                multimeter_text_peak_samples = value / meter_delay;
                if (multimeter_text_peak_samples > meter_text_history.Length)
                {
                    float[] temp = new float[multimeter_text_peak_samples];
                    for (int i = 0; i < meter_text_history.Length; i++)
                        temp[i] = meter_text_history[i];
                    meter_text_history = temp;
                }
            }
        }

        private Pen txtvfoafreq_forecolor_pen = new Pen(Color.Yellow, 2.0f);
        private Color vfo_text_light_color = Color.Yellow;
        public Color VFOTextLightColor
        {
            get { return vfo_text_light_color; }
            set
            {
                if (chkPower.Checked)
                {
                    txtVFOAFreq.ForeColor = value;
                    txtVFOAMSD.ForeColor = value;
                    txtvfoafreq_forecolor_pen.Color = vfo_text_light_color;
                }

                vfo_text_light_color = value;
            }
        }

        private Color vfo_text_dark_color = Color.Olive;
        public Color VFOTextDarkColor
        {
            get { return vfo_text_dark_color; }
            set
            {
                if (!chkPower.Checked)
                {
                    txtVFOAFreq.ForeColor = value;
                    txtVFOAMSD.ForeColor = value;
                    txtVFOALSD.ForeColor = value;
                    txtvfoafreq_forecolor_pen.Color = vfo_text_dark_color;
                }
                if (!chkVFOSplit.Checked)
                {
                    txtVFOBFreq.ForeColor = value;
                    txtVFOBMSD.ForeColor = value;
                    txtVFOBLSD.ForeColor = value;
                }

                vfo_text_dark_color = value;
            }
        }

        private Color band_text_light_color = Color.Lime;
        public Color BandTextLightColor
        {
            get { return band_text_light_color; }
            set
            {
                if (chkPower.Checked)
                    txtVFOABand.ForeColor = value;
                if (chkVFOSplit.Checked)
                    txtVFOBBand.ForeColor = value;

                band_text_light_color = value;
            }
        }

        private Color band_text_dark_color = Color.Green;
        public Color BandTextDarkColor
        {
            get { return band_text_dark_color; }
            set
            {
                if (!chkPower.Checked)
                    txtVFOABand.ForeColor = value;
                if (!chkVFOSplit.Checked)
                    txtVFOBBand.ForeColor = value;

                band_text_dark_color = value;
            }
        }

        private Color peak_text_color = Color.DodgerBlue;
        public Color PeakTextColor
        {
            get { return peak_text_color; }
            set
            {
                peak_text_color = value;
                txtDisplayCursorOffset.ForeColor = value;
                txtDisplayCursorPower.ForeColor = value;
                txtDisplayCursorFreq.ForeColor = value;
                // txtDisplayPeakOffset.ForeColor = value;
                // txtDisplayPeakPower.ForeColor = value;
                // txtDisplayPeakFreq.ForeColor = value;
            }
        }

        private Color out_of_band_color = Color.DimGray;
        public Color OutOfBandColor
        {
            get { return out_of_band_color; }
            set
            {
                out_of_band_color = value;
                if (SetupForm != null)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private Color button_selected_color = Color.Yellow;
        public Color ButtonSelectedColor
        {
            get { return button_selected_color; }
            set
            {
                button_selected_color = value;
                rx1_band_color = button_selected_color;
                CheckSelectedButtonColor();
            }
        }

        private Color meter_left_color = Color.Green;
        public Color MeterLeftColor
        {
            get { return meter_left_color; }
            set
            {
                meter_left_color = value;
                picMultiMeterDigital.Invalidate();
            }
        }

        private Color meter_right_color = Color.Lime;
        public Color MeterRightColor
        {
            get { return meter_right_color; }
            set
            {
                meter_right_color = value;
                picMultiMeterDigital.Invalidate();
            }
        }

        private Color rx1_band_color = Color.Yellow;
        public Color RX1BandColor
        {
            get { return rx1_band_color; }
            set
            {
                rx1_band_color = value;
            }
        }

        private Color rx2_band_color = Color.Green;
        public Color RX2BandColor
        {
            get { return rx2_band_color; }
            set
            {
                rx2_band_color = value;
            }
        }

        private Color tx_band_color = Color.Red;
        public Color TXBandColor
        {
            get { return tx_band_color; }
            set
            {
                tx_band_color = value;
            }
        }

        private Keys key_tune_up_1 = Keys.Q;
        public Keys KeyTuneUp1
        {
            get { return key_tune_up_1; }
            set { key_tune_up_1 = value; }
        }

        private Keys key_tune_down_1 = Keys.A;
        public Keys KeyTuneDown1
        {
            get { return key_tune_down_1; }
            set { key_tune_down_1 = value; }
        }

        private Keys key_tune_up_2 = Keys.W;
        public Keys KeyTuneUp2
        {
            get { return key_tune_up_2; }
            set { key_tune_up_2 = value; }
        }

        private Keys key_tune_down_2 = Keys.S;
        public Keys KeyTuneDown2
        {
            get { return key_tune_down_2; }
            set { key_tune_down_2 = value; }
        }

        private Keys key_tune_up_3 = Keys.E;
        public Keys KeyTuneUp3
        {
            get { return key_tune_up_3; }
            set { key_tune_up_3 = value; }
        }

        private Keys key_tune_down_3 = Keys.D;
        public Keys KeyTuneDown3
        {
            get { return key_tune_down_3; }
            set { key_tune_down_3 = value; }
        }

        private Keys key_tune_up_4 = Keys.R;
        public Keys KeyTuneUp4
        {
            get { return key_tune_up_4; }
            set { key_tune_up_4 = value; }
        }

        private Keys key_tune_down_4 = Keys.F;
        public Keys KeyTuneDown4
        {
            get { return key_tune_down_4; }
            set { key_tune_down_4 = value; }
        }

        private Keys key_tune_up_5 = Keys.T;
        public Keys KeyTuneUp5
        {
            get { return key_tune_up_5; }
            set { key_tune_up_5 = value; }
        }

        private Keys key_tune_down_5 = Keys.G;
        public Keys KeyTuneDown5
        {
            get { return key_tune_down_5; }
            set { key_tune_down_5 = value; }
        }

        private Keys key_tune_up_6 = Keys.Y;
        public Keys KeyTuneUp6
        {
            get { return key_tune_up_6; }
            set { key_tune_up_6 = value; }
        }

        private Keys key_tune_down_6 = Keys.H;
        public Keys KeyTuneDown6
        {
            get { return key_tune_down_6; }
            set { key_tune_down_6 = value; }
        }

        private Keys key_tune_up_7 = Keys.U;
        public Keys KeyTuneUp7
        {
            get { return key_tune_up_7; }
            set { key_tune_up_7 = value; }
        }

        private Keys key_tune_down_7 = Keys.J;
        public Keys KeyTuneDown7
        {
            get { return key_tune_down_7; }
            set { key_tune_down_7 = value; }
        }

        private Keys key_rit_up = Keys.O;
        public Keys KeyRITUp
        {
            get { return key_rit_up; }
            set { key_rit_up = value; }
        }

        private Keys key_rit_down = Keys.I;
        public Keys KeyRITDown
        {
            get { return key_rit_down; }
            set { key_rit_down = value; }
        }

        private int rit_step_rate = 50;
        public int RITStepRate
        {
            get { return rit_step_rate; }
            set { rit_step_rate = value; }
        }

        private Keys key_xit_up = Keys.OemOpenBrackets;
        public Keys KeyXITUp
        {
            get { return key_xit_up; }
            set { key_xit_up = value; }
        }

        private Keys key_xit_down = Keys.P;
        public Keys KeyXITDown
        {
            get { return key_xit_down; }
            set { key_xit_down = value; }
        }

        private int xit_step_rate = 50;
        public int XITStepRate
        {
            get { return xit_step_rate; }
            set { xit_step_rate = value; }
        }

        private Keys key_band_up = Keys.M;
        public Keys KeyBandUp
        {
            get { return key_band_up; }
            set { key_band_up = value; }
        }

        private Keys key_band_down = Keys.N;
        public Keys KeyBandDown
        {
            get { return key_band_down; }
            set { key_band_down = value; }
        }

        private Keys key_filter_up = Keys.B;
        public Keys KeyFilterUp
        {
            get { return key_filter_up; }
            set { key_filter_up = value; }
        }

        private Keys key_filter_down = Keys.V;
        public Keys KeyFilterDown
        {
            get { return key_filter_down; }
            set { key_filter_down = value; }
        }

        private Keys key_mode_up = Keys.X;
        public Keys KeyModeUp
        {
            get { return key_mode_up; }
            set { key_mode_up = value; }
        }

        private Keys key_mode_down = Keys.Z;
        public Keys KeyModeDown
        {
            get { return key_mode_down; }
            set { key_mode_down = value; }
        }

        private Keys key_cw_dot = Keys.None;
        public Keys KeyCWDot
        {
            get { return key_cw_dot; }
            set { key_cw_dot = value; }
        }

        private Keys key_cw_dash = Keys.None;
        public Keys KeyCWDash
        {
            get { return key_cw_dash; }
            set { key_cw_dash = value; }
        }

        private Keys key_ptt_tx = Keys.None;
        public Keys KeyPTTTx
        {
            get { return key_ptt_tx; }
            set { key_ptt_tx = value; }
        }

        private Keys key_ptt_rx = Keys.None;
        public Keys KeyPTTRx
        {
            get { return key_ptt_rx; }
            set { key_ptt_rx = value; }
        }

        private bool rfe_pa_tr_enable = false;
        public bool RFE_PA_TR_enable
        {
            get { return rfe_pa_tr_enable; }
            set
            {
                rfe_pa_tr_enable = value;
                if (SetupForm != null)
                    SetupForm.RFE_PA_TR = value;
            }
        }

        private Keys key_space_ptt = Keys.Space;
        public Keys KeySpacePTT
        {
            get { return key_space_ptt; }
            set { key_space_ptt = value; }
        }



        private bool xvtr_present = false;
        public bool XVTRPresent
        {
            get { return xvtr_present; }
            set
            {
                xvtr_present = value;
                radBand2.Enabled = value;
                //   Hdw.XVTRPresent = value;
                if (value)
                    MaxFreq = 146.0;
                else
                    MaxFreq = 65.0;

                if (path_Illustrator != null)
                    path_Illustrator.pi_Changed();
            }
        }

        private bool pa_present = false;
        public bool PAPresent
        {
            get { return pa_present; }
            set
            {
                pa_present = value;
                //if (current_model == Model.SDR1000)
                //    Hdw.PAPresent = value;
                if (pa_present || alexpresent)
                {
                    //  if (!comboMeterTXMode.Items.Contains("Ref Pwr"))
                    //   comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                    //  if (!comboMeterTXMode.Items.Contains("Fwd SWR"))
                    //  comboMeterTXMode.Items.Insert(2, "Fwd SWR");
                    if (pa_present) //remove for alex swr
                    {
                        // if (!comboMeterTXMode.Items.Contains("SWR"))
                        //  comboMeterTXMode.Items.Insert(3, "SWR");
                    }
                    if (alexpresent)
                    {
                        //                        if (comboMeterTXMode.Items.Contains("SWR"))
                        //                            comboMeterTXMode.Items.Remove("SWR");
                    }
                    if (comboMeterTXMode.SelectedIndex < 0)
                        comboMeterTXMode.SelectedIndex = 0;
                }
                else
                {
                    string cur_txt = comboMeterTXMode.Text;
                    // if (comboMeterTXMode.Items.Contains("Ref Pwr"))
                    //  comboMeterTXMode.Items.Remove("Ref Pwr");
                    //                    if (comboMeterTXMode.Items.Contains("SWR"))
                    //                        comboMeterTXMode.Items.Remove("SWR");

                    comboMeterTXMode.Text = cur_txt;
                    if (comboMeterTXMode.SelectedIndex < 0 &&
                        comboMeterTXMode.Items.Count > 0)
                        comboMeterTXMode.SelectedIndex = 0;
                }
                ptbPWR_Scroll(this, EventArgs.Empty);
            }
        }

        private bool atu_present = false;
        public bool ATUPresent
        {
            get { return atu_present; }
            set
            {
                atu_present = value;
                comboTuneMode.Visible = atu_present;
                comboTuneMode.SelectedIndex = 0;
            }
        }

        private bool usb_present = false;
        public bool USBPresent
        {
            get { return usb_present; }
            set
            {
                usb_present = value;

            }
        }

        private bool ozy_control = false;
        public bool OzyControl
        {
            get { return ozy_control; }
            set
            {
                ozy_control = value;

            }
        }

        public PerformanceCounter cpu_usage = null;
        private void CpuUsage()
        //{
        // get
        {
            try
            {
                cpu_usage = new PerformanceCounter
                   ("Processor", "% Processor Time", "_Total", machineName);
                //return cpu_usage.NextValue();
            }
            catch (Exception)
            {
                timer_cpu_meter.Enabled = false;
                //lblCPUMeter.Visible = false;
                txtCPUMeter.Visible = false;
                //return 0.0f;
            }
        }
        // }

        /*	private PerformanceCounter cpu_usage;
            public float CpuUsage
            {
                get
                {
                    try
                    {
                        if (cpu_usage == null)
                        {
                            cpu_usage = new PerformanceCounter(
                                "Processor Information", "% Processor Time", "_Total", true);
                        }
                        return cpu_usage.NextValue(); 
                    }
                    catch(Exception)
                    {
                        timer_cpu_meter.Enabled = false;
                        lblCPUMeter.Visible = false;
                        return 0.0f;
                    }
                }
            } */

        private int scope_time = 50;
        public int ScopeTime
        {
            get { return scope_time; }
            set
            {
                scope_time = value;
                Display.ScopeTime = value;
            }
        }

        // Added 6/11/05 BT to support CAT
        public float MultiMeterCalOffset
        {
            get { return rx1_meter_cal_offset; }
        }

        //Added 7/11/2010 BT to support CAT
        public float RX2MeterCalOffset
        {
            get { return rx2_meter_cal_offset; }
        }

        public float PreampOffset
        {
            get { return rx1_preamp_offset[(int)rx1_preamp_mode]; }
        }

        private bool s_meter = false;
        public bool SMeter
        {
            get { return s_meter; }
            set { s_meter = value; }
        }

        private bool spacebar_last_btn = false;
        public bool SpaceBarLastBtn
        {
            get { return spacebar_last_btn; }
            set { spacebar_last_btn = value; }
        }

        private bool spacebar_ptt = true;
        public bool SpaceBarPTT
        {
            get { return spacebar_ptt; }
            set { spacebar_ptt = value; }
        }

        private bool spacebar_vox = false;
        public bool SpaceBarVOX
        {
            get { return spacebar_vox; }
            set { spacebar_vox = value; }
        }

        private bool spacebar_mic_mute = false;
        public bool SpaceBarMicMute
        {
            get { return spacebar_mic_mute; }
            set { spacebar_mic_mute = value; }
        }

        public bool RXEQ
        {
            get
            {
                if (chkRXEQ != null) return chkRXEQ.Checked;
                else return false;
            }
            set
            {
                if (chkRXEQ != null) chkRXEQ.Checked = value;
            }
        }

        public bool TXEQ
        {
            get
            {
                if (chkTXEQ != null) return chkTXEQ.Checked;
                else return false;
            }
            set
            {
                if (chkTXEQ != null) chkTXEQ.Checked = value;
            }
        }

        private bool disable_split_on_bandchange = false;
        public bool DisableSplitOnBandchange
        {
            get { return disable_split_on_bandchange; }
            set { disable_split_on_bandchange = value; }
        }

        private bool spacenav_controlvfos = true;
        public bool SpaceNavControlVFOs
        {
            get { return spacenav_controlvfos; }
            set { spacenav_controlvfos = value; }
        }

        private bool spacenav_flypanadapter = false;
        public bool SpaceNavFlyPanadapter
        {
            get { return spacenav_flypanadapter; }
            set { spacenav_flypanadapter = value; }
        }

        private bool enable_vu_power_curve = true;
        public bool Enable_VU_Power_Curve
        {
            get { return enable_vu_power_curve; }
            set { enable_vu_power_curve = value; }
        }

        private string current_skin = "Default";
        public string CurrentSkin
        {
            get { return current_skin; }
            set
            {
                current_skin = value;
            }
        }

        private bool radar_color_update = false;
        public bool RadarColorUpdate
        {
            get { return radar_color_update; }
            set
            {
                radar_color_update = value;
            }
        }

        private double fm_tx_offset_mhz = 0;
        public double FMTXOffsetMHz
        {
            get { return fm_tx_offset_mhz; }
            set
            {
                fm_tx_offset_mhz = value;
                if (udFMOffset.Value != (decimal)fm_tx_offset_mhz)
                    udFMOffset.Value = (decimal)fm_tx_offset_mhz;
            }
        }

        private FMTXMode current_fm_tx_mode = FMTXMode.Simplex;
        public FMTXMode CurrentFMTXMode
        {
            get { return current_fm_tx_mode; }
            set
            {
                current_fm_tx_mode = value;
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.High:
                        if (!chkFMTXHigh.Checked)
                            chkFMTXHigh.Checked = true;
                        break;
                    case FMTXMode.Simplex:
                        if (!chkFMTXSimplex.Checked)
                            chkFMTXSimplex.Checked = true;
                        break;
                    case FMTXMode.Low:
                        if (!chkFMTXLow.Checked)
                            chkFMTXLow.Checked = true;
                        break;
                }
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private int fm_deviation_hz = 5000;
        public int FMDeviation_Hz
        {
            get { return fm_deviation_hz; }
            set
            {
                fm_deviation_hz = value;
                if (fm_deviation_hz == 5000)
                {
                    radFMDeviation2kHz.Checked = false;
                    radFMDeviation5kHz.Checked = true;
                }
                else if (fm_deviation_hz == 2500)
                {
                    radFMDeviation5kHz.Checked = false;
                    radFMDeviation2kHz.Checked = true;
                }
            }
        }

        private double si570_fxtal = 114281770; // modif F8CHK
        public double SI570FXtal
        {
            get { return si570_fxtal; }
            set
            {
                si570_fxtal = value;
                // SI570_update();
            }
        }

        private bool show_agc = true;
        public bool ShowAGC
        {
            get { return show_agc; }
            set
            {
                show_agc = value;
                Display.ShowAGC = value;
            }
        }

        private bool display_agc_hang_line = true;
        public bool DisplayAGCHangLine
        {
            get { return display_agc_hang_line; }
            set
            {
                display_agc_hang_line = value;
                Display.DisplayAGCHangLine = value;
            }
        }
        private bool display_rx2_gain_line = true;
        public bool DisplayRX2GainLine
        {
            get { return display_rx2_gain_line; }
            set
            {
                display_rx2_gain_line = value;
                Display.DisplayRX2GainLine = value;
            }
        }

        private bool display_rx2_hang_line = true;
        public bool DisplayRX2HangLine
        {
            get { return display_rx2_hang_line; }
            set
            {
                display_rx2_hang_line = value;
                Display.DisplayRX2HangLine = value;
            }
        }

        #endregion

        #region Display Routines

        public void UpdateDisplay()
        {
            switch (current_display_engine)
            {
                case DisplayEngine.GDI_PLUS:
                    specRX.GetSpecRX(0).Pixels = picDisplay.Width;
                    specRX.GetSpecRX(1).Pixels = picDisplay.Width;
                    specRX.GetSpecRX(cmaster.inid(1, 0)).Pixels = picDisplay.Width;

                    picDisplay.Invalidate();
                    break;
                /*case DisplayEngine.DIRECT_X:
                    Display.RenderDirectX();
                    break;
                    */
            }
        }
        private bool old_psautocal = false;
        private int HaveSync = 1;
        private int change_overload_color_count = 0;
        private int oload_select = 0;                   // selection of which overload to display this time
        private const int num_oloads = 2;               // number of possible overload displays
        private void UpdatePeakText()
        {
            // return;
            //~~~~~~
            // if mercury update the adc overload indicator 
            // if ((current_model == Model.HPSDR && MercuryPresent) ||
            //  (current_model == Model.HERMES))
            //  {
            int ooo = 0;
            ooo = NetworkIO.getOOO();
            HaveSync = NetworkIO.getHaveSync();
            if (HaveSync == 0) chkPower.Checked = false;

            int adc_oload_num = NetworkIO.getAndResetADC_Overload();
            bool adc_oload = adc_oload_num > 0;
            bool amp_oload = amp_protect && cmaster.GetAndResetAmpProtect(0) == 1;
            if (amp_oload)
            {
                ptbPWR.Value -= 2;
                ptbPWR_Scroll(this, EventArgs.Empty);
                Thread.Sleep(100);
                cmaster.GetAndResetAmpProtect(0);
            }
            bool overload = adc_oload || amp_oload;
            if (adc_oload && amp_oload) oload_select = ++oload_select % num_oloads;
            else if (adc_oload) oload_select = 0;
            else if (amp_oload) oload_select = 1;
            if (overload)
            {
                switch (oload_select)
                {
                    case 0:
                        switch (adc_oload_num)
                        {
                            case 1:
                                txtOverload.Text = "ADC1 Overload!";
                                break;
                            case 2:
                                txtOverload.Text = "ADC2 Overload!";
                                break;
                            case 4:
                                txtOverload.Text = "ADC3 Overload!";
                                break;
                            default:
                                txtOverload.Text = "ADC Overload!";
                                break;
                        }
                        break;
                    case 1:
                        txtOverload.Text = "AMP OVERLOAD!";
                        break;
                }
                change_overload_color_count = ++change_overload_color_count % 2;
            }
            else
            {
                // if (!tx_inhibit)
                // txtOverload.Text = "";
                change_overload_color_count = 0;

                if (ooo > 0)
                {
                    string s = "";
                    if (ooo == 1) s = "Seq->CC";
                    if (ooo == 2) s = "Seq->DDC0";
                    if (ooo == 3) s = "Seq->CC DDC0";

                    if (ooo == 4) s = "Seq->DDC1";
                    if (ooo == 5) s = "Seq->CC DDC1";
                    if (ooo == 6) s = "Seq->DDC0 DDC1";
                    if (ooo == 7) s = "Seq->CC DDC0 DDC1";

                    if (ooo == 8) s = "Seq->DDC2";
                    if (ooo == 9) s = "Seq->CC DDC2";
                    if (ooo == 10) s = "Seq->DDC0 DDC2";
                    if (ooo == 11) s = "Seq->CC DDC0 DDC2";
                    if (ooo == 12) s = "Seq->DDC1 DDC2";
                    if (ooo == 13) s = "Seq->CC DDC1 DDC2";
                    if (ooo == 14) s = "Seq->Rx1 DDC1 DDC2";
                    if (ooo == 15) s = "Seq->All";
                    if (ooo == 16) s = "Seq->DDC3";
                    if (ooo == 32) s = "Seq->Mic";
                    if (ooo >= 64) s = "Seq->WB";

                    txtOverload.ForeColor = Color.Red;
                    txtOverload.Text = "Seq=> " + ooo.ToString(); // s;
                }
                else if (tx_inhibit) txtOverload.Text = "TX Inhibit";
                else txtOverload.Text = "";
            }
            switch (change_overload_color_count)
            {
                case 0:
                    txtOverload.ForeColor = Color.Red;
                    break;
                case 1:
                    txtOverload.ForeColor = Color.Yellow;
                    break;
            }

            if (txtVFOAFreq.Text == "" ||
               txtVFOAFreq.Text == "." ||
               txtVFOAFreq.Text == ",")
                return;

            // update peak value
            float x = PixelToHz(Display.MaxX);
            float y = PixelToDb(Display.MaxY);
            y = Display.MaxY;

            double freq = double.Parse(txtVFOAFreq.Text) + (double)x * 0.0000010;

            if (rx1_dsp_mode == DSPMode.CWL)
                freq += (double)cw_pitch * 0.0000010;
            else if (rx1_dsp_mode == DSPMode.CWU)
                freq -= (double)cw_pitch * 0.0000010;

            switch (Display.CurrentDisplayMode)
            {
                case (DisplayMode.PANAFALL):
                    Display.MaxY = picWaterfall.Height / 2;
                    break;
                case (DisplayMode.PANADAPTER):
                    Display.MaxY = picDisplay.Height;
                    break;
                case (DisplayMode.WATERFALL):
                    Display.MaxY = picWaterfall.Height;
                    break;
                default:
                    Display.MaxY = picDisplay.Height;
                    break;
            }

            if (old_psautocal != chkFWCATUBypass.Checked)
            {
                old_psautocal = chkFWCATUBypass.Checked;
                if (chkFWCATUBypass.Checked)
                {
                    txtDisplayPeakOffset.BackColor = Color.Black;
                    txtDisplayPeakOffset.Font = new Font("Cambria", 9.00f, FontStyle.Bold | FontStyle.Italic);
                    txtDisplayPeakOffset.Text = "PureSignal 2";
                    txtDisplayPeakPower.ForeColor = Color.Black;
                    txtDisplayPeakPower.Font = new Font("Arial", 9.25f, FontStyle.Bold);
                    txtDisplayPeakPower.Text = "Feedback";
                    txtDisplayPeakFreq.ForeColor = Color.Black;
                    txtDisplayPeakFreq.Font = new Font("Arial", 9.25f, FontStyle.Bold);
                    txtDisplayPeakFreq.Text = "Correcting";
                }
                else
                {
                    txtDisplayPeakOffset.Font = new Font("Arial", 9.75f, FontStyle.Regular);
                    txtDisplayPeakPower.Font = new Font("Arial", 9.75f, FontStyle.Regular);
                    txtDisplayPeakFreq.Font = new Font("Arial", 9.75f, FontStyle.Regular);
                }
            }

            if (!chkFWCATUBypass.Checked)
            {
                txtDisplayPeakOffset.BackColor = peak_background_color;
                txtDisplayPeakPower.BackColor = peak_background_color;
                txtDisplayPeakFreq.BackColor = peak_background_color;
                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                    case DisplayMode.SPECTRASCOPE:
                        txtDisplayPeakOffset.ForeColor = peak_text_color;
                        txtDisplayPeakPower.ForeColor = peak_text_color;
                        txtDisplayPeakFreq.ForeColor = peak_text_color;
                        txtDisplayPeakOffset.Text = x.ToString("f1") + "Hz";
                        txtDisplayPeakPower.Text = y.ToString("f1") + "dBm";

                        double Freq = double.Parse(txtVFOAFreq.Text);
                        string temp_text;
                        if (click_tune_display && !mox)    // Correct Right hand peak frequency when CTUN on -G3OQD
                            temp_text = (freq + (center_frequency - Freq)).ToString("f6") + " MHz";      // Disply Right hand peak frequency under Spectrum - G3OQD                            
                        else
                            temp_text = freq.ToString("f6") + " MHz";  // Right hand - Peak frequency readout

                        int jper = temp_text.IndexOf(separator) + 4;
                        txtDisplayPeakFreq.Text = String.Copy(temp_text.Insert(jper, " "));
                        break;
                    default:
                        txtDisplayPeakOffset.Text = "";
                        txtDisplayPeakPower.Text = "";
                        txtDisplayPeakFreq.Text = "";
                        break;
                }
            }
        }

        public void UpdatePAVoltsAmpsDisplay()
        {
            if (anan8000dpresent && ANAN8000DLEDisplayVoltsAmps)
            {
                //  txtDisplayCursorFreq.Hide(); // BringToFront();
                //  txtDisplayCursorOffset.Hide(); // BringToFront();
                //  txtDisplayCursorPower.Hide(); // BringToFront();
                txtDisplayOrionMKIIPAVolts.BringToFront();
                txtDisplayOrionMKIIPAAmps.BringToFront();
                txtDisplayOrionMKIIBlank.BringToFront();
            }
            else
            {
                // txtDisplayOrionMKIIPAVolts.Hide(); // BringToFront();
                //  txtDisplayOrionMKIIPAAmps.Hide(); // BringToFront();
                // txtDisplayOrionMKIIBlank.Hide(); // BringToFront();
                txtDisplayCursorFreq.BringToFront();
                txtDisplayCursorOffset.BringToFront();
                txtDisplayCursorPower.BringToFront();
            }
        }

        private Color txtcenterBackColor = Color.Black;
        public Color TxtCenterBackColor
        {
            set
            {
                txtcenterBackColor = value;
                txtDisplayPeakPower.BackColor = value;
            }
        }

        private Color txtrightBackColor = Color.Black;
        public Color TxtRightBackColor
        {
            set
            {
                txtrightBackColor = value;
                txtDisplayPeakFreq.BackColor = value;
            }
        }

        private Color txtleftForeColor = Color.Red;
        public Color TxtLeftForeColor
        {
            set
            {
                txtleftForeColor = value;
                txtDisplayPeakOffset.ForeColor = value;
            }
        }

        private float PixelToHz(float x)
        {
            int low, high;
            if (!mox)
            {
                if (Display.CurrentDisplayMode == DisplayMode.SPECTRUM ||
                    Display.CurrentDisplayMode == DisplayMode.HISTOGRAM)
                // Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                {
                    low = Display.RXSpectrumDisplayLow;
                    high = Display.RXSpectrumDisplayHigh;
                }
                else
                {
                    low = Display.RXDisplayLow;
                    high = Display.RXDisplayHigh;
                }
            }
            else
            {
                if (Display.CurrentDisplayMode == DisplayMode.SPECTRUM ||
                    Display.CurrentDisplayMode == DisplayMode.HISTOGRAM)
                // Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                {
                    low = Display.TXSpectrumDisplayLow;
                    high = Display.TXSpectrumDisplayHigh;
                }
                else
                {

                    low = Display.TXDisplayLow;
                    high = Display.TXDisplayHigh;
                }
            }

            if (!chkMOX.Checked)
            {
                if (chkRIT.Checked)
                {
                    int offset = (int)udRIT.Value;
                    low += offset;
                    high += offset;
                }
            }
            else
            {
                if (chkXIT.Checked)
                {
                    int offset = (int)udXIT.Value;
                    low += offset;
                    high += offset;
                }
            }

            int width = high - low;
            return (float)(low + (double)x / (double)picDisplay.Width * (double)width);
            //return (float)(low + ((double)x*(high - low)/picDisplay.Width));
        }

        private float PixelToHz(float x, int rx)
        {
            int low, high;
            if (!mox)
            {
                if (rx == 1)
                {
                    if (Display.CurrentDisplayMode == DisplayMode.SPECTRUM ||
                        Display.CurrentDisplayMode == DisplayMode.HISTOGRAM)
                    // Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                    {
                        low = Display.RXSpectrumDisplayLow;
                        high = Display.RXSpectrumDisplayHigh;
                    }
                    else
                    {
                        low = Display.RXDisplayLow;
                        high = Display.RXDisplayHigh;
                    }
                }
                else
                {
                    if (Display.CurrentDisplayMode == DisplayMode.SPECTRUM ||
                    Display.CurrentDisplayMode == DisplayMode.HISTOGRAM)
                    // Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                    {
                        low = Display.RX2SpectrumDisplayLow;
                        high = Display.RX2SpectrumDisplayHigh;
                    }
                    else
                    {

                        low = Display.RX2DisplayLow;
                        high = Display.RX2DisplayHigh;
                    }
                }
            }
            else
            {
                if (Display.CurrentDisplayMode == DisplayMode.SPECTRUM ||
                    Display.CurrentDisplayMode == DisplayMode.HISTOGRAM)
                // Display.CurrentDisplayMode != DisplayMode.SPECTRASCOPE)
                {
                    low = Display.TXSpectrumDisplayLow;
                    high = Display.TXSpectrumDisplayHigh;
                }
                else
                {

                    low = Display.TXDisplayLow;
                    high = Display.TXDisplayHigh;
                }
            }

            if (!chkMOX.Checked)
            {
                if (chkRIT.Checked)
                {
                    int offset = (int)udRIT.Value;
                    low += offset;
                    high += offset;
                }
            }
            else
            {
                if (chkXIT.Checked)
                {
                    int offset = (int)udXIT.Value;
                    low += offset;
                    high += offset;
                }
            }

            int width = high - low;
            return (float)(low + (double)x / (double)picDisplay.Width * (double)width);
            //return (float)(low + ((double)x*(high - low)/picDisplay.Width));
        }

        private int HzToPixel(float freq)
        {
            int low, high;
            if (!mox)
            {
                low = Display.RXDisplayLow;
                high = Display.RXDisplayHigh;
            }
            else
            {
                low = Display.TXDisplayLow;
                high = Display.TXDisplayHigh;
            }

            int width = high - low;
            return (int)((double)(freq - low) / (double)width * (double)picDisplay.Width);
            //return picDisplay.Width/2+(int)(freq/(high-low)*picDisplay.Width);
        }

        private int HzToPixel(float freq, int rx)
        {
            int low, high;
            if (!mox)
            {
                if (rx == 1)
                {
                    low = Display.RXDisplayLow;
                    high = Display.RXDisplayHigh;
                }
                else
                {
                    low = Display.RX2DisplayLow;
                    high = Display.RX2DisplayHigh;
                }
            }
            else
            {
                low = Display.TXDisplayLow;
                high = Display.TXDisplayHigh;
            }

            int width = high - low;
            return (int)((double)(freq - low) / (double)width * (double)picDisplay.Width);
            //return picDisplay.Width/2+(int)(freq/(high-low)*picDisplay.Width);
        }

        private float PixelToDb(float y)
        {
            if (chkSplitDisplay.Checked || Display.CurrentDisplayMode == DisplayMode.PANAFALL ||
                Display.CurrentDisplayMode == DisplayMode.PANASCOPE)
            {
                if (y <= picDisplay.Height / 2) y *= 2.0f;
                else y = (y - picDisplay.Height / 2) * 2.0f;
            }
            return (float)(Display.SpectrumGridMax - y * (double)(Display.SpectrumGridMax - Display.SpectrumGridMin) / picDisplay.Height);
        }

        private float PixelToRx2Db(float y)
        {
            if (chkSplitDisplay.Checked)
            {
                if (y <= picDisplay.Height / 2) y *= 2.0f;
                else y = (y - picDisplay.Height / 2) * 2.0f;
            }
            return (float)(Display.RX2SpectrumGridMax - y * (double)(Display.RX2SpectrumGridMax - Display.RX2SpectrumGridMin) / picDisplay.Height);
        }

        private float WaterfallPixelToTime(float y)
        {
            if (chkSplitDisplay.Checked || Display.CurrentDisplayMode == DisplayMode.PANAFALL)
            {
                if (y <= picDisplay.Height / 2) y *= 2.0f;
                else y = (y - picDisplay.Height / 2) * 2.0f;
            }
            if (y < 16) return 0f;
            int i;
            for (i = 1; i * display_delay < Display.WaterfallUpdatePeriod; i++)
            {

            }
            return (y - 16) * i * display_delay;
        }

        #endregion

        #region Paint Event Handlers
        // ======================================================
        // Paint Event Handlers
        // ======================================================

        private void picDisplay_Paint(object sender, PaintEventArgs e)
        {
            switch (current_display_engine)
            {
                case DisplayEngine.GDI_PLUS:
                    // e.Graphics.Clear(BackColor);
                    //e.Graphics.CompositingMode = CompositingMode.SourceOver;
                    //e.Graphics.CompositingQuality = CompositingQuality.Default;
                    //e.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
                    //e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
                    Display.RenderGDIPlus(ref e);
                    break;
                case DisplayEngine.DIRECT_X:
                    /*Thread t = new Thread(new ThreadStart(Display.RenderDirectX));
                        t.Name = "DirectX Background Update";
                        t.IsBackground = true;
                        t.Priority = ThreadPriority.Normal;
                        t.Start();*/
                    break;
            }
        }

        private Font font7 = new Font("Arial", 7.0f, FontStyle.Bold);
        private double avg_num = -130.0;
        private void picMultiMeterDigital_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int H = picMultiMeterDigital.ClientSize.Height;
            int W = picMultiMeterDigital.ClientSize.Width;
            Graphics g = e.Graphics;
            double num;
            int pixel_x = 0;
            int pixel_x_swr = 0;
            string output = "";

            switch (current_meter_display_mode)
            {
                case MultiMeterDisplayMode.Original:
                    #region Original

                    if (meter_data_ready)
                    {
                        current_meter_data = new_meter_data;
                        meter_data_ready = false;
                    }

                    if (!mox)
                    {
                        num = current_meter_data;

                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        double s;
                                        if (rx1_above30)
                                        {
                                            if (collapsedDisplay)
                                            {
                                                s = (num + 147) / 6;
                                                if (s <= 9.0F)
                                                    pixel_x = (int)((s * 15) + 2);
                                                else
                                                {
                                                    double over_s9 = num + 93;
                                                    pixel_x = 138 + (int)(over_s9 * 2.10);
                                                }
                                            }
                                            else
                                            {
                                                s = (num + 147) / 6;
                                                if (s <= 9.0F)
                                                    pixel_x = (int)((s * 7.5) + 2);
                                                else
                                                {
                                                    double over_s9 = num + 93;
                                                    pixel_x = 69 + (int)(over_s9 * 1.05);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (collapsedDisplay)
                                            {
                                                s = (num + 127) / 6;
                                                if (s <= 9.0F)
                                                    pixel_x = (int)((s * 15) + 2);
                                                else
                                                {
                                                    double over_s9 = num + 73;
                                                    pixel_x = 138 + (int)(over_s9 * 2.10);
                                                }
                                            }
                                            else
                                            {
                                                s = (num + 127) / 6;
                                                if (s <= 9.0F)
                                                    pixel_x = (int)((s * 7.5) + 2);
                                                else
                                                {
                                                    double over_s9 = num + 73;
                                                    pixel_x = 69 + (int)(over_s9 * 1.05);
                                                }
                                            }
                                        }
                                        break;
                                    case 120:
                                        if (num <= -97.0f)
                                            pixel_x = (int)(0 + (num + 100.0) / 3.0 * 10);
                                        else if (num <= -91.0f)
                                            pixel_x = (int)(10 + (num + 97.0) / 6.0 * 17);
                                        else if (num <= -85.0f)
                                            pixel_x = (int)(27 + (num + 91.0) / 6.0 * 16);
                                        else if (num <= -79.0f)
                                            pixel_x = (int)(43 + (num + 85.0) / 6.0 * 17);
                                        else if (num <= -73.0f)
                                            pixel_x = (int)(60 + (num + 79.0) / 6.0 * 16);
                                        else if (num <= -53.0f)
                                            pixel_x = (int)(76 + (num + 73.0) / 20.0 * 24);
                                        else if (num <= -33.0f)
                                            pixel_x = (int)(100 + (num + 53.0) / 20.0 * 24);
                                        else if (num <= -13.0f)
                                            pixel_x = (int)(124 + (num + 33.0) / 20.0 * 24);
                                        else
                                            pixel_x = (int)(148 + (num + 13.0) / 20.0 * 19);
                                        break;
                                }
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (collapsedDisplay)
                                            pixel_x = (int)(((num + 100) * 2.4) + 24);
                                        else pixel_x = (int)(((num + 100) * 1.2) + 12);
                                        break;
                                    case 120:
                                        if (num <= -100.0f)
                                            pixel_x = (int)(0 + (num + 110.0) / 10.0 * 14);
                                        else if (num <= -80.0f)
                                            pixel_x = (int)(14 + (num + 100.0) / 20.0 * 27);
                                        else if (num <= -60.0f)
                                            pixel_x = (int)(41 + (num + 80.0) / 20.0 * 28);
                                        else if (num <= -40.0f)
                                            pixel_x = (int)(69 + (num + 60.0) / 20.0 * 28);
                                        else if (num <= -20.0f)
                                            pixel_x = (int)(97 + (num + 40.0) / 20.0 * 27);
                                        else if (num <= 0.0f)
                                            pixel_x = (int)(124 + (num + 20.0) / 20.0 * 24);
                                        else
                                            pixel_x = (int)(148 + (num - 0.0) / 10.0 * 19);
                                        break;
                                }
                                break;
                            case MeterRXMode.OFF:
                                break;
                        }
                    }
                    else
                    {
                        num = current_meter_data;

                        MeterTXMode mode = current_meter_tx_mode;
                        if (chkTUN.Checked) mode = tune_meter_tx_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CFC_PK:
                            case MeterTXMode.COMP:
                            case MeterTXMode.ALC:
                                //num += 3.0;  // number no longer has fudge factor added in the wdsp, must be remove
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (collapsedDisplay)
                                        {
                                            if (num <= -20.0f)
                                                pixel_x = (int)(0 + (num + 25.0) / 5.0 * 18);
                                            else if (num <= -10.0f)
                                                pixel_x = (int)(18 + (num + 20.0) / 10.0 * 54);
                                            else if (num <= -5.0f)
                                                pixel_x = (int)(72 + (num + 10.0) / 5.0 * 54);
                                            else if (num <= 0.0f)
                                                pixel_x = (int)(126 + (num + 5.0) / 5.0 * 48);
                                            else if (num <= 4.0f)
                                                pixel_x = (int)(174 + (num - 0.0) / 4.0 * 30);
                                            else if (num <= 8.0f)
                                                pixel_x = (int)(204 + (num - 4.0) / 4.0 * 30);
                                            else if (num <= 12.0f)
                                                pixel_x = (int)(234 + (num - 8.0) / 4.0 * 30);
                                            else
                                                pixel_x = (int)(264 + (num - 12.0) / 0.5 * 16);
                                        }
                                        else
                                        {
                                            if (num <= -20.0f)
                                                pixel_x = (int)(0 + (num + 25.0) / 5.0 * 9);
                                            else if (num <= -10.0f)
                                                pixel_x = (int)(9 + (num + 20.0) / 10.0 * 27);
                                            else if (num <= -5.0f)
                                                pixel_x = (int)(36 + (num + 10.0) / 5.0 * 27);
                                            else if (num <= 0.0f)
                                                pixel_x = (int)(63 + (num + 5.0) / 5.0 * 24);
                                            else if (num <= 4.0f)
                                                pixel_x = (int)(87 + (num - 0.0) / 4.0 * 15);
                                            else if (num <= 8.0f)
                                                pixel_x = (int)(102 + (num - 4.0) / 4.0 * 15);
                                            else if (num <= 12.0f)
                                                pixel_x = (int)(117 + (num - 8.0) / 4.0 * 15);
                                            else
                                                pixel_x = (int)(132 + (num - 12.0) / 0.5 * 8);
                                        }
                                        break;
                                    case 120:
                                        if (num <= -20.0f)
                                            pixel_x = (int)(0 + (num + 25.0) / 5.0 * 10);
                                        else if (num <= -10.0f)
                                            pixel_x = (int)(10 + (num + 20.0) / 10.0 * 30);
                                        else if (num <= -5.0f)
                                            pixel_x = (int)(40 + (num + 10.0) / 5.0 * 30);
                                        else if (num <= 0.0f)
                                            pixel_x = (int)(70 + (num + 5.0) / 5.0 * 27);
                                        else if (num <= 4.0f)
                                            pixel_x = (int)(97 + (num - 0.0) / 4.0 * 17);
                                        else if (num <= 8.0f)
                                            pixel_x = (int)(114 + (num - 4.0) / 4.0 * 17);
                                        else if (num <= 12.0f)
                                            pixel_x = (int)(131 + (num - 8.0) / 4.0 * 17);
                                        else
                                            pixel_x = (int)(148 + (num - 12.0) / 0.5 * 23);
                                        break;
                                }
                                break;
                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                                // if (!alexpresent && !apollopresent)
                                // num *= 1000;

                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (collapsedDisplay)
                                        {
                                            if (anan10present || anan10Epresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 16);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(16 + (num - 1) / 4 * 48);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(64 + (num - 5) / 5 * 48);
                                                else if (num <= 15.0f)
                                                    pixel_x = (int)(112 + (num - 10) / 5 * 48);
                                                else if (num <= 20.0f)
                                                    pixel_x = (int)(160 + (num - 15) / 5 * 48);
                                                else if (num <= 25.0f)
                                                    pixel_x = (int)(208 + (num - 20) / 5 * 48);
                                                else
                                                    pixel_x = (int)(256 + (num - 25) / 5 * 32);
                                            }
                                            else if (apollopresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 16);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(16 + (num - 1) / 4 * 48);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(64 + (num - 5) / 5 * 48);
                                                else if (num <= 15.0f)
                                                    pixel_x = (int)(112 + (num - 10) / 5 * 48);
                                                else if (num <= 30.0f)
                                                    pixel_x = (int)(160 + (num - 15) / 15 * 48);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(208 + (num - 30) / 20 * 48);
                                                else
                                                    pixel_x = (int)(256 + (num - 50) / 50 * 32);
                                            }
                                            else if (anan8000dpresent && tx_xvtr_index < 0)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 16);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(16 + (num - 1) / 4 * 48);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(64 + (num - 5) / 5 * 48);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(112 + (num - 10) / 40 * 48);
                                                else if (num <= 100.0f)
                                                    pixel_x = (int)(160 + (num - 50) / 50 * 48);
                                                else if (num <= 200.0f)
                                                    pixel_x = (int)(200 + (num - 100) / 20 * 48);
                                                else
                                                    pixel_x = (int)(256 + (num - 120) / 20 * 32);
                                            }
                                            else if (alexpresent && !anan8000dpresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 16);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(16 + (num - 1) / 4 * 48);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(64 + (num - 5) / 5 * 48);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(112 + (num - 10) / 40 * 48);
                                                else if (num <= 100.0f)
                                                    pixel_x = (int)(160 + (num - 50) / 50 * 48);
                                                else if (num <= 208.0f)
                                                    pixel_x = (int)(208 + (num - 100) / 20 * 48);
                                                else
                                                    pixel_x = (int)(256 + (num - 120) / 20 * 32);
                                            }
                                            else
                                            {
                                                if (num <= 25.0f)
                                                    pixel_x = (int)(0 + (num - 0.0) / 25.0 * 16);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(16 + (num - 25.0) / 25.0 * 31);
                                                else if (num <= 100.0f)
                                                    pixel_x = (int)(31 + (num - 50.0) / 50.0 * 31);
                                                else if (num <= 200.0f)
                                                    pixel_x = (int)(62 + (num - 100.0) / 100.0 * 64);
                                                else if (num <= 500.0f)
                                                    pixel_x = (int)(126 + (num - 200.0) / 300.0 * 48);
                                                else if (num <= 600.0f)
                                                    pixel_x = (int)(174 + (num - 500.0) / 100.0 * 30);
                                                else if (num <= 700.0f)
                                                    pixel_x = (int)(204 + (num - 600.0) / 100.0 * 30);
                                                else if (num <= 800.0f)
                                                    pixel_x = (int)(234 + (num - 700.0) / 100.0 * 30);
                                                else
                                                    pixel_x = (int)(264 + (num - 800.0) / 100.0 * 16);
                                            }
                                        }
                                        else
                                        {
                                            if (anan10present || anan10Epresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 2);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(2 + (num - 1) / 4 * 24);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(26 + (num - 5) / 5 * 24);
                                                else if (num <= 15.0f)
                                                    pixel_x = (int)(50 + (num - 10) / 5 * 24);
                                                else if (num <= 20.0f)
                                                    pixel_x = (int)(74 + (num - 15) / 5 * 24);
                                                else if (num <= 25.0f)
                                                    pixel_x = (int)(98 + (num - 20) / 5 * 24);
                                                else
                                                    pixel_x = (int)(122 + (num - 25) / 5 * 16);
                                            }
                                            else if (apollopresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 2);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(2 + (num - 1) / 4 * 24);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(26 + (num - 5) / 5 * 24);
                                                else if (num <= 15.0f)
                                                    pixel_x = (int)(50 + (num - 10) / 5 * 24);
                                                else if (num <= 30.0f)
                                                    pixel_x = (int)(74 + (num - 15) / 15 * 24);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(98 + (num - 30) / 20 * 24);
                                                else
                                                    pixel_x = (int)(122 + (num - 50) / 50 * 16);
                                            }
                                            else if (anan8000dpresent && tx_xvtr_index < 0)
                                            {
                                                if (num <= 5.0f)
                                                    pixel_x = (int)(0 + num * 2);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(2 + (num - 1) / 4 * 24);
                                                else if (num <= 20.0f)
                                                    pixel_x = (int)(26 + (num - 10) / 5 * 24);
                                                else if (num <= 100.0f)
                                                    pixel_x = (int)(50 + (num - 20) / 40 * 24);
                                                else if (num <= 200.0f)
                                                    pixel_x = (int)(74 + (num - 100) / 50 * 24);
                                                else if (num <= 250.0f)
                                                    pixel_x = (int)(98 + (num - 200) / 20 * 24);
                                                else
                                                    pixel_x = (int)(122 + (num - 250) / 20 * 16);
                                            }
                                            else if (alexpresent && !anan8000dpresent)
                                            {
                                                if (num <= 1.0f)
                                                    pixel_x = (int)(0 + num * 2);
                                                else if (num <= 5.0f)
                                                    pixel_x = (int)(2 + (num - 1) / 4 * 24);
                                                else if (num <= 10.0f)
                                                    pixel_x = (int)(26 + (num - 5) / 5 * 24);
                                                else if (num <= 50.0f)
                                                    pixel_x = (int)(50 + (num - 10) / 40 * 24);
                                                else if (num <= 100.0f)
                                                    pixel_x = (int)(74 + (num - 50) / 50 * 24);
                                                else if (num <= 120.0f)
                                                    pixel_x = (int)(98 + (num - 100) / 20 * 24);
                                                else
                                                    pixel_x = (int)(122 + (num - 120) / 20 * 16);
                                            }
                                            else
                                            {
                                                if (num <= 100.0f)
                                                    pixel_x = (int)(0 + (num - 0.0) / 100.0 * 31);
                                                else if (num <= 200.0f)
                                                    pixel_x = (int)(31 + (num - 100.0) / 100.0 * 32);
                                                else if (num <= 500.0f)
                                                    pixel_x = (int)(63 + (num - 200.0) / 300.0 * 24);
                                                else if (num <= 600.0f)
                                                    pixel_x = (int)(87 + (num - 500.0) / 100.0 * 15);
                                                else if (num <= 700.0f)
                                                    pixel_x = (int)(102 + (num - 600.0) / 100.0 * 15);
                                                else if (num <= 800.0f)
                                                    pixel_x = (int)(117 + (num - 700.0) / 100.0 * 15);
                                                else
                                                    pixel_x = (int)(132 + (num - 800.0) / 100.0 * 8);
                                            }
                                        }
                                        break;

                                    case 120:
                                        if (num <= 1.0f)
                                            pixel_x = (int)(0 + num * 3);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(3 + (num - 1) / 4 * 26);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(29 + (num - 5) / 5 * 26);
                                        else if (num <= 50.0f)
                                            pixel_x = (int)(55 + (num - 10) / 40 * 27);
                                        else if (num <= 100.0f)
                                            pixel_x = (int)(82 + (num - 50) / 50 * 28);
                                        else if (num <= 120.0f)
                                            pixel_x = (int)(110 + (num - 100) / 20 * 27);
                                        else
                                            pixel_x = (int)(137 + (num - 120) / 20 * 30);
                                        break;
                                }
                                break;
                            case MeterTXMode.SWR:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (collapsedDisplay)
                                        {
                                            if (double.IsInfinity(num))
                                                pixel_x = 200;
                                            else if (num <= 1.0f)
                                                pixel_x = (int)(0 + num * 6);
                                            else if (num <= 1.5f)
                                                pixel_x = (int)(6 + (num - 1.0) / 0.5 * 54);
                                            else if (num <= 2.0f)
                                                pixel_x = (int)(60 + (num - 1.5) / 0.5 * 40);
                                            else if (num <= 3.0f)
                                                pixel_x = (int)(100 + (num - 2.0) / 1.0 * 42);
                                            else if (num <= 5.0f)
                                                pixel_x = (int)(142 + (num - 3.0) / 2.0 * 42);
                                            else if (num <= 10.0f)
                                                pixel_x = (int)(184 + (num - 5.0) / 5.0 * 42);
                                            else
                                                pixel_x = (int)(226 + (num - 10.0) / 15.0 * 52);
                                        }
                                        else
                                        {
                                            if (double.IsInfinity(num))
                                                pixel_x = 200;
                                            else if (num <= 1.0f)
                                                pixel_x = (int)(0 + num * 3);
                                            else if (num <= 1.5f)
                                                pixel_x = (int)(3 + (num - 1.0) / 0.5 * 27);
                                            else if (num <= 2.0f)
                                                pixel_x = (int)(30 + (num - 1.5) / 0.5 * 20);
                                            else if (num <= 3.0f)
                                                pixel_x = (int)(50 + (num - 2.0) / 1.0 * 21);
                                            else if (num <= 5.0f)
                                                pixel_x = (int)(71 + (num - 3.0) / 2.0 * 21);
                                            else if (num <= 10.0f)
                                                pixel_x = (int)(92 + (num - 5.0) / 5.0 * 21);
                                            else
                                                pixel_x = (int)(113 + (num - 10.0) / 15.0 * 26);
                                        }
                                        break;
                                    case 120:
                                        if (double.IsInfinity(num))
                                            pixel_x = 200;
                                        else if (num <= 1.0f)
                                            pixel_x = (int)(0 + num * 3);
                                        else if (num <= 1.5f)
                                            pixel_x = (int)(3 + (num - 1.0) / 0.5 * 31);
                                        else if (num <= 2.0f)
                                            pixel_x = (int)(34 + (num - 1.5) / 0.5 * 22);
                                        else if (num <= 3.0f)
                                            pixel_x = (int)(56 + (num - 2.0) / 1.0 * 22);
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(78 + (num - 3.0) / 2.0 * 23);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(101 + (num - 5.0) / 5.0 * 23);
                                        else
                                            pixel_x = (int)(124 + (num - 10.0) / 15.0 * 43);
                                        break;
                                }
                                break;
                            case MeterTXMode.SWR_POWER:
                                break;
                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:
                            case MeterTXMode.CFC_G:
                                switch ((int)g.DpiX)
                                {
                                    case 96:
                                        if (collapsedDisplay)
                                        {
                                            if (num <= 0.0f)
                                                pixel_x = 6;
                                            else if (num <= 5.0f)
                                                pixel_x = (int)(6 + (num - 0.0) / 5.0 * 56);
                                            else if (num <= 10.0f)
                                                pixel_x = (int)(62 + (num - 5.0) / 5.0 * 58);
                                            else if (num <= 15.0f)
                                                pixel_x = (int)(120 + (num - 10.0) / 5.0 * 60);
                                            else if (num <= 20.0f)
                                                pixel_x = (int)(180 + (num - 15.0) / 5.0 * 62);
                                            else
                                                pixel_x = (int)(242 + (num - 20.0) / 5.0 * 58);
                                        }
                                        else
                                        {
                                            if (num <= 0.0f)
                                                pixel_x = 3;
                                            else if (num <= 5.0f)
                                                pixel_x = (int)(3 + (num - 0.0) / 5.0 * 28);
                                            else if (num <= 10.0f)
                                                pixel_x = (int)(31 + (num - 5.0) / 5.0 * 29);
                                            else if (num <= 15.0f)
                                                pixel_x = (int)(60 + (num - 10.0) / 5.0 * 30);
                                            else if (num <= 20.0f)
                                                pixel_x = (int)(90 + (num - 15.0) / 5.0 * 31);
                                            else
                                                pixel_x = (int)(121 + (num - 20.0) / 5.0 * 29);
                                        }
                                        break;
                                    case 120:
                                        if (num <= 0.0f)
                                            pixel_x = 3;
                                        else if (num <= 5.0f)
                                            pixel_x = (int)(3 + (num - 0.0) / 5.0 * 31);
                                        else if (num <= 10.0f)
                                            pixel_x = (int)(34 + (num - 5.0) / 5.0 * 33);
                                        else if (num <= 15.0f)
                                            pixel_x = (int)(77 + (num - 10.0) / 5.0 * 33);
                                        else if (num <= 20.0f)
                                            pixel_x = (int)(110 + (num - 15.0) / 5.0 * 35);
                                        else
                                            pixel_x = (int)(145 + (num - 20.0) / 5.0 * 32);
                                        break;
                                }
                                break;
                            case MeterTXMode.OFF:
                                break;
                        }
                    }

                    switch ((int)g.DpiX)
                    {
                        case 96:
                            if (!collapsedDisplay)
                                if (pixel_x > 139) pixel_x = 139;
                            break;
                        case 120:
                            if (pixel_x > 167) pixel_x = 167;
                            break;
                    }

                    if ((!mox && current_meter_rx_mode != MeterRXMode.OFF) ||
                        (mox && current_meter_tx_mode != MeterTXMode.OFF))
                    {
                        if (pixel_x <= 0) pixel_x = 1;

                        using (LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, pixel_x, H),
                            meter_left_color, meter_right_color, LinearGradientMode.Horizontal))

                            g.FillRectangle(brush, 0, 0, pixel_x, H);

                        if (collapsedDisplay)
                        {
                            for (int i = 0; i < 35; i++)
                                g.DrawLine(meter_background_pen, 6 + i * 8, 0, 6 + i * 8, H);
                        }
                        else
                        {
                            for (int i = 0; i < 21; i++)
                                g.DrawLine(meter_background_pen, 6 + i * 8, 0, 6 + i * 8, H);
                        }

                        g.DrawLine(Pens.Red, pixel_x, 0, pixel_x, H);
                        g.FillRectangle(meter_background_pen.Brush, pixel_x + 1, 0, W - pixel_x, H);

                        if (pixel_x >= meter_peak_value)
                        {
                            meter_peak_count = 0;
                            meter_peak_value = pixel_x;
                        }
                        else
                        {
                            if (meter_peak_count++ >= multimeter_peak_hold_samples)
                            {
                                meter_peak_count = 0;
                                meter_peak_value = pixel_x;
                            }
                            else
                            {
                                g.DrawLine(Pens.Red, meter_peak_value, 0, meter_peak_value, H);
                                g.DrawLine(Pens.Red, meter_peak_value - 1, 0, meter_peak_value - 1, H);
                            }
                        }
                    }

                    meter_timer.Stop();

                    string format = "f0";
                    if (meter_detail) format = "f1";

                    if (meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        if (!mox)
                        {
                            switch (current_meter_rx_mode)
                            {
                                case MeterRXMode.SIGNAL_STRENGTH:
                                case MeterRXMode.SIGNAL_AVERAGE:
                                    if (s_meter)      // modif F8CHK
                                    {
                                        if (rx1_above30)
                                        {
                                            if (num <= -124.0f) output = "    S 0";
                                            else if (num > -144.0f & num <= -138.0f) output = "    S 1";
                                            else if (num > -138.0f & num <= -132.0f) output = "    S 2";
                                            else if (num > -132.0f & num <= -126.0f) output = "    S 3";
                                            else if (num > -126.0f & num <= -120.0f) output = "    S 4";
                                            else if (num > -120.0f & num <= -114.0f) output = "    S 5";
                                            else if (num > -114.0f & num <= -108.0f) output = "    S 6";
                                            else if (num > -108.0f & num <= -102.0f) output = "    S 7";
                                            else if (num > -102.0f & num <= -96.0f) output = "    S 8";
                                            else if (num > -96.0f & num <= -90.0f) output = "    S 9";
                                            else if (num > -90.0f & num <= -86.0f) output = "    S 9 + 5";
                                            else if (num > -86.0f & num <= -80.0f) output = "    S 9 + 10";
                                            else if (num > -80.0f & num <= -76.0f) output = "    S 9 + 15";
                                            else if (num > -76.0f & num <= -66.0f) output = "    S 9 + 20";
                                            else if (num > -66.0f & num <= -56.0f) output = "    S 9 + 30";
                                            else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 40";
                                            else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 50";
                                            else if (num > -36.0f) output = "    S 9 + 60";
                                        }
                                        else
                                        {
                                            if (num <= -124.0f) output = "    S 0";
                                            else if (num > -124.0f & num <= -118.0f) output = "    S 1";
                                            else if (num > -118.0f & num <= -112.0f) output = "    S 2";
                                            else if (num > -112.0f & num <= -106.0f) output = "    S 3";
                                            else if (num > -106.0f & num <= -100.0f) output = "    S 4";
                                            else if (num > -100.0f & num <= -94.0f) output = "    S 5";
                                            else if (num > -94.0f & num <= -88.0f) output = "    S 6";
                                            else if (num > -88.0f & num <= -82.0f) output = "    S 7";
                                            else if (num > -82.0f & num <= -76.0f) output = "    S 8";
                                            else if (num > -76.0f & num <= -70.0f) output = "    S 9";
                                            else if (num > -70.0f & num <= -66.0f) output = "    S 9 + 5";
                                            else if (num > -66.0f & num <= -60.0f) output = "    S 9 + 10";
                                            else if (num > -60.0f & num <= -56.0f) output = "    S 9 + 15";
                                            else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 20";
                                            else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 30";
                                            else if (num > -36.0f & num <= -26.0f) output = "    S 9 + 40";
                                            else if (num > -26.0f & num <= -16.0f) output = "    S 9 + 50";
                                            else if (num > -16.0f) output = "    S 9 + 60";
                                        }
                                    }
                                    else output = num.ToString(format) + " dBm";
                                    break;
                                case MeterRXMode.ADC_L:
                                case MeterRXMode.ADC_R:
                                    output = num.ToString("f1") + " dBFS";
                                    break;
                                case MeterRXMode.OFF:
                                    output = "";
                                    break;
                            }
                        }
                        else
                        {
                            MeterTXMode mode = current_meter_tx_mode;
                            if (chkTUN.Checked) mode = tune_meter_tx_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CFC_PK:
                                case MeterTXMode.CFC_G:
                                case MeterTXMode.COMP:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    output = num.ToString(format) + " dB";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    if (alexpresent || pa_present || apollopresent)
                                        output = num.ToString(format) + " W";
                                    else
                                        output = num.ToString(format) + " mW";
                                    break;
                                case MeterTXMode.SWR:
                                    output = num.ToString("f1") + " : 1";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;
                            }
                        }
                        txtMultiText.Text = output;
                        meter_timer.Start();
                    }

                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }
                    break;
                    #endregion

                case MultiMeterDisplayMode.Edge:
                    #region Edge
                    if (meter_data_ready)
                    {
                        current_meter_data = new_meter_data;
                        current_swrmeter_data = new_swrmeter_data;
                        meter_data_ready = false;
                    }

                    if (avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
                    {
                        num = avg_num = current_meter_data;
                    }
                    else
                    {
                        if (current_meter_data > avg_num)
                            num = avg_num = current_meter_data * 0.8 + avg_num * 0.2; // fast rise
                        else
                            num = avg_num = current_meter_data * 0.2 + avg_num * 0.8; // slow decay
                    }

                    g.DrawRectangle(edge_meter_background_pen, 0, 0, W, H);

                    //using (Font f = new Font("Arial", 7.0f, FontStyle.Bold))

                    if (!mox)
                    {
                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.5), 2); // white horizontal line
                                g.FillRectangle(high_brush, (int)(W * 0.5), H - 4, (int)(W * 0.5) - 4, 2); // red horizontal line
                                double spacing = (W * 0.5 - 2.0) / 5.0;
                                double string_height = 0;
                                for (int i = 1; i < 6; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3); // short tic marks
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6); // long tic marks

                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString((-1 + i * 2).ToString(), font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    // 1 3 5 7 9
                                    g.DrawString((-1 + i * 2).ToString(), font7, low_brush, (int)(i * spacing - string_width + (int)(i / 5)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3); // long tic marks
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing), H - 4 - 6, 2, 6); // short tic marks

                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("+" + (i * 20).ToString(), font7, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("+" + (i * 20).ToString(), font7, high_brush, (int)(W * 0.5 + i * spacing - (int)string_width * 3 - i / 3 * 2), (int)(H - 4 - 8 - string_height));
                                }

                                if (rx1_above30)
                                {
                                    if (num > -93.0) // high area
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 153.0) / 60.0 * (W * 0.5));
                                    }
                                }
                                else
                                {
                                    if (num > -73.0) // high area
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                    }
                                }

                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:
                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 4, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                    SolidBrush b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 4 - 3, 1, 5);
                                    g.FillRectangle(b, (int)(i * spacing), H - 4 - 6, 2, 8);

                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, font7, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 4 - 8 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break;
                            case MeterRXMode.OFF:
                                break;
                        }
                    }
                    else
                    {
                        MeterTXMode mode = current_meter_tx_mode;
                        if (chkTUN.Checked) mode = tune_meter_tx_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CFC_PK:
                            case MeterTXMode.COMP:
                            case MeterTXMode.ALC:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.665), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.665), H - 4, (int)(W * 0.335) - 2, 2);
                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = (-30 + i * 10).ToString();
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 - (int)(i / 2) + (int)(i / 3)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing), H - 4 - 6, 2, 6);
                                    string s = (i * 4).ToString();
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString(s, font7, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString(s, font7, high_brush, (int)(W * 0.665 + i * spacing - (int)string_width * s.Length), (int)(H - 4 - 8 - string_height));
                                }

                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 12.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break;
                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                                if (alexpresent || apollopresent) num = Math.Round(num);

                                if (alexpresent && ((orionmkiipresent || anan8000dpresent) && tx_xvtr_index < 0))
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "10", "20", "100", "200" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("240+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 4 - 8 - string_height));
                                    }

                                    if (num <= 200.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 10.0)
                                            pixel_x = (int)(num / 10.0 * (int)spacing);
                                        else if (num <= 20.0)
                                            pixel_x = (int)(spacing + (num - 10.0) / 10.0 * spacing);
                                        else if (num <= 100.0)
                                            pixel_x = (int)(2 * spacing + (num - 20.0) / 80.0 * spacing);
                                        else // <= 100
                                            pixel_x = (int)(3 * spacing + (num - 100.0) / 100.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 240.0)
                                            pixel_x = (int)(W * 0.75 + (num - 200.0) / 40.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 240.0) / 120.0 * spacing);
                                    }
                                }

                                else if ((alexpresent || pa_present) && (!anan10present && !anan10Epresent && !apollopresent))
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "5", "10", "50", "100" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("120+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 4 - 8 - string_height));
                                    }

                                    if (num <= 100.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 50.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 40.0 * spacing);
                                        else // <= 100
                                            pixel_x = (int)(3 * spacing + (num - 50.0) / 50.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 120.0)
                                            pixel_x = (int)(W * 0.75 + (num - 100.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 120.0) / 60.0 * spacing);
                                    }
                                }
                                else if (anan10present || anan10Epresent)// || apollopresent)
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "1", "5", "10", "15" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 2, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("25+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 4 - 8 - string_height));
                                    }

                                    if (num <= 15.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 1.0)
                                            pixel_x = (int)(num / 1.0 * (int)spacing);
                                        else if (num <= 5.0)
                                            pixel_x = (int)(spacing + (num - 1.0) / 4.0 * spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(2 * spacing + (num - 5.0) / 5.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 10.0) / 5.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 25.0)
                                            pixel_x = (int)(W * 0.75 + (num - 15.0) / 10.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 25.0) / 5.0 * spacing);
                                    }
                                }
                                else if (apollopresent) //(anan10present || apollopresent) // 30W
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "5", "10", "20", "30" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 2, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("50+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 4 - 8 - string_height));
                                    }

                                    if (num <= 30.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 20.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 10.0 * spacing);
                                        else // <= 30
                                            pixel_x = (int)(3 * spacing + (num - 20.0) / 10.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 50.0)
                                            pixel_x = (int)(W * 0.75 + (num - 30.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 50.0) / 25.0 * spacing);
                                    }

                                }
                                else // 1W version
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(low_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "100", "250", "500", "800", "1000" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 + (int)(i / 2) - (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("1000", font7, low_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width), (int)(H - 4 - 8 - string_height));
                                    }

                                    // num *= 1000;
                                    if (num < 801.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 150.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 250.0 * spacing);
                                        else // <801.0
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 300.0 * spacing);
                                    }
                                    else // >801
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 200.0 * spacing);
                                    }
                                }
                                break;
                            case MeterTXMode.SWR_POWER:

                                if ((alexpresent || pa_present) && (!anan10present && !anan10Epresent && !apollopresent))
                                {
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) - 1, (int)(W * 0.25) - 4, 2);
                                    g.FillRectangle(low_brush, 0, (H / 2) - 1, (int)(W * 0.75), 4); // horizontal white line
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) + 1, (int)(W * 0.25) - 9, 2); //horizontal red line
                                    // SWR stuff first
                                    spacing = (W * 0.5) / 10.0;
                                    string_height = 0;
                                    string[] swrx_list = { "1.5", "2" };
                                    for (int i = 1; i < 10; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 4, 1, 3);
                                    }
                                    for (int i = 1; i < 3; i++)
                                    {
                                        spacing = (W * 0.5) / 2.0;
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 7, 2, 6);

                                        string s = swrx_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 1 * (int)(i / 2) + 3 * (int)(i / 4)), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    g.FillRectangle(low_brush, (int)(W * 0.625), (H / 2) - 4, 1, 3); // small tic 2.5:1

                                    string[] swrx_hi_list = { "3", "4", "5" };

                                    spacing = (W * 0.75 - 2.0 - 9.0) / 2.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        // g.FillRectangle(high_brush, (int)(i * spacing - spacing * 0.75), H - 4 - 3, 1, 3);
                                    }

                                    for (int i = 1; i < 4; i++)
                                    {
                                        // spacing = (W * 0.55 - 2.0) / 2.0;
                                        // spacing = (W * 0.33 - 2.0) / 3.0;
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) - 4, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing), (H / 2) - 7, 2, 6);
                                        // g.FillRectangle(high_brush, (int)((double)W * 0.55 + i * spacing - spacing * 0.5), H - 4 - 6, 2, 6);
                                        string s = swrx_hi_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        //g.DrawString(s, font7, high_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        // g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                        g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)1.0 * string_width), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }

                                    if (current_swrmeter_data <= 3.0) // low area
                                    {
                                        spacing = (W * 0.75) / 3.0;

                                        if (current_swrmeter_data <= 1.5)
                                            pixel_x_swr = (int)((current_swrmeter_data - 1.0) / 0.5 * spacing);
                                        else if (current_swrmeter_data <= 2.0)
                                            pixel_x_swr = (int)(spacing + (current_swrmeter_data - 1.5) / 0.5 * spacing);
                                        else //if (current_swrmeter_data <= 3.0)
                                            pixel_x_swr = (int)(2 * spacing + (current_swrmeter_data - 2.0) / 1.0 * spacing);
                                        // else //  current_swrmeter_data <= 4.0
                                        //  pixel_x_swr = (int)(3 * spacing + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        if (current_swrmeter_data <= 4.0)
                                            pixel_x_swr = (int)(W * 0.75 + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                        else if (current_swrmeter_data <= 5.0)
                                            pixel_x_swr = (int)(W * 0.75 + spacing + (current_swrmeter_data - 4.0) / 1.0 * spacing);
                                        else
                                            pixel_x_swr = (int)(W * 0.75 + 2 * spacing + (current_swrmeter_data - 5.0) / 4.0 * spacing);
                                    }
                                    if (double.IsInfinity(current_swrmeter_data)) pixel_x_swr = W - 2;

                                    //PWR
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "5", "10", "50", "100" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) + 3, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 1 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), (H / 2) + 3, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 2, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("120+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 1 - string_height));
                                    }

                                    if (num <= 100.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 50.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 40.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 50.0) / 50.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 120.0)
                                            pixel_x = (int)(W * 0.75 + (num - 100.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 120.0) / 60.0 * spacing);
                                    }
                                }

                                else if (anan10present || anan10Epresent)
                                {
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) - 1, (int)(W * 0.25) - 4, 2);
                                    g.FillRectangle(low_brush, 0, (H / 2) - 1, (int)(W * 0.75), 4); // horizontal white line
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) + 1, (int)(W * 0.25) - 9, 2); //horizontal red line
                                    // SWR stuff first
                                    spacing = (W * 0.5) / 10.0;
                                    string_height = 0;
                                    string[] swrx_list = { "1.5", "2" };
                                    for (int i = 1; i < 10; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 4, 1, 3);
                                    }
                                    for (int i = 1; i < 3; i++)
                                    {
                                        spacing = (W * 0.5) / 2.0;
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 7, 2, 6);

                                        string s = swrx_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 1 * (int)(i / 2) + 3 * (int)(i / 4)), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    g.FillRectangle(low_brush, (int)(W * 0.625), (H / 2) - 4, 1, 3); // small tic 2.5:1

                                    string[] swrx_hi_list = { "3", "4", "5" };

                                    spacing = (W * 0.75 - 2.0 - 9.0) / 2.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        // g.FillRectangle(high_brush, (int)(i * spacing - spacing * 0.75), H - 4 - 3, 1, 3);
                                    }

                                    for (int i = 1; i < 4; i++)
                                    {
                                        // spacing = (W * 0.55 - 2.0) / 2.0;
                                        // spacing = (W * 0.33 - 2.0) / 3.0;
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) - 4, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing), (H / 2) - 7, 2, 6);
                                        // g.FillRectangle(high_brush, (int)((double)W * 0.55 + i * spacing - spacing * 0.5), H - 4 - 6, 2, 6);
                                        string s = swrx_hi_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        //g.DrawString(s, font7, high_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        // g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                        g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)1.0 * string_width), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }


                                    if (current_swrmeter_data <= 3.0) // low area
                                    {
                                        spacing = (W * 0.75) / 3.0;

                                        if (current_swrmeter_data <= 1.5)
                                            pixel_x_swr = (int)((current_swrmeter_data - 1.0) / 0.5 * spacing);
                                        else if (current_swrmeter_data <= 2.0)
                                            pixel_x_swr = (int)(spacing + (current_swrmeter_data - 1.5) / 0.5 * spacing);
                                        else //if (current_swrmeter_data <= 3.0)
                                            pixel_x_swr = (int)(2 * spacing + (current_swrmeter_data - 2.0) / 1.0 * spacing);
                                        // else //  current_swrmeter_data <= 4.0
                                        //  pixel_x_swr = (int)(3 * spacing + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        if (current_swrmeter_data <= 4.0)
                                            pixel_x_swr = (int)(W * 0.75 + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                        else if (current_swrmeter_data <= 5.0)
                                            pixel_x_swr = (int)(W * 0.75 + spacing + (current_swrmeter_data - 4.0) / 1.0 * spacing);
                                        else
                                            pixel_x_swr = (int)(W * 0.75 + 2 * spacing + (current_swrmeter_data - 5.0) / 4.0 * spacing);
                                    }
                                    if (double.IsInfinity(current_swrmeter_data)) pixel_x_swr = W - 2;


                                    // PWR
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string[] list = { "1", "5", "10", "15" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) + 3, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 1 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), (H / 2) + 3, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 2, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("25+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 1 - string_height));
                                    }

                                    if (num <= 15.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 1.0)
                                            pixel_x = (int)(num / 1.0 * (int)spacing);
                                        else if (num <= 5.0)
                                            pixel_x = (int)(spacing + (num - 1.0) / 4.0 * spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(2 * spacing + (num - 5.0) / 5.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 10.0) / 5.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 25.0)
                                            pixel_x = (int)(W * 0.75 + (num - 15.0) / 10.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 25.0) / 5.0 * spacing);
                                    }
                                }

                                else if (apollopresent)
                                {
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) - 1, (int)(W * 0.25) - 4, 2);
                                    g.FillRectangle(low_brush, 0, (H / 2) - 1, (int)(W * 0.75), 4); // horizontal white line
                                    g.FillRectangle(high_brush, (int)(W * 0.75), (H / 2) + 1, (int)(W * 0.25) - 9, 2); //horizontal red line
                                    // SWR stuff first
                                    spacing = (W * 0.5) / 10.0;
                                    string_height = 0;
                                    string[] swrx_list = { "1.5", "2" };
                                    for (int i = 1; i < 10; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 4, 1, 3);
                                    }
                                    for (int i = 1; i < 3; i++)
                                    {
                                        spacing = (W * 0.5) / 2.0;
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) - 7, 2, 6);

                                        string s = swrx_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 1 * (int)(i / 2) + 3 * (int)(i / 4)), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    g.FillRectangle(low_brush, (int)(W * 0.625), (H / 2) - 4, 1, 3); // small tic 2.5:1

                                    string[] swrx_hi_list = { "3", "4", "5" };

                                    spacing = (W * 0.75 - 2.0 - 9.0) / 2.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        // g.FillRectangle(high_brush, (int)(i * spacing - spacing * 0.75), H - 4 - 3, 1, 3);
                                    }

                                    for (int i = 1; i < 4; i++)
                                    {
                                        // spacing = (W * 0.55 - 2.0) / 2.0;
                                        // spacing = (W * 0.33 - 2.0) / 3.0;
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) - 4, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing), (H / 2) - 7, 2, 6);
                                        // g.FillRectangle(high_brush, (int)((double)W * 0.55 + i * spacing - spacing * 0.5), H - 4 - 6, 2, 6);
                                        string s = swrx_hi_list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        //g.DrawString(s, font7, high_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                        // g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                        g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)1.0 * string_width), (int)((H / 2) - 9 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }


                                    if (current_swrmeter_data <= 3.0) // low area
                                    {
                                        spacing = (W * 0.75) / 3.0;

                                        if (current_swrmeter_data <= 1.5)
                                            pixel_x_swr = (int)((current_swrmeter_data - 1.0) / 0.5 * spacing);
                                        else if (current_swrmeter_data <= 2.0)
                                            pixel_x_swr = (int)(spacing + (current_swrmeter_data - 1.5) / 0.5 * spacing);
                                        else //if (current_swrmeter_data <= 3.0)
                                            pixel_x_swr = (int)(2 * spacing + (current_swrmeter_data - 2.0) / 1.0 * spacing);
                                        // else //  current_swrmeter_data <= 4.0
                                        //  pixel_x_swr = (int)(3 * spacing + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 6.0) / 2.0;
                                        if (current_swrmeter_data <= 4.0)
                                            pixel_x_swr = (int)(W * 0.75 + (current_swrmeter_data - 3.0) / 1.0 * spacing);
                                        else if (current_swrmeter_data <= 5.0)
                                            pixel_x_swr = (int)(W * 0.75 + spacing + (current_swrmeter_data - 4.0) / 1.0 * spacing);
                                        else
                                            pixel_x_swr = (int)(W * 0.75 + 2 * spacing + (current_swrmeter_data - 5.0) / 4.0 * spacing);
                                    }
                                    if (double.IsInfinity(current_swrmeter_data)) pixel_x_swr = W - 2;

                                    // PWR
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string[] list = { "5", "10", "20", "30" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), (H / 2) + 3, 2, 6);

                                        string s = list[i - 1];
                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 1 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), (H / 2) + 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), (H / 2) + 3, 2, 6);

                                        //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                        SizeF size = g.MeasureString("0", font7, 2, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("50+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 1 - string_height));
                                    }

                                    if (num <= 30.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 20.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 10.0 * spacing);
                                        else // <= 30
                                            pixel_x = (int)(3 * spacing + (num - 20.0) / 10.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 50.0)
                                            pixel_x = (int)(W * 0.75 + (num - 30.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 50.0) / 25.0 * spacing);
                                    }
                                }
                                break;
                            case MeterTXMode.SWR:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 4, 2);
                                // spacing = (W * 0.75 - 2.0) / 4.0;
                                spacing = (W * 0.5) / 10.0;
                                string_height = 0;
                                // string[] swr_list = { "1.5", "2", "3", "4", "5" };
                                string[] swr_list = { "1.5", "2" };
                                for (int i = 1; i < 10; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 3, 1, 3);
                                }
                                for (int i = 1; i < 3; i++)
                                {
                                    spacing = (W * 0.5) / 2.0;
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = swr_list[i - 1];
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 1 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                g.FillRectangle(low_brush, (int)(W * 0.625), H - 4 - 3, 1, 3); // small tic 2.5:1

                                string[] swr_hi_list = { "3", "4", "5" };

                                spacing = (W * 0.75 - 2.0 - 9.0) / 2.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    // g.FillRectangle(high_brush, (int)(i * spacing - spacing * 0.75), H - 4 - 3, 1, 3);
                                }

                                for (int i = 1; i < 4; i++)
                                {
                                    // spacing = (W * 0.55 - 2.0) / 2.0;
                                    // spacing = (W * 0.33 - 2.0) / 3.0;
                                    spacing = (W * 0.25 - 6.0) / 2.0;
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing), H - 4 - 6, 2, 6);
                                    // g.FillRectangle(high_brush, (int)((double)W * 0.55 + i * spacing - spacing * 0.5), H - 4 - 6, 2, 6);
                                    string s = swr_hi_list[i - 1];
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    //g.DrawString(s, font7, high_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    // g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                    g.DrawString(s, font7, high_brush, (int)(W * 0.75 + i * spacing - spacing - (int)1.0 * string_width), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }


                                /*  spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                  for (int i = 1; i < 2; i++)
                                  {
                                    //  g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    //  g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                      //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                      SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                      double string_width = size.Width - 2.0;

                                      //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    //  g.DrawString("5+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                  } */

                                if (num <= 3.0) // low area
                                {
                                    spacing = (W * 0.75) / 3.0;

                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else //if (num <= 3.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 1.0 * spacing);
                                    // else //  num <= 4.0
                                    //  pixel_x = (int)(3 * spacing + (num - 3.0) / 1.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 6.0) / 2.0;
                                    if (num <= 4.0)
                                        pixel_x = (int)(W * 0.75 + (num - 3.0) / 1.0 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(W * 0.75 + spacing + (num - 4.0) / 1.0 * spacing);
                                    else
                                        pixel_x = (int)(W * 0.75 + 2 * spacing + (num - 5.0) / 4.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;
                                break;
                            // spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                            // if (num <= 25.0)
                            //    pixel_x = (int)(W * 0.75 + (num - 15.0) / 10.0 * spacing);
                            // else
                            //   pixel_x = (int)(W * 0.75 + spacing + (num - 25.0) / 5.0 * spacing);

                            /*
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = swr_list[i - 1];
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("20+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                }

                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;
                                break;

                             */
                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:
                            case MeterTXMode.CFC_G:
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                    string s = gain_list[i - 1];
                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, font7, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3)), (int)(H - 4 - 8 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                    //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                    SizeF size = g.MeasureString("0", font7, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("25+", font7, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 4 - 8 - string_height));
                                }


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);
                                break;
                            case MeterTXMode.OFF:
                                break;
                        }
                    }

                    // draw meter movement
                    if (((!mox && current_meter_rx_mode != MeterRXMode.OFF) ||
                        (mox && current_meter_tx_mode != MeterTXMode.OFF)) && current_meter_tx_mode != MeterTXMode.SWR_POWER)
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);

                        line_dark_pen.Color =
                            Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                            (edge_avg_color.G + edge_meter_background_color.G) / 2,
                            (edge_avg_color.B + edge_meter_background_color.B) / 2);

                        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode = SmoothingMode.HighQuality;

                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H); // left side
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H); // center line
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);// right side

                        g.InterpolationMode = InterpolationMode.Default;
                        g.SmoothingMode = SmoothingMode.Default;
                    }

                    if (((!mox && current_meter_rx_mode != MeterRXMode.OFF) ||
                       (mox && current_meter_tx_mode != MeterTXMode.OFF)) && current_meter_tx_mode == MeterTXMode.SWR_POWER)
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);
                        pixel_x_swr = Math.Max(0, pixel_x_swr);
                        pixel_x_swr = Math.Min(W - 3, pixel_x_swr);

                        line_dark_pen.Color =
                            Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                            (edge_avg_color.G + edge_meter_background_color.G) / 2,
                            (edge_avg_color.B + edge_meter_background_color.B) / 2);

                        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode = SmoothingMode.HighQuality;
                        if (!mox)
                        {
                            g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H); // left side
                            g.DrawLine(line_pen, pixel_x, 0, pixel_x, H); // center line
                            g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);// right side
                        }
                        else
                        {
                            g.DrawLine(line_dark_pen, pixel_x - 1, H / 2 + 3, pixel_x - 1, H); // left side
                            g.DrawLine(line_pen, pixel_x, H / 2 + 3, pixel_x, H); // center line
                            g.DrawLine(line_dark_pen, pixel_x + 1, H / 2 + 3, pixel_x + 1, H);// right side

                            g.DrawLine(line_dark_pen, pixel_x_swr - 1, 0, pixel_x_swr - 1, H / 2 - 3); // left side
                            g.DrawLine(line_pen, pixel_x_swr, 0, pixel_x_swr, H / 2 - 3); // center line
                            g.DrawLine(line_dark_pen, pixel_x_swr + 1, 0, pixel_x_swr + 1, H / 2 - 3);// right side
                        }

                        g.InterpolationMode = InterpolationMode.Default;
                        g.SmoothingMode = SmoothingMode.Default;
                    }

                    meter_timer.Stop();

                    format = "f0";
                    if (meter_detail) format = "f1";

                    if (meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        if (!mox)
                        {
                            switch (current_meter_rx_mode)
                            {
                                case MeterRXMode.SIGNAL_STRENGTH:
                                case MeterRXMode.SIGNAL_AVERAGE:
                                    if (s_meter)      // modif F8CHK
                                    {
                                        if (rx1_above30)
                                        {
                                            if (num <= -124.0f) output = "    S 0";
                                            else if (num > -144.0f & num <= -138.0f) output = "    S 1";
                                            else if (num > -138.0f & num <= -132.0f) output = "    S 2";
                                            else if (num > -132.0f & num <= -126.0f) output = "    S 3";
                                            else if (num > -126.0f & num <= -120.0f) output = "    S 4";
                                            else if (num > -120.0f & num <= -114.0f) output = "    S 5";
                                            else if (num > -114.0f & num <= -108.0f) output = "    S 6";
                                            else if (num > -108.0f & num <= -102.0f) output = "    S 7";
                                            else if (num > -102.0f & num <= -96.0f) output = "    S 8";
                                            else if (num > -96.0f & num <= -90.0f) output = "    S 9";
                                            else if (num > -90.0f & num <= -86.0f) output = "    S 9 + 5";
                                            else if (num > -86.0f & num <= -80.0f) output = "    S 9 + 10";
                                            else if (num > -80.0f & num <= -76.0f) output = "    S 9 + 15";
                                            else if (num > -76.0f & num <= -66.0f) output = "    S 9 + 20";
                                            else if (num > -66.0f & num <= -56.0f) output = "    S 9 + 30";
                                            else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 40";
                                            else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 50";
                                            else if (num > -36.0f) output = "    S 9 + 60";
                                        }
                                        else
                                        {
                                            if (num <= -124.0f) output = "    S 0";
                                            else if (num > -124.0f & num <= -118.0f) output = "    S 1";
                                            else if (num > -118.0f & num <= -112.0f) output = "    S 2";
                                            else if (num > -112.0f & num <= -106.0f) output = "    S 3";
                                            else if (num > -106.0f & num <= -100.0f) output = "    S 4";
                                            else if (num > -100.0f & num <= -94.0f) output = "    S 5";
                                            else if (num > -94.0f & num <= -88.0f) output = "    S 6";
                                            else if (num > -88.0f & num <= -82.0f) output = "    S 7";
                                            else if (num > -82.0f & num <= -76.0f) output = "    S 8";
                                            else if (num > -76.0f & num <= -70.0f) output = "    S 9";
                                            else if (num > -70.0f & num <= -66.0f) output = "    S 9 + 5";
                                            else if (num > -66.0f & num <= -60.0f) output = "    S 9 + 10";
                                            else if (num > -60.0f & num <= -56.0f) output = "    S 9 + 15";
                                            else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 20";
                                            else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 30";
                                            else if (num > -36.0f & num <= -26.0f) output = "    S 9 + 40";
                                            else if (num > -26.0f & num <= -16.0f) output = "    S 9 + 50";
                                            else if (num > -16.0f) output = "    S 9 + 60";
                                        }
                                    }
                                    else output = num.ToString(format) + " dBm";
                                    break;
                                case MeterRXMode.ADC_L:
                                case MeterRXMode.ADC_R:
                                case MeterRXMode.ADC2_L:
                                case MeterRXMode.ADC2_R:
                                    output = num.ToString("f1") + " dBFS";
                                    break;
                                case MeterRXMode.OFF:
                                    output = "";
                                    break;
                            }
                        }
                        else
                        {
                            MeterTXMode mode = current_meter_tx_mode;
                            if (chkTUN.Checked) mode = tune_meter_tx_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CFC_PK:
                                case MeterTXMode.CFC_G:
                                case MeterTXMode.COMP:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    output = num.ToString(format) + " dB";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                case MeterTXMode.SWR_POWER:
                                    if (anan10present || anan10Epresent || apollopresent) output = num.ToString(format) + " W";
                                    else if (alexpresent || pa_present) output = num.ToString(format) + " W";
                                    else output = num.ToString(format) + " mW";
                                    break;
                                case MeterTXMode.SWR:
                                    output = num.ToString("f1") + " : 1";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;
                            }
                        }
                        txtMultiText.Text = output;
                        meter_timer.Start();
                    }

                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }

                    break;
                    #endregion
                case MultiMeterDisplayMode.Analog:
                    #region Analog

                    #endregion
                    break;
            }
        }

        private double rx2_avg_num = -130.0;
        private void picRX2Meter_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int H = picRX2Meter.ClientSize.Height;
            int W = picRX2Meter.ClientSize.Width;
            Graphics g = e.Graphics;
            double num;
            int pixel_x = 0;
            string output = "";

            switch (current_meter_display_mode)
            {
                case MultiMeterDisplayMode.Original:
                    #region Original

                    if (rx2_meter_data_ready)
                    {
                        rx2_meter_current_data = rx2_meter_new_data;
                        rx2_meter_data_ready = false;
                    }

                    num = rx2_meter_current_data;

                    switch (rx2_meter_mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_AVERAGE:
                            switch ((int)g.DpiX)
                            {
                                case 96:
                                    double s;
                                    if (rx2_above30)
                                    {
                                        if (collapsedDisplay)
                                        {
                                            s = (num + 147) / 6;
                                            if (s <= 9.0F)
                                                pixel_x = (int)((s * 15) + 2);
                                            else
                                            {
                                                double over_s9 = num + 93;
                                                pixel_x = 138 + (int)(over_s9 * 2.10);
                                            }
                                        }
                                        else
                                        {
                                            s = (num + 147) / 6;
                                            if (s <= 9.0F)
                                                pixel_x = (int)((s * 15) + 2);
                                            else
                                            {
                                                double over_s9 = num + 93;
                                                pixel_x = 69 + (int)(over_s9 * 1.05);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (collapsedDisplay)
                                        {
                                            s = (num + 127) / 6;
                                            if (s <= 9.0F)
                                                pixel_x = (int)((s * 15) + 2);
                                            else
                                            {
                                                double over_s9 = num + 73;
                                                pixel_x = 138 + (int)(over_s9 * 2.10);
                                            }
                                        }
                                        else
                                        {
                                            s = (num + 127) / 6;
                                            if (s <= 9.0F)
                                                pixel_x = (int)((s * 7.5) + 2);
                                            else
                                            {
                                                double over_s9 = num + 73;
                                                pixel_x = 69 + (int)(over_s9 * 1.05);
                                            }
                                        }
                                    }
                                    break;
                                case 120:
                                    if (num <= -97.0f)
                                        pixel_x = (int)(0 + (num + 100.0) / 3.0 * 10);
                                    else if (num <= -91.0f)
                                        pixel_x = (int)(10 + (num + 97.0) / 6.0 * 17);
                                    else if (num <= -85.0f)
                                        pixel_x = (int)(27 + (num + 91.0) / 6.0 * 16);
                                    else if (num <= -79.0f)
                                        pixel_x = (int)(43 + (num + 85.0) / 6.0 * 17);
                                    else if (num <= -73.0f)
                                        pixel_x = (int)(60 + (num + 79.0) / 6.0 * 16);
                                    else if (num <= -53.0f)
                                        pixel_x = (int)(76 + (num + 73.0) / 20.0 * 24);
                                    else if (num <= -33.0f)
                                        pixel_x = (int)(100 + (num + 53.0) / 20.0 * 24);
                                    else if (num <= -13.0f)
                                        pixel_x = (int)(124 + (num + 33.0) / 20.0 * 24);
                                    else
                                        pixel_x = (int)(148 + (num + 13.0) / 20.0 * 19);
                                    break;
                            }
                            break;
                        case MeterRXMode.ADC_L:
                        case MeterRXMode.ADC_R:
                            switch ((int)g.DpiX)
                            {
                                case 96:
                                    if (collapsedDisplay)
                                        pixel_x = (int)(((num + 100) * 2.4) + 24);
                                    else pixel_x = (int)(((num + 100) * 1.2) + 12);
                                    break;
                                case 120:
                                    if (num <= -100.0f)
                                        pixel_x = (int)(0 + (num + 110.0) / 10.0 * 14);
                                    else if (num <= -80.0f)
                                        pixel_x = (int)(14 + (num + 100.0) / 20.0 * 27);
                                    else if (num <= -60.0f)
                                        pixel_x = (int)(41 + (num + 80.0) / 20.0 * 28);
                                    else if (num <= -40.0f)
                                        pixel_x = (int)(69 + (num + 60.0) / 20.0 * 28);
                                    else if (num <= -20.0f)
                                        pixel_x = (int)(97 + (num + 40.0) / 20.0 * 27);
                                    else if (num <= 0.0f)
                                        pixel_x = (int)(124 + (num + 20.0) / 20.0 * 24);
                                    else
                                        pixel_x = (int)(148 + (num - 0.0) / 10.0 * 19);
                                    break;
                            }
                            break;
                        case MeterRXMode.OFF:
                            break;
                    }

                    switch ((int)g.DpiX)
                    {
                        case 96:
                            if (pixel_x > 139) pixel_x = 139;
                            break;
                        case 120:
                            if (pixel_x > 167) pixel_x = 167;
                            break;
                    }

                    if (rx2_meter_mode != MeterRXMode.OFF)
                    {
                        if (pixel_x <= 0) pixel_x = 1;

                        using (LinearGradientBrush brush = new LinearGradientBrush(new Rectangle(0, 0, pixel_x, H),
                            meter_left_color, meter_right_color, LinearGradientMode.Horizontal))
                            g.FillRectangle(brush, 0, 0, pixel_x, H);

                        for (int i = 0; i < 21; i++)
                            g.DrawLine(meter_background_pen, 6 + i * 8, 0, 6 + i * 8, H);

                        g.DrawLine(Pens.Red, pixel_x, 0, pixel_x, H);
                        g.FillRectangle(meter_background_pen.Brush, pixel_x + 1, 0, W - pixel_x, H);

                        if (pixel_x >= rx2_meter_peak_value)
                        {
                            rx2_meter_peak_count = 0;
                            rx2_meter_peak_value = pixel_x;
                        }
                        else
                        {
                            if (rx2_meter_peak_count++ >= multimeter_peak_hold_samples)
                            {
                                rx2_meter_peak_count = 0;
                                rx2_meter_peak_value = pixel_x;
                            }
                            else
                            {
                                g.DrawLine(Pens.Red, rx2_meter_peak_value, 0, rx2_meter_peak_value, H);
                                g.DrawLine(Pens.Red, rx2_meter_peak_value - 1, 0, rx2_meter_peak_value - 1, H);
                            }
                        }
                    }

                    rx2_meter_timer.Stop();

                    string format = "f0";
                    if (meter_detail) format = "f1";

                    if (rx2_meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        switch (rx2_meter_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                if (s_meter)      // modif F8CHK
                                {
                                    if (rx1_above30)
                                    {
                                        if (num <= -124.0f) output = "    S 0";
                                        else if (num > -144.0f & num <= -138.0f) output = "    S 1";
                                        else if (num > -138.0f & num <= -132.0f) output = "    S 2";
                                        else if (num > -132.0f & num <= -126.0f) output = "    S 3";
                                        else if (num > -126.0f & num <= -120.0f) output = "    S 4";
                                        else if (num > -120.0f & num <= -114.0f) output = "    S 5";
                                        else if (num > -114.0f & num <= -108.0f) output = "    S 6";
                                        else if (num > -108.0f & num <= -102.0f) output = "    S 7";
                                        else if (num > -102.0f & num <= -96.0f) output = "    S 8";
                                        else if (num > -96.0f & num <= -90.0f) output = "    S 9";
                                        else if (num > -90.0f & num <= -86.0f) output = "    S 9 + 5";
                                        else if (num > -86.0f & num <= -80.0f) output = "    S 9 + 10";
                                        else if (num > -80.0f & num <= -76.0f) output = "    S 9 + 15";
                                        else if (num > -76.0f & num <= -66.0f) output = "    S 9 + 20";
                                        else if (num > -66.0f & num <= -56.0f) output = "    S 9 + 30";
                                        else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 40";
                                        else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 50";
                                        else if (num > -36.0f) output = "    S 9 + 60";
                                    }
                                    else
                                    {
                                        if (num <= -124.0f) output = "    S 0";
                                        else if (num > -124.0f & num <= -118.0f) output = "    S 1";
                                        else if (num > -118.0f & num <= -112.0f) output = "    S 2";
                                        else if (num > -112.0f & num <= -106.0f) output = "    S 3";
                                        else if (num > -106.0f & num <= -100.0f) output = "    S 4";
                                        else if (num > -100.0f & num <= -94.0f) output = "    S 5";
                                        else if (num > -94.0f & num <= -88.0f) output = "    S 6";
                                        else if (num > -88.0f & num <= -82.0f) output = "    S 7";
                                        else if (num > -82.0f & num <= -76.0f) output = "    S 8";
                                        else if (num > -76.0f & num <= -70.0f) output = "    S 9";
                                        else if (num > -70.0f & num <= -66.0f) output = "    S 9 + 5";
                                        else if (num > -66.0f & num <= -60.0f) output = "    S 9 + 10";
                                        else if (num > -60.0f & num <= -56.0f) output = "    S 9 + 15";
                                        else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 20";
                                        else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 30";
                                        else if (num > -36.0f & num <= -26.0f) output = "    S 9 + 40";
                                        else if (num > -26.0f & num <= -16.0f) output = "    S 9 + 50";
                                        else if (num > -16.0f) output = "    S 9 + 60";
                                    }
                                }
                                else
                                    output = num.ToString(format) + " dBm";
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                output = num.ToString("f1") + " dBFS";
                                break;
                            case MeterRXMode.OFF:
                                output = "";
                                break;
                        }
                        txtRX2Meter.Text = output;
                        rx2_meter_timer.Start();
                    }

                    if (rx2_meter_data_ready)
                    {
                        rx2_meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }
                    break;
                    #endregion
                case MultiMeterDisplayMode.Edge:
                    #region Edge
                    if (rx2_meter_data_ready)
                    {
                        rx2_meter_current_data = rx2_meter_new_data;
                        rx2_meter_data_ready = false;
                    }

                    if (rx2_avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
                    {
                        num = rx2_avg_num = rx2_meter_current_data;
                    }
                    else
                    {
                        if (rx2_meter_current_data > rx2_avg_num)
                            num = rx2_avg_num = rx2_meter_current_data * 0.8 + rx2_avg_num * 0.2; // fast rise
                        else
                            num = rx2_avg_num = rx2_meter_current_data * 0.2 + rx2_avg_num * 0.8; // slow decay
                    }
                    //using (Pen p = new Pen(edge_meter_background_color))
                    g.DrawRectangle(edge_meter_background_pen, 0, 0, W, H);

                    //using (SolidBrush low_brush = new SolidBrush(edge_low_color),
                    // high_brush = new SolidBrush(edge_high_color))
                    //using (Font f = new Font("Arial", 7.0f, FontStyle.Bold))

                    switch (rx2_meter_mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_AVERAGE:
                            g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.5), 2);
                            g.FillRectangle(high_brush, (int)(W * 0.5), H - 4, (int)(W * 0.5) - 4, 2);
                            double spacing = (W * 0.5 - 2.0) / 5.0;
                            double string_height = 0;
                            for (int i = 1; i < 6; i++)
                            {
                                g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                SizeF size = g.MeasureString((-1 + i * 2).ToString(), font7, 1, StringFormat.GenericTypographic);
                                double string_width = size.Width - 2.0;
                                string_height = size.Height - 2.0;

                                //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                //g.SmoothingMode = SmoothingMode.AntiAlias;
                                g.DrawString((-1 + i * 2).ToString(), font7, low_brush, (int)(i * spacing - string_width + (int)(i / 5)), (int)(H - 4 - 8 - string_height));
                                //g.SmoothingMode = SmoothingMode.None;
                            }
                            spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;
                            for (int i = 1; i < 4; i++)
                            {
                                g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing), H - 4 - 6, 2, 6);

                                //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                SizeF size = g.MeasureString("+" + (i * 20).ToString(), font7, 3, StringFormat.GenericTypographic);
                                double string_width = size.Width - 2.0;

                                //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                g.DrawString("+" + (i * 20).ToString(), font7, high_brush, (int)(W * 0.5 + i * spacing - (int)string_width * 3 - i / 3 * 2), (int)(H - 4 - 8 - string_height));
                            }

                            if (rx2_above30)
                            {
                                if (num > -93.0) // high area
                                {
                                    pixel_x = (int)(W * 0.5 + (93.0 + num) / 63.0 * (W * 0.5 - 3));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 153.0) / 60.0 * (W * 0.5));
                                }
                            }
                            else
                            {

                                if (num > -73.0) // high area
                                {
                                    pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                }
                            }
                            break;
                        case MeterRXMode.ADC_L:
                        case MeterRXMode.ADC_R:
                        case MeterRXMode.ADC2_L:
                        case MeterRXMode.ADC2_R:
                            spacing = ((double)W - 5.0) / 6.0;
                            g.FillRectangle(low_brush, 0, H - 4, (int)(W - 3.0 - spacing), 2);
                            g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 4, (int)spacing, 2);
                            for (int i = 1; i < 7; i++)
                            {
                                SolidBrush b = low_brush;
                                if (i == 6) b = high_brush;
                                g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 4 - 3, 1, 5);
                                g.FillRectangle(b, (int)(i * spacing), H - 4 - 6, 2, 8);

                                //Font f = new Font("Arial", 7.0f, FontStyle.Bold);
                                string s = (-120 + i * 20).ToString();
                                SizeF size = g.MeasureString(s, font7, 1, StringFormat.GenericTypographic);
                                double string_width = size.Width - 2.0;
                                size = g.MeasureString("0", font7, 1, StringFormat.GenericTypographic);
                                string_height = size.Height - 2.0;

                                g.DrawString(s, font7, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 4 - 8 - string_height));
                            }

                            pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                            break;
                        case MeterRXMode.OFF:
                            break;
                    }

                    if ((!mox && current_meter_rx_mode != MeterRXMode.OFF) ||
                        (mox && current_meter_tx_mode != MeterTXMode.OFF))
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);

                        line_dark_pen.Color =
                            Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                            (edge_avg_color.G + edge_meter_background_color.G) / 2,
                            (edge_avg_color.B + edge_meter_background_color.B) / 2);

                        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        g.SmoothingMode = SmoothingMode.HighQuality;
                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H);
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);
                        g.InterpolationMode = InterpolationMode.Default;
                        g.SmoothingMode = SmoothingMode.Default;

                    }

                    rx2_meter_timer.Stop();

                    format = "f0";
                    if (meter_detail) format = "f1";

                    if (rx2_meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        switch (rx2_meter_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                if (s_meter)      // modif F8CHK
                                {
                                    if (rx2_above30)
                                    {
                                        if (num <= -124.0f) output = "    S 0";
                                        else if (num > -144.0f & num <= -138.0f) output = "    S 1";
                                        else if (num > -138.0f & num <= -132.0f) output = "    S 2";
                                        else if (num > -132.0f & num <= -126.0f) output = "    S 3";
                                        else if (num > -126.0f & num <= -120.0f) output = "    S 4";
                                        else if (num > -120.0f & num <= -114.0f) output = "    S 5";
                                        else if (num > -114.0f & num <= -108.0f) output = "    S 6";
                                        else if (num > -108.0f & num <= -102.0f) output = "    S 7";
                                        else if (num > -102.0f & num <= -96.0f) output = "    S 8";
                                        else if (num > -96.0f & num <= -90.0f) output = "    S 9";
                                        else if (num > -90.0f & num <= -86.0f) output = "    S 9 + 5";
                                        else if (num > -86.0f & num <= -80.0f) output = "    S 9 + 10";
                                        else if (num > -80.0f & num <= -76.0f) output = "    S 9 + 15";
                                        else if (num > -76.0f & num <= -66.0f) output = "    S 9 + 20";
                                        else if (num > -66.0f & num <= -56.0f) output = "    S 9 + 30";
                                        else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 40";
                                        else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 50";
                                        else if (num > -36.0f) output = "    S 9 + 60";
                                    }
                                    else
                                    {
                                        if (num <= -124.0f) output = "    S 0";
                                        else if (num > -124.0f & num <= -118.0f) output = "    S 1";
                                        else if (num > -118.0f & num <= -112.0f) output = "    S 2";
                                        else if (num > -112.0f & num <= -106.0f) output = "    S 3";
                                        else if (num > -106.0f & num <= -100.0f) output = "    S 4";
                                        else if (num > -100.0f & num <= -94.0f) output = "    S 5";
                                        else if (num > -94.0f & num <= -88.0f) output = "    S 6";
                                        else if (num > -88.0f & num <= -82.0f) output = "    S 7";
                                        else if (num > -82.0f & num <= -76.0f) output = "    S 8";
                                        else if (num > -76.0f & num <= -70.0f) output = "    S 9";
                                        else if (num > -70.0f & num <= -66.0f) output = "    S 9 + 5";
                                        else if (num > -66.0f & num <= -60.0f) output = "    S 9 + 10";
                                        else if (num > -60.0f & num <= -56.0f) output = "    S 9 + 15";
                                        else if (num > -56.0f & num <= -46.0f) output = "    S 9 + 20";
                                        else if (num > -46.0f & num <= -36.0f) output = "    S 9 + 30";
                                        else if (num > -36.0f & num <= -26.0f) output = "    S 9 + 40";
                                        else if (num > -26.0f & num <= -16.0f) output = "    S 9 + 50";
                                        else if (num > -16.0f) output = "    S 9 + 60";
                                    }
                                }
                                else
                                    output = num.ToString(format) + " dBm";
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:
                                output = num.ToString("f1") + " dBFS";
                                break;
                            case MeterRXMode.OFF:
                                output = "";
                                break;
                        }

                        txtRX2Meter.Text = output;
                        rx2_meter_timer.Start();
                    }

                    if (rx2_meter_data_ready)
                    {
                        rx2_meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }

                    break;
                    #endregion
                case MultiMeterDisplayMode.Analog:
                    #region Analog

                    #endregion
                    break;
            }
        }

        private void ResetMultiMeterPeak()
        {
            meter_peak_count = multimeter_peak_hold_samples;
            avg_num = Display.CLEAR_FLAG;
        }

        private void ResetRX2MeterPeak()
        {
            rx2_meter_peak_count = multimeter_peak_hold_samples;
            rx2_meter_avg = Display.CLEAR_FLAG;
        }

        private void panelVFOAHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (vfoa_hover_digit < 0)
                return;

            int x = 0;
            int width = 0;

            if (small_lsd && txtVFOALSD.Visible)
            {
                x += (vfo_char_width + vfo_char_space) * vfoa_hover_digit;
                if (vfoa_hover_digit > 3)
                    x += (vfo_decimal_space - vfo_char_space);

                if (vfoa_hover_digit > 6)
                {
                    x += vfo_small_char_width;
                    x += (vfo_small_char_width + vfo_small_char_space - vfo_char_width - vfo_char_space) * (vfoa_hover_digit - 6);
                    width = x + vfo_small_char_width;
                }
                else width = x + vfo_char_width;
            }
            else
            {
                x += (vfo_char_width + vfo_char_space) * vfoa_hover_digit;
                if (vfoa_hover_digit > 3)
                    x += (vfo_decimal_space - vfo_char_space);
                width = x + vfo_char_width;
            }
            //using (Pen p = new Pen(txtVFOAFreq.ForeColor, 2.0f))
            e.Graphics.DrawLine(txtvfoafreq_forecolor_pen, x, 1, width, 1);
        }

        private void panelVFOBHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (vfob_hover_digit < 0)
                return;

            int x = 0;
            int width = 0;

            if (small_lsd && txtVFOBLSD.Visible)
            {
                x += (vfo_char_width + vfo_char_space) * vfob_hover_digit;
                if (vfob_hover_digit > 3)
                    x += (vfo_decimal_space - vfo_char_space);

                if (vfob_hover_digit > 6)
                {
                    x += vfo_small_char_width;
                    x += (vfo_small_char_width + vfo_small_char_space - vfo_char_width - vfo_char_space) * (vfob_hover_digit - 6);
                    width = x + vfo_small_char_width;
                }
                else width = x + vfo_char_width;
            }
            else
            {
                x += (vfo_char_width + vfo_char_space) * vfob_hover_digit;
                if (vfob_hover_digit > 3)
                    x += (vfo_decimal_space - vfo_char_space);
                width = x + vfo_char_width;
            }
            using (Pen p = new Pen(txtVFOBFreq.ForeColor, 2.0f))
                e.Graphics.DrawLine(p, x, 1, width, 1);
        }

        public void UpdateRX1DisplayAverage(float[] buffer, float[] new_data)
        {
            // Debug.WriteLine("last vfo: " + avg_last_ddsfreq + " vfo: " + DDSFreq); 
            if (buffer[0] == Display.CLEAR_FLAG)
            {
                //Debug.WriteLine("Clearing average buf"); 
                for (int i = 0; i < Display.BUFFER_SIZE; i++)
                    buffer[i] = new_data[i];
            }
            else
            {
                // wjt added -- stop hosing the avg display when scrolling the vfo 
                if (rx1_avg_last_ddsfreq != 0 && rx1_avg_last_ddsfreq != FWCDDSFreq) // vfo has changed, need to shift things around 
                {
                    //Debug.WriteLine("dttsp_osc: " + dttsp_osc); 
                    double delta_vfo;

                    delta_vfo = FWCDDSFreq - rx1_avg_last_ddsfreq;
                    delta_vfo *= 1000000.0; // vfo in mhz moron!

                    double hz_per_bin = sample_rate1 / Display.BUFFER_SIZE;

                    int bucket_shift = (int)(delta_vfo / hz_per_bin);
                    double leftover = delta_vfo - ((double)bucket_shift * hz_per_bin);
                    leftover = leftover / hz_per_bin; // conver to fractions of bucket 
                    double total_leftover = leftover + rx1_last_bin_shift_leftover;
                    if (total_leftover < -0.5)
                    {
                        bucket_shift -= 1;
                        total_leftover += 1;
                        //Debug.WriteLine("bump down"); 
                    }
                    else if (total_leftover > 0.5)
                    {
                        bucket_shift += 1;
                        total_leftover -= 1;
                        //Debug.WriteLine("bump up"); 
                    }
                    rx1_last_bin_shift_leftover = total_leftover;
                    //Debug.WriteLine("leftover: " + leftover + " total_leftover: " + total_leftover); 

                    // bucket_shift = bucket_shift/2; 						
                    // indexed_value pre_max = findMax(average_buffer, display_buffer_size); 
                    // Debug.WriteLine("\nPre max: " + pre_max.val + " " + pre_max.idx); 
                    // Debug.WriteLine("bshift: " + bucket_shift + " delta_vfo: " + delta_vfo); 
                    if (bucket_shift > 0) // vfo increased, need to shift avgs to the left 
                    {
                        if (bucket_shift >= Display.BUFFER_SIZE)
                        {
                            buffer[0] = Display.CLEAR_FLAG;
                        }
                        else
                        {
                            for (int j = 0; j < Display.BUFFER_SIZE - bucket_shift; j++)
                                buffer[j] = buffer[j + bucket_shift];  // wjt fix use memmove 

                            // fill avg with last good data on the end
                            for (int j = Display.BUFFER_SIZE - bucket_shift; j < Display.BUFFER_SIZE; j++)
                                buffer[j] = buffer[Display.BUFFER_SIZE - bucket_shift - 1];
                        }
                    }
                    else if (bucket_shift < 0) // vfo decreased, move samples up 
                    {
                        if (-bucket_shift >= Display.BUFFER_SIZE)
                        {
                            buffer[0] = Display.CLEAR_FLAG;
                        }
                        else
                        {
                            for (int j = Display.BUFFER_SIZE - 1; j > -bucket_shift; j--)
                                buffer[j] = buffer[j + bucket_shift];

                            for (int j = 0; j < -bucket_shift; j++)
                                buffer[j] = buffer[-bucket_shift];
                        }
                    }
                    //					indexed_value post_max = findMax(average_buffer, display_buffer_size); 
                    //					Debug.WriteLine("Post max: " + post_max.val + " " + post_max.idx); 
                    //					indexed_value disp_max = findMax(display_data, display_buffer_size); 		
                    //					Debug.WriteLine("Disp max: " + disp_max.val + " " + disp_max.idx); 
                }
                else
                {
                    rx1_last_bin_shift_leftover = 0; // reset, this vfo = last vfo 
                }

                float new_mult = 0.0f;
                float old_mult = 0.0f;

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.WATERFALL:
                        new_mult = Display.waterfall_avg_mult_new;
                        old_mult = Display.waterfall_avg_mult_old;
                        break;
                    default:
                        new_mult = Display.display_avg_mult_new;
                        old_mult = Display.display_avg_mult_old;
                        break;
                }

                for (int i = 0; i < Display.BUFFER_SIZE; i++)
                    buffer[i] = new_data[i] =
                        (float)(new_data[i] * new_mult +
                        buffer[i] * old_mult);
            }

            if (buffer[0] == Display.CLEAR_FLAG)
            {
                rx1_avg_last_ddsfreq = 0;
                rx1_avg_last_dttsp_osc = 0;
            }
            else
            {
                rx1_avg_last_ddsfreq = FWCDDSFreq;
            }
        }

        public void UpdateRX2DisplayAverage(float[] buffer, float[] new_data)
        {
            //  double dttsp_osc = radio.GetDSPRX(1, 0).RXOsc;
            // Debug.WriteLine("last vfo: " + avg_last_ddsfreq + " vfo: " + DDSFreq); 
            if (buffer[0] == Display.CLEAR_FLAG)
            {
                //Debug.WriteLine("Clearing average buf"); 
                for (int i = 0; i < Display.BUFFER_SIZE; i++)
                    buffer[i] = new_data[i];
            }
            else
            {
                // wjt added -- stop hosing the avg display when scrolling the vfo 
                if (rx2_avg_last_ddsfreq != 0 && rx2_avg_last_ddsfreq != RX2DDSFreq) // vfo has changed, need to shift things around 
                {
                    //Debug.WriteLine("dttsp_osc: " + dttsp_osc); 
                    double delta_vfo;

                    delta_vfo = RX2DDSFreq - rx2_avg_last_ddsfreq;
                    delta_vfo *= 1000000.0; // vfo in mhz moron!

                    double hz_per_bin = sample_rate1 / Display.BUFFER_SIZE;

                    int bucket_shift = (int)(delta_vfo / hz_per_bin);
                    double leftover = delta_vfo - ((double)bucket_shift * hz_per_bin);
                    leftover = leftover / hz_per_bin; // conver to fractions of bucket 
                    double total_leftover = leftover + rx2_last_bin_shift_leftover;
                    if (total_leftover < -0.5)
                    {
                        bucket_shift -= 1;
                        total_leftover += 1;
                        //Debug.WriteLine("bump down"); 
                    }
                    else if (total_leftover > 0.5)
                    {
                        bucket_shift += 1;
                        total_leftover -= 1;
                        //Debug.WriteLine("bump up"); 
                    }
                    rx2_last_bin_shift_leftover = total_leftover;
                    //Debug.WriteLine("leftover: " + leftover + " total_leftover: " + total_leftover); 

                    // bucket_shift = bucket_shift/2; 						
                    // indexed_value pre_max = findMax(average_buffer, display_buffer_size); 
                    // Debug.WriteLine("\nPre max: " + pre_max.val + " " + pre_max.idx); 
                    // Debug.WriteLine("bshift: " + bucket_shift + " delta_vfo: " + delta_vfo); 
                    if (bucket_shift > 0) // vfo increased, need to shift avgs to the left 
                    {
                        if (bucket_shift >= Display.BUFFER_SIZE)
                        {
                            buffer[0] = Display.CLEAR_FLAG;
                        }
                        else
                        {
                            for (int j = 0; j < Display.BUFFER_SIZE - bucket_shift; j++)
                                buffer[j] = buffer[j + bucket_shift];  // wjt fix use memmove 

                            // fill avg with last good data on the end
                            for (int j = Display.BUFFER_SIZE - bucket_shift; j < Display.BUFFER_SIZE; j++)
                                buffer[j] = buffer[Display.BUFFER_SIZE - bucket_shift - 1];
                        }
                    }
                    else if (bucket_shift < 0) // vfo decreased, move samples up 
                    {
                        if (-bucket_shift >= Display.BUFFER_SIZE)
                        {
                            buffer[0] = Display.CLEAR_FLAG;
                        }
                        else
                        {
                            for (int j = Display.BUFFER_SIZE - 1; j > -bucket_shift; j--)
                                buffer[j] = buffer[j + bucket_shift];

                            for (int j = 0; j < -bucket_shift; j++)
                                buffer[j] = buffer[-bucket_shift];
                        }
                    }
                    //					indexed_value post_max = findMax(average_buffer, display_buffer_size); 
                    //					Debug.WriteLine("Post max: " + post_max.val + " " + post_max.idx); 
                    //					indexed_value disp_max = findMax(display_data, display_buffer_size); 		
                    //					Debug.WriteLine("Disp max: " + disp_max.val + " " + disp_max.idx); 
                }
                else
                {
                    rx2_last_bin_shift_leftover = 0; // reset, this vfo = last vfo 
                }

                float new_mult = 0.0f;
                float old_mult = 0.0f;

                switch (Display.CurrentDisplayModeBottom)
                {
                    case DisplayMode.WATERFALL:
                        new_mult = Display.waterfall_avg_mult_new;
                        old_mult = Display.waterfall_avg_mult_old;
                        break;
                    default:
                        new_mult = Display.display_avg_mult_new;
                        old_mult = Display.display_avg_mult_old;
                        break;
                }

                for (int i = 0; i < Display.BUFFER_SIZE; i++)
                    buffer[i] = new_data[i] =
                        (float)(new_data[i] * new_mult +
                        buffer[i] * old_mult);
            }

            if (buffer[0] == Display.CLEAR_FLAG)
            {
                rx2_avg_last_ddsfreq = 0;
            }
            else
            {
                rx2_avg_last_ddsfreq = RX2DDSFreq;
            }
        }

        #endregion

        #region Thread and Timer Routines
        // ======================================================
        // Thread Routines
        // ======================================================

        private void RunDisplay()
        {
            //uint thread = 0;
            //			display_running = true;
            while (true) //(chkPower.Checked)
            {
                uint top_thread = 0;
                uint bottom_thread = 2;
                int flag;

                if (mox)
                {
                    if (chkVFOATX.Checked || !chkRX2.Checked) top_thread = 1;
                    else if (chkVFOBTX.Checked && chkRX2.Checked) bottom_thread = 1;
                }

                if ((!Display.DataReady || !Display.WaterfallDataReady) ||
                    (chkSplitDisplay.Checked && (!Display.DataReadyBottom || !Display.WaterfallDataReadyBottom)))
                {

                    if (calibration_running)
                    {
                        calibration_mutex.WaitOne();
                        displaydidit = true;
                    }

                    if (!pause_DisplayThread && (!Display.DataReady || !Display.WaterfallDataReady) &&
                        Display.CurrentDisplayMode != DisplayMode.OFF)
                    {
                        flag = 0;
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANAFALL:
                                if (mox && !display_duplex)
                                {
                                    if (chkVFOATX.Checked || !chkRX2.Checked)
                                    {
                                        if (!Display.DataReady)
                                        {
                                            fixed (float* ptr = &Display.new_display_data[0])
                                                SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 0, ptr, ref flag);
                                            Display.DataReady = true;
                                        }
                                        if (!Display.WaterfallDataReady)
                                        {
                                            fixed (float* ptr = &Display.new_waterfall_data[0])
                                                SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 1, ptr, ref flag);
                                            Display.WaterfallDataReady = true;
                                        }
                                    }
                                    else
                                    {
                                        if (!Display.DataReady)
                                        {
                                            fixed (float* ptr = &Display.new_display_data[0])
                                                // SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 0, ptr, ref flag);
                                                SpecHPSDRDLL.GetPixels(0, 0, ptr, ref flag);
                                            Display.DataReady = true;
                                        }
                                        if (!Display.WaterfallDataReady)
                                        {
                                            fixed (float* ptr = &Display.new_waterfall_data[0])
                                                //SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 1, ptr, ref flag); 
                                                SpecHPSDRDLL.GetPixels(0, 1, ptr, ref flag);
                                            Display.WaterfallDataReady = true;
                                        }
                                    }
                                }
                                else //rx
                                {
                                    if (!Display.DataReady)
                                    {
                                        fixed (float* ptr = &Display.new_display_data[0])
                                            SpecHPSDRDLL.GetPixels(0, 0, ptr, ref flag);
                                        Display.DataReady = true;
                                    }
                                    if (!Display.WaterfallDataReady)
                                    {
                                        fixed (float* ptr = &Display.new_waterfall_data[0])
                                            SpecHPSDRDLL.GetPixels(0, 1, ptr, ref flag);
                                        Display.WaterfallDataReady = true;
                                    }
                                }
                                break;
                            case DisplayMode.SPECTRUM:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.SPECTRASCOPE:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PANASCOPE:
                                if (mox && !display_duplex)
                                {
                                    if (chkVFOATX.Checked || !chkRX2.Checked)
                                    {
                                        fixed (float* ptr = &Display.new_display_data[0])
                                            SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 0, ptr, ref flag);
                                    }
                                    else
                                    {
                                        fixed (float* ptr = &Display.new_display_data[0])
                                            SpecHPSDRDLL.GetPixels(0, 0, ptr, ref flag);
                                    }
                                }
                                else
                                {
                                    fixed (float* ptr = &Display.new_display_data[0])
                                        SpecHPSDRDLL.GetPixels(0, 0, ptr, ref flag);
                                }
                                break;
                            case DisplayMode.SCOPE:
                            case DisplayMode.SCOPE2:
                                fixed (float* ptr = &Display.new_display_data[0])
                                //DttSP.GetScope(top_thread, ptr, (int)(scope_time * 48));
                                {
                                    if (top_thread != 1)
                                        WDSP.RXAGetaSipF(WDSP.id(top_thread, 0), ptr, (int)(scope_time * 48));
                                    else
                                        WDSP.TXAGetaSipF(WDSP.id(top_thread, 0), ptr, (int)(scope_time * 48));
                                }
                                break;
                            case DisplayMode.PHASE:
                                fixed (float* ptr = &Display.new_display_data[0])
                                //DttSP.GetPhase(top_thread, ptr, Display.PhaseNumPts);
                                {
                                    if (top_thread != 1)
                                        WDSP.RXAGetaSipF1(WDSP.id(top_thread, 0), ptr, Display.PhaseNumPts);
                                    else
                                        WDSP.TXAGetaSipF1(WDSP.id(top_thread, 0), ptr, Display.PhaseNumPts);
                                }
                                break;
                            case DisplayMode.PHASE2:
                                //Audio.phase_mutex.WaitOne();
                                for (int i = 0; i < Display.PhaseNumPts; i++)
                                {
                                    Display.new_display_data[i * 2] = Audio.phase_buf_l[i];
                                    Display.new_display_data[i * 2 + 1] = Audio.phase_buf_r[i];
                                }
                                //Audio.phase_mutex.ReleaseMutex();
                                break;
                        }

                        if (Display.CurrentDisplayMode != DisplayMode.PANAFALL &&
                            Display.CurrentDisplayMode != DisplayMode.WATERFALL)
                            Display.DataReady = true;
                    }

                    if (!pause_DisplayThread && chkSplitDisplay.Checked &&
                        (!Display.DataReadyBottom || !Display.WaterfallDataReadyBottom) &&
                        Display.CurrentDisplayModeBottom != DisplayMode.OFF)
                    {
                        flag = 0;
                        switch (Display.CurrentDisplayModeBottom)
                        {
                            case DisplayMode.SPECTRUM:
                            case DisplayMode.HISTOGRAM:
                                break;
                            case DisplayMode.WATERFALL:
                                if (mox && VFOBTX)
                                {

                                    fixed (float* ptr = &Display.new_waterfall_data_bottom[0])
                                        SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 1, ptr, ref flag);
                                }
                                else
                                {
                                    fixed (float* ptr = &Display.new_waterfall_data_bottom[0])
                                        SpecHPSDRDLL.GetPixels(1, 1, ptr, ref flag);
                                }
                                Display.WaterfallDataReadyBottom = true;
                                break;
                            case DisplayMode.PANADAPTER:
                                if (mox && VFOBTX)
                                {

                                    fixed (float* ptr = &Display.new_display_data_bottom[0])
                                        SpecHPSDRDLL.GetPixels(cmaster.inid(1, 0), 0, ptr, ref flag);
                                }
                                else
                                {
                                    fixed (float* ptr = &Display.new_display_data_bottom[0])
                                        SpecHPSDRDLL.GetPixels(1, 0, ptr, ref flag);
                                }
                                break;
                            case DisplayMode.SCOPE:
                            case DisplayMode.SCOPE2:
                                fixed (float* ptr = &Display.new_display_data_bottom[0])
                                //DttSP.GetScope(bottom_thread, ptr, (int)(scope_time * 48));
                                {
                                    if (bottom_thread != 1)
                                        WDSP.RXAGetaSipF(WDSP.id(bottom_thread, 0), ptr, (int)(scope_time * 48));
                                    else
                                        WDSP.TXAGetaSipF(WDSP.id(bottom_thread, 0), ptr, (int)(scope_time * 48));
                                }
                                break;
                            case DisplayMode.PHASE:
                                fixed (float* ptr = &Display.new_display_data_bottom[0])
                                //DttSP.GetPhase(bottom_thread, ptr, Display.PhaseNumPts);
                                {
                                    if (bottom_thread != 1)
                                        WDSP.RXAGetaSipF1(WDSP.id(bottom_thread, 0), ptr, Display.PhaseNumPts);
                                    else
                                        WDSP.TXAGetaSipF1(WDSP.id(bottom_thread, 0), ptr, Display.PhaseNumPts);
                                }
                                break;
                            case DisplayMode.PHASE2:
                                //Audio.phase_mutex.WaitOne();
                                for (int i = 0; i < Display.PhaseNumPts; i++)
                                {
                                    Display.new_display_data_bottom[i * 2] = Audio.phase_buf_l[i];
                                    Display.new_display_data_bottom[i * 2 + 1] = Audio.phase_buf_r[i];
                                }
                                //Audio.phase_mutex.ReleaseMutex();
                                break;
                        }
                        if (Display.CurrentDisplayModeBottom != DisplayMode.WATERFALL)
                            Display.DataReadyBottom = true;
                    }
                    if (displaydidit)
                    {
                        displaydidit = false;
                        calibration_mutex.ReleaseMutex();
                    }
                }

                if ((Display.CurrentDisplayMode != DisplayMode.OFF) ||
                    (RX2Enabled && Display.CurrentDisplayModeBottom != DisplayMode.OFF))
                    picDisplay.Refresh();


                Thread.Sleep(display_delay);

            }
        }

        private HiPerfTimer meter_timer = new HiPerfTimer();
        private float multimeter_avg = Display.CLEAR_FLAG;
        private void UpdateMultimeter()
        {
            meter_timer.Start();
            while (chkPower.Checked)
            {
                if (!meter_data_ready)
                {
                    if (!mox)
                    {
                        MeterRXMode mode = CurrentMeterRXMode;
                        float num = 0.0f;
                        float rx1PreampOffset = 0.0f;

                        if (rx1_step_att_present) rx1PreampOffset = (float)rx1_attenuator_data;
                        else rx1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];

                        switch (mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                                num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.SIGNAL_STRENGTH);
                                num = num +
                                 rx1_meter_cal_offset +
                                 rx1PreampOffset +
                                 rx1_xvtr_gain_offset +
                                 rx1_6m_gain_offset;

                                new_meter_data = num;
                                break;
                            case MeterRXMode.SIGNAL_AVERAGE:
                                num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                                num = num +
                                  rx1_meter_cal_offset +
                                   rx1PreampOffset +
                                   rx1_xvtr_gain_offset +
                                   rx1_6m_gain_offset;

                                new_meter_data = num;
                                break;
                            case MeterRXMode.ADC_L:
                                num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_REAL);
                                //output = num.ToString("f1")+" dBFS";
                                new_meter_data = num;
                                break;
                            case MeterRXMode.ADC_R:
                                num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_IMAG);
                                //output = num.ToString("f1")+" dBFS";
                                new_meter_data = num;
                                break;
                            case MeterRXMode.ADC2_L:
                                num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.ADC_REAL);
                                //output = num.ToString("f1")+" dBFS";
                                new_meter_data = num;
                                break;
                            case MeterRXMode.ADC2_R:
                                num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.ADC_IMAG);
                                //output = num.ToString("f1")+" dBFS";
                                new_meter_data = num;
                                break;
                            case MeterRXMode.OFF:
                                //output = "";
                                new_meter_data = -200.0f;
                                break;
                        }
                    }
                    else
                    {
                        MeterTXMode mode = CurrentMeterTXMode;
                        float num = 0f;

                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                                num = (float)Math.Max(-195.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.MIC_PK));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.EQ:
                                num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.EQ_PK));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.LEVELER:
                                num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.LEVELER_PK));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.LVL_G:
                                num = (float)Math.Max(0, WDSP.CalculateTXMeter(1, WDSP.MeterType.LVL_G));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.CFC_PK:
                                num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.CFC_PK));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.CFC_G:
                                num = (float)Math.Max(0, -WDSP.CalculateTXMeter(1, WDSP.MeterType.CFC_G));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.COMP:
                                if (peak_tx_meter) num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.CPDR_PK));
                                else num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.CPDR));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.ALC:
                                if (peak_tx_meter) num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.ALC_PK));
                                else num = (float)Math.Max(-30.0f, -WDSP.CalculateTXMeter(1, WDSP.MeterType.ALC));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.ALC_G:
                                num = (float)Math.Max(0, -WDSP.CalculateTXMeter(1, WDSP.MeterType.ALC_G));
                                new_meter_data = num;
                                break;
                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.SWR_POWER:
                                if (alexpresent || apollopresent)
                                {
                                    if (anan8000dpresent)
                                    {
                                        if (tx_xvtr_index >= 0)
                                        {
                                            new_meter_data = drivepwr;
                                        }
                                        else
                                        {
                                            new_meter_data = calfwdpower;
                                        }
                                    }
                                    else
                                    {
                                        new_meter_data = calfwdpower;
                                    }
                                }
                                else
                                    new_meter_data = drivepwr;

                                if (current_meter_tx_mode == MeterTXMode.SWR_POWER) new_swrmeter_data = alex_swr;
                                break;
                            case MeterTXMode.REVERSE_POWER:

                                if (alexpresent || apollopresent)
                                {
                                    new_meter_data = (float)alex_rev;
                                }
                                break;
                            case MeterTXMode.SWR:
                                new_meter_data = alex_swr;
                                break;
                            case MeterTXMode.OFF:
                                //output = "";
                                new_meter_data = -200.0f;
                                break;
                        }

                        if (pa_values)
                        {
                            SetupForm.textDriveFwdADCValue.Text = average_drvadc.ToString("f0");
                            SetupForm.textFwdADCValue.Text = average_fwdadc.ToString("f0");
                            SetupForm.textRevADCValue.Text = average_revadc.ToString("f0");
                            //SetupForm.textFwdVoltage.Text = fwd_volts.ToString("f2") + " V";
                            //SetupForm.textRevVoltage.Text = rev_volts.ToString("f2") + " V";
                            SetupForm.textDrivePower.Text = average_drivepwr.ToString("f0") + " mW";
                            SetupForm.textPAFwdPower.Text = alex_fwd.ToString("f1") + " W";
                            SetupForm.textPARevPower.Text = alex_rev.ToString("f1") + " W";
                            SetupForm.textCaldFwdPower.Text = calfwdpower.ToString("f1") + " W";
                            SetupForm.textSWR.Text = alex_swr.ToString("f2") + ":1";
                        }

                    }
                    meter_data_ready = true;
                    picMultiMeterDigital.Invalidate();
                }

                if (pa_values) SetupForm.textDCVolts.Text = volts_138.ToString("f2") + " V";

                if (chkPower.Checked)
                    Thread.Sleep(Math.Min(meter_delay, meter_dig_delay));
            }
        }

        private HiPerfTimer rx2_meter_timer = new HiPerfTimer();
        private float rx2_meter_avg = Display.CLEAR_FLAG;
        private void UpdateRX2MeterData()
        {
            rx2_meter_timer.Start();
            while (chkPower.Checked && rx2_enabled)
            {
                if (!rx2_meter_data_ready)
                {
                    MeterRXMode mode = RX2MeterMode;
                    float num = 0f;
                    float rx2PreampOffset = 0.0f;

                    if (current_hpsdr_model == HPSDRModel.ANAN100D ||
                        current_hpsdr_model == HPSDRModel.ANAN200D ||
                        current_hpsdr_model == HPSDRModel.ORIONMKII ||
                        current_hpsdr_model == HPSDRModel.ANAN7000D ||
                        current_hpsdr_model == HPSDRModel.ANAN8000D ||
                        rx2_preamp_present)
                    {
                        if (rx2_step_att_present)
                            rx2PreampOffset = (float)rx2_attenuator_data;
                        else
                            rx2PreampOffset = rx2_preamp_offset[(int)rx2_preamp_mode];
                    }
                    else
                    {
                        if (rx1_step_att_present)
                        {
                            rx2PreampOffset = (float)rx1_attenuator_data;
                        }
                        else
                        {
                            rx2PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];
                        }

                    }

                    switch (mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                            num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.SIGNAL_STRENGTH);

                            num = num +
                              rx1_meter_cal_offset +
                              rx2PreampOffset +
                              rx2_xvtr_gain_offset;
                            if (anan7000dpresent || anan8000dpresent) num += rx2_6m_gain_offset;
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.SIGNAL_AVERAGE:
                            num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.AVG_SIGNAL_STRENGTH);
                            num = num +
                            rx1_meter_cal_offset +
                            rx2PreampOffset +
                            rx2_xvtr_gain_offset;
                            if (anan7000dpresent || anan8000dpresent) num += rx2_6m_gain_offset;
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.ADC_L:
                            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_REAL);
                            //output = num.ToString("f1")+" dBFS";
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.ADC_R:
                            num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.ADC_IMAG);
                            //output = num.ToString("f1")+" dBFS";
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.ADC2_L:
                            num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.ADC_REAL);
                            //output = num.ToString("f1")+" dBFS";
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.ADC2_R:
                            num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.ADC_IMAG);
                            //output = num.ToString("f1")+" dBFS";
                            rx2_meter_new_data = num;
                            break;
                        case MeterRXMode.OFF:
                            //output = "";
                            rx2_meter_new_data = -200.0f;
                            break;
                    }
                    rx2_meter_data_ready = true;
                    picRX2Meter.Invalidate();
                }

                //end:
                if (chkPower.Checked)
                    Thread.Sleep(Math.Min(meter_delay, meter_dig_delay));
            }
        }

        public float computeHermesDCVoltage()
        {
            float volt_div = (4.7f + 0.82f) / 0.82f; // Voltage divider (R1 + R2) / R2
            int adc = NetworkIO.getHermesDCVoltage();
            float volts = (float)adc / 4095 * 3.3f;
            float batt_volts = volts * volt_div;
            return batt_volts;
        }

        private float MKIIPAVolts = 0.0f;
        private float MKIIPAAmps = 0.0f;

        private void displayMKIIPAVoltsAmps()
        {
            while (chkPower.Checked && (anan7000dpresent || anan8000dpresent))
            {
                computeMKIIPAVolts();
                computeMKIIPAAmps();
                Thread.Sleep(600);
            }
        }
        public void computeMKIIPAVolts()
        {
            float adc = 0;
            float addadc = 0;
            float volt_div = (22.0f + 1.0f) / 1.1f; // Voltage divider (R1 + R2) / R2

            for (int count = 0; count < 100; count++)
            {
                adc = NetworkIO.getUserADC0();
                addadc += adc;
                Thread.Sleep(1);
            }
            adc = addadc / 100.0f;

            float volts = (adc / 4095.0f) * 5.0f;
            volts = volts * volt_div;
            MKIIPAVolts = volts;
        }

        public void computeMKIIPAAmps()
        {
            float adc = 0;
            float addadc = 0;
            float voff = 360.0f, sens = 120.0f;

            if (anan7000dpresent)
            {
                voff = 340.0f;
                sens = 88.0f;
            }
            for (int count = 0; count < 100; count++)
            {
                adc = NetworkIO.getUserADC1(); //JanusAudio.getAIN4();
                addadc += adc;
                Thread.Sleep(1);
            }
            adc = addadc / 100.0f;
            float fwdvolts = ((float)adc * 5000.0f) / 4095.0f;
            if (fwdvolts < 0) fwdvolts = 0.0f;
            float amps = ((fwdvolts - voff) / sens);
            //  float amps = (0.01f * adc - 2.91f);
            if (amps < 0) amps = 0.0f;
            MKIIPAAmps = amps;
        }

        public float computeRefPower()
        {
            float adc = 0;
            const float alpha = 0.90f;

            float bridge_volt = 0;
            float refvoltage = 0;
            int adc_cal_offset = 0;

            switch (current_hpsdr_model)
            {
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100B:
                    bridge_volt = 0.095f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.5f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 3;
                    break;
                case HPSDRModel.ANAN100D:
                    bridge_volt = 0.095f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.5f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 3;
                    break;
                case HPSDRModel.ANAN200D:
                    bridge_volt = 0.108f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.5f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 2;
                    break;
                case HPSDRModel.ANAN7000D:
                    bridge_volt = 0.15f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.7f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 28;
                    break;
                case HPSDRModel.ORIONMKII:
                case HPSDRModel.ANAN8000D:
                    bridge_volt = 0.08f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.08f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 16;
                    break;
                default:
                    bridge_volt = 0.09f;
                    if (tx_band == Band.B6M)
                        bridge_volt = 0.09f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 3;
                    break;
            }

            //for (int count = 0; count < 50; count++)
            //{
            //    adc = JanusAudio.getRefPower();
            //    addadc += adc;
            //    Thread.Sleep(1);
            //}
            //adc = addadc / 50;
            adc = NetworkIO.getRevPower();

            if (adc < 0) adc = 0;

            float volts = (float)((adc - adc_cal_offset) / 4095.0 * refvoltage);
            if (volts < 0) volts = 0;
            float watts = (float)(Math.Pow(volts, 2) / bridge_volt);
            if (watts < 0) watts = 0;

            if (PAValues)
            {
                average_revadc = alpha * average_revadc + (1.0f - alpha) * adc;
                // SetupForm.textRevADCValue.Text = adc.ToString();
                SetupForm.textRevVoltage.Text = volts.ToString("f2") + " V";
            }

            return watts;
        }

        // private int pwr_avg_i = 0;
        public float computeAlexFwdPower()
        {
            float adc = 0;
            const float alpha = 0.90f;
            float bridge_volt = 0;
            float refvoltage = 0;
            int adc_cal_offset = 0;

            switch (current_hpsdr_model)
            {
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100B:
                    bridge_volt = 0.095f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 6;
                    break;
                case HPSDRModel.ANAN100D:
                    bridge_volt = 0.095f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 6;
                    break;
                case HPSDRModel.ANAN200D:
                    bridge_volt = 0.108f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 4;
                    break;
                case HPSDRModel.ANAN7000D:
                    bridge_volt = 0.12f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 32;
                    break;
                case HPSDRModel.ORIONMKII:
                case HPSDRModel.ANAN8000D:
                    bridge_volt = 0.08f;
                    refvoltage = 5.0f;
                    adc_cal_offset = 18;
                    break;
                default:
                    bridge_volt = 0.09f;
                    refvoltage = 3.3f;
                    adc_cal_offset = 6;
                    break;
            }

            //for (int count = 0; count < 50; count++)
            //{
            //    adc = JanusAudio.getAlexFwdPower();
            //    addadc += adc;
            //    Thread.Sleep(1);
            //}
            //adc = addadc / 50;
            adc = NetworkIO.getFwdPower();

            if (adc < 0) adc = 0;

            float volts = (float)((adc - adc_cal_offset) / 4095.0f * refvoltage);
            if (volts < 0) volts = 0;
            float watts = (float)(Math.Pow(volts, 2) / bridge_volt);

            if (PAValues)
            {
                average_fwdadc = alpha * average_fwdadc + (1.0f - alpha) * adc;
                // SetupForm.textFwdADCValue.Text = adc.ToString();
                //fwd_volts = volts;
                SetupForm.textFwdVoltage.Text = volts.ToString("f2") + " V";
            }
            if (watts < 0) watts = 0;
            return watts;
        }

        public float computeExciterPower()
        {
            int power_int = NetworkIO.getExciterPower();
            double power_f = (double)power_int;
            double result = 0.0;

            if (PAValues)
            {
                SetupForm.textDriveFwdADCValue.Text = power_int.ToString();
            }

            // SetupForm.txtFwdADCValue.Text = power_int.ToString();
            if (power_int <= 2095)
            {
                if (power_int <= 874)
                {
                    if (power_int <= 98)
                    {
                        result = 0.0;
                    }
                    else  // > 98 
                    {
                        result = (power_f - 98.0) * 0.065703;
                    }
                }
                else  // > 874 
                {
                    if (power_int <= 1380)
                    {
                        result = 50.0 + ((power_f - 874.0) * 0.098814);
                    }
                    else  // > 1380 
                    {
                        result = 100.0 + ((power_f - 1380.0) * 0.13986);
                    }
                }
            }
            else  // > 2095 
            {
                if (power_int <= 3038)
                {
                    if (power_int <= 2615)
                    {
                        result = 200.0 + ((power_f - 2095.0) * 0.192308);
                    }
                    else  // > 2615, <3038 
                    {
                        result = 300.0 + ((power_f - 2615.0) * 0.236407);
                    }
                }
                else  // > 3038 
                {
                    result = 400.0 + ((power_f - 3038.0) * 0.243902);
                }
            }

            return (float)result;
        }

        public float computeOrionMkIIExciterPower()
        {
            int power_int = NetworkIO.getExciterPower();
            double power_f = (double)power_int;
            double result = 0.0;

            if (PAValues)
            {
                SetupForm.textDriveFwdADCValue.Text = power_int.ToString();
            }

            if (power_int <= 1340)
            {
                if (power_int <= 580)
                {
                    if (power_int <= 60)
                    {
                        result = 0.0;
                    }
                    else  // > 68 
                    {
                        result = (power_f - 60.0) * 0.097656;
                    }
                }
                else  // > 580
                {
                    if (power_int <= 905)
                    {
                        result = 50.0 + ((power_f - 580.0) * 0.153846);
                    }
                    else  // > 905
                    {
                        result = 100.0 + ((power_f - 905.0) * 0.229885);
                    }
                }
            }
            else  // > 1340
            {
                if (power_int <= 1950)
                {
                    if (power_int <= 1680)
                    {
                        result = 200.0 + ((power_f - 1340.0) * 0.294118);
                    }
                    else  // > 1680, <1950 
                    {
                        result = 300.0 + ((power_f - 1680.0) * 0.370370);
                    }
                }
                else  // > 1950
                {
                    result = 400.0 + ((power_f - 1950.0) * 0.540540);
                }
            }

            return (float)result;
        }

        public float computeOrionExciterPower()
        {
            int power_int = NetworkIO.getExciterPower();
            double power_f = (double)power_int;
            double result = 0.0;

            if (PAValues)
            {
                SetupForm.textDriveFwdADCValue.Text = power_int.ToString();
            }

            if (power_int <= 1340)
            {
                if (power_int <= 580)
                {
                    if (power_int <= 68)
                    {
                        result = 0.0;
                    }
                    else  // > 68 
                    {
                        result = (power_f - 68.0) * 0.097656;
                    }
                }
                else  // > 580
                {
                    if (power_int <= 905)
                    {
                        result = 50.0 + ((power_f - 580.0) * 0.153846);
                    }
                    else  // > 905
                    {
                        result = 100.0 + ((power_f - 905.0) * 0.229885);
                    }
                }
            }
            else  // > 1340
            {
                if (power_int <= 1950)
                {
                    if (power_int <= 1680)
                    {
                        result = 200.0 + ((power_f - 1340.0) * 0.294118);
                    }
                    else  // > 1680, <1950 
                    {
                        result = 300.0 + ((power_f - 1680.0) * 0.370370);
                    }
                }
                else  // > 1950
                {
                    result = 400.0 + ((power_f - 1950.0) * 0.540540);
                }
            }

            return (float)result;
        }

        public float computeANANExciterPower()
        {
            int power_int = NetworkIO.getExciterPower();
            double power_f = (double)power_int;
            double result = 0.0;

            // if (PAValues)
            // {
            //     SetupForm.textDriveFwdADCValue.Text = power_int.ToString();
            // }
            if (power_int <= 2551)
            {
                if (power_int <= 1253)
                {
                    if (power_int <= 68)
                    {
                        result = 0.0;
                    }
                    else  // > 68 
                    {
                        result = (power_f - 68.0) * 0.008439;
                    }
                }

                else  // > 1253
                {
                    if (power_int <= 1856)
                    {
                        result = 10.0 + ((power_f - 1253.0) * 0.024876);
                    }
                    else  // > 1856
                    {
                        result = 25.0 + ((power_f - 1856.0) * 0.035971);
                    }
                }
            }

            else  // > 2551
            {
                if (power_int <= 3628)
                {
                    if (power_int <= 3101)
                    {
                        result = 50.0 + ((power_f - 2551.0) * 0.045454);
                    }
                    else  // > 3101, <3628 
                    {
                        result = 75.0 + ((power_f - 3101.0) * 0.370370);
                    }
                }
                else  // > 3628
                {
                    result = 100.0 + ((power_f - 3628.0) * 0.064935);
                }
            }

            if (PAValues)
            {
                SetupForm.textFwdADCValue.Text = power_int.ToString();
                // SetupForm.textFwdVoltage.Text = volts.ToString("f2") + " V";
            }

            return (float)result;
        }

        private float sql_data = -200.0f;
        private void UpdateSQL()
        {
            while (chkPower.Checked)
            {
                float rx1PreampOffset = 0.0f;

                if (rx1_step_att_present) rx1PreampOffset = (float)rx1_attenuator_data;
                else rx1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];

                if (!mox)
                {
                    float num = WDSP.CalculateRXMeter(0, 0, WDSP.MeterType.SIGNAL_STRENGTH);
                    num = num +
                    rx1_meter_cal_offset +
                        // rx1_preamp_offset[(int)rx1_preamp_mode] +
                    rx1PreampOffset;
                    //+ rx1_filter_size_cal_offset;

                    sql_data = num;
                    picSquelch.Invalidate();
                }

                if (chkPower.Checked) Thread.Sleep(100);
            }
        }

        private float rx2_sql_data = -200.0f;
        private void UpdateRX2SQL()
        {
            while (chkPower.Checked && rx2_enabled)
            {
                float num = WDSP.CalculateRXMeter(2, 0, WDSP.MeterType.SIGNAL_STRENGTH);
                // float rx2PreampOffset = 0.0f;

                // if (rx2_step_att_present) rx2PreampOffset = (float)rx2_attenuator_data;
                // else rx2PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];
                //Debug.WriteLine("SQL Read: "+num.ToString("f1"));

                num = num +
                    rx1_meter_cal_offset +
                    // rx1_preamp_offset[(int)rx1_preamp_mode] +
                    Display.RX2PreampOffset;
                //+ rx2PreampOffset +
                //rx2_filter_size_cal_offset;// +
                //rx2_path_offset;

                rx2_sql_data = num;
                picRX2Squelch.Invalidate();

                if (chkPower.Checked && rx2_enabled) Thread.Sleep(100);
            }
        }

        private float noise_gate_data = -200.0f;
        private void UpdateNoiseGate()
        {
            while (chkPower.Checked)
            {
                if (mox)
                {
                    float num = -WDSP.CalculateTXMeter(1, WDSP.MeterType.MIC);

                    noise_gate_data = num + 3.0f;
                    picNoiseGate.Invalidate();
                }

                if (chkPower.Checked) Thread.Sleep(100);
            }
        }

        private void UpdateVOX()
        {
            while (chkPower.Checked)
            {
                switch (rx1_dsp_mode)
                {
                    case DSPMode.LSB:
                    case DSPMode.USB:
                    case DSPMode.DSB:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                        picVOX.Invalidate();
                        break;
                }

                if (chkPower.Checked) Thread.Sleep(100);
            }
        }

        private bool mon_recall = false;
        private static HiPerfTimer vox_timer = new HiPerfTimer();
        //private int dotdashptt = 0;                           

        private void PollPTT()
        {
            while (chkPower.Checked)
            {
                int dotdashptt = NetworkIO.nativeGetDotDashPTT();
                DSPMode tx_mode = rx1_dsp_mode;

                if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

                if (!manual_mox && !disable_ptt && !rx_only && !tx_inhibit)// 
                {
                    bool mic_ptt = false, cat_ptt_local = false, vox_ptt = false, cw_ptt = false, cat_hs_ptt = false;
                    bool temp = (dotdashptt & 0x01) != 0; // ptt

                    //  if ((dotdashptt & 0x1) != 0)
                    // {
                    // if (current_hpsdr_model == HPSDRModel.ANAN200D && mic_ptt_disabled)
                    // mic_ptt = false;
                    // else mic_ptt = temp;                        
                    //  }

                    cat_hs_ptt = CWInput.CATPTT;
                    cw_ptt = CWInput.KeyerPTT;
                    mic_ptt = temp;
                    vox_ptt = Audio.VOXActive;
                    cat_ptt_local = (ptt_bit_bang_enabled && serialPTT != null && serialPTT.isPTT()) |
                        (!ptt_bit_bang_enabled && cat_hs_ptt) | cat_ptt;

                    if (!mox)
                    {
                        if (cat_ptt_local)
                        {
                            current_ptt_mode = PTTMode.CAT;

                            chkMOX.Checked = true;
                            if (!mox)
                            {
                                chkPower.Checked = false;
                                return;
                            }
                        }

                        if (((tx_mode == DSPMode.CWL || 
                              tx_mode == DSPMode.CWU) && 
                              !all_mode_mic_ptt) && mic_ptt)
                        {
                            current_ptt_mode = PTTMode.MIC;

                            if (chkVAC1.Checked && allow_vac_bypass)
                                Audio.VACBypass = true;

                            //if (!BreakInEnabled && !(break_in_delay == 0))
                                //chkMOX.Checked = true;
                                                                   
                        }

                        if ((tx_mode == DSPMode.LSB ||
                            tx_mode == DSPMode.USB ||
                            tx_mode == DSPMode.DSB ||
                            tx_mode == DSPMode.AM ||
                            tx_mode == DSPMode.SAM ||
                            tx_mode == DSPMode.DIGU ||
                            tx_mode == DSPMode.DIGL ||
                            tx_mode == DSPMode.FM ||
                            all_mode_mic_ptt) &&
                            mic_ptt)
                        {
                            current_ptt_mode = PTTMode.MIC;

                            if (chkVAC1.Checked && allow_vac_bypass)
                                Audio.VACBypass = true;

                            chkMOX.Checked = true;
                            //  if (!mox)
                            //  {
                            //  chkPower.Checked = false;
                            //   return;
                            //    }
                        }

                        if ((tx_mode == DSPMode.LSB ||
                            tx_mode == DSPMode.USB ||
                            tx_mode == DSPMode.DSB ||
                            tx_mode == DSPMode.AM ||
                            tx_mode == DSPMode.SAM ||
                            tx_mode == DSPMode.DIGU ||
                            tx_mode == DSPMode.DIGL ||
                            tx_mode == DSPMode.FM) &&
                            vox_ptt)
                        {
                            current_ptt_mode = PTTMode.VOX;
                            //vox_timer.Start();//wcp
                            chkMOX.Checked = true;
                        }
                    }
                    else // else if(mox)
                    {
                        switch (current_ptt_mode)
                        {
                            case PTTMode.CAT:
                                if (!cat_ptt_local)
                                {
                                    chkMOX.Checked = false;
                                }
                                break;
                            case PTTMode.MIC:
                                if (!mic_ptt)
                                {
                                    chkMOX.Checked = false;
                                    if (chkVAC1.Checked && Audio.VACBypass)
                                        Audio.VACBypass = false;
                                }
                                break;
                            case PTTMode.CW:
                                if (!cw_ptt)
                                {
                                    chkMOX.Checked = false;
                                }
                                break;
                            case PTTMode.VOX:
                                if (!vox_ptt)
                                {
                                    //vox_timer.Stop();//wcp
                                    //if (vox_timer.DurationMsec > vox_hang_time)//wcp
                                        chkMOX.Checked = false;
                                }
                                //else vox_timer.Start();//wcp
                                break;
                        }
                    }
                }
                Thread.Sleep(2);
            }

        }

        private int last_bmp = 0;
        private void PollCW()
        {
            while (chkPower.Checked)
            {
                int dotdashptt = NetworkIO.nativeGetDotDashPTT();
                bool state = (dotdashptt & 0x01) != 0; // ptt                
                state = (dotdashptt & 0x02) != 0; // dash    

                if ((dotdashptt & 0x02) != (last_bmp & 0x02))
                {
                    FWDash = state;
                    // SetConsoleMox(state);
                }

                state = (dotdashptt & 0x04) != 0; // dot                   
                if ((dotdashptt & 0x04) != (last_bmp & 0x04))
                {
                    FWDot = state;
                    //SetConsoleMox(state);
                }

                last_bmp = dotdashptt;
                Thread.Sleep(10);
            }
        }

        private bool fw_dot = false;
        public bool FWDot
        {
            get { return fw_dot; }
            set
            {
                fw_dot = value;
                if (value && cw_auto_mode_switch)
                {
                    switch (rx1_dsp_mode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            break;
                        case DSPMode.LSB:
                        case DSPMode.DIGL:
                            RX1DSPMode = DSPMode.CWL;
                            break;
                        default:
                            RX1DSPMode = DSPMode.CWU;
                            break;
                    }
                }
            }
        }

        private bool fw_dash = false;
        public bool FWDash
        {
            get { return fw_dash; }
            set
            {
                fw_dash = value;
                if (value && cw_auto_mode_switch)
                {
                    switch (rx1_dsp_mode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            break;
                        case DSPMode.LSB:
                        case DSPMode.DIGL:
                            RX1DSPMode = DSPMode.CWL;
                            break;
                        default:
                            RX1DSPMode = DSPMode.CWU;
                            break;
                    }
                }
            }
        }

        private bool update_preamp_mutex = false;
        private PreampMode preamp;
        private PreampMode rx2_preamp;
        private bool old_satt = false;
        private int old_satt_data = 0;
        private bool old_rx2_satt = false;
        private int old_rx2_satt_data = 0;
        private bool update_preamp = true;
        private bool update_preamp_mode = false;

        private void UpdatePreamps()
        {
            if (current_hpsdr_model == HPSDRModel.HPSDR)
            {
                update_preamp = false;
                update_preamp_mode = false;
                return;
            }

            if (!mox && attontx && !initializing)
            {
                if (update_preamp_mode && !update_preamp_mutex)
                {
                    update_preamp_mutex = true;
                    RX1PreampMode = preamp;
                    SetupForm.HermesEnableAttenuator = old_satt;
                    SetupForm.HermesAttenuatorData = old_satt_data;

                    if (current_hpsdr_model == HPSDRModel.ANAN100D ||
                        current_hpsdr_model == HPSDRModel.ANAN200D ||
                        current_hpsdr_model == HPSDRModel.ORIONMKII ||
                        current_hpsdr_model == HPSDRModel.ANAN7000D ||
                        current_hpsdr_model == HPSDRModel.ANAN8000D)
                    {
                        RX2PreampMode = rx2_preamp;
                        // RX2StepAttPresent = old_rx2_satt;
                        SetupForm.RX2EnableAtt = old_rx2_satt;
                        RX2ATT = old_rx2_satt_data;
                    }
                    update_preamp_mode = false;
                    update_preamp_mutex = false;

                }

                if (update_preamp && !update_preamp_mutex)
                {

                    preamp = RX1PreampMode;				// save current preamp mode
                    old_satt_data = SetupForm.HermesAttenuatorData;
                    old_satt = rx1_step_att_present;

                    if (current_hpsdr_model == HPSDRModel.ANAN100D ||
                        current_hpsdr_model == HPSDRModel.ANAN200D ||
                        current_hpsdr_model == HPSDRModel.ORIONMKII ||
                        current_hpsdr_model == HPSDRModel.ANAN7000D ||
                        current_hpsdr_model == HPSDRModel.ANAN8000D)
                    {
                        rx2_preamp = RX2PreampMode;
                        old_rx2_satt_data = rx2_attenuator_data;// RX2AttenuatorData;
                        old_rx2_satt = rx2_step_att_present;// RX2StepAttPresent;
                    }
                    update_preamp = false;

                }
            }
        }

        private void PollTXInhibit()
        {
            bool inhibit_input;
            while (chkPower.Checked)
            {
                if (tx_inhibit_enabled && current_hpsdr_model != HPSDRModel.HPSDR)
                {
                    if (anan7000dpresent || anan8000dpresent)
                        inhibit_input = NetworkIO.getUserI02();
                    else
                        inhibit_input = NetworkIO.getUserI01();
                    if (tx_inhibit_sense)
                    {
                        if (inhibit_input) TXInhibit = true;
                        else TXInhibit = false;
                    }
                    else
                    {
                        if (inhibit_input) TXInhibit = false;
                        else TXInhibit = true;
                    }
                }

                Thread.Sleep(40);
            }
        }

        private UdpClient n1mm_udp_client;
        private void PollN1MMPacket()
        {
            //  radio_info = new RadioInfo();
            //  contact_info = new ContactInfo();

            if (n1mm_udp_client != null) n1mm_udp_client.Close();
            IPEndPoint udp_ep = new IPEndPoint(IPAddress.Any, focus_master_udp_port);
            n1mm_udp_client = new UdpClient(udp_ep);

            while (focus_master_mode == FocusMasterMode.Logger)
            {
                try
                {
                    {
                        byte[] data = n1mm_udp_client.Receive(ref udp_ep);
                        //MessageBox.Show(Encoding.ASCII.GetString(data));
                        string tmp = Encoding.UTF8.GetString(data);
                        HandleXml(tmp);
                    }
                }
                catch (SocketException e) // handle blocking exception
                {
                    Thread.Sleep(500);
                    continue;
                }
            }

            if (n1mm_udp_client != null)
            {
                n1mm_udp_client.Close();
                n1mm_udp_client = null;
            }

        }

        private void n1mm_delay_Elapsed(object sender, ElapsedEventArgs e)
        {
            if (selectByClick & !initializing)
            {
                IntPtr curHandle = Win32.GetForegroundWindow();
                if (curHandle != myHandle)
                {
                    n1mm_handle = curHandle;
                    selectByClick = false;
                    SetFocusMaster(false);
                    int slen = Win32.GetWindowTextLengthW(n1mm_handle);
                    StringBuilder wtxt = new StringBuilder(slen + 1);
                    Win32.GetWindowTextW(n1mm_handle, wtxt, 256);
                    SetupForm.FocusMasterTitle = wtxt.ToString();
                }
                else
                {
                    ToggleFocusMasterTimer();
                }
            }

            if (n1mm_handle != IntPtr.Zero && !Win32.IsWindow(n1mm_handle))
            {
                n1mm_handle = IntPtr.Zero;
                SetupForm.FocusMasterMode = FocusMasterMode.None;
                SetupForm.FocusMasterTitle = "";
            }

            if (n1mm_state == 3)
            {
                n1mm_state = 0;
                if (n1mm_handle != IntPtr.Zero)
                    Win32.SetForegroundWindow(n1mm_handle);
            }
        }

        /*
                public struct RadioInfo
                {
                    public string StationName;
                    public string RadioNr;
                    public string Freq;
                    public string TXFreq;
                    public string Mode;
                    public string OpCall;
                    public string IsRunning;
                    public string FocusEntry;
                    public string Antenna;
                    public string Rotors;
                    public string FocusRadioNr;
                    public string IsStereo;
                    public string ActiveRadioNr;
                }
        
                public struct ContactInfo
                {
                    public string contestname;
                    public string contestnr;
                    public string timestamp;
                    public string mycall;
                    public string band;
                    public string rxfreq;
                    public string txfreq;
                    public string oprerator;
                    public string mode;
                    public string call;
                    public string countryprefix;
                    public string wpxprefix;
                    public string stationprefix;
                    public string continent;
                    public string snt;
                    public string sntnr;
                    public string rcv;
                    public string rcvnr;
                    public string gridsquare;
                    public string exchange1;
                    public string section;
                    public string comment;
                    public string qth;
                    public string name;
                    public string power;
                    public string misctext;
                    public string zone;
                    public string prec;
                    public string ck;
                    public string ismultiplier1;
                    public string ismultiplier2;
                    public string ismultiplier3;
                    public string points;
                    public string radionr;
                    public string RoverLocation;
                    public string RadioInterfaced;
                    public string NetworkedCompNr;
                    public string IsOriginal;
                    public string NetBiosName;
                    public string IsRunQSO;
                    public string Run1Run2;
                    public string ContactType;
                    public string StationName;
                }
                */

        void HandleXml(string str)
        {
            // int textCount = 0;
            // bool valid_data = true;
            //  string element = "";
            StringReader stream = new StringReader(str);
            //  XmlTextReader tr = new XmlTextReader(stream);

            var elem = XElement.Parse(str);
            if (elem.Name == "RadioInfo")
                n1mm_handle = (IntPtr)Int32.Parse(elem.Element("FocusEntry").Value);
            /*
                        while (tr.Read() && valid_data)
                        {
                            switch (tr.NodeType)
                            {
                                case XmlNodeType.XmlDeclaration:
                                case XmlNodeType.EndElement:
                                case XmlNodeType.Whitespace:
                                    break;
                                case XmlNodeType.Element:
                                    switch (tr.Name)
                                    {
                                        case "appinfo":
                                        case "N1MMRotor":
                                            valid_data = false;
                                            break;
                                        case "contactinfo":
                                            //element = "contactinfo";
                                            valid_data = false;
                                            break;
                                        case "RadioInfo":
                                            element = "RadioInfo";
                                            //focus_entry = elem.Element("FocusEntry").Value;
                                            break;
                                    }
                                    break;
                                case XmlNodeType.Text:
                                    switch (element)
                                    {
                                        case "RadioInfo":
                                            switch (++textCount)
                                            {
                                                case 1:
                                                    radio_info.StationName = tr.Value;
                                                    break;
                                                case 2:
                                                    radio_info.RadioNr = tr.Value;
                                                    break;
                                                case 3:
                                                    radio_info.Freq = tr.Value;
                                                    break;
                                                case 4:
                                                    radio_info.TXFreq = tr.Value;
                                                    break;
                                                case 5:
                                                    radio_info.Mode = tr.Value;
                                                    break;
                                                case 6:
                                                    radio_info.OpCall = tr.Value;
                                                    break;
                                                case 7:
                                                    radio_info.IsRunning = tr.Value;
                                                    break;
                                                case 8:
                                                    radio_info.FocusEntry = tr.Value;
                                                    break;
                                                case 9:
                                                    radio_info.Antenna = tr.Value;
                                                    break;
                                                case 10:
                                                    radio_info.Rotors = tr.Value;
                                                    break;
                                                case 11:
                                                    radio_info.FocusRadioNr = tr.Value;
                                                    break;
                                                case 12:
                                                    radio_info.IsStereo = tr.Value;
                                                    break;
                                                case 13:
                                                    radio_info.ActiveRadioNr = tr.Value;
                                                    break;
                                            }
                                            break;
                                        case "contactinfo":
                                            switch (++textCount)
                                            {
                                                case 1:
                                                    contact_info.contestname = tr.Value;
                                                    break;
                                                case 2:
                                                    contact_info.contestnr = tr.Value;
                                                    break;
                                                case 3:
                                                    contact_info.timestamp = tr.Value;
                                                    break;
                                                case 4:
                                                    contact_info.mycall = tr.Value;
                                                    break;
                                                case 5:
                                                    contact_info.band = tr.Value;
                                                    break;
                                                case 6:
                                                    contact_info.rxfreq = tr.Value;
                                                    break;
                                                case 7:
                                                    contact_info.txfreq = tr.Value;
                                                    break;
                                                case 8:
                                                    contact_info.oprerator = tr.Value;
                                                    break;
                                                case 9:
                                                    contact_info.mode = tr.Value;
                                                    break;
                                                case 10:
                                                    contact_info.call = tr.Value;
                                                    break;
                                                case 11:
                                                    contact_info.countryprefix = tr.Value;
                                                    break;
                                                case 12:
                                                    contact_info.wpxprefix = tr.Value;
                                                    break;
                                                case 13:
                                                    contact_info.stationprefix = tr.Value;
                                                    break;
                                                case 14:
                                                    contact_info.continent = tr.Value;
                                                    break;
                                                case 15:
                                                    contact_info.snt = tr.Value;
                                                    break;
                                                case 16:
                                                    contact_info.sntnr = tr.Value;
                                                    break;
                                                case 17:
                                                    contact_info.rcv = tr.Value;
                                                    break;
                                                case 18:
                                                    contact_info.rcvnr = tr.Value;
                                                    break;
                                                case 19:
                                                    contact_info.gridsquare = tr.Value;
                                                    break;
                                                case 20:
                                                    contact_info.exchange1 = tr.Value;
                                                    break;
                                                case 21:
                                                    contact_info.section = tr.Value;
                                                    break;
                                                case 22:
                                                    contact_info.comment = tr.Value;
                                                    break;
                                                case 23:
                                                    contact_info.qth = tr.Value;
                                                    break;
                                                case 24:
                                                    contact_info.name = tr.Value;
                                                    break;
                                                case 25:
                                                    contact_info.power = tr.Value;
                                                    break;
                                                case 26:
                                                    contact_info.misctext = tr.Value;
                                                    break;
                                                case 27:
                                                    contact_info.zone = tr.Value;
                                                    break;
                                                case 28:
                                                    contact_info.prec = tr.Value;
                                                    break;
                                                case 29:
                                                    contact_info.ck = tr.Value;
                                                    break;
                                                case 30:
                                                    contact_info.ismultiplier1 = tr.Value;
                                                    break;
                                                case 31:
                                                    contact_info.ismultiplier2 = tr.Value;
                                                    break;
                                                case 32:
                                                    contact_info.ismultiplier3 = tr.Value;
                                                    break;
                                                case 33:
                                                    contact_info.points = tr.Value;
                                                    break;
                                                case 34:
                                                    contact_info.radionr = tr.Value;
                                                    break;
                                                case 35:
                                                    contact_info.RoverLocation = tr.Value;
                                                    break;
                                                case 36:
                                                    contact_info.RadioInterfaced = tr.Value;
                                                    break;
                                                case 38:
                                                    contact_info.NetworkedCompNr = tr.Value;
                                                    break;
                                                case 39:
                                                    contact_info.IsOriginal = tr.Value;
                                                    break;
                                                case 40:
                                                    contact_info.NetBiosName = tr.Value;
                                                    break;
                                                case 41:
                                                    contact_info.IsRunQSO = tr.Value;
                                                    break;
                                                case 42:
                                                    contact_info.Run1Run2 = tr.Value;
                                                    break;
                                                case 43:
                                                    contact_info.ContactType = tr.Value;
                                                    break;
                                                case 44:
                                                    contact_info.StationName = tr.Value;
                                                    break;
                                            }
                                            break;
                                    }
                                    break;
                            }

                        }

                        if (element == "RadioInfo")
                        {
                            int handle = Int32.Parse(radio_info.FocusEntry);
                            n1mm_handle = (IntPtr)handle;
                        }
                        */
        }

        private void ToggleFocusMasterTimer()
        {
            if (focus_master_mode != FocusMasterMode.None && n1mm_state != 1 && n1mm_delay != null)
            {
                n1mm_state = 3;
                n1mm_delay.Enabled = false;
                n1mm_delay.Enabled = true;
            }
        }

        /*
        private void PollPAPWR()
        {
            const float alpha = 0.90f;
            float rho = 0;
            float swr = 0;
            int high_swr_count = 0;
            bool swr_pass = false;

            while (chkPower.Checked)
            {
                if (mox)
                {
                    alex_fwd = computeAlexFwdPower(); //high power
                    alex_rev = computeRefPower();

                    if (current_hpsdr_model == HPSDRModel.ANAN200D)
                        drivepwr = computeOrionExciterPower();
                    else if (current_hpsdr_model == HPSDRModel.ANAN8000D ||
                        current_hpsdr_model == HPSDRModel.ORIONMKII)
                        drivepwr = computeOrionMkIIExciterPower();
                    else
                        drivepwr = computeExciterPower(); // low power

                    calfwdpower = CalibratedPAPower();

                    rho = (float)(Math.Sqrt(alex_rev / alex_fwd));
                    swr = (1.0f + rho) / (1.0f - rho);
                    if (alex_fwd == 0 && alex_rev == 0) swr = 1.0f;

                    if (alexpresent || apollopresent)
                    {
                        if (swrprotection && alex_fwd > 10.0f && (alex_fwd - alex_rev) < 1.0f) // open ant condition
                        {
                            swr = 50.0f;
                            // JanusAudio.SetSWRProtect(0.01f);
                            NetworkIO.swr_protect = 0.01f;
                            chkMOX.Checked = false;

                            MessageBox.Show("Please check your antenna connection.",
                            "High SWR condition detected",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Warning,
                            MessageBoxDefaultButton.Button1,
                            (MessageBoxOptions)0x40000); // MB_TOPMOST

                            goto end;
                        }
                    }
                    else
                    {
                        swr = 1.0f;
                        alex_fwd = 0;
                        alex_rev = 0;
                    }

                    average_drivepwr = alpha * average_drivepwr + (1.0f - alpha) * drivepwr;

                    if (chkTUN.Checked && disable_swr_on_tune && (alexpresent || apollopresent))
                    {
                        if (alex_fwd >= 1.0 && alex_fwd <= 10.0 && ptbPWR.Value <= 20)
                        {
                            swr_pass = true;
                        }
                        else swr_pass = false;
                    }

                    if (swr > 2.0 && swrprotection && !swr_pass)
                    {
                        high_swr_count++;
                        if (high_swr_count >= 4)
                        {
                            high_swr_count = 0;
                            // JanusAudio.SetSWRProtect(0.5f);
                            NetworkIO.swr_protect = 0.5f;
                            HighSWR = true;
                            // if (swr > 3) JanusAudio.SetSWRProtect(0.25f);
                            if (swr > 3) NetworkIO.swr_protect = 0.25f;
                            picDisplay.Invalidate();
                        }
                    }
                    else
                    {
                        high_swr_count = 0;
                        // JanusAudio.SetSWRProtect(1.0f);
                        NetworkIO.swr_protect = 1.0f;
                        HighSWR = false;
                        picDisplay.Invalidate();
                    }

                end:
                    swr_pass = false;
                    alex_swr = swr;
                }

                // volts_138 = computeHermesDCVoltage();

                Thread.Sleep(100);
                // roughly 132ms loop
            }

            alex_fwd = 0;
            alex_rev = 0;
            drivepwr = 0;
            calfwdpower = 0;
            alex_swr = 0;
            average_drivepwr = 0;
        }
        */

        private void PollPAPWR()
        {
            const float alpha = 0.90f;
            float rho = 0;
            float swr = 0;
            int high_swr_count = 0;
            bool swr_pass = false;

            while (chkPower.Checked)
            {
                if (mox)
                {
                    // computeFwdRevPower(out alex_fwd, out alex_rev);
                    alex_fwd = computeAlexFwdPower(); //high power
                    alex_rev = computeRefPower();

                    switch (current_hpsdr_model)
                    {
                        case HPSDRModel.ANAN200D:
                            drivepwr = computeOrionExciterPower();
                            break;
                        case HPSDRModel.ORIONMKII:
                        case HPSDRModel.ANAN7000D:
                        case HPSDRModel.ANAN8000D:
                            drivepwr = computeOrionMkIIExciterPower();
                            break;
                        default:
                            drivepwr = computeExciterPower(); // low power
                            break;
                    }

                    calfwdpower = CalibratedPAPower();
                    average_drivepwr = alpha * average_drivepwr + (1.0f - alpha) * drivepwr;

                    rho = (float)Math.Sqrt(alex_rev / alex_fwd);
                    if (float.IsNaN(rho) || float.IsInfinity(rho))
                        swr = 1.0f;
                    else
                        swr = (1.0f + rho) / (1.0f - rho);

                    if ((alex_fwd <= 2.0f && alex_rev <= 2.0f) || swr < 1.0f) swr = 1.0f;

                    if (alexpresent || apollopresent)
                    {
                        // in following 'if', K2UE recommends not checking open antenna for the 8000 model
                        // if (swrprotection && alex_fwd > 10.0f && (alex_fwd - alex_rev) < 1.0f)
                        //-W2PA Changed to allow 35w - some amplifier tuners need about 30w to reliably start working
                        if (swrprotection && alex_fwd > 35.0f && (alex_fwd - alex_rev) < 1.0f
                            && current_hpsdr_model != HPSDRModel.ANAN8000D) // open ant condition
                        {
                            swr = 50.0f;
                            NetworkIO.SWRProtect = 0.01f;
                            chkMOX.Checked = false;

                            MessageBox.Show("Please check your antenna connection.",
                            "High SWR condition detected",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Warning,
                            MessageBoxDefaultButton.Button1,
                            (MessageBoxOptions)0x40000); // MB_TOPMOST

                            goto end;
                        }
                    }
                    else
                    {
                        swr = 1.0f;
                        alex_fwd = 0;
                        alex_rev = 0;
                    }

                    if (chkTUN.Checked && disable_swr_on_tune && (alexpresent || apollopresent))
                    {
                        if (alex_fwd >= 1.0f && alex_fwd <= 35.0f && ptbPWR.Value <= 70)
                        {
                            swr_pass = true;
                        }
                        else swr_pass = false;
                    }

                    if (tx_xvtr_index >= 0 || hf_tr_relay)
                        swr_pass = true;

                    float alex_fwd_limit = 5.0f;
                    if (current_hpsdr_model == HPSDRModel.ANAN8000D)        // K2UE idea:  try to determine if Hi-Z or Lo-Z load
                        alex_fwd_limit = 2.0f * (float)ptbPWR.Value;        //    by comparing alex_fwd with power setting

                    if (swr > 2.0f && alex_fwd > alex_fwd_limit && swrprotection && !swr_pass)
                    {
                        high_swr_count++;
                        if (high_swr_count >= 4)
                        {
                            high_swr_count = 0;
                            NetworkIO.SWRProtect = (float)(2.0f / (swr + 1.0f));
                            HighSWR = true;
                        }
                    }
                    else
                    {
                        high_swr_count = 0;
                        NetworkIO.SWRProtect = 1.0f;
                        HighSWR = false;
                    }

                end:
                    swr_pass = false;
                    if (float.IsNaN(swr) || float.IsInfinity(swr) || swr < 1.0f)
                        alex_swr = 1.0f;
                    else
                        alex_swr = swr;
                }
                else if (high_swr) HighSWR = false;
                Thread.Sleep(1);
            }

            alex_fwd = 0;
            alex_rev = 0;
            drivepwr = 0;
            calfwdpower = 0;
            alex_swr = 0;
            average_drivepwr = 0;
            //  average_drvadc = 0;
            // average_fwdadc = 0;
            //  average_revadc = 0;

        }

        private double SWRScale(double ref_pow)
        {
            if (ref_pow < 19) return 1.0;
            else return Math.Max((ref_pow * -0.01774) + 1.137097, 0.25); // mx+b found using 80% at 19, 25% at 50
        }

        private void timer_cpu_meter_Tick(object sender, System.EventArgs e)
        {
            if ((anan7000dpresent || anan8000dpresent) && ANAN8000DLEDisplayVoltsAmps)
            {
                txtCPUMeter.Text = String.Format("{0:#0.0}V {1:#0.0}A", MKIIPAVolts, MKIIPAAmps);
            }
            else
            {
                if (cpu_usage != null)
                    txtCPUMeter.Text = String.Format("CPU%  {0:##0}", cpu_usage.NextValue());
            }
        }

        private void timer_peak_text_Tick(object sender, System.EventArgs e)
        {
            UpdatePeakText();
        }

        private int last_sec;		// for time of day clock
        private DateTime last_date;	// for date
        private void timer_clock_Tick(object sender, System.EventArgs e)
        {

            switch (current_datetime_mode)
            {
                case DateTimeMode.LOCAL:
                    DateTime date = DateTime.Now.Date;
                    if (date != last_date || txtDate.Text == "")
                    {
                        last_date = date;
                        txtDate.Text = DateTime.Now.ToShortDateString();
                    }

                    int sec = DateTime.Now.Second;
                    if (sec != last_sec)
                    {
                        last_sec = sec;
                        txtTime.Text = "LOC " + DateTime.Now.ToString("HH:mm:ss");
                    }
                    break;
                case DateTimeMode.UTC:
                    date = DateTime.UtcNow.Date;
                    if (date != last_date || txtDate.Text == "")
                    {
                        last_date = date;
                        txtDate.Text = DateTime.UtcNow.ToShortDateString();
                    }

                    sec = DateTime.UtcNow.Second;
                    if (sec != last_sec)
                    {
                        last_sec = sec;
                        txtTime.Text = "UTC " + DateTime.UtcNow.ToString("HH:mm:ss");
                    }
                    break;
                case DateTimeMode.OFF:
                    txtDate.Text = "";
                    txtTime.Text = "";
                    break;
            }
        }

        private void DelayedDisplayReset()
        {
            Thread.Sleep((int)((double)block_size1 / (double)sample_rate1 * 1000.0));
            Display.ResetRX1DisplayAverage();
            Display.ResetRX1DisplayPeak();
        }

        private bool tx_cal = false;
        public bool TXCal
        {
            get { return tx_cal; }
            set { tx_cal = value; }
        }

        #endregion

        #region Event Handlers
        // ======================================================
        // Event Handlers
        // ======================================================

        // Console Events

        private void Console_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text
            if (e.KeyChar == (char)Keys.Enter)
                btnHidden.Focus();
        }

        private void Console_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            regBand = 0;  // ke9ns add
            ToggleFocusMasterTimer();
            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text

            if (e.Shift == false && shift_down)
                shift_down = false;
        }

        private static byte regBand = 0; // ke9ns add (used for an extra right click + CTRL function: add bandstacking and hyperlinking)
        public static bool ALTM = false; // ke9ns add
        private void Console_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if ((e.Shift == true) && (callsignfocus == 0))// ke9ns add (check for CTRL key but not while callsign text box is in focus)
            {
                if (DXR == 0) DXR = 1; // show Spotters on panadapter (and now also display the world map with lat/long coords)
                else DXR = 0; // clear
            }
            else
            {
                //    DXR = 0; // show DX on panadapter
            }

            Debug.WriteLine("keypressedCODE " + e.KeyCode);

            if (e.Alt == true) // ke9ns add
            {
                switch (e.KeyCode)
                {
                    case Keys.M: // add to memory list

                        // Debug.WriteLine("ALT + M key ");

                        ALTM = true;
                        if (memoryForm == null || memoryForm.IsDisposed) memoryForm = new MemoryForm(this);
                        //  memoryForm.Show();
                        //  memoryForm.Focus();

                        memoryForm.MemoryRecordAdd_Click(memoryForm.MemoryRecordAdd, EventArgs.Empty); // 

                        break;

                }
            } // alt key + M

            ALTM = false;

            if (e.Control == true) // ke9ns add (check for CTRL key press to do a QRZ lookup) 
            {

                regBand = 1; // ke9ns add (used for an extra right click + CTRL function: add bandstacking and hyperlinking)


                if ((SpotControl.SP4_Active == 0) && (SpotControl.SP_Active > 2) && (SpotControl.DX_Index > 0))  // Do below if not in the middle of processing a DX spot, but DX spotting is Active
                {


                    int x = DX_X;
                    int y = DX_Y;
                    //======================================================================================================    

                    int xx = picDisplay.Width;  // size of picdisplay as user scales it to their screen
                    int yy = picDisplay.Height;

                    int xxx = 1000; // actuall unscaled size of map in picdisplay
                    int yyy = 507;

                    Debug.WriteLine(" width " + xx);
                    Debug.WriteLine(" Height " + yy);

                    Point p = picDisplay.PointToClient(Cursor.Position); // mouse cursor when you hit the ctrl key

                    int XX = 0;
                    int YY = 0;

                    float scalex = ((float)xxx / (float)xx);
                    XX = (int)((float)p.X * scalex);

                    float scaley = ((float)yyy / (float)yy);
                    YY = (int)((float)p.Y * scaley);

                    Debug.WriteLine(" unscalledX " + XX);
                    Debug.WriteLine(" unscalledY " + YY);

                    Debug.WriteLine(" cursor " + p);

                    int iii = 500;

                    for (int ii = 0; ii < SpotControl.DX_Index; ii++) // check all red dots on Panadapter
                    {

                        if ((SpotControl.DX_X[ii] > 5) && (SpotControl.DX_Y[ii] > 5) && (XX <= (SpotControl.DX_X[ii] + 5)) && (XX >= (SpotControl.DX_X[ii] - 5))
                            && (YY <= (SpotControl.DX_Y[ii] + 5)) && (YY >= (SpotControl.DX_Y[ii] - 5)))
                        {
                            Debug.WriteLine("Good trace ii " + ii);

                            SpotForm.DX_SELECTED = ii;    // ke9ns add to keep the dx spotter window always highlighted
                            SpotForm.DX_TEXT = SpotForm.textBox1.Text.Substring((SpotForm.DX_SELECTED * SpotForm.LineLength) + 16, 40);  // ke9ns add
                            SpotControl.Map_Last = 2;
                            SpotForm.processTCPMessage();
                            iii = ii;
                            break;
                        }
                        else
                        {
                            Debug.WriteLine("trace X " + SpotControl.DX_X[ii] + " Y " + SpotControl.DX_Y[ii]);
                        }

                    }

                    if (iii != 500) // only go to the DX spot freq if you found it directly up above in the for loop
                    {

                        int freq1 = SpotControl.DX_Freq[iii];

                        Debug.WriteLine("freq ii " + freq1);

                        if ((freq1 < 5000000) || ((freq1 > 6000000) && (freq1 < 8000000))) // check for bands using LSB
                        {
                            if (SpotForm.chkDXMode.Checked == true)
                            {
                                if (SpotControl.DX_Mode[iii] == 0) RX1DSPMode = DSPMode.LSB;
                                else if (SpotControl.DX_Mode[iii] == 1) RX1DSPMode = DSPMode.CWL;
                                else if (SpotControl.DX_Mode[iii] == 2) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 3) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 4) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 5) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 6) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 7) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 8) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 9) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 10) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 11) RX1DSPMode = DSPMode.FM;
                                else if (SpotControl.DX_Mode[iii] == 12) RX1DSPMode = DSPMode.LSB;
                                else if (SpotControl.DX_Mode[iii] == 13) RX1DSPMode = DSPMode.DIGL;
                                else if (SpotControl.DX_Mode[iii] == 14) RX1DSPMode = DSPMode.SAM;
                                else RX1DSPMode = DSPMode.LSB;

                            }
                            else
                            {
                                RX1DSPMode = DSPMode.LSB;
                            }

                        } // LSB
                        else
                        {
                            if (SpotForm.chkDXMode.Checked == true)
                            {

                                if (SpotControl.DX_Mode[iii] == 0) RX1DSPMode = DSPMode.USB;
                                else if (SpotControl.DX_Mode[iii] == 1) RX1DSPMode = DSPMode.CWU;
                                else if (SpotControl.DX_Mode[iii] == 2) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 3) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 4) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 5) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 6) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 7) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 8) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 9) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 10) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 11) RX1DSPMode = DSPMode.FM;
                                else if (SpotControl.DX_Mode[iii] == 12) RX1DSPMode = DSPMode.USB;
                                else if (SpotControl.DX_Mode[iii] == 13) RX1DSPMode = DSPMode.DIGU;
                                else if (SpotControl.DX_Mode[iii] == 14) RX1DSPMode = DSPMode.SAM;
                                else RX1DSPMode = DSPMode.USB;

                            }
                            else
                            {
                                RX1DSPMode = DSPMode.USB;
                            }

                        } // USB
                        VFOAFreq = (double)freq1 / 1000000; // convert to MHZ

                        //   Debug.WriteLine("freq " + VFOAFreq);

                        if (SpotForm.chkDXMode.Checked == true)
                        {

                            if (SpotControl.DX_Mode2[iii] != 0)
                            {

                                VFOBFreq = (double)(freq1 + SpotControl.DX_Mode2[iii]) / 1000000; // convert to MHZ
                                chkVFOSplit.Checked = true; // turn on  split

                                Debug.WriteLine("split here" + (freq1 + SpotControl.DX_Mode2[iii]));

                            }
                            else
                            {
                                chkVFOSplit.Checked = false; // turn off split

                            }


                        } // chkdxmode checked

                        /*   decided not to do it here, since you dont always want to be moving your antenna on everything you click on.
                                                if (setupForm.ROTOREnabled == true)   // ke9ns add send hygain rotor command to DDUtil via the CAT port setup in PowerSDR
                                                {
                                                    Debug.WriteLine("Red DOT BEAM HEADING TRANSMIT");

                                                    spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[iii].ToString().PadLeft(3, '0') + ";";
                                                    spotDDUtil_Rotor = ";";
                                                    spotDDUtil_Rotor = "AM1;";

                                                } //  
                        */

                        SpotControl.Map_Last = 2; // UPDATE SPOTS ON MAP


                        return;

                    } // if you found a red dot matching your dx spot list



                    //======================================================================================================

                    for (byte ii = 0; ii < DXK; ii++) // check all spot on Panadapter
                    {

                        if ((x >= DXX[ii]) && (x <= (DXX[ii] + (DXW[ii]) * 3 / 4)) && (y >= DXY[ii]) && (y <= (DXY[ii] + DXH[ii])))
                        {

                            var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                            DXtemp.Append(DXS[ii]);

                            try
                            {
                                System.Diagnostics.Process.Start(DXtemp.ToString());
                            }
                            catch
                            {
                                Debug.WriteLine("bad station");
                            }

                            return;

                        } // index
                        else if ((x >= DXX[ii] + (DXW[ii] * 3 / 4)) && (x <= (DXX[ii] + DXW[ii])) && (y >= DXY[ii]) && (y <= (DXY[ii] + DXH[ii]))) // check for rotor Beam heading 
                        {
                            Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display");

                            spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[ii].ToString().PadLeft(3, '0') + ";";
                            spotDDUtil_Rotor = ";";
                            spotDDUtil_Rotor = "AM1;";


                        } // check if you clicked on the last half of the call sign


                    } // for loop

                    if (chkRX2.Checked == true)  // check RX2 click
                    {
                        for (byte ii = 0; ii < DXK2; ii++)
                        {

                            if ((x >= DXX[ii + 50]) && (x <= (DXX[ii + 50] + DXW[ii + 50] * 3 / 4)) && (y >= DXY[ii + 50]) && (y <= (DXY[ii + 50] + DXH[ii + 50])))
                            {
                                var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                DXtemp.Append(DXS[ii + 50]);

                                try
                                {
                                    System.Diagnostics.Process.Start(DXtemp.ToString());
                                }
                                catch
                                {
                                    Debug.WriteLine("bad station");
                                }

                                break;

                            } // index
                            else if ((x <= (DXX[ii + 50] + DXW[ii + 50] * 3 / 4)) && (y >= DXY[ii + 50]) && (y <= (DXY[ii + 50] + DXH[ii + 50])))
                            {
                                Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display RX2");

                                spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[ii].ToString().PadLeft(3, '0') + ";";
                                spotDDUtil_Rotor = ";";
                                spotDDUtil_Rotor = "AM1;";


                            } // check if you clicked on the last half of the call sign


                        } // for loop

                    } // rx2 checked on 


                } //   if ((SpotControl.SP4_Active == 0) && (SpotControl.SP_Active > 2))



                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //ke9ns memory in Pan

                if ((SpotControl.SP6_Active == 1))
                {
                    int x = DX_X;
                    int y = DX_Y;


                    for (int ii = 0; ii < MMK3; ii++) // check all spot on Panadapter
                    {

                        if ((x >= MMX[ii]) && (x <= (MMX[ii] + MMW[ii])) && (y >= MMY[ii]) && (y <= (MMY[ii] + MMH[ii])))
                        {

                            //   var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                            //   DXtemp.Append(DXS1[ii]);


                            Debug.WriteLine("NAME === " + MMS[ii] + " index " + MMM[ii]);

                            try
                            {
                                //  System.Diagnostics.Process.Start(DXtemp.ToString());

                                changeComboFMMemory(MMM[ii]);
                            }
                            catch
                            {
                                Debug.WriteLine("bad station");
                            }

                            return;

                        } // index

                    } // for loop

                    //-------------------------------------------------------


                    if (chkRX2.Checked == true)  // check RX2 click
                    {
                        for (int ii = 0; ii < MMK4; ii++)
                        {

                            if ((x >= MMX[ii + 50]) && (x <= (MMX[ii + 50] + DXW[ii + 50])) && (y >= MMY[ii + 50]) && (y <= (MMY[ii + 50] + MMH[ii + 50])))
                            {
                                //  var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                //  DXtemp.Append(DXS1[ii + 50]);


                                try
                                {
                                    //  System.Diagnostics.Process.Start(DXtemp.ToString());
                                    changeComboFMMemory(MMM[ii]);
                                }
                                catch
                                {
                                    Debug.WriteLine("bad station");
                                }

                                break;

                            } // index


                        } // for loop

                    } // rx2 checked on 


                } // memory ON pAN ACTIVE

                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //ke9ns SWL lookup on google
                if ((SpotControl.SP1_Active == 1))
                {

                    // Debug.WriteLine("test====");

                    int x = DX_X;
                    int y = DX_Y;

                    for (byte ii = 0; ii < SXK; ii++)
                    {

                        if ((x >= SXX[ii]) && (x <= (SXX[ii] + SXW[ii])) && (y >= SXY[ii]) && (y <= (SXY[ii] + SXH[ii])))
                        {

                            var SXtemp = new StringBuilder("https://www.google.com/#q=");
                            SXtemp.Append(SXS[ii] + " shortwave");

                            try
                            {
                                System.Diagnostics.Process.Start(SXtemp.ToString());
                            }
                            catch
                            {
                                Debug.WriteLine("bad station");
                            }

                            return;

                        } // index

                    } // for loop

                } //  if ((SpotControl.SP3_Active == 1) && (SpotControl.SP1_Active ==1))



            } // e.control key
            else
            {

                regBand = 0;
            }

            SpotControl.Map_Last = 2; // force map update


            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text



            //==================================================================

            if (e.Shift == true && !shift_down)
                shift_down = true;

            if (e.Control == true && e.Shift == true)
            {
                switch (e.KeyCode)
                {
                    case Keys.A:
                        break;
                    case Keys.C:
                        break;
                    case Keys.D:
                        break;
                    case Keys.F:
                        break;
                    case Keys.I:
                        break;
                    case Keys.O:
                        break;
                    case Keys.P:
                        break;
                    case Keys.R:
                        break;
                    case Keys.S:
                        break;
                    case Keys.T:
                        break;
                    /*  case Keys.V:
                          if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
                          {
                              if (flex5000VUCalForm == null || flex5000VUCalForm.IsDisposed)
                                  flex5000VUCalForm = new FLEX5000VUCalForm(this);
                              flex5000VUCalForm.Show();
                              flex5000VUCalForm.Focus();
                          }
                          break;*/
                }
                shift_down = false;
            }
            else if (e.Control == true && e.Alt == true)
            {
                switch (e.KeyCode)
                {
                    case Keys.D4:
                        break;
                    case Keys.D:
                        break;
                    /*  case Keys.G:
                          CallCal1500TXImageComb();
                          break;*/
                    case Keys.R:
                        // DiversityForm diversityForm = new DiversityForm(this);
                        // diversityForm.Focus();
                        //  diversityForm.Show();
                        break;
                    case Keys.U:
                        // mnuUCB_Click(this, EventArgs.Empty);
                        break;
                    case Keys.F:
                        break;
                }
            }
            else if (!enable_kb_shortcuts)
            {
                e.Handled = true;
                return;
            }
            else if (e.Control && !e.Alt)		// control key is pressed
            {
                switch (e.KeyCode)
                {
                    // IK4JPN+ 9/11/2014
                    case Keys.F1: // CWX memory 1
                    case Keys.F2:
                    case Keys.F3:
                    case Keys.F4:
                    case Keys.F5:
                    case Keys.F6:
                    case Keys.F7:
                    case Keys.F8:
                    case Keys.F9: // CWX memory 9
                    case Keys.F10: // CWX memory stop
                        // Make sure we have an instance of the form
                        if (CWXForm == null || CWXForm.IsDisposed)
                        {
                            try
                            {
                                CWXForm = new CWX(this);
                            }
                            catch
                            {
                                e.Handled = true;
                                return;
                            }
                        }

                        int t_memory_num = 0;
                        if (e.KeyCode == Keys.F1) t_memory_num = 1;
                        else if (e.KeyCode == Keys.F2) t_memory_num = 2;
                        else if (e.KeyCode == Keys.F3) t_memory_num = 3;
                        else if (e.KeyCode == Keys.F4) t_memory_num = 4;
                        else if (e.KeyCode == Keys.F5) t_memory_num = 5;
                        else if (e.KeyCode == Keys.F6) t_memory_num = 6;
                        else if (e.KeyCode == Keys.F7) t_memory_num = 7;
                        else if (e.KeyCode == Keys.F8) t_memory_num = 8;
                        else if (e.KeyCode == Keys.F9) t_memory_num = 9;

                        if (t_memory_num == 0) CWXForm.CWXStop(); // stop memory
                        else CWXForm.StartQueue = t_memory_num; // tx memory N

                        e.Handled = true;
                        break;
                    // IK4JPN-
                    case Keys.Add:
                        if (ptbRF.Value != ptbRF.Maximum)
                        {
                            ptbRF.Value++;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Subtract:
                        if (ptbRF.Value != ptbRF.Minimum)
                        {
                            ptbRF.Value--;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Left:
                        ChangeTuneStepUp();
                        e.Handled = true;
                        break;
                    case Keys.Right:
                        ChangeTuneStepDown();
                        e.Handled = true;
                        break;
                    case Keys.Up:
                        Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, 120));
                        e.Handled = true;
                        break;
                    case Keys.Down:
                        Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, -120));
                        e.Handled = true;
                        break;
                    case Keys.A:
                        if (RX1AGCMode == AGCMode.FAST)
                            RX1AGCMode = AGCMode.FIXD;
                        else RX1AGCMode++;
                        break;
                    case Keys.B:
                        chkNR.Checked = !chkNR.Checked;
                        break;
                    case Keys.C:
                        btnMemoryQuickSave_Click(this, EventArgs.Empty);
                        break;
                    case Keys.D:
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANADAPTER:
                                comboDisplayMode.Text = "Spectrum";
                                break;
                            case DisplayMode.SPECTRUM:
                                comboDisplayMode.Text = "Panadapter";
                                break;
                            default:
                                comboDisplayMode.Text = "Panadapter";
                                break;
                        }
                        break;
                    case Keys.E:
                        if (ptbRF.Value != ptbRF.Minimum)
                        {
                            ptbRF.Value--;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.F:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        if (high - low > 10)
                        {
                            switch (rx1_dsp_mode)
                            {
                                case DSPMode.AM:
                                case DSPMode.SAM:
                                case DSPMode.DSB:
                                case DSPMode.FM:
                                case DSPMode.CWU:
                                case DSPMode.CWL:
                                    UpdateRX1Filters(low + 5, high - 5);
                                    break;
                                case DSPMode.USB:
                                case DSPMode.DIGU:
                                    UpdateRX1Filters(low, high - 10);
                                    break;
                                case DSPMode.LSB:
                                case DSPMode.DIGL:
                                    UpdateRX1Filters(low + 10, high);
                                    break;
                            }
                        }
                        break;
                    case Keys.L:
                        if (chkVFOLock.Enabled)
                            chkVFOLock.Checked = !chkVFOLock.Checked;
                        break;
                    case Keys.M:
                        if (chkMOX.Enabled)
                            chkMOX.Checked = !mox;
                        break;
                    case Keys.N:
                        chkANF.Checked = !chkANF.Checked;
                        break;
                    case Keys.P:
                        RX1PreampMode = (PreampMode)(((int)rx1_preamp_mode + 1) % (int)PreampMode.LAST);
                        break;
                    case Keys.R:
                        if (ptbRF.Value != ptbRF.Maximum)
                        {
                            ptbRF.Value++;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.S:
                        if (chkVFOSplit.Enabled)
                            chkVFOSplit.Checked = !chkVFOSplit.Checked;
                        break;
                    case Keys.V:
                        btnMemoryQuickRestore_Click(this, EventArgs.Empty);
                        break;
                    case Keys.W:
                        if (ptbCWSpeed.Value != ptbCWSpeed.Minimum)
                        {
                            ptbCWSpeed.Value--;
                            ptbCWSpeed_Scroll(this, EventArgs.Empty);
                        }
                        break;
                }
            }
            else if (e.Alt && !e.Control) // Alt key is pressed
            {
                switch (e.KeyCode)
                {
                    case Keys.Up:
                        if (ptbMic.Value != ptbMic.Maximum)
                        {
                            ptbMic.Value++;
                            ptbMic_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Down:
                        if (ptbMic.Value != ptbMic.Minimum)
                        {
                            ptbMic.Value--;
                            ptbMic_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Right:
                        if (ptbVOX.Value != ptbVOX.Maximum)
                        {
                            ptbVOX.Value++;
                            ptbVOX_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Left:
                        if (ptbVOX.Value != ptbVOX.Minimum)
                        {
                            ptbVOX.Value--;
                            ptbVOX_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.B:
                        chkNB.Checked = !chkNB.Checked;
                        break;
                    case Keys.D:
                        chkEnableMultiRX.Checked = !chkEnableMultiRX.Checked;
                        break;
                    case Keys.F:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.AM:
                            case DSPMode.SAM:
                            case DSPMode.DSB:
                            case DSPMode.FM:
                            case DSPMode.CWU:
                            case DSPMode.CWL:
                                UpdateRX1Filters(low - 5, high + 5);
                                break;
                            case DSPMode.USB:
                            case DSPMode.DIGU:
                                UpdateRX1Filters(low, high + 10);
                                break;
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                UpdateRX1Filters(low - 10, high);
                                break;
                        }
                        break;
                    case Keys.G:
                        btnVFOAtoB_Click(this, EventArgs.Empty);
                        break;
                    case Keys.H:
                        btnVFOBtoA_Click(this, EventArgs.Empty);
                        break;
                    case Keys.I:
                        btnFilterShiftReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.N:
                        chkDSPNB2.Checked = !chkDSPNB2.Checked;
                        break;
                    case Keys.P:
                        break;
                    case Keys.Q:
                        if (ptbCWSpeed.Value != ptbCWSpeed.Maximum)
                        {
                            ptbCWSpeed.Value++;
                            ptbCWSpeed_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.R:
                        btnRITReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.T:
                        chkTUN.Checked = !chkTUN.Checked;
                        break;
                    case Keys.V:
                        btnVFOSwap_Click(this, EventArgs.Empty);
                        break;
                    case Keys.Y:
                        btnXITReset_Click(this, EventArgs.Empty);
                        break;
                    case Keys.Z:
                        if (btnZeroBeat.Enabled)
                            btnZeroBeat_Click(this, EventArgs.Empty);
                        break;
                }
            }
            else if (!e.Alt && !e.Control)
            {
                if (this.ActiveControl is TextBoxTS || this.ActiveControl is NumericUpDownTS)
                {
                    if (e.KeyCode == Keys.Space)
                    {
                        btnHidden.Focus();
                        e.SuppressKeyPress = true;
                    }
                    else
                        return;
                }

                switch (e.KeyCode)
                {
                    case Keys.Space:
                        {
                            if (chkPower.Checked)
                            {
                                if (spacebar_ptt)
                                {
                                    current_ptt_mode = PTTMode.SPACE;
                                    chkMOX.Checked = !chkMOX.Checked;
                                    if (chkMOX.Checked)
                                    {
                                        if (chkVAC1.Checked && allow_space_bypass)
                                            Audio.VACBypass = true;
                                    }
                                    else
                                    {
                                        if (chkVAC1.Checked && Audio.VACBypass)
                                            Audio.VACBypass = false;
                                    }

                                    e.Handled = true;
                                }
                                else if (spacebar_vox)
                                {
                                    chkVOX.Checked = !chkVOX.Checked;
                                    e.Handled = true;
                                }
                                else if (spacebar_mic_mute)
                                {
                                    chkMicMute.Checked = !chkMicMute.Checked;
                                    e.Handled = true;
                                }
                                else if (spacebar_last_btn)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (!chkPower.Checked)
                                {
                                    if (spacebar_last_btn)
                                    {
                                        break;
                                    }
                                    else e.Handled = true;
                                }
                            }
                        }
                        break;
                    case Keys.Multiply:
                        chkMUT.Checked = !chkMUT.Checked;
                        break;
                    case Keys.Add:
                        if (ptbAF.Value != ptbAF.Maximum)
                        {
                            ptbAF.Value++;
                            ptbAF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Subtract:
                        if (ptbAF.Value != ptbAF.Minimum)
                        {
                            ptbAF.Value--;
                            ptbAF_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.K:
                        int low = (int)udFilterLow.Value;
                        int high = (int)udFilterHigh.Value;
                        int increment = 0;
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGL:
                            case DSPMode.DIGU:
                                increment = 10;
                                break;
                            default:
                                increment = 50;
                                break;
                        }
                        UpdateRX1Filters(low - increment, high - increment);
                        /*if(tbFilterShift.Value != tbFilterShift.Minimum)
                                tbFilterShift.Value--;
                            tbFilterShift_Scroll(this, EventArgs.Empty);*/
                        break;
                    case Keys.L:
                        low = (int)udFilterLow.Value;
                        high = (int)udFilterHigh.Value;
                        increment = 0;
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGL:
                            case DSPMode.DIGU:
                                increment = 10;
                                break;
                            default:
                                increment = 50;
                                break;
                        }
                        UpdateRX1Filters(low + increment, high + increment);
                        /*if(tbFilterShift.Value != tbFilterShift.Maximum)
                                tbFilterShift.Value++;
                            tbFilterShift_Scroll(this, EventArgs.Empty);*/
                        break;
                }

                if (e.KeyCode == key_tune_up_1)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 1.0;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_1)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 1.0;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_2)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.1;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_2)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.1;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_3)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.01;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_3)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.01;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_4)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_4)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_5)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.0001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_5)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.0001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_6)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.00001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_6)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.00001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_up_7)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq += 0.000001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_tune_down_7)
                {
                    double freq = Double.Parse(txtVFOAFreq.Text);
                    freq -= 0.000001;
                    VFOAFreq = freq;
                }
                else if (e.KeyCode == key_rit_up)
                {
                    udRIT.Value += udRIT.Increment;
                }
                else if (e.KeyCode == key_rit_down)
                {
                    udRIT.Value -= udRIT.Increment;
                }
                else if (e.KeyCode == key_xit_up)
                {
                    udXIT.Value += udXIT.Increment;
                }
                else if (e.KeyCode == key_xit_down)
                {
                    udXIT.Value -= udXIT.Increment;
                }
                else if (e.KeyCode == key_filter_up)
                {
                    if (rx1_filter == Filter.NONE)
                        return;
                    if (rx1_filter == Filter.VAR2)
                        RX1Filter = Filter.F1;
                    else
                        RX1Filter++;
                }
                else if (e.KeyCode == key_filter_down)
                {
                    if (rx1_filter == Filter.NONE)
                        return;
                    if (rx1_filter == Filter.F1)
                        RX1Filter = Filter.VAR2;
                    else
                        RX1Filter--;
                }
                else if (e.KeyCode == key_mode_up)
                {
                    switch (rx1_dsp_mode)
                    {
                        case DSPMode.LSB:
                            RX1DSPMode = DSPMode.USB;
                            break;
                        case DSPMode.USB:
                            RX1DSPMode = DSPMode.DSB;
                            break;
                        case DSPMode.DSB:
                            RX1DSPMode = DSPMode.CWL;
                            break;
                        case DSPMode.CWL:
                            RX1DSPMode = DSPMode.CWU;
                            break;
                        case DSPMode.CWU:
                            RX1DSPMode = DSPMode.FM;
                            break;
                        case DSPMode.FM:
                            RX1DSPMode = DSPMode.AM;
                            break;
                        case DSPMode.AM:
                            RX1DSPMode = DSPMode.SAM;
                            break;
                        case DSPMode.SAM:
                            RX1DSPMode = DSPMode.DIGL;
                            break;
                        case DSPMode.DIGL:
                            RX1DSPMode = DSPMode.DIGU;
                            break;
                        case DSPMode.DIGU:
                            RX1DSPMode = DSPMode.SPEC;
                            break;
                        case DSPMode.SPEC:
                            RX1DSPMode = DSPMode.DRM;
                            break;
                        case DSPMode.DRM:
                            RX1DSPMode = DSPMode.LSB;
                            break;
                    }
                }
                else if (e.KeyCode == key_mode_down)
                {
                    switch (rx1_dsp_mode)
                    {
                        case DSPMode.LSB:
                            RX1DSPMode = DSPMode.DRM;
                            break;
                        case DSPMode.USB:
                            RX1DSPMode = DSPMode.LSB;
                            break;
                        case DSPMode.DSB:
                            RX1DSPMode = DSPMode.USB;
                            break;
                        case DSPMode.CWL:
                            RX1DSPMode = DSPMode.DSB;
                            break;
                        case DSPMode.CWU:
                            RX1DSPMode = DSPMode.CWL;
                            break;
                        case DSPMode.FM:
                            RX1DSPMode = DSPMode.CWU;
                            break;
                        case DSPMode.AM:
                            RX1DSPMode = DSPMode.FM;
                            break;
                        case DSPMode.SAM:
                            RX1DSPMode = DSPMode.AM;
                            break;
                        case DSPMode.DIGL:
                            RX1DSPMode = DSPMode.SAM;
                            break;
                        case DSPMode.DIGU:
                            RX1DSPMode = DSPMode.DIGL;
                            break;
                        case DSPMode.SPEC:
                            RX1DSPMode = DSPMode.DIGU;
                            break;
                        case DSPMode.DRM:
                            RX1DSPMode = DSPMode.SPEC;
                            break;
                    }
                }
                else if (e.KeyCode == key_band_up && !(vfo_lock == CheckState.Checked))
                {
                    switch (rx1_band)
                    {
                        case Band.B160M:
                            if (band_160m_index == 2)
                            {
                                band_80m_index = 0;
                                radBand80_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand160_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B80M:
                            if (band_80m_index == 2)
                            {
                                band_60m_index = 0;
                                radBand60_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand80_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B60M:
                            if (band_60m_index == 4)
                            {
                                band_40m_index = 0;
                                radBand40_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand60_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B40M:
                            if (band_40m_index == 2)
                            {
                                band_30m_index = 0;
                                radBand30_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand40_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B30M:
                            if (band_30m_index == 2)
                            {
                                band_20m_index = 0;
                                radBand20_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand30_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B20M:
                            if (band_20m_index == 2)
                            {
                                band_17m_index = 0;
                                radBand17_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand20_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B17M:
                            if (band_17m_index == 2)
                            {
                                band_15m_index = 0;
                                radBand15_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand17_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B15M:
                            if (band_15m_index == 2)
                            {
                                band_12m_index = 0;
                                radBand12_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand15_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B12M:
                            if (band_12m_index == 2)
                            {
                                band_10m_index = 0;
                                radBand10_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand12_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B10M:
                            if (band_10m_index == 2)
                            {
                                band_6m_index = 0;
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand10_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B6M:
                            if (band_6m_index == 2)
                            {
                                if (XVTRPresent)
                                {
                                    band_2m_index = 0;
                                    radBand2_Click(this, EventArgs.Empty);
                                }
                                else
                                {
                                    band_wwv_index = 0;
                                    radBandWWV_Click(this, EventArgs.Empty);
                                }
                            }
                            else
                            {
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2M:
                            if (band_2m_index == 2)
                            {
                                band_wwv_index = 0;
                                radBandWWV_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBand2_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.WWV:
                            if (band_wwv_index == 4)
                            {
                                band_gen_index = 0;
                                radBandGEN_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandWWV_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.GEN:
                            if (band_gen_index == 4)
                            {
                                band_160m_index = 0;
                                radBand160_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN_Click(this, EventArgs.Empty);
                            }
                            break;
                    }
                }
                else if (e.KeyCode == key_band_down && vfo_lock != CheckState.Checked)
                {
                    switch (rx1_band)
                    {
                        case Band.B160M:
                            if (band_160m_index == 0)
                            {
                                band_gen_index = 4;
                                radBandGEN_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "160M";
                                band_160m_index = (band_160m_index + 1) % 3;
                                radBand160_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B80M:
                            if (band_80m_index == 0)
                            {
                                band_160m_index = 2;
                                radBand160_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "80M";
                                band_80m_index = (band_80m_index + 1) % 3;
                                radBand80_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B60M:
                            if (band_60m_index == 0)
                            {
                                band_80m_index = 2;
                                radBand80_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "60M";
                                band_60m_index = (band_60m_index + 3) % 5;
                                radBand60_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B40M:
                            if (band_40m_index == 0)
                            {
                                band_60m_index = 4;
                                radBand60_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "40M";
                                band_40m_index = (band_40m_index + 1) % 3;
                                radBand40_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B30M:
                            if (band_30m_index == 0)
                            {
                                band_40m_index = 2;
                                radBand40_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "30M";
                                band_30m_index = (band_30m_index + 1) % 3;
                                radBand30_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B20M:
                            if (band_20m_index == 0)
                            {
                                band_30m_index = 2;
                                radBand30_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "20M";
                                band_20m_index = (band_20m_index + 1) % 3;
                                radBand20_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B17M:
                            if (band_17m_index == 0)
                            {
                                band_20m_index = 2;
                                radBand20_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "17M";
                                band_17m_index = (band_17m_index + 1) % 3;
                                radBand17_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B15M:
                            if (band_15m_index == 0)
                            {
                                band_17m_index = 2;
                                radBand17_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "15M";
                                band_15m_index = (band_15m_index + 1) % 3;
                                radBand15_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B12M:
                            if (band_12m_index == 0)
                            {
                                band_15m_index = 2;
                                radBand15_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "12M";
                                band_12m_index = (band_12m_index + 1) % 3;
                                radBand12_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B10M:
                            if (band_10m_index == 0)
                            {
                                band_12m_index = 2;
                                radBand12_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "10M";
                                band_10m_index = (band_10m_index + 1) % 3;
                                radBand10_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B6M:
                            if (band_6m_index == 0)
                            {
                                band_10m_index = 2;
                                radBand10_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "6M";
                                band_6m_index = (band_6m_index + 1) % 3;
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B2M:
                            if (band_2m_index == 0)
                            {
                                band_6m_index = 2;
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "2M";
                                band_2m_index = (band_2m_index + 1) % 3;
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.WWV:
                            if (band_wwv_index == 0)
                            {
                                if (xvtr_present)
                                {
                                    band_2m_index = 2;
                                    radBand2_Click(this, EventArgs.Empty);
                                }
                                else
                                {
                                    band_6m_index = 2;
                                    radBand6_Click(this, EventArgs.Empty);
                                }
                            }
                            else
                            {
                                last_band = "WWV";
                                band_wwv_index = (band_wwv_index + 3) % 5;
                                radBandWWV_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.GEN:
                            if (band_gen_index == 0)
                            {
                                band_wwv_index = 4;
                                radBandWWV_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "GEN";
                                band_gen_index = (band_gen_index + 3) % 5;
                                radBandGEN_Click(this, EventArgs.Empty);
                            }
                            break;
                    }

                }
                else if (e.KeyCode == key_cw_dot)
                {

                }
                else if (e.KeyCode == key_cw_dash)
                {

                }
                else if (vfo_lock == CheckState.Checked || !quick_qsy)
                {
                    return;
                }
                else if ((int)e.KeyCode >= 48 && (int)e.KeyCode <= 57)
                {
                    if (small_lsd)
                    {
                        txtVFOAMSD.Visible = false;
                        txtVFOALSD.Visible = false;
                    }
                    txtVFOAFreq.Focus();
                    txtVFOAFreq.Text = ((int)(e.KeyCode - 48)).ToString();
                    txtVFOAFreq.Select(1, 0);
                }
                else if ((int)e.KeyCode >= 96 && (int)e.KeyCode <= 105)
                {
                    if (small_lsd)
                    {
                        txtVFOAMSD.Visible = false;
                        txtVFOALSD.Visible = false;
                    }
                    txtVFOAFreq.Focus();
                    txtVFOAFreq.Text = ((int)e.KeyCode - 96).ToString();
                    txtVFOAFreq.Select(1, 0);
                }
                else if (e.KeyCode.Equals(Keys.Decimal) ||
                    (separator == "." && e.KeyCode.Equals(Keys.OemPeriod)) ||
                    (separator == "," && e.KeyCode.Equals(Keys.Oemcomma)))
                {
                    if (small_lsd)
                    {
                        txtVFOAMSD.Visible = false;
                        txtVFOALSD.Visible = false;
                    }
                    txtVFOAFreq.Focus();
                    txtVFOAFreq.Text = separator;
                    txtVFOAFreq.Select(1, 0);
                }
            }
        }

        private bool DataFlowing = false;
        private byte[] id_bytes = new byte[1];
        private void chkPower_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkPower.Checked)
            {
                //chkPower.Text = "Stop";
                chkPower.BackColor = button_selected_color;
                txtVFOAFreq.ForeColor = vfo_text_light_color;
                txtVFOAMSD.ForeColor = vfo_text_light_color;
                txtVFOALSD.ForeColor = small_vfo_color;
                // cmaster.CMSetAudioMixerRX2();
                UpdateRXADCCtrl();
                UpdateDDCs(rx2_enabled);
                UpdateVFOASub();

                if (rx2_enabled)
                {
                    update_rx2_display = false;
                    chkRX2_CheckedChanged(this, EventArgs.Empty);
                }
                if (chkEnableMultiRX.Checked) chkEnableMultiRX_CheckedChanged(this, EventArgs.Empty);
                if (chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);

                // Hdw.DDSTuningWord = 0;
                fwc_dds_freq = 0.0f;
                rx2_dds_freq = 0.0f;

                //  if (ClickTuneDisplay)
                //    FWCDDSFreq = center_frequency;      // Start up frequency generator to centre frequency if CTUN - G3OQD

                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                comboDisplayMode_SelectedIndexChanged(this, EventArgs.Empty);
                // wjt added 
                if (PTTBitBangEnabled && serialPTT == null) // we are enabled but don't have port object 
                {
                    //Debug.WriteLine("Forcing property set on PTTBitBangEnabled"); 
                    PTTBitBangEnabled = true; // force creation of serial ptt 
                }

                Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;
                Audio.callback_return = 0;

                if (vac_enabled) VACEnabled = true;  //Don't trigger StopAudioIVAC if the VACs aren't needed now
                if (vac2_enabled) VAC2Enabled = true;
                Thread.Sleep(100); // wait for hardware to settle before starting audio (possible sample rate change)
                psform.ForcePS();

                if (attontx) NetworkIO.SetTxAttenData(tx_step_attenuator_by_band[(int)rx1_band]);
                else NetworkIO.SetTxAttenData(0);

                if (!Audio.Start())   // starts JanusAudio running
                {
                    chkPower.Checked = false;
                    return;
                }

                //if (draw_display_thread == null || !draw_display_thread.IsAlive)
                //{
                //    draw_display_thread = new Thread(new ThreadStart(RunDisplay));
                //    draw_display_thread.Name = "Draw Display Thread";
                //    draw_display_thread.Priority = ThreadPriority.BelowNormal;
                //    draw_display_thread.IsBackground = true;
                //    draw_display_thread.Start();
                //}

                if (multimeter_thread == null || !multimeter_thread.IsAlive)
                {
                    multimeter_thread = new Thread(new ThreadStart(UpdateMultimeter));
                    multimeter_thread.Name = "Multimeter Thread";
                    multimeter_thread.Priority = ThreadPriority.Lowest;
                    multimeter_thread.IsBackground = true;
                    multimeter_thread.Start();
                }

                if (rx2_enabled)
                {
                    if (rx2_meter_thread == null || !rx2_meter_thread.IsAlive)
                    {
                        rx2_meter_thread = new Thread(new ThreadStart(UpdateRX2MeterData));
                        rx2_meter_thread.Name = "RX2 Meter Thread";
                        rx2_meter_thread.Priority = ThreadPriority.Lowest;
                        rx2_meter_thread.IsBackground = true;
                        rx2_meter_thread.Start();
                    }

                    if (rx2_sql_update_thread == null || !rx2_sql_update_thread.IsAlive)
                    {
                        rx2_sql_update_thread = new Thread(new ThreadStart(UpdateRX2SQL));
                        rx2_sql_update_thread.Name = "Update RX2 SQL";
                        rx2_sql_update_thread.Priority = ThreadPriority.Normal;
                        rx2_sql_update_thread.IsBackground = true;
                        rx2_sql_update_thread.Start();
                    }
                }

                if (sql_update_thread == null || !sql_update_thread.IsAlive)
                {
                    sql_update_thread = new Thread(new ThreadStart(UpdateSQL));
                    sql_update_thread.Name = "Update SQL";
                    sql_update_thread.Priority = ThreadPriority.Normal;
                    sql_update_thread.IsBackground = true;
                    sql_update_thread.Start();
                }

                if (noise_gate_update_thread == null || !noise_gate_update_thread.IsAlive)
                {
                    noise_gate_update_thread = new Thread(new ThreadStart(UpdateNoiseGate));
                    noise_gate_update_thread.Name = "Update NoiseGate";
                    noise_gate_update_thread.Priority = ThreadPriority.Normal;
                    noise_gate_update_thread.IsBackground = true;
                    noise_gate_update_thread.Start();
                }

                if (vox_update_thread == null || !vox_update_thread.IsAlive)
                {
                    vox_update_thread = new Thread(new ThreadStart(UpdateVOX));
                    vox_update_thread.Name = "Update VOX";
                    vox_update_thread.Priority = ThreadPriority.Normal;
                    vox_update_thread.IsBackground = true;
                    vox_update_thread.Start();
                }

                if (poll_ptt_thread == null || !poll_ptt_thread.IsAlive)
                {
                    poll_ptt_thread = new Thread(new ThreadStart(PollPTT));
                    poll_ptt_thread.Name = "Poll PTT Thread";
                    poll_ptt_thread.Priority = ThreadPriority.Normal;
                    poll_ptt_thread.IsBackground = true;
                    poll_ptt_thread.Start();
                }

                if (poll_cw_thread == null || !poll_cw_thread.IsAlive)
                {
                    poll_cw_thread = new Thread(new ThreadStart(PollCW));
                    poll_cw_thread.Name = "Poll CW Thread";
                    poll_cw_thread.Priority = ThreadPriority.BelowNormal;
                    poll_cw_thread.IsBackground = true;
                    poll_cw_thread.Start();
                }

                if (poll_pa_pwr_thread == null || !poll_pa_pwr_thread.IsAlive)
                {
                    poll_pa_pwr_thread = new Thread(new ThreadStart(PollPAPWR));
                    poll_pa_pwr_thread.Name = "Poll PA PWR Thread";
                    poll_pa_pwr_thread.Priority = ThreadPriority.BelowNormal;
                    poll_pa_pwr_thread.IsBackground = true;
                    poll_pa_pwr_thread.Start();
                }

                if (poll_tx_inhibit_thead == null || !poll_tx_inhibit_thead.IsAlive)
                {
                    poll_tx_inhibit_thead = new Thread(new ThreadStart(PollTXInhibit));
                    poll_tx_inhibit_thead.Name = "Update Preamps Thread";
                    poll_tx_inhibit_thead.Priority = ThreadPriority.Normal;
                    poll_tx_inhibit_thead.IsBackground = true;
                    poll_tx_inhibit_thead.Start();
                }

                if ((display_volts_amps_thead == null || !display_volts_amps_thead.IsAlive) && (anan7000dpresent || anan8000dpresent))
                {
                    display_volts_amps_thead = new Thread(new ThreadStart(displayMKIIPAVoltsAmps));
                    display_volts_amps_thead.Name = "Update Volts Amps Thread";
                    display_volts_amps_thead.Priority = ThreadPriority.Normal;
                    display_volts_amps_thead.IsBackground = true;
                    display_volts_amps_thead.Start();
                }

                if (!rx_only)
                {
                    chkMOX.Enabled = true;
                    chkTUN.Enabled = true;
                }
                chkVFOLock.Enabled = true;
                chkVFOBLock.Enabled = true;
                timer_peak_text.Enabled = true;
                CurrentHPSDRHardware = NetworkIO.BoardID;
                UpdateDDCs(rx2_enabled);
                UpdateAAudioMixerStates();
                // cmaster.SetAAudioMixState((void*)0, 0, 0, true);
                // cmaster.SetAAudioMixState((void*)0, 0, 2, radio.GetDSPRX(1, 0).Active);
                // cmaster.SetAAudioMixState((void*)0, 0, 1, true);
                WDSP.SetChannelState(WDSP.id(0, 0), 1, 1);
                if (radio.GetDSPRX(0, 1).Active) WDSP.SetChannelState(WDSP.id(0, 1), 1, 1);
                if (radio.GetDSPRX(1, 0).Active) WDSP.SetChannelState(WDSP.id(2, 0), 1, 1);
                // cmaster.MONMixState = true;
                DataFlowing = true;
                SetupForm.UpdateGeneraHardware();
                SetMicGain();

                // Only enable QSK if firmware is at the proper level
                if (((CurrentHPSDRHardware == HPSDRHW.OrionMKII) && (NetworkIO.FWCodeVersion >= 17)
                    || (CurrentHPSDRHardware == HPSDRHW.Orion) && (NetworkIO.FWCodeVersion >= 17)))
                    chkQSK.Enabled = true;
                else
                {
                    chkQSK.Enabled = false;
                }
                if (RX1DSPMode != DSPMode.CWL && RX1DSPMode != DSPMode.CWU)
                    CWFWKeyer = false; // Disallow the FW to key the rig except in CW modes
            }
            else
            {
                DataFlowing = false;
                SetupForm.TestIMD = false;
                // cmaster.MONMixState = false;
                if (HaveSync == 1) //fix
                {
                    WDSP.SetChannelState(WDSP.id(0, 0), 0, 1);
                    if (radio.GetDSPRX(0, 1).Active) WDSP.SetChannelState(WDSP.id(0, 1), 0, 1);
                    if (radio.GetDSPRX(1, 0).Active) WDSP.SetChannelState(WDSP.id(2, 0), 0, 1);
                }
                // cmaster.SetAAudioMixState((void*)0, 0, 1, false);
                // cmaster.SetAAudioMixState((void*)0, 0, 2, false);
                // cmaster.SetAAudioMixState((void*)0, 0, 0, false);
                UpdateAAudioMixerStates();
                UpdateDDCs(rx2_enabled);

                chkMOX.Checked = false;
                chkMOX.Enabled = false;
                chkTUN.Checked = false;
                chkTUN.Enabled = false;

                if (serialPTT != null)  // let go of serial port
                {
                    serialPTT.Destroy();
                    serialPTT = null;
                }

                chkVFOLock.Enabled = false;

                chkPower.BackColor = SystemColors.Control;
                txtVFOAFreq.ForeColor = vfo_text_dark_color;
                txtVFOAMSD.ForeColor = vfo_text_dark_color;
                txtVFOALSD.ForeColor = vfo_text_dark_color;
                UpdateVFOASub();

                txtVFOBFreq.ForeColor = vfo_text_dark_color;
                txtVFOBMSD.ForeColor = vfo_text_dark_color;
                txtVFOBLSD.ForeColor = vfo_text_dark_color;
                txtVFOBBand.ForeColor = band_text_dark_color;

                timer_peak_text.Enabled = false;

                Display.ResetRX1DisplayAverage();
                Display.ResetRX1DisplayPeak();
                Display.ResetRX2DisplayAverage();
                Display.ResetRX2DisplayPeak();

                // CWPTT.Stop();

                Audio.callback_return = 2;
                NetworkIO.StopAudio();

                if (vac_enabled)
                {
                    ivac.SetIVACrun(0, 0);
                    ivac.StopAudioIVAC(0);
                }

                if (vac2_enabled)
                {
                    ivac.SetIVACrun(1, 0);
                    ivac.StopAudioIVAC(1);
                }

                //if (draw_display_thread != null)
                //{
                //    if (!draw_display_thread.Join(500))
                //        draw_display_thread.Abort();
                //}
                if (multimeter_thread != null)
                {
                    if (!multimeter_thread.Join(500))
                        multimeter_thread.Abort();
                }
                if (rx2_meter_thread != null)
                {
                    if (!rx2_meter_thread.Join(500))
                        rx2_meter_thread.Abort();
                }
                if (rx2_sql_update_thread != null)
                {
                    if (!rx2_sql_update_thread.Join(500))
                        rx2_sql_update_thread.Abort();
                }
                if (rx2_sql_update_thread != null)
                {
                    if (!rx2_sql_update_thread.Join(500))
                        rx2_sql_update_thread.Abort();
                }
                if (sql_update_thread != null)
                {
                    if (!sql_update_thread.Join(500))
                        sql_update_thread.Abort();
                }
                if (noise_gate_update_thread != null)
                {
                    if (!noise_gate_update_thread.Join(500))
                        noise_gate_update_thread.Abort();
                }
                if (vox_update_thread != null)
                {
                    if (!vox_update_thread.Join(500))
                        vox_update_thread.Abort();
                }
                if (poll_ptt_thread != null)
                {
                    if (!poll_ptt_thread.Join(500))
                        poll_ptt_thread.Abort();
                }
                if (poll_cw_thread != null)
                {
                    if (!poll_cw_thread.Join(500))
                        poll_cw_thread.Abort();
                }
                if (poll_pa_pwr_thread != null)
                {
                    if (!poll_pa_pwr_thread.Join(500))
                        poll_pa_pwr_thread.Abort();
                }
                if (poll_tx_inhibit_thead != null)
                {
                    if (!poll_tx_inhibit_thead.Join(500))
                        poll_tx_inhibit_thead.Abort();
                }
                if (display_volts_amps_thead != null)
                {
                    if (!display_volts_amps_thead.Join(500))
                        display_volts_amps_thead.Abort();
                }

            }

            panelVFOAHover.Invalidate();
            panelVFOBHover.Invalidate();
        }

        public void UpdateAAudioMixerStates()
        {
            int RX1 = 1 << WDSP.id(0, 0);
            int RX1S = 1 << WDSP.id(0, 1);
            int RX2 = 1 << WDSP.id(2, 0);
            int MON = 1 << WDSP.id(1, 0);
            int RX2EN;
            if (rx2_enabled)
                RX2EN = 1 << WDSP.id(2, 0);
            else
                RX2EN = 0;
            switch (current_hpsdr_model)
            {
                // 2-DDC Models
                case HPSDRModel.HERMES:
                case HPSDRModel.ANAN10E:
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN100B:
                case HPSDRModel.ANAN100:
                    if (chkPower.Checked)
                    {
                        if (!mox)
                        {
                            if (!diversity2)
                            {
                                if (!psform.PSEnabled)
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + RX2EN + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S + RX2EN);
                                }
                                else
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + RX2EN + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S + RX2EN);
                                }
                            }
                            else
                            {
                                if (!psform.PSEnabled)
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S);
                                }
                                else
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S);
                                }
                            }
                        }
                        else
                        {
                            if (!diversity2)
                            {
                                if (!psform.PSEnabled)
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + RX2EN + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S + RX2EN);
                                }
                                else
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, 0);
                                }
                            }
                            else
                            {
                                if (!psform.PSEnabled)
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S);
                                }
                                else
                                {
                                    cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, MON);
                                    cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, 0);
                                }
                            }
                        }
                        cmaster.MONMixState = true;
                    }
                    else
                    {
                        cmaster.MONMixState = false;
                        cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, 0);
                        cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, 0);
                    }
                    break;
                // 4-DDC Models
                case HPSDRModel.ANAN100D:
                case HPSDRModel.ANAN200D:
                case HPSDRModel.ORIONMKII:
                case HPSDRModel.ANAN7000D:
                case HPSDRModel.ANAN8000D:
                    if (chkPower.Checked)
                    {
                        // If POWER is ON, we always have data flow for RX1 and RX1-Sub; we have data flow for
                        // RX2 if 'rx2_enabled'; we always have data flow (MIC samples) for the TX MON.
                        cmaster.MONMixState = true;
                        cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, RX1 + RX1S + RX2EN + MON);
                        cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, RX1 + RX1S + RX2EN);
                    }
                    else
                    {
                        // If POWER is OFF, there is no data flow for anything.
                        // It's OK to turn something OFF again if it's already OFF.
                        cmaster.MONMixState = false;
                        cmaster.SetAAudioMixStates((void*)0, 0, RX1 + RX1S + RX2 + MON, 0);
                        cmaster.SetAntiVOXSourceStates(0, RX1 + RX1S + RX2, 0);
                    }
                    break;
                default:

                    break;
            }
        }

        public void comboDisplayMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            pause_DisplayThread = true;
            DisplayMode old_mode = Display.CurrentDisplayMode;

            switch (comboDisplayMode.Text)
            {
                case "Spectrum":
                    Display.CurrentDisplayMode = DisplayMode.SPECTRUM;
                    SpecDisplay = false;
                    UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    UpdateTXDisplayVars((int)udTXFilterLow.Value, (int)udTXFilterHigh.Value);
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 1, 0, 0, 0);
                    break;
                case "Panadapter":
                    Display.CurrentDisplayMode = DisplayMode.PANADAPTER;
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 0, 0, 0, 0);
                    CalcDisplayFreq();
                    CalcRX2DisplayFreq();
                    CalcTXDisplayFreq();
                    SpecDisplay = true;
                    break;
                case "Scope":
                    Display.CurrentDisplayMode = DisplayMode.SCOPE;
                    break;
                case "Scope2":
                    Display.CurrentDisplayMode = DisplayMode.SCOPE2;
                    break;
                case "Phase":
                    Display.CurrentDisplayMode = DisplayMode.PHASE;
                    break;
                case "Phase2":
                    Display.CurrentDisplayMode = DisplayMode.PHASE2;
                    break;
                case "Waterfall":
                    Display.CurrentDisplayMode = DisplayMode.WATERFALL;
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 0, 0, 0, 0);
                    CalcDisplayFreq();
                    CalcRX2DisplayFreq();
                    CalcTXDisplayFreq();
                    SpecDisplay = true;
                    break;
                case "Histogram":
                    Display.CurrentDisplayMode = DisplayMode.HISTOGRAM;
                    SpecDisplay = false;
                    UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    UpdateTXDisplayVars((int)udTXFilterLow.Value, (int)udTXFilterHigh.Value);
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 1, 0, 0, 0);
                    break;
                case "Panafall":
                    Display.CurrentDisplayMode = DisplayMode.PANAFALL;
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 0, 0, 0, 0);
                    CalcDisplayFreq();
                    CalcRX2DisplayFreq();
                    CalcTXDisplayFreq();
                    SpecDisplay = true;
                    break;
                case "Panascope":
                    Display.CurrentDisplayMode = DisplayMode.PANASCOPE;
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 0, 0, 0, 0);
                    CalcDisplayFreq();
                    CalcRX2DisplayFreq();
                    CalcTXDisplayFreq();
                    SpecDisplay = true;
                    UpdateTXSpectrumDisplayVars();
                    break;
                case "Spectrascope":
                    Display.CurrentDisplayMode = DisplayMode.SPECTRASCOPE;
                    SpecDisplay = false;
                    UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    UpdateTXDisplayVars((int)udTXFilterLow.Value, (int)udTXFilterHigh.Value);
                    WDSP.SetRXASpectrum(WDSP.id(0, 0), 1, 0, 0, 0);
                    break;
                case "Off":
                    Display.CurrentDisplayMode = DisplayMode.OFF;
                    break;
            }

            if (old_mode == DisplayMode.OFF && (draw_display_thread == null || !draw_display_thread.IsAlive))
            {
                draw_display_thread = new Thread(new ThreadStart(RunDisplay));
                draw_display_thread.Name = "Draw Display Thread";
                draw_display_thread.Priority = ThreadPriority.BelowNormal;
                draw_display_thread.IsBackground = true;
                draw_display_thread.Start();
            }

            switch (old_mode)
            {
                case DisplayMode.PANADAPTER:
                case DisplayMode.WATERFALL:
                case DisplayMode.PANAFALL:
                case DisplayMode.PANASCOPE:
                    switch (Display.CurrentDisplayMode)
                    {
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.WATERFALL:
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANASCOPE:
                            break;
                        default:
                            RX1Filter = rx1_filter; // reset filter display limits
                            TXFilterLow = TXFilterLow;
                            break;
                    }
                    break;
            }

            switch (Display.CurrentDisplayMode)
            {
                case DisplayMode.PHASE:
                case DisplayMode.PHASE2:
                case DisplayMode.SCOPE:
                case DisplayMode.SCOPE2:
                case DisplayMode.OFF:
                    // chkDisplayAVG.Enabled = false;
                    // if (chkDisplayAVG.Checked)
                    //  chkDisplayAVG.BackColor = SystemColors.Control;
                    //chkDisplayAVG.Checked = false;
                    //  chkDisplayPeak.Enabled = false;
                    // if (chkDisplayPeak.Checked)
                    //   chkDisplayPeak.BackColor = SystemColors.Control;
                    //chkDisplayPeak.Checked = false;
                    break;
                case DisplayMode.WATERFALL:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    //  btnZeroBeat.Enabled = true;
                    radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                    radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    if (current_display_engine == DisplayEngine.GDI_PLUS)
                    {
                        //  picWaterfall.SendToBack();
                        //  picWaterfall.Hide();
                        picDisplay.BringToFront();
                        //  picDisplay.Show();
                    }
                    else
                    {
                        //  picDisplay.SendToBack();
                        //  picDisplay.Hide();
                        picWaterfall.BringToFront();
                        //  picWaterfall.Show();
                    }

                    break;
                case DisplayMode.PANADAPTER:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    // btnZeroBeat.Enabled = chkDisplayAVG.Checked;
                    radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                    radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    //  if (current_display_engine == DisplayEngine.GDI_PLUS)
                    {
                        // picWaterfall.SendToBack();
                        // picWaterfall.Hide();
                        picDisplay.BringToFront();
                        // picDisplay.Show();
                    }
                    // else
                    // {
                    //  picDisplay.SendToBack();
                    //  picDisplay.Hide();
                    // picWaterfall.BringToFront();
                    //  picWaterfall.Show();
                    //  }
                    break;
                case DisplayMode.SPECTRUM:
                case DisplayMode.HISTOGRAM:
                case DisplayMode.SPECTRASCOPE:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    //  btnZeroBeat.Enabled = chkDisplayAVG.Checked;
                    if (rx1_dsp_mode != DSPMode.SPEC)
                    {
                        radio.GetDSPRX(0, 0).SpectrumPreFilter = false;
                        radio.GetDSPRX(1, 0).SpectrumPreFilter = false;
                    }
                    else
                    {
                        radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                        radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    }
                    RX1Filter = rx1_filter;
                    break;
                case DisplayMode.PANAFALL:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    //  btnZeroBeat.Enabled = chkDisplayAVG.Checked;
                    radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                    radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    break;
                case DisplayMode.PANASCOPE:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    btnZeroBeat.Enabled = chkDisplayAVG.Checked;
                    radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                    radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    break;
                default:
                    chkDisplayAVG.Enabled = true;
                    if (chkDisplayAVG.Checked)
                        chkDisplayAVG.BackColor = button_selected_color;
                    chkDisplayPeak.Enabled = true;
                    if (chkDisplayPeak.Checked)
                        chkDisplayPeak.BackColor = button_selected_color;
                    //  btnZeroBeat.Enabled = chkDisplayAVG.Checked;
                    if (rx1_dsp_mode != DSPMode.SPEC)
                    {
                        radio.GetDSPRX(0, 0).SpectrumPreFilter = false;
                        radio.GetDSPRX(1, 0).SpectrumPreFilter = false;
                    }
                    else
                    {
                        radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                        radio.GetDSPRX(1, 0).SpectrumPreFilter = true;
                    }
                    break;
            }

            /*   if (chkDisplayAVG.Checked)
               {
                   switch (Display.CurrentDisplayMode)
                   {
                       case DisplayMode.PANADAPTER:
                       case DisplayMode.HISTOGRAM:
                       case DisplayMode.SPECTRUM:
                       case DisplayMode.WATERFALL:
                       case DisplayMode.PANAFALL:
                       case DisplayMode.PANASCOPE:
                       case DisplayMode.SPECTRASCOPE:
                           btnZeroBeat.Enabled = true;
                           break;
                       default:
                           btnZeroBeat.Enabled = false;
                           break;
                   }
               } */

            was_panadapter = false;
            was_waterfall = false;
            UpdateRX1DisplayOffsets();

            if (comboDisplayMode.Focused)
                btnHidden.Focus();
            pause_DisplayThread = false;
        }

        private void chkBIN_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkBIN.Checked) chkBIN.BackColor = button_selected_color;
            else chkBIN.BackColor = SystemColors.Control;
            radio.GetDSPRX(0, 0).BinOn = chkBIN.Checked;
            radio.GetDSPRX(0, 1).BinOn = chkBIN.Checked;
            BINToolStripMenuItem.Checked = chkBIN.Checked;
        }

        private void comboAGC_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboAGC.SelectedIndex < 0) return;
            radio.GetDSPRX(0, 0).RXAGCMode = (AGCMode)comboAGC.SelectedIndex;
            radio.GetDSPRX(0, 1).RXAGCMode = (AGCMode)comboAGC.SelectedIndex;

            // set whether custom controls are active
            switch ((AGCMode)comboAGC.SelectedIndex)
            {
                case AGCMode.LONG:
                    SetupForm.CustomRXAGCEnabled = false;
                    //  SetupForm.RXAGCAttack = 2;
                    //  SetupForm.RXAGCHang = 2000;
                    // SetupForm.RXAGCDecay = 2000;
                    radio.GetDSPRX(0, 0).RXAGCHang = 2000;
                    radio.GetDSPRX(0, 1).RXAGCHang = 2000;
                    radio.GetDSPRX(0, 0).RXAGCDecay = 2000;
                    radio.GetDSPRX(0, 1).RXAGCDecay = 2000;
                    //comboAGC.BackColor = SystemColors.Window;
                    // SetupForm.AGCHangThreshold = 0;
                    //DttSP.SetRXAGCHangLevel(0, 0, 0.0);
                    SetupForm.tbDSPAGCHangThreshold.Enabled = true;
                    SetupForm.SetAGCHangThres = SetupForm.tbDSPAGCHangThreshold.Value;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Long (Attack 2ms, Hang 2000ms, Decay 2000ms)");
                    break;
                case AGCMode.SLOW:
                    SetupForm.CustomRXAGCEnabled = false;
                    // SetupForm.RXAGCAttack = 2;
                    // SetupForm.RXAGCHang = 1000;
                    // SetupForm.RXAGCDecay = 500;
                    radio.GetDSPRX(0, 0).RXAGCHang = 1000;
                    radio.GetDSPRX(0, 1).RXAGCHang = 1000;
                    radio.GetDSPRX(0, 0).RXAGCDecay = 500;
                    radio.GetDSPRX(0, 1).RXAGCDecay = 500;
                    //SetupForm.AGCHangThreshold = 0;
                    //DttSP.SetRXAGCHangLevel(0, 0, 0.0);
                    SetupForm.tbDSPAGCHangThreshold.Enabled = true;
                    SetupForm.SetAGCHangThres = SetupForm.tbDSPAGCHangThreshold.Value;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Slow (Attack 2ms, Hang 1000ms, Decay 500ms)");
                    //comboAGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.MED:
                    SetupForm.CustomRXAGCEnabled = false;
                    //   SetupForm.RXAGCAttack = 2;
                    //   SetupForm.RXAGCHang = 5000; // OFF
                    //   SetupForm.RXAGCDecay = 250;
                    radio.GetDSPRX(0, 0).RXAGCHang = 0;
                    radio.GetDSPRX(0, 1).RXAGCHang = 0;
                    radio.GetDSPRX(0, 0).RXAGCDecay = 250;
                    radio.GetDSPRX(0, 1).RXAGCDecay = 250;
                    // SetupForm.AGCHangThreshold = 100;
                    //DttSP.SetRXAGCHangLevel(0, 0, 100.0);
                    //DttSP.SetRXAGCHangThreshold(0, 0, 100);
                    WDSP.SetRXAAGCHangThreshold(WDSP.id(0, 0), 100);
                    //SetupForm.SetAGCHangThres();
                    SetupForm.tbDSPAGCHangThreshold.Enabled = false;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Medium (Attack 2ms, Hang OFF, Decay 250ms)");
                    //comboAGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.FAST:
                    SetupForm.CustomRXAGCEnabled = false;
                    // SetupForm.RXAGCAttack = 2;
                    // SetupForm.RXAGCHang = 5000; // OFF
                    // SetupForm.RXAGCDecay = 50;
                    radio.GetDSPRX(0, 0).RXAGCHang = 0;
                    radio.GetDSPRX(0, 1).RXAGCHang = 0;
                    radio.GetDSPRX(0, 0).RXAGCDecay = 50;
                    radio.GetDSPRX(0, 1).RXAGCDecay = 50;
                    //SetupForm.AGCHangThreshold = 100;
                    // DttSP.SetRXAGCHangLevel(0, 0, 100.0);
                    //DttSP.SetRXAGCHangThreshold(0, 0, 100);
                    WDSP.SetRXAAGCHangThreshold(WDSP.id(0, 0), 100);
                    SetupForm.tbDSPAGCHangThreshold.Enabled = false;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Fast (Attack 2ms, Hang OFF, Decay 50ms)");
                    //comboAGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.CUSTOM:
                    SetupForm.CustomRXAGCEnabled = true;
                    // SetupForm.AGCHangThreshold = 0;
                    // DttSP.SetRXAGCHangLevel(0, 0, 0.0);
                    SetupForm.tbDSPAGCHangThreshold.Enabled = true;
                    SetupForm.SetAGCHangThres = SetupForm.tbDSPAGCHangThreshold.Value;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Custom - Set specifics in Setup Form -> DSP -> AGC/ALC");
                    //comboAGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.FIXD:
                    SetupForm.CustomRXAGCEnabled = false;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Fixed - Set gain with AGC-T control above");
                    //comboAGC.BackColor = Color.Orange;
                    break;
            }

            // set RF control to Max or Fixed gain depending on mode
            switch ((AGCMode)comboAGC.SelectedIndex)
            {
                case AGCMode.FIXD:
                    RF = SetupForm.AGCFixedGain;
                    ptbRF_Scroll(this, EventArgs.Empty);
                    break;
                default:
                    RF = SetupForm.AGCMaxGain;
                    ptbRF_Scroll(this, EventArgs.Empty);
                    break;
            }

            if (RX1DSPMode != DSPMode.CWL && RX1DSPMode != DSPMode.CWU)
                non_qsk_agc = (AGCMode)comboAGC.SelectedIndex;

            if (comboAGC.Focused)
                btnHidden.Focus();
        }

        //class AutoClosingMessageBox  // useful for debugging
        //{
        //    private static System.Threading.Timer Tmr;

        //    public static void Show(Form Parent, string text, int timeout)
        //    {
        //        Form mbx = new Form();
        //        Label LblMessage = new Label();

        //        #region InitializeComponent
        //        mbx.Size = new System.Drawing.Size(308, 185);
        //        mbx.MaximizeBox = false;
        //        mbx.MinimizeBox = false;
        //        mbx.ShowIcon = false;
        //        mbx.ShowInTaskbar = false;
        //        mbx.ControlBox = false;
        //        mbx.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
        //        mbx.FormBorderStyle = FormBorderStyle.None;
        //        mbx.StartPosition = FormStartPosition.CenterScreen;

        //        #region Center on Parent StartPosition
        //        if (Parent != null)
        //        {
        //            mbx.BackColor = Parent.BackColor;
        //            mbx.StartPosition = FormStartPosition.Manual;
        //            int X = Parent.Location.X + ((Parent.Width - mbx.Width) / 2);
        //            int Y = Parent.Location.Y + ((Parent.Height - mbx.Height) / 2);
        //            mbx.Location = new System.Drawing.Point(X, Y);
        //        }
        //        #endregion

        //        //
        //        //LblMessage
        //        //
        //        LblMessage.Location = new System.Drawing.Point(12, 23);
        //        LblMessage.AutoSize = false;
        //        LblMessage.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        //        LblMessage.Font = new System.Drawing.Font("Microsoft Sans Serif", 17.0F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(162)));
        //        //LblMessage.ForeColor = mbx.BackColor.;
        //        LblMessage.BorderStyle = BorderStyle.FixedSingle;
        //        LblMessage.Text = text;
        //        LblMessage.Dock = DockStyle.Fill;

        //        mbx.Controls.Add(LblMessage);
        //        #endregion

        //        Tmr = new System.Threading.Timer(new System.Threading.TimerCallback(Tmr_Tick), mbx, timeout, 0);
        //        mbx.ShowDialog();
        //    }
        //    private static void Tmr_Tick(object obj)
        //    {
        //        Tmr.Dispose();
        //        if (obj is Form)
        //        {
        //            if (((Form)obj).InvokeRequired)
        //            {
        //                ((Form)obj).Invoke(new System.Action<Form>(InvokeMbx), new object[] { ((Form)obj) });
        //            }
        //            else InvokeMbx((Form)obj);
        //        }
        //    }
        //    private static void InvokeMbx(Form mbx)
        //    {
        //        mbx.Close();
        //    }
        //}

        private void Console_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.Hide(); 
            Audio.callback_return = 2;
            CATEnabled = false;

            if (chkPower.Checked == true)  // If we're quitting without first clicking off the "Power" button            
                chkPower.Checked = false;

            MemoryList.Save();
            SetupForm.SaveNotchesToDatabase();

            Thread.Sleep(100);

            SaveState();

            if (SetupForm != null) SetupForm.Hide();
            if (CWXForm != null) CWXForm.Hide();
            if (EQForm != null) EQForm.Hide();
            if (XVTRForm != null) XVTRForm.Hide();
            if (memoryForm != null) memoryForm.Hide();
            if (diversityForm != null) diversityForm.Hide();
            //  if (preSelForm != null) preSelForm.Hide();
            if (psform != null) psform.Hide();
            if (cmaster.Getwb(0).WBdisplay != null) cmaster.Hidewb(0);

            if (CWXForm != null) CWXForm.Close();
            if (SetupForm != null) SetupForm.SaveOptions();
            if (EQForm != null) EQForm.Close();
            if (memoryForm != null) memoryForm.Close();
            if (diversityForm != null) diversityForm.Close();
            //  if (preSelForm != null) preSelForm.Close();
            if (psform != null) psform.Close();
            if (cmaster.Getwb(0).WBdisplay != null) cmaster.Closewb(0);
            //cmaster.close_rxa();
        }

        private void comboPreamp_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            //if (initializing) return;
            PreampMode mode = PreampMode.FIRST;
            bool exit = false;

            switch (comboPreamp.Text)
            {
                case "-20dB":
                    mode = PreampMode.HPSDR_OFF;
                    // comboPreamp.Text = "-20dB";
                    // if (!rx2_preamp_present)
                    //  comboRX2Preamp.Text = "-20dB";
                    break;

                // case "Low":
                // case "Med":
                // case "High":
                case "0dB":
                    mode = PreampMode.HPSDR_ON;
                    // comboPreamp.Text = "0dB";
                    // if (!rx2_preamp_present)
                    //   comboRX2Preamp.Text = "0dB";
                    break;

                case "-10dB":
                    mode = PreampMode.SA_MINUS10;
                    break;
                case "-30dB":
                    mode = PreampMode.SA_MINUS30;
                    break;

                case "-10db":
                    mode = PreampMode.HPSDR_MINUS10;
                    break;

                case "-20db":
                    mode = PreampMode.HPSDR_MINUS20;
                    break;

                case "-30db":
                    mode = PreampMode.HPSDR_MINUS30;
                    break;

                case "-40db":
                    mode = PreampMode.HPSDR_MINUS40;
                    break;

                case "-50db":
                    mode = PreampMode.HPSDR_MINUS50;
                    break;

                default:
                    exit = true;
                    break;
            }

            if (comboPreamp.Focused)
                btnHidden.Focus();

            if (exit) return;

            RX1PreampMode = mode;

            if (!mox)
            {
                update_preamp = true;
                UpdatePreamps();
            }
        }

        private void comboRX2Preamp_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            //if (initializing) return;
            PreampMode mode = PreampMode.FIRST;
            bool exit = false;

            switch (comboRX2Preamp.Text)
            {
                case "-20dB":
                    mode = PreampMode.HPSDR_OFF;
                    // comboRX2Preamp.Text = "-20dB";
                    break;
                case "0dB":
                    mode = PreampMode.HPSDR_ON;
                    // comboRX2Preamp.Text = "0dB";
                    break;
                case "-10dB":
                    mode = PreampMode.HPSDR_MINUS10;
                    break;
                case "-30dB":
                    mode = PreampMode.HPSDR_MINUS30;
                    break;
                default:
                    exit = true;
                    break;
            }

            if (comboRX2Preamp.Focused)
                btnHidden.Focus();

            if (exit) return;

            RX2PreampMode = mode;
            if (!mox)
            {
                //update_preamp_mode = false;
                update_preamp = true;
                UpdatePreamps();
            }
        }

        private void chkMUT_CheckedChanged(object sender, System.EventArgs e)
        {

            if (chkMUT.Checked)
            {
                Audio.MuteRX1 = true;
                //  radio.GetDSPRX(0, 0).RXOutputGain = 0.0;
                chkMUT.BackColor = button_selected_color;
                lblRX1MuteVFOA.Text = "MUTE";
            }
            else
            {
                Audio.MuteRX1 = false;
                radio.GetDSPRX(0, 0).RXOutputGain = (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum;
                ptbAF_Scroll(this, EventArgs.Empty);
                chkMUT.BackColor = SystemColors.Control;
                lblRX1MuteVFOA.Text = "";
            }
            if (chkMUT.Focused)
                btnHidden.Focus();

            if (path_Illustrator != null)
                path_Illustrator.pi_Changed();
        }

        public bool ModelIsHPSDRorHermes()
        {
            if (current_hpsdr_model == HPSDRModel.HPSDR)
            {
                return true;
            }
            if (current_hpsdr_model == HPSDRModel.HERMES)
            {
                return true;
            }
            return false;
        }

        private void ptbPWR_Scroll(object sender, System.EventArgs e)
        {
            lblPWR.Text = "Drive:  " + ptbPWR.Value.ToString();

            if (SetupForm == null)
                return;

            float val = (float)ptbPWR.Value;
            Band b = tx_band;

            int new_pwr = ptbPWR.Value;
            power_by_band[(int)tx_band] = new_pwr;
            if ((!tuning || xvtr_tune_power) && tx_xvtr_index >= 0)
            {
                int power = ptbPWR.Value;
                if (ptbPWR.Focused)
                    XVTRForm.SetPower(tx_xvtr_index, power);
                b = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), tx_xvtr_index, true, current_region, true);
            }

            double target_dbm = 10 * (double)Math.Log10((double)val * 1000);
            double gbb = 0.0;
            if (tx_xvtr_index >= 0)
            {
                Band lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), tx_xvtr_index, true, current_region, true);
                gbb = GainByBand(lo_band);
            }
            else
            {
                gbb = GainByBand(TXBand);
            }
            target_dbm -= gbb;

            double target_volts = Math.Sqrt(Math.Pow(10, target_dbm * 0.1) * 0.05);		// E = Sqrt(P * R) 

            if (ptbPWR.Value == 0)
            {
                Audio.RadioVolume = 0.0;
                if (chkTUN.Checked)
                    radio.GetDSPTX(0).TXPostGenRun = 0;
            }
            else
            {
                if (chkTUN.Checked)
                    radio.GetDSPTX(0).TXPostGenRun = 1;
                Audio.RadioVolume = (double)Math.Min((target_volts / 0.8), 1.0);
            }

            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbPWR.Focus();
            }

            double pct = Convert.ToDouble(new_pwr) / 100.0;  //-W2PA Send LED update back to Behringer
            if (pct <= 0.0) pct = 0.0;
            else if (pct < 1.0 / 15.0) pct = 1.0 / 15.0; //-W2PA Don't let the last LED go out until zero
            Midi2Cat.SendUpdateToMidi(CatCmd.DriveLevel, pct);

            //-W2PA Update LEDs on Behringer MIDI controller mini wheel
            pct = Convert.ToDouble(ptbPWR.Value - ptbPWR.Minimum) / Convert.ToDouble(ptbPWR.Maximum - ptbPWR.Minimum);
            Midi2Cat.SendUpdateToMidi(CatCmd.DriveLevel_inc, pct);
        }

        private void ptbAF_Scroll(object sender, System.EventArgs e)
        {
            //udAF.Value = ptbAF.Value;
            lblAF.Text = "Master AF:  " + ptbAF.Value.ToString();
            // lblRX1Vol.Text = "Vol";

            if (mox && !chkMON.Checked)
            {
                // monitor is muted
                // Audio.MonitorVolume = 0.0;
            }
            else
            {
                Audio.MonitorVolume = ptbAF.Value / 100.0;
            }

            if (!MOX) RXAF = ptbAF.Value;
            else TXAF = ptbAF.Value;


            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbAF.Focus();
            }

            //if (ptbAF.Focused) btnHidden.Focus();
        }

        private void ptbRF_Scroll(object sender, System.EventArgs e)
        {
            //lblRF.Text = "AGC-T:  "+ptbRF.Value.ToString();

            switch (RX1AGCMode)
            {
                case AGCMode.FIXD:
                    lblRF.Text = "Fixed Gain:  " + ptbRF.Value.ToString();
                    if (SetupForm != null) SetupForm.AGCFixedGain = ptbRF.Value;
                    break;
                default:
                    lblRF.Text = "AGC Gain:  " + ptbRF.Value.ToString();
                    if (SetupForm != null) SetupForm.AGCMaxGain = ptbRF.Value;
                    break;
            }

            rx1_agct_by_band[(int)rx1_band] = ptbRF.Value;
            // if (ptbRF.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRF.Focus();
            }

            //-W2PA Update LEDs on Behringer MIDI controller
            double pct = Convert.ToDouble(ptbRF.Value - ptbRF.Minimum) / Convert.ToDouble(ptbRF.Maximum - ptbRF.Minimum);
            Midi2Cat.SendUpdateToMidi(CatCmd.AGCLevel_inc, pct);
        }

        private void chkMicMute_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkMicMute.Checked)
                ptbMic_Scroll(this, EventArgs.Empty);
            else Audio.MicPreamp = 0.0;
        }

        private void ptbMic_Scroll(object sender, System.EventArgs e)
        {
            // if (ModelIsHPSDRorHermes())
            // {
            ptbMic.Minimum = mic_gain_min;
            ptbMic.Maximum = mic_gain_max;
            lblMicVal.Text = ptbMic.Value.ToString() + " dB";
            if (radio.GetDSPTX(0).CurrentDSPMode != DSPMode.FM)
            {
                double gain_db = (double)ptbMic.Value;
                if (chkMicMute.Checked == false) chkMicMute.Checked = true;
                if (mic_boost)
                {
                    toolTip1.SetToolTip(ptbMic, (ptbMic.Value + 20).ToString());

                    //lblMicVal.Text = (ptbMic.Value + 20).ToString() + " dB";
                    //gain_db += 20.0;
                }
                else if (line_in)
                {
                    toolTip1.SetToolTip(ptbMic, (ptbMic.Value + line_in_boost).ToString());
                }
                else
                {
                    toolTip1.SetToolTip(ptbMic, "");
                    // lblMicVal.Text = ptbMic.Value.ToString() + " dB";
                }
                // lblMicVal.Text = ptbMic.Value.ToString() + " dB";
                //double gain_db = (double)ptbMic.Value;
                Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar 
            }
            // if (ptbMic.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbMic.Focus();
            }

        }

        private void ptbCWSpeed_Scroll(object sender, System.EventArgs e)
        {
            lblCWSpeed.Text = "Speed:  " + ptbCWSpeed.Value.ToString() + " WPM";
            NetworkIO.SetCWKeyerSpeed(ptbCWSpeed.Value);
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbCWSpeed.Focus();
            }

            //-W2PA Update LEDs on Behringer MIDI controller
            double pct = Convert.ToDouble(ptbCWSpeed.Value) / Convert.ToDouble(60);
            if (pct < 1.0 / 15.0) pct = 1.0 / 15.0;  //-W2PA Don't let the last LED go out
            Midi2Cat.SendUpdateToMidi(CatCmd.CWSpeed_inc, pct);
        }

        private void chkVOX_CheckedChanged(object sender, System.EventArgs e)
        {
            //  if ((vac_enabled || vac2_enabled) == false)
            // {
            if (SetupForm != null) SetupForm.VOXEnable = chkVOX.Checked;

            if (chkVOX.Checked)
            {
                chkVOX.BackColor = button_selected_color;
            }
            else
            {
                Audio.VOXActive = false;
                chkVOX.BackColor = SystemColors.Control;
            }
            //  }
            LineInBoost = line_in_boost;
        }

        private void ptbSquelch_Scroll(object sender, System.EventArgs e)
        {
            chkSquelch.Text = "SQL:  " + ptbSquelch.Value.ToString();

            if (rx1_dsp_mode == DSPMode.FM) //FM Squelch
            {
                radio.GetDSPRX(0, 0).FMSquelchThreshold = (float)Math.Pow(10.0, -2.0 * ptbSquelch.Value / 100.0);
                radio.GetDSPRX(0, 1).FMSquelchThreshold = (float)Math.Pow(10.0, -2.0 * ptbSquelch.Value / 100.0);
            }
            else //non-FM Squelch
            {
                radio.GetDSPRX(0, 0).RXSquelchThreshold = (float)ptbSquelch.Value -
                  rx1_preamp_offset[(int)rx1_preamp_mode] -
                  rx1_meter_cal_offset -
                    //rx1_filter_size_cal_offset -
                  (-alex_preamp_offset);

                radio.GetDSPRX(0, 1).RXSquelchThreshold = (float)ptbSquelch.Value -
                    rx1_preamp_offset[(int)rx1_preamp_mode] -
                    rx1_meter_cal_offset -
                    //rx1_filter_size_cal_offset -
                    (-alex_preamp_offset);
            }

            // if (ptbSquelch.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbSquelch.Focus();
            }
        }

        private void picSquelch_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int signal_x = (int)((sql_data + 160.0) * (picSquelch.Width - 1) / 160.0);
            int sql_x = (int)(((float)ptbSquelch.Value + 160.0) * (picSquelch.Width - 1) / 160.0);

            if (mox) signal_x = sql_x = 0;
            e.Graphics.FillRectangle(Brushes.LimeGreen, 0, 0, signal_x, picSquelch.Height);
            if (sql_x < signal_x)
                e.Graphics.FillRectangle(Brushes.Red, sql_x + 1, 0, signal_x - sql_x - 1, picSquelch.Height);
        }

        private void chkNoiseGate_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.NoiseGateEnabled = chkNoiseGate.Checked;

            if (chkNoiseGate.Checked) chkNoiseGate.BackColor = button_selected_color;
            else chkNoiseGate.BackColor = SystemColors.Control;
        }

        private void ptbVACRXGain_Scroll(object sender, System.EventArgs e)
        {
            lblRXGain.Text = "RX Gain:  " + ptbVACRXGain.Value.ToString();
            if (SetupForm != null)
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    lblVACRXIndicator.Text = "VAC1";
                    lblVACTXIndicator.Text = "VAC1";
                    SetupForm.VACRXGain = ptbVACRXGain.Value;
                    vac_rx_gain = ptbVACRXGain.Value;
                }
                else
                {
                    lblVACRXIndicator.Text = "VAC2";
                    lblVACTXIndicator.Text = "VAC2";
                    SetupForm.VAC2RXGain = ptbVACRXGain.Value;
                    vac2_rx_gain = ptbVACRXGain.Value;
                }
            // if (ptbVACRXGain.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbVACRXGain.Focus();
            }
        }

        private void ptbVACTXGain_Scroll(object sender, System.EventArgs e)
        {
            lblTXGain.Text = "TX Gain:  " + ptbVACTXGain.Value.ToString();
            if (SetupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    lblVACRXIndicator.Text = "VAC1";
                    lblVACTXIndicator.Text = "VAC1";
                    SetupForm.VACTXGain = ptbVACTXGain.Value;
                    vac_tx_gain = ptbVACTXGain.Value;
                }
                else
                {
                    lblVACRXIndicator.Text = "VAC2";
                    lblVACTXIndicator.Text = "VAC2";
                    SetupForm.VAC2TXGain = ptbVACTXGain.Value;
                    vac2_tx_gain = ptbVACTXGain.Value;
                }
            }
            // if (ptbVACTXGain.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbVACTXGain.Focus();
            }
        }

        private void ptbVOX_Scroll(object sender, System.EventArgs e)
        {
            lblVOXVal.Text = ptbVOX.Value.ToString();
            if (SetupForm != null) SetupForm.VOXSens = ptbVOX.Value;
            // if (ptbVOX.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbVOX.Focus();
            }
        }

        private void picVOX_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            double audio_peak = 0.0;
            cmaster.GetDEXPPeakSignal(0, &audio_peak);
            if (mic_boost) audio_peak /= Audio.VOXGain;
            int peak_x = (int)(picVOX.Width - 20.0 * Math.Log10(audio_peak) * picVOX.Width / ptbVOX.Minimum);
            int vox_x = picVOX.Width - ptbVOX.Value * picVOX.Width / ptbVOX.Minimum;
            if (/*!chkVOX.Checked || */peak_x < 0) peak_x = vox_x = 0;
            e.Graphics.FillRectangle(Brushes.LimeGreen, 0, 0, peak_x, picVOX.Height);
            if (vox_x < peak_x)
                e.Graphics.FillRectangle(Brushes.Red, vox_x + 1, 0, peak_x - vox_x - 1, picVOX.Height);
        }

        private void ptbNoiseGate_Scroll(object sender, System.EventArgs e)
        {
            lblNoiseGateVal.Text = ptbNoiseGate.Value.ToString();
            //if (SetupForm != null) SetupForm.NoiseGate = ptbNoiseGate.Value;
            // if (ptbNoiseGate.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbNoiseGate.Focus();
            }
        }

        private void picNoiseGate_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int signal_x = (int)((noise_gate_data + 160.0) * (picNoiseGate.Width - 1) / 160.0);
            int noise_x = (int)(((float)ptbNoiseGate.Value + 160.0) * (picNoiseGate.Width - 1) / 160.0);

            if (!mox) signal_x = noise_x = 0;
            e.Graphics.FillRectangle(Brushes.LimeGreen, 0, 0, signal_x, picNoiseGate.Height);
            if (noise_x < signal_x)
                e.Graphics.FillRectangle(Brushes.Red, noise_x + 1, 0, signal_x - noise_x - 1, picNoiseGate.Height);
        }

        private void WheelTune_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
                ChangeTuneStepUp();
        }

        private void chkMON_CheckedChanged(object sender, System.EventArgs e)
        {
            Audio.MON = chkMON.Checked;

            if (chkMON.Checked)
                chkMON.BackColor = button_selected_color;
            else
                chkMON.BackColor = SystemColors.Control;


            if (!(chkMON.Checked == false && mox))
                ptbAF_Scroll(this, EventArgs.Empty);

            if (path_Illustrator != null)
                path_Illustrator.pi_Changed();
        }

        private void AudioMOXChanged(bool tx)
        {
            if (tx)
            {
                Audio.MOX = tx;
                ptbAF.Value = txaf;
            }
            else // rx
            {
                ptbAF.Value = rxaf;
                Audio.MOX = tx;
            }

            //udPWR_ValueChanged(this, EventArgs.Empty);
            ptbAF_Scroll(this, EventArgs.Empty);
        }

        private void HdwMOXChanged(bool tx, double freq)
        {
            if (tx)
            {
                if (BPF2Gnd) NetworkIO.SetBPF2Gnd(1);

                if (chkVFOSplit.Checked || psstate)
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                else
                    if (click_tune_display)
                    {
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    }
                if (click_tune_rx2_display)
                {
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                // make sure TX freq has been set
                //  if (tx_dds_freq_updated)
                // {
                UpdateRX1DDSFreq();
                UpdateRX2DDSFreq();
                UpdateTXDDSFreq();
                tx_dds_freq_updated = false;
                // }

                Band lo_band = Band.FIRST;
                Band lo_bandb = Band.FIRST;
                lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);
                lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region, false);

                if (penny_ext_ctrl_enabled)
                    Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                UpdateTRXAnt();
                if (rx1_xvtr_index >= 0)
                {
                    // Fix Penny O/C VHF control Vk4xv
                    // lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region);
                    // lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region);

                    //if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                    // if (alex_ant_ctrl_enabled)
                    // Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, true);
                    Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, alex_ant_ctrl_enabled, true);
                }
                else
                {
                    // if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(tx_band, rx2_band, mox);

                    // if (alex_ant_ctrl_enabled)
                    // Alex.getAlex().UpdateAlexAntSelection(tx_band, mox, false);
                    Alex.getAlex().UpdateAlexAntSelection(tx_band, mox, alex_ant_ctrl_enabled, false);
                }

                // Hdw.TransmitRelay = true;
                NetworkIO.SetTRXrelay(1);
                if (cw_fw_keyer &&
                    (RX1DSPMode == DSPMode.CWL || RX1DSPMode == DSPMode.CWU) &&
                     !chkTUN.Checked &&
                     current_ptt_mode != PTTMode.SPACE &&
                    current_ptt_mode != PTTMode.CAT)
                    NetworkIO.SetPttOut(0);
                else NetworkIO.SetPttOut(1);
                if (serialPTT != null) serialPTT.setDTR(true);
            }
            else // rx
            {
                NetworkIO.SetPttOut(0);
                NetworkIO.SetTRXrelay(0);

                // Hdw.TransmitRelay = false;
                //if (//ptto_delay_control && // PTT Delay  // wcp:  2018-12-24 commented-out this delay
                //     RX1DSPMode != DSPMode.CWL &&
                //     RX1DSPMode != DSPMode.CWU &&
                //     ptt_out_delay > 0)
                //    Thread.Sleep(ptt_out_delay);

                if (serialPTT != null) serialPTT.setDTR(false);

                if (!rx1_step_att_present)
                    RX1PreampMode = rx1_preamp_mode;

                if (chkVFOSplit.Checked || psstate)
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                // else
                if (click_tune_display)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                if (click_tune_rx2_display)
                {
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                UpdateRX1DDSFreq();
                UpdateRX2DDSFreq();
                UpdateTXDDSFreq();

                Band lo_band = Band.FIRST;
                Band lo_bandb = Band.FIRST;
                lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);
                lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region, false);

                if (penny_ext_ctrl_enabled)
                    Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                if (rx1_xvtr_index >= 0)
                {
                    // Fix Penny O/C VHF control Vk4xv
                    // lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region);
                    // lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region);

                    // if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                    // if (alex_ant_ctrl_enabled)
                    //  Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, true);
                    Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, alex_ant_ctrl_enabled, true);
                }
                else
                {
                    // if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(rx1_band, rx2_band, mox);

                    // if (alex_ant_ctrl_enabled)
                    // Alex.getAlex().UpdateAlexAntSelection(rx1_band, mox, false);
                    Alex.getAlex().UpdateAlexAntSelection(rx1_band, mox, alex_ant_ctrl_enabled, false);
                }

                NetworkIO.SetBPF2Gnd(0);
                UpdateTRXAnt();
            }
        }

        private CheckState NB_CheckState;
        private void UIMOXChangedTrue()
        {
            Display.MOX = true;
            NB_CheckState = chkNB.CheckState; // save current state of NB
            if (display_duplex) chkNB.CheckState = CheckState.Unchecked; // turn off NB/NB2 while transmitting with DUP enabled
            meter_peak_count = multimeter_peak_hold_samples;		// reset multimeter peak

            comboMeterRXMode.ForeColor = Color.Gray;
            comboMeterTXMode.ForeColor = Color.White;
            comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);

            if (!disable_ui_mox_changes)
            {
                // SetupForm.SpurRedEnabled = false;
                DisableAllBands();
                DisableAllModes();
                chkVFOSplit.Enabled = false;
                btnVFOAtoB.Enabled = false;
                btnVFOBtoA.Enabled = false;
                btnVFOSwap.Enabled = false;
                chkPower.BackColor = Color.Red;
            }

            if (attontx)
            {
                comboPreamp.Enabled = !chkMOX.Checked;
            }
            SetupForm.MOX = chkMOX.Checked;
            ResetMultiMeterPeak();
            //chkMOX.BackColor = button_selected_color;

            picSquelch.Invalidate();
        }

        private void UIMOXChangedFalse()
        {
            Display.MOX = false;
            if (display_duplex) chkNB.CheckState = NB_CheckState; // restore saved state of NB

            if (!disable_ui_mox_changes)
            {
                //  SetupForm.SpurRedEnabled = true;
                EnableAllBands();
                EnableAllModes();
                chkVFOSplit.Enabled = true;
                btnVFOAtoB.Enabled = true;
                btnVFOBtoA.Enabled = true;
                btnVFOSwap.Enabled = true;
            }
            if (PowerOn) chkPower.BackColor = button_selected_color;
            comboMeterTXMode.ForeColor = Color.Gray;
            comboMeterRXMode.ForeColor = Color.White;
            comboMeterRXMode_SelectedIndexChanged(this, EventArgs.Empty);
            comboRX2MeterMode_SelectedIndexChanged(this, EventArgs.Empty);
            comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);

            pa_fwd_power = 0;
            pa_rev_power = 0;

            Audio.HighSWRScale = 1.0;
            HighSWR = false;

            for (int i = 0; i < meter_text_history.Length; i++)
                meter_text_history[i] = 0.0f;

            if (attontx)
            {
                comboPreamp.Enabled = !chkMOX.Checked;
            }
            SetupForm.MOX = chkMOX.Checked;
            ResetMultiMeterPeak();
            chkMOX.BackColor = SystemColors.Control;

            picNoiseGate.Invalidate();

            /*Thread t = new Thread(new ThreadStart(DelayedDisplayReset));
            t.Name = "Display Reset";
            t.Priority = ThreadPriority.BelowNormal;
            t.IsBackground = true;
            t.Start();*/
        }

        // private HiPerfTimer t1 = new HiPerfTimer();
        //  private double timer1 = 0.0;
        private bool is_tune = false;
        private bool mox = false;
        private PreampMode temp_mode = PreampMode.HPSDR_OFF; // HPSDR preamp mode
        private PreampMode temp_mode2 = PreampMode.HPSDR_OFF; // HPSDR preamp mode
        private void chkMOX_CheckedChanged2(object sender, System.EventArgs e)
        {
            NetworkIO.SendHighPriority(1);
            //Debug.WriteLine("MOX: "+chkMOX.Checked);	
            // t1.Start();
            if (rx_only && chkMOX.Checked)
            {
                chkMOX.Checked = false;
                return;
            }

            // if ((current_hpsdr_hardware == HPSDRHW.Angelia && 
            //    current_hpsdr_model != HPSDRModel.ANAN100D) ||
            //    (current_hpsdr_hardware == HPSDRHW.Angelia && 
            //    current_hpsdr_model != HPSDRModel.ANAN200D))
            //{
            //    chkMOX.Checked = false;
            //    MessageBox.Show("Please select the correct radio model in Setup",
            //    "Incorrect radio selected",
            //    MessageBoxButtons.OK,
            //    MessageBoxIcon.Warning);
            //    return;
            //}

            if (allow_mox_bypass && current_ptt_mode != PTTMode.MIC &&
                                    current_ptt_mode != PTTMode.SPACE &&
                                    current_ptt_mode != PTTMode.CAT)
            {
                if (chkMOX.Checked)
                {
                    if (chkVAC1.Checked)
                        Audio.VACBypass = true;
                }
                else
                {
                    if (chkVAC1.Checked && Audio.VACBypass)
                        Audio.VACBypass = false;
                }
            }

            //  bool tx = mox = chkMOX.Checked;
            bool tx = chkMOX.Checked;
            // double freq = 0.0;           

            if (tx) mox = tx;
            double freq = 0.0;

            if (tx)                          // change to TX mode
            {
                radModeCWL.Enabled = false;  //Disallow mode changes in transmit mode            
                radModeCWU.Enabled = false;
                radModeAM.Enabled = false;
                radModeDIGL.Enabled = false;
                radModeDIGU.Enabled = false;
                radModeDRM.Enabled = false;
                radModeDSB.Enabled = false;
                radModeLSB.Enabled = false;
                radModeUSB.Enabled = false;
                radModeFMN.Enabled = false;
                radModeSAM.Enabled = false;
                radModeSPEC.Enabled = false;
            }
            else                            // change to RX mode
            {
                if (!VFOALock)
                {
                    radModeCWL.Enabled = true;  //Re-enable mode changes in receive mode            
                    radModeCWU.Enabled = true;
                    radModeAM.Enabled = true;
                    radModeDIGL.Enabled = true;
                    radModeDIGU.Enabled = true;
                    radModeDRM.Enabled = true;
                    radModeDSB.Enabled = true;
                    radModeLSB.Enabled = true;
                    radModeUSB.Enabled = true;
                    radModeFMN.Enabled = true;
                    radModeSAM.Enabled = true;
                    radModeSPEC.Enabled = true;
                }
            }


            if (tx)
            {
                /*t1.Stop();
                timer1 += t1.DurationMsec;
                count1++;*/

                //FM Offsets
                if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.FM && current_fm_tx_mode != FMTXMode.Simplex
                    && !chkVFOSplit.Checked)
                {
                    switch (current_fm_tx_mode)
                    {
                        case FMTXMode.Low:
                            if (!chkFMTXRev.Checked)
                                TXFreq -= fm_tx_offset_mhz; // usual case
                            else
                                TXFreq += fm_tx_offset_mhz;
                            break;
                        case FMTXMode.High:
                            if (!chkFMTXRev.Checked)
                                TXFreq += fm_tx_offset_mhz; // usual case
                            else
                                TXFreq -= fm_tx_offset_mhz;
                            break;
                    }
                }

                if (chkVFOBTX.Checked || (!chkRX2.Checked && chkVFOSplit.Checked))
                    freq = double.Parse(txtVFOBFreq.Text);
                else if (chkRX2.Checked && chkVFOSplit.Checked)
                    freq = double.Parse(txtVFOABand.Text);
                else
                    freq = double.Parse(txtVFOAFreq.Text);

                // if (tx_xvtr_index >= 0)
                //    freq = xvtrForm.TranslateFreq(freq);

                if (chkXIT.Checked)
                    freq += (int)udXIT.Value * 0.000001;

                /*t1.Stop();
                timer2 += t1.DurationMsec;
                count2++;*/

                if (!calibrating)
                {
                    if (tx_band == Band.B60M && current_region == FRSRegion.US && !extended)
                    {
                        switch (radio.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.USB:
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGU:
                                break;
                            default:
                                MessageBox.Show(rx1_dsp_mode.ToString() + " mode is not allowed on 60M band.",
                                    "Transmit Error: Mode/Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                chkMOX.Checked = false;
                                return;
                            // break;
                        }
                    }

                    if (!CheckValidTXFreq(current_region, freq, radio.GetDSPTX(0).CurrentDSPMode))	// out of band
                    {
                        if (tx_band == Band.B60M && current_region == FRSRegion.US &&
                            CheckValidTXFreq_Private(current_region, freq) && !extended)
                        {
                            MessageBox.Show("The transmit filter you have selected exceeds the bandwidth\n" +
                                "constraints (2.8kHz) for the 60m band in this region.",
                                "60m Bandwidth",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                        else
                        {
                            switch (radio.GetDSPTX(0).CurrentDSPMode)
                            {
                                case DSPMode.CWL:
                                case DSPMode.CWU:
                                    MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the\n" +
                                        "Band specifications for your region (" + ((int)current_region).ToString() + ").",
                                        "Transmit Error: Out Of Band",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    break;
                                default:
                                    MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                        "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                        "Band specifications for your region (" + ((int)current_region).ToString() + ").",
                                        "Transmit Error: Out Of Band",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                                    break;
                            }
                        }
                        chkMOX.Checked = false;
                        return;
                    }
                }

                /*t1.Stop();
                timer3 += t1.DurationMsec;
                count3++;*/

                switch (rx1_dsp_mode)
                {
                    case DSPMode.CWL:
                        freq += (double)cw_pitch * 0.0000010;
                        break;
                    case DSPMode.CWU:
                        freq -= (double)cw_pitch * 0.0000010;
                        break;
                }

            }
            else
            {
                current_ptt_mode = PTTMode.NONE;
                /*if(pa_present)
                {
                    if(poll_pa_pwr_thread !=null && poll_pa_pwr_thread.IsAlive)
                        poll_pa_pwr_thread.Abort();
                }*/

                //Undo FM Offsets
                if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.FM && current_fm_tx_mode != FMTXMode.Simplex
                    && !chkVFOSplit.Checked)
                {
                    switch (current_fm_tx_mode)
                    {
                        case FMTXMode.Low:
                            if (!chkFMTXRev.Checked)
                                TXFreq += fm_tx_offset_mhz; // usual case
                            else
                                TXFreq -= fm_tx_offset_mhz;
                            break;
                        case FMTXMode.High:
                            if (!chkFMTXRev.Checked)
                                TXFreq -= fm_tx_offset_mhz; // usual case
                            else
                                TXFreq += fm_tx_offset_mhz;
                            break;
                    }
                }
            }

            if (tx)                     // change to TX mode
            {
                if (!full_duplex)       // shutdown RX1 and RX2 as appropriate
                {
                    bool RX1_shutdown = chkVFOATX.Checked || (chkVFOBTX.Checked && !RX2Enabled) || mute_rx1_on_vfob_tx || (chkVFOBTX.Checked && ANAN10EPresent && psform.PSEnabled);
                    bool RX2_shutdown = (chkVFOBTX.Checked && RX2Enabled) || mute_rx2_on_vfoa_tx || (chkVFOATX.Checked && RX2Enabled && ANAN10EPresent && psform.PSEnabled);
                    if (RX1_shutdown && !RX2_shutdown)
                    {
                        WDSP.SetChannelState(WDSP.id(0, 1), 0, 0);
                        WDSP.SetChannelState(WDSP.id(0, 0), 0, 1);
                    }
                    if (!RX1_shutdown && RX2_shutdown)
                        WDSP.SetChannelState(WDSP.id(2, 0), 0, 1);
                    if (RX1_shutdown && RX2_shutdown)
                    {
                        WDSP.SetChannelState(WDSP.id(0, 1), 0, 0);
                        WDSP.SetChannelState(WDSP.id(0, 0), 0, 0);
                        WDSP.SetChannelState(WDSP.id(2, 0), 0, 1);
                    }

                }

                if (attontx)
                {
                    if (current_hpsdr_model == HPSDRModel.HPSDR)
                    {
                        temp_mode = RX1PreampMode;
                        SetupForm.HermesEnableAttenuator = false;
                        RX1PreampMode = PreampMode.HPSDR_OFF;			// set to -20dB
                        if (rx2_preamp_present)
                        {
                            temp_mode2 = RX2PreampMode;
                            RX2PreampMode = PreampMode.HPSDR_OFF;
                        }
                    }
                    else
                    {
                        // tx_step_attenuator_by_band[(int)rx1_band] = SetupForm.ATTOnTX;
                        SetupForm.HermesAttenuatorData = tx_step_attenuator_by_band[(int)rx1_band];
                        NetworkIO.SetTxAttenData(tx_step_attenuator_by_band[(int)rx1_band]);
                        SetupForm.HermesEnableAttenuator = true;
                        comboRX2Preamp.Enabled = false;
                        udRX2StepAttData.Enabled = false;

                        //if (current_hpsdr_model == HPSDRModel.ANAN100D || current_hpsdr_model == HPSDRModel.ANAN200D)
                        //{
                        //    RX2ATT = SetupForm.ATTOnTX;
                        //    RX2StepAttPresent = true;
                        //}
                    }
                }
                else NetworkIO.SetTxAttenData(0);
                UpdateAAudioMixerStates();
                UpdateDDCs(rx2_enabled);
                UpdateRXADCCtrl();
                // AudioMOXChanged(tx);    // set MOX in audio.cs
                HdwMOXChanged(tx, freq);   // flip the hardware
                psform.Mox = tx;
                cmaster.Mox = tx;          // loads router bit, among other things

                Audio.RX1BlankDisplayTX = blank_rx1_on_vfob_tx;

                //  if (rf_delay > 0) Thread.Sleep(rf_delay);
                if (radio.GetDSPTX(0).CurrentDSPMode != DSPMode.CWL &&
                    radio.GetDSPTX(0).CurrentDSPMode != DSPMode.CWU) // turn on the transmitter unless in CW mode
                {
                    if (rf_delay > 0) Thread.Sleep(rf_delay);
                    AudioMOXChanged(tx);    // set MOX in audio.cs - wait 'til here to allow last audio to clear AAMix before changing to MON volume
                    WDSP.SetChannelState(WDSP.id(1, 0), 1, 0);
                }
                else
                    AudioMOXChanged(tx);    // set MOX in audio.cs
            }
            else                        // change to RX mode
            {
                mox = tx;
                psform.Mox = tx;
                WDSP.SetChannelState(WDSP.id(1, 0), 0, 1);  // turn off the transmitter (no action if it's already off)

                if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.CWL ||
                    radio.GetDSPTX(0).CurrentDSPMode == DSPMode.CWU)
                {
                    if (!cw_fw_keyer && key_up_delay > 0) Thread.Sleep(key_up_delay);
                }
                else
                {
                    if (mox_delay > 0) Thread.Sleep(mox_delay); // default 10, allows in-flight samples to clear
                }
                UpdateDDCs(rx2_enabled);
                UpdateAAudioMixerStates();
                UpdateRXADCCtrl();
                AudioMOXChanged(tx);    // set audio.cs to RX
                HdwMOXChanged(tx, freq);// flip the hardware
                cmaster.Mox = tx;       // loads router bit, among other things
                //if (ANAN10EPresent) if (mox_delay > 0) Thread.Sleep(mox_delay);   //wcp:  commented-out 2018-12-24
                if (ptt_out_delay > 0) Thread.Sleep(ptt_out_delay);                 //wcp:  added 2018-12-24, time for HW to switch
                WDSP.SetChannelState(WDSP.id(0, 0), 1, 0);  // turn on appropriate receivers
                if (RX2Enabled)
                    WDSP.SetChannelState(WDSP.id(2, 0), 1, 0);
                if (radio.GetDSPRX(0, 1).Active)
                    WDSP.SetChannelState(WDSP.id(0, 1), 1, 0);

                Audio.RX1BlankDisplayTX = blank_rx1_on_vfob_tx;

                if (attontx)
                {
                    if (current_hpsdr_model == HPSDRModel.HPSDR)
                    {
                        RX1PreampMode = temp_mode;
                        if (rx2_preamp_present)
                            RX2PreampMode = temp_mode2;
                    }
                    else
                    {
                        comboRX2Preamp.Enabled = true;
                        udRX2StepAttData.Enabled = true;

                        update_preamp_mode = true;
                        update_preamp = true;
                        UpdatePreamps();
                    }
                }
                else NetworkIO.SetTxAttenData(0);

            }

            if (!tx)
            {
                pa_fwd_power = 0;
                pa_rev_power = 0;
                HighSWR = false;
            }

            if (tx) UIMOXChangedTrue();
            else UIMOXChangedFalse();

        }

        //private Thread mox_update_thread;

        private void chkMOX_Click(object sender, System.EventArgs e)
        {
            if (chkMOX.Checked)			// because the CheckedChanged event fires first
            {
                manual_mox = true;
                if (cw_fw_keyer &&
                   (RX1DSPMode == DSPMode.CWL ||
                    RX1DSPMode == DSPMode.CWU))
                    NetworkIO.SetPttOut(1);
            }
            else
            {
                manual_mox = false;
                if (chkTUN.Checked)
                    chkTUN.Checked = false;
            }
        }

        private void comboMeterRXMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboMeterRXMode.Items.Count == 0 ||
                comboMeterRXMode.SelectedIndex < 0)
            {
                current_meter_rx_mode = MeterRXMode.FIRST;
            }
            else
            {
                MeterRXMode mode = MeterRXMode.FIRST;
                switch (comboMeterRXMode.Text)
                {
                    case "Signal":
                        mode = MeterRXMode.SIGNAL_STRENGTH;
                        break;
                    case "Sig Avg":
                        multimeter_avg = Display.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_AVERAGE;
                        break;
                    case "ADC L":
                        mode = MeterRXMode.ADC_L;
                        break;
                    case "ADC R":
                        mode = MeterRXMode.ADC_R;
                        break;
                    case "ADC2 L":
                        mode = MeterRXMode.ADC2_L;
                        break;
                    case "ADC2 R":
                        mode = MeterRXMode.ADC2_R;
                        break;
                    case "Off":
                        mode = MeterRXMode.OFF;
                        break;
                }
                current_meter_rx_mode = mode;

                if (!mox)
                {
                    if (collapsedDisplay)
                    {
                        switch (mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                lblMultiSMeter.Text = "     1       3         5        7        9          +20         +40         +60";
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                lblMultiSMeter.Text = "   -100           -80           -60           -40           -20             0";
                                break;
                            case MeterRXMode.OFF:
                                lblMultiSMeter.Text = "";
                                break;
                        }

                    }
                    else
                    {
                        switch (mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                                lblMultiSMeter.Text = "  1   3   5   7   9  +20 +40 +60";
                                break;
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                                lblMultiSMeter.Text = "-100  -80   -60   -40   -20    0";
                                break;
                            case MeterRXMode.OFF:
                                lblMultiSMeter.Text = "";
                                break;
                        }
                    }
                    ResetMultiMeterPeak();
                }
            }

            picMultiMeterDigital.Invalidate();

            if (comboMeterRXMode.Focused)
                btnHidden.Focus();
        }

        private void comboMeterTXMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            MeterTXMode mode = MeterTXMode.FIRST;
            if (comboMeterTXMode.Items.Count == 0 ||
                comboMeterTXMode.SelectedIndex < 0)
            {
                //if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                //    current_meter_tx_mode = MeterTXMode.SWR_POWER;
                //else
                //    current_meter_tx_mode = MeterTXMode.FIRST;
            }
            else
            {
                switch (comboMeterTXMode.Text)
                {
                    case "Fwd Pwr":
                        mode = MeterTXMode.FORWARD_POWER;
                        break;
                    case "Ref Pwr":
                        mode = MeterTXMode.REVERSE_POWER;
                        break;
                    case "Fwd SWR":
                        mode = MeterTXMode.SWR_POWER;
                        break;
                    case "Mic":
                        mode = MeterTXMode.MIC;
                        break;
                    case "EQ":
                        mode = MeterTXMode.EQ;
                        break;
                    case "Leveler":
                        mode = MeterTXMode.LEVELER;
                        break;
                    case "Lev Gain":
                        mode = MeterTXMode.LVL_G;
                        break;
                    case "CFC":
                        mode = MeterTXMode.CFC_PK;
                        break;
                    case "CFC Comp":
                        mode = MeterTXMode.CFC_G;
                        break;
                    case "COMP":
                        mode = MeterTXMode.COMP;
                        break;
                    case "ALC":
                        mode = MeterTXMode.ALC;
                        break;
                    case "ALC Comp":
                        mode = MeterTXMode.ALC_G;
                        break;
                    case "SWR":
                        mode = MeterTXMode.SWR;
                        break;
                    case "Off":
                        mode = MeterTXMode.OFF;
                        break;
                }

                if (chkTUN.Checked)
                {
                    tune_meter_tx_mode = mode;
                    if (SetupForm != null) SetupForm.TuneMeterTXMode = mode;
                }
                current_meter_tx_mode = mode;
            }

            if (mox)
            {
                if (collapsedDisplay)
                {
                    switch (mode)
                    {
                        case MeterTXMode.FIRST:
                            lblMultiSMeter.Text = "";
                            break;
                        case MeterTXMode.MIC:
                        case MeterTXMode.EQ:
                        case MeterTXMode.LEVELER:
                        case MeterTXMode.CFC_PK:
                        case MeterTXMode.COMP:
                        case MeterTXMode.ALC:
                            lblMultiSMeter.Text = "   -20            -10               -5              0        4        8       12";
                            // lblMultiSMeter.Text = "   -20            -10               -5              0        1        2        3";
                            break;
                        case MeterTXMode.FORWARD_POWER:
                        case MeterTXMode.REVERSE_POWER:
                        case MeterTXMode.SWR_POWER:
                            if (anan10present || anan10Epresent)
                                lblMultiSMeter.Text = "    1              5             10            15            20            25+";
                            else if (apollopresent)
                                lblMultiSMeter.Text = "    1              5             10            15            30            50+";
                            else if (alexpresent || pa_present)
                                lblMultiSMeter.Text = "    1              5             10            50           100          120+";
                            else
                                lblMultiSMeter.Text = "   25    50   100     150       200     400         600           800+";
                            break;
                        case MeterTXMode.SWR:
                            lblMultiSMeter.Text = " 1               1.5         2            3            5            10";
                            //  lblMultiSMeter.Text = "0             10              20";
                            break;
                        case MeterTXMode.OFF:
                            lblMultiSMeter.Text = "";
                            break;
                        case MeterTXMode.LVL_G:
                        case MeterTXMode.ALC_G:
                            lblMultiSMeter.Text = "0                  5                10                15                20";
                            break;
                    }
                }
                else
                {
                    switch (mode)
                    {
                        case MeterTXMode.FIRST:
                            lblMultiSMeter.Text = "";
                            break;
                        case MeterTXMode.MIC:
                        case MeterTXMode.EQ:
                        case MeterTXMode.LEVELER:
                        case MeterTXMode.CFC_PK:
                        case MeterTXMode.COMP:
                        case MeterTXMode.ALC:
                            lblMultiSMeter.Text = "-20    -10     -5      0   4   8  12";
                            // lblMultiSMeter.Text = "-20    -10     -5      0   1   2   3";
                            break;
                        case MeterTXMode.FORWARD_POWER:
                        case MeterTXMode.REVERSE_POWER:
                        case MeterTXMode.SWR_POWER:
                            if (anan10present || anan10Epresent)
                                lblMultiSMeter.Text = "1      5     10    15   20    25+";
                            else if (apollopresent)
                                lblMultiSMeter.Text = "1      5     10    15   30    50+";
                            else if (alexpresent || pa_present)
                                lblMultiSMeter.Text = "1      5     10    50   100  120+";
                            else
                                lblMultiSMeter.Text = "0      0.1     0.2     0.5        0.8";
                            break;
                        case MeterTXMode.SWR:
                            lblMultiSMeter.Text = "1      1.5   2     3     5    10";
                            //  lblMultiSMeter.Text = "0             10              20";
                            break;
                        case MeterTXMode.OFF:
                            lblMultiSMeter.Text = "";
                            break;
                        case MeterTXMode.LVL_G:
                        case MeterTXMode.CFC_G:
                        case MeterTXMode.ALC_G:
                            lblMultiSMeter.Text = "0       5       10      15      20";
                            break;
                    }
                }
                ResetMultiMeterPeak();
            }

            picMultiMeterDigital.Invalidate();

            if (comboMeterTXMode.Focused)
                btnHidden.Focus();
        }

        private void chkDisplayAVG_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.AverageOn = chkDisplayAVG.Checked;
            specRX.GetSpecRX(0).AverageOn = chkDisplayAVG.Checked;
            UpdateRXSpectrumDisplayVars();
            specRX.GetSpecRX(cmaster.inid(1, 0)).AverageOn = chkDisplayAVG.Checked;
            UpdateTXSpectrumDisplayVars();

            if (chkDisplayAVG.Checked)
            {
                chkDisplayAVG.BackColor = button_selected_color;
            }
            else
            {
                chkDisplayAVG.BackColor = SystemColors.Control;
            }

            /*  if (chkDisplayAVG.Checked)
              {
                  switch (Display.CurrentDisplayMode)
                  {
                      case DisplayMode.PANADAPTER:
                      case DisplayMode.HISTOGRAM:
                      case DisplayMode.SPECTRUM:
                      case DisplayMode.WATERFALL:
                      case DisplayMode.PANAFALL:
                      case DisplayMode.PANASCOPE:
                      case DisplayMode.SPECTRASCOPE:
                          btnZeroBeat.Enabled = true; // only allow zerobeat when avg is on 
                          break;
                      default:
                          btnZeroBeat.Enabled = false;
                          break;
                  }
              }
              else btnZeroBeat.Enabled = false; */
            RX1AVGToolStripMenuItem.Checked = chkDisplayAVG.Checked;
        }

        private void chkDisplayPeak_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.PeakOn = chkDisplayPeak.Checked;
            specRX.GetSpecRX(0).PeakOn = chkDisplayPeak.Checked;
            UpdateRXSpectrumDisplayVars();
            specRX.GetSpecRX(cmaster.inid(1, 0)).PeakOn = chkDisplayPeak.Checked;
            UpdateTXSpectrumDisplayVars();

            if (chkDisplayPeak.Checked)
            {
                chkDisplayPeak.BackColor = button_selected_color;
            }
            else
            {
                chkDisplayPeak.BackColor = SystemColors.Control;
            }
            RX1PeakToolStripMenuItem.Checked = chkDisplayPeak.Checked;
        }

        private void chkSquelch_CheckedChanged(object sender, System.EventArgs e)
        {
            // if (rx1_dsp_mode == DSPMode.FM && !chkSquelch.Checked)
            //   chkSquelch.Checked = true;
            if (initializing) return;

            if (chkSquelch.Checked)
            {
                switch (rx1_dsp_mode)
                {
                    case DSPMode.FM:
                        radio.GetDSPRX(0, 0).RXAMSquelchOn = false;
                        radio.GetDSPRX(0, 1).RXAMSquelchOn = false;
                        radio.GetDSPRX(0, 0).RXFMSquelchOn = true;
                        radio.GetDSPRX(0, 1).RXFMSquelchOn = true;
                        break;
                    default:
                        radio.GetDSPRX(0, 0).RXFMSquelchOn = false;
                        radio.GetDSPRX(0, 1).RXFMSquelchOn = false;
                        radio.GetDSPRX(0, 0).RXAMSquelchOn = true;
                        radio.GetDSPRX(0, 1).RXAMSquelchOn = true;
                        break;
                }
            }
            else
            {
                radio.GetDSPRX(0, 0).RXFMSquelchOn = false;
                radio.GetDSPRX(0, 1).RXFMSquelchOn = false;
                radio.GetDSPRX(0, 0).RXAMSquelchOn = false;
                radio.GetDSPRX(0, 1).RXAMSquelchOn = false;
            }

            if (rx1_dsp_mode == DSPMode.FM) rx1_fm_squelch_on = chkSquelch.Checked;
        }

        private MeterTXMode old_tune_meter_tx_mode;
        private DSPMode old_dsp_mode;
        private void chkTUN_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkTUN.Checked)
            {
                if (!PowerOn)
                {
                    MessageBox.Show("Power must be on to turn on the Tune function.",
                        "Power is off",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Hand);
                    chkTUN.Checked = false;
                    return;
                }

                tuning = true;                                                  // used for a few things
                chkTUN.BackColor = button_selected_color;

                if (current_meter_tx_mode != tune_meter_tx_mode)                // switch meter mode to power
                {
                    old_tune_meter_tx_mode = current_meter_tx_mode;
                    CurrentMeterTXMode = tune_meter_tx_mode;
                    comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
                }

                switch (Audio.TXDSPMode)                                        // put tone in opposite sideband
                {
                    case DSPMode.LSB:
                    case DSPMode.CWL:
                    case DSPMode.DIGL:
                        radio.GetDSPTX(0).TXPostGenToneFreq = -cw_pitch;
                        break;
                    default:
                        radio.GetDSPTX(0).TXPostGenToneFreq = +cw_pitch;
                        break;
                }
                radio.GetDSPTX(0).TXPostGenToneMag = 0.99999;
                radio.GetDSPTX(0).TXPostGenMode = 0;
                radio.GetDSPTX(0).TXPostGenRun = 1;

                if (!tx_tune_power)
                    PreviousPWR = ptbPWR.Value;                                 // save current value
                if ((!xvtr_tune_power || tx_xvtr_index < 0) && !tx_tune_power)  // switch to TUN value
                    PWR = tune_power;

                if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)                 // pick correct VFO & set freq
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    if (chkVFOBTX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else // split is on
                    {
                        if (!chkRX2.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOABand_LostFocus(this, EventArgs.Empty);
                    }
                }

                old_dsp_mode = radio.GetDSPTX(0).CurrentDSPMode;                // save current mode
                switch (old_dsp_mode)
                {
                    case DSPMode.CWL:
                        //CWFWKeyer = false;
                        Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;      // for CAT, apparently
                        Audio.TXDSPMode = DSPMode.LSB;                          // set a non-CW mode of the same sex
                        radio.GetDSPTX(0).CurrentDSPMode = DSPMode.LSB;         // do that here too
                        break;
                    case DSPMode.CWU:
                        //CWFWKeyer = false;
                        Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;
                        Audio.TXDSPMode = DSPMode.USB;
                        radio.GetDSPTX(0).CurrentDSPMode = DSPMode.USB;
                        break;
                }

                chkMOX.Checked = true;                                          // go for it
                if (!mox)
                {
                    chkTUN.Checked = false;
                    return;
                }

                current_ptt_mode = PTTMode.MANUAL;
                manual_mox = true;

                //if (HPSDRisMetis)
                // {
                NetworkIO.SetUserOut0(1);
                NetworkIO.SetUserOut2(1);
                // }

                if (apollopresent && apollo_tuner_enabled)
                    NetworkIO.EnableApolloAutoTune(1);

                is_tune = true;
            }
            else
            {
                chkMOX.Checked = false;                                         // we're done
                Thread.Sleep(100);
                radio.GetDSPTX(0).TXPostGenRun = 0;
                chkTUN.BackColor = SystemColors.Control;

                switch (old_dsp_mode)                                           // restore old mode if it was changed
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        radio.GetDSPTX(0).CurrentDSPMode = old_dsp_mode;
                        Audio.TXDSPMode = old_dsp_mode;
                        CWFWKeyer = true;
                        break;
                }
                tuning = false;

                if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    if (chkVFOBTX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else // split is on
                    {
                        if (!chkRX2.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOABand_LostFocus(this, EventArgs.Empty);
                    }
                }

                if (apollopresent)
                    NetworkIO.EnableApolloAutoTune(0);

                if ((tx_xvtr_index < 0 || xvtr_tune_power) && !tx_tune_power)
                    TunePower = ptbPWR.Value;

                if (!tx_tune_power)
                    PWR = PreviousPWR;

                if (tune_meter_tx_mode != old_tune_meter_tx_mode)
                    CurrentMeterTXMode = old_tune_meter_tx_mode;

                //  if (HPSDRisMetis)
                //  {
                NetworkIO.SetUserOut0(0);
                NetworkIO.SetUserOut2(0);
                // }

                manual_mox = false;
            }
        }

        private void chkTUN_CheckedChanged_old(object sender, System.EventArgs e)
        {
            if (chkTUN.Checked)
            {
                if (!PowerOn)
                {
                    MessageBox.Show("Power must be on to turn on the Tune function.",
                        "Power is off",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Hand);
                    chkTUN.Checked = false;
                    return;
                }

                if (chkNoiseGate.Checked)
                    //radio.GetDSPTX(0).TXSquelchOn = false;
                    cmaster.SetDEXPRun(0, chkNoiseGate.Checked);
                tuning = true;
                chkTUN.BackColor = button_selected_color;

                if (current_meter_tx_mode != tune_meter_tx_mode)
                {
                    old_tune_meter_tx_mode = current_meter_tx_mode;
                    CurrentMeterTXMode = tune_meter_tx_mode;
                    comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
                }

                switch (Audio.TXDSPMode)
                {
                    case DSPMode.USB:
                    case DSPMode.CWU:
                    case DSPMode.DIGU:
                        // Audio.SineFreq1 = cw_pitch;
                        //DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                        WDSP.SetTXABandpassFreqs(WDSP.id(1, 0), cw_pitch - 100, cw_pitch + 100);
                        Audio.TXInputSignal = Audio.SignalSource.SINE;
                        Audio.SourceScale = 1.0;
                        break;
                    case DSPMode.LSB:
                    case DSPMode.CWL:
                    case DSPMode.DIGL:
                        // Audio.SineFreq1 = cw_pitch;
                        //DttSP.SetTXFilter(1, -cw_pitch - 100, -cw_pitch + 100);
                        WDSP.SetTXABandpassFreqs(WDSP.id(1, 0), -cw_pitch - 100, -cw_pitch + 100);
                        Audio.TXInputSignal = Audio.SignalSource.SINE;
                        Audio.SourceScale = 1.0;
                        break;
                    case DSPMode.DSB:
                        // Audio.SineFreq1 = cw_pitch;
                        //DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                        WDSP.SetTXABandpassFreqs(WDSP.id(1, 0), cw_pitch - 100, cw_pitch + 100);
                        Audio.TXInputSignal = Audio.SignalSource.SINE;
                        Audio.SourceScale = 1.0;
                        break;
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                        //  Audio.SineFreq1 = cw_pitch;
                        //DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                        WDSP.SetTXABandpassFreqs(WDSP.id(1, 0), cw_pitch - 100, cw_pitch + 100);
                        Audio.TXInputSignal = Audio.SignalSource.SINE;
                        Audio.SourceScale = 1.0;
                        break;
                }

                //DttSP.SetMode(1, 0, DSPMode.DIGU);
                WDSP.SetTXAMode(WDSP.id(1, 0), DSPMode.DIGU);
                if (!tx_tune_power)
                    PreviousPWR = ptbPWR.Value; // save current value
                if ((!xvtr_tune_power || tx_xvtr_index < 0) && !tx_tune_power) // switch to TUN value
                    PWR = tune_power;

                if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    if (chkVFOBTX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else // split is on
                    {
                        if (!chkRX2.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOABand_LostFocus(this, EventArgs.Empty);
                    }
                }

                chkMOX.Checked = true;
                if (!mox)
                {
                    chkTUN.Checked = false;
                    return;
                }

                current_ptt_mode = PTTMode.MANUAL;

                switch (Audio.TXDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        Audio.CurrentAudioState1 = Audio.AudioState.DTTSP;
                        Audio.TXDSPMode = DSPMode.DIGU;
                        break;
                }

                //  if (HPSDRisMetis)
                // {
                NetworkIO.SetUserOut0(1);
                NetworkIO.SetUserOut2(1);
                // }

                if (apollopresent && apollo_tuner_enabled)
                    NetworkIO.EnableApolloAutoTune(1);

                is_tune = true;

                /*if(atu_present && tx_band != Band.B2M &&
                    (ATUTuneMode)comboTuneMode.SelectedIndex != ATUTuneMode.BYPASS)
                {
                    chkTUN.Enabled = false;
                    comboTuneMode.Enabled = false;

                    Thread t = new Thread(new ThreadStart(Tune));
                    t.IsBackground = true;
                    t.Priority = ThreadPriority.Normal;
                    t.Name = "TUN Thread";
                    t.Start();
                }*/
                return;
            }
            else
            {
                Audio.TXInputSignal = Audio.SignalSource.RADIO;
                Thread.Sleep(200);

                chkMOX.Checked = false;
                chkTUN.BackColor = SystemColors.Control;
                tuning = false;

                if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    if (chkVFOBTX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else // split is on
                    {
                        if (!chkRX2.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOABand_LostFocus(this, EventArgs.Empty);
                    }
                }

                if (apollopresent)
                    NetworkIO.EnableApolloAutoTune(0);

                if ((tx_xvtr_index < 0 || xvtr_tune_power) && !tx_tune_power)
                    TunePower = ptbPWR.Value;

                if (!tx_tune_power)
                    PWR = PreviousPWR;
                DSPMode mode = radio.GetDSPTX(0).CurrentDSPMode;
                //DttSP.SetMode(1, 0, mode);
                WDSP.SetTXAMode(WDSP.id(1, 0), mode);
                //if (chkVFOBTX.Checked) mode = rx2_dsp_mode;
                switch (mode)
                {
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                        // Audio.SineFreq1 = cw_pitch;
                        break;
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        Audio.TXDSPMode = mode;
                        break;
                }
                //DttSP.SetTXFilter(1, radio.GetDSPTX(0).TXFilterLow, radio.GetDSPTX(0).TXFilterHigh);
                WDSP.SetTXABandpassFreqs(WDSP.id(1, 0), radio.GetDSPTX(0).TXFilterLow, radio.GetDSPTX(0).TXFilterHigh);
                if (tune_meter_tx_mode != old_tune_meter_tx_mode)
                    CurrentMeterTXMode = old_tune_meter_tx_mode;

                if (chkNoiseGate.Checked)
                    //radio.GetDSPTX(0).TXSquelchOn = true;
                    cmaster.SetDEXPRun(0, chkNoiseGate.Checked);
                NetworkIO.SetUserOut0(0);
                NetworkIO.SetUserOut2(0);

            }
        }

        private void comboTuneMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            //if (atu_present)
            //{
            //    if (comboTuneMode.SelectedIndex == (int)ATUTuneMode.BYPASS)
            //    {
            //        if (current_model == Model.SDR1000)
            //            Hdw.PA_ATUTune(ATUTuneMode.BYPASS);
            //        tuned_band = Band.FIRST;
            //        if (chkTUN.BackColor == button_selected_color)
            //            chkTUN.BackColor = SystemColors.Control;
            //    }
            //}

            if (comboTuneMode.Focused)
                btnHidden.Focus();
        }

        private void HideFocus(object sender, EventArgs e)
        {
            btnHidden.Focus();
        }

        private void textbox_GotFocus(object sender, EventArgs e)
        {
            SetFocusMaster(false);
        }

        private void textbox_LostFocus(object sender, EventArgs e)
        {
            SetFocusMaster(true);
        }

        private void combo_OpenDropDown(object sender, EventArgs e)
        {
            SetFocusMaster(false);
        }

        private void combo_CloseDropDown(object sender, EventArgs e)
        {
            SetFocusMaster(true);
        }

        private void chkVFOLock_CheckedChanged(object sender, System.EventArgs e)
        {
            VFOALock = chkVFOLock.Checked;
        }

        private void chkVFOBLock_CheckedChanged(object sender, EventArgs e)
        {
            VFOBLock = chkVFOBLock.Checked;
        }

        private void btnBandVHF_Click(object sender, System.EventArgs e)
        {
            panelBandVHF.Visible = true;
            panelBandHF.Visible = false;
            panelBandGEN.Visible = false; // ke9ns add

            whatisVHF = true;
            whatisHF = false;
            whatisGEN = false;

            {
                if (collapsedDisplay)
                    CollapseDisplay();
            }

            if (!rx1_click_tune_drag)
                chkFWCATU.Checked = false;
            if (!rx2_click_tune_drag)
                chkX2TR.Checked = false;

            lblRX1MuteVFOA.SendToBack();
            lblRX1APF.SendToBack();
        }

        private void btnBandHF_Click(object sender, System.EventArgs e)
        {
            panelBandVHF.Visible = false;
            panelBandGEN.Visible = false; // ke9ns add
            panelBandHF.Visible = true;

            whatisVHF = false;
            whatisHF = true;
            whatisGEN = false;

            {
                if (collapsedDisplay)
                    CollapseDisplay();
            }

            if (!rx1_click_tune_drag)
                chkFWCATU.Checked = false;
            if (!rx2_click_tune_drag)
                chkX2TR.Checked = false;

            lblRX1MuteVFOA.BringToFront();
            lblRX1APF.BringToFront();
        }

        private void btnBandGEN_Click(object sender, EventArgs e) // ke9ns add hf screen click on GEN button
        {
            panelBandGEN.Visible = true; // ke9ns add
            panelBandVHF.Visible = false;
            panelBandHF.Visible = false;

            whatisVHF = false;
            whatisHF = false;
            whatisGEN = true;

            {
                if (collapsedDisplay)
                    CollapseDisplay();
            }

            if (!rx1_click_tune_drag)
                chkFWCATU.Checked = false;
            if (!rx2_click_tune_drag)
                chkX2TR.Checked = false;

            lblRX1MuteVFOA.SendToBack();
            lblRX1APF.SendToBack();
        }

        private void udFilterLow_LostFocus(object sender, EventArgs e)
        {
            udFilterLow_ValueChanged(sender, e);
        }

        private void udFilterHigh_LostFocus(object sender, EventArgs e)
        {
            udFilterHigh_ValueChanged(sender, e);
        }

        private void udRIT_LostFocus(object sender, EventArgs e)
        {
            udRIT_ValueChanged(sender, e);
        }

        private void udXIT_LostFocus(object sender, EventArgs e)
        {
            udXIT_ValueChanged(sender, e);
        }

        private void DateTime_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (current_datetime_mode + 1 == DateTimeMode.LAST)
                CurrentDateTimeMode = DateTimeMode.OFF;
            else CurrentDateTimeMode = current_datetime_mode + 1;
        }

        private void chkSR_CheckedChanged(object sender, System.EventArgs e)
        {
            //if(SetupForm != null) SetupForm.SpurReduction = chkSR.Checked;
            //if(chkEnableMultiRX.Checked) txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            //if(chkSR.Checked) chkSR.BackColor = button_selected_color;
            //else chkSR.BackColor = SystemColors.Control;
            //if (SetupForm != null)
            //{
            //    if (chkSR.Checked) SetupForm.radAlexAutoCntl.Checked = true;
            //    else SetupForm.radAlexManualCntl.Checked = true;
            //}

            //if (SetupForm != null)
            //{
            //    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            //}
        }

        private void btnChangeTuneStepSmaller_Click(object sender, System.EventArgs e)
        {
            ChangeTuneStepDown();
        }

        private void btnChangeTuneStepLarger_Click(object sender, System.EventArgs e)
        {
            ChangeTuneStepUp();
        }

        private void comboTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm == null || initializing) return;
            SetupForm.TXProfile = comboTXProfile.Text;

            if (comboDigTXProfile.Text != comboTXProfile.Text)
                comboDigTXProfile.Text = comboTXProfile.Text;

            if (comboFMTXProfile.Text != comboTXProfile.Text)
                comboFMTXProfile.Text = comboTXProfile.Text;
            if (current_display_engine == DisplayEngine.GDI_PLUS)
                picDisplay.Invalidate();

            if (comboTXProfile.Focused) btnHidden.Focus();
        }

        private void comboDigTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm == null || initializing) return;
            SetupForm.TXProfile = comboDigTXProfile.Text;

            if (comboTXProfile.Text != comboDigTXProfile.Text)
                comboTXProfile.Text = comboDigTXProfile.Text;

            if (comboFMTXProfile.Text != comboTXProfile.Text)
                comboFMTXProfile.Text = comboTXProfile.Text;
            if (current_display_engine == DisplayEngine.GDI_PLUS)
                picDisplay.Invalidate();

            if (comboDigTXProfile.Focused) btnHidden.Focus();
        }

        private void comboFMTXProfile_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (SetupForm == null || initializing) return;
            SetupForm.TXProfile = comboFMTXProfile.Text;

            if (comboTXProfile.Text != comboDigTXProfile.Text)
                comboTXProfile.Text = comboDigTXProfile.Text;

            if (comboDigTXProfile.Text != comboTXProfile.Text)
                comboDigTXProfile.Text = comboTXProfile.Text;
            if (current_display_engine == DisplayEngine.GDI_PLUS)
                picDisplay.Invalidate();

            if (comboFMTXProfile.Focused) btnHidden.Focus();
        }

        private void chkShowTXFilter_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.DrawTXFilter = chkShowTXFilter.Checked;
        }

        private void mnuFilterReset_Click(object sender, System.EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX1 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx1_filters);

            radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
            radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
            radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
            radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
            radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
            radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
            radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
            radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
            radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
            radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
            radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
            radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
            RX1Filter = rx1_filter;

            if (filterRX1Form != null && !filterRX1Form.IsDisposed)
            {
                filterRX1Form.DSPMode = rx1_dsp_mode;
            }
        }

        private void menuItemRX2FilterReset_Click(object sender, System.EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX2 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx2_filters);

            radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
            radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
            radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
            radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
            radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
            radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
            radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
            radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
            radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
            RX2Filter = rx2_filter;

            if (filterRX2Form != null && !filterRX2Form.IsDisposed)
            {
                filterRX2Form.DSPMode = rx2_dsp_mode;
            }
        }

        private void chkVACStereo_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    SetupForm.VACStereo = chkVACStereo.Checked;
                    vac_stereo = chkVACStereo.Checked;
                }
                else
                {
                    SetupForm.VAC2Stereo = chkVACStereo.Checked;
                    vac2_stereo = chkVACStereo.Checked;
                }
            }
        }

        private void chkCWIambic_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.CWIambic = chkCWIambic.Checked;
        }

        private void chkCWSidetone_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.CWDisableMonitor = chkCWSidetone.Checked;

            if (QSKEnabled && !chkCWSidetone.Checked) NetworkIO.SetCWSidetoneVolume(0); // so we don't get audio artifacts with QSK on and sidetone off
            else if (QSKEnabled && chkCWSidetone.Checked) NetworkIO.SetCWSidetoneVolume(qsk_sidetone_volume); 
        }

        private void udCWPitch_ValueChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.CWPitch = (int)udCWPitch.Value;
            if (udCWPitch.Focused) btnHidden.Focus();
        }

        private void comboVACSampleRate_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACSampleRate = comboVACSampleRate.Text;
            if (comboVACSampleRate.Focused) btnHidden.Focus();
        }

        private void chkX2TR_CheckedChanged(object sender, System.EventArgs e)
        {
            ClickTuneRX2Display = chkX2TR.Checked;

            if (chkX2TR.Checked && chkVFOSync.Checked)
            {
                if (!chkFWCATU.Checked) chkFWCATU.Checked = true;
            }

            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
        }

        private void chkShowTXCWFreq_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.DrawTXCWFreq = chkShowTXCWFreq.Checked;
        }

        private void chkShowCWZero_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.ShowCWZeroLine = chkShowCWZero.Checked;
        }

        private void chkCWBreakInEnabled_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.BreakInEnabled = chkCWBreakInEnabled.Checked;
        }

        private void udCWBreakInDelay_ValueChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.BreakInDelay = (int)udCWBreakInDelay.Value;
            if (udCWBreakInDelay.Focused)
                btnHidden.Focus();
        }

        private void udCWBreakInDelay_LostFocus(object sender, System.EventArgs e)
        {
            udCWBreakInDelay_ValueChanged(sender, e);
        }

        private void chkCWAPFEnabled_CheckedChanged(object sender, System.EventArgs e)
        {
            // if (SetupForm != null) SetupForm.APFEnabled = chkCWAPFEnabled.Checked;
            if (SetupForm != null)
            {
                if (SetupForm.RX1APFControls)
                    SetupForm.RX1APFEnable = chkCWAPFEnabled.Checked;
                if (SetupForm.RX1subAPFControls)
                    SetupForm.RX1subAPFEnable = chkCWAPFEnabled.Checked;
                if (SetupForm.RX2APFControls)
                    SetupForm.RX2APFEnable = chkCWAPFEnabled.Checked;
                else SetupForm.RX2APFEnable = SetupForm.RX2APFEnable;

                if (chkCWAPFEnabled.Checked) cat_apf_status = 1; //-W2PA Added to enable extended CAT control
                else cat_apf_status = 0;
            }
        }

        private void ptbCWAPFFreq_Scroll(object sender, System.EventArgs e)
        {
            //if (SetupForm != null) SetupForm.APFFreq = ptbCWAPFFreq.Value;
            if (SetupForm != null)
            {
                if (SetupForm.RX1APFControls)
                    SetupForm.RX1APFFreq = ptbCWAPFFreq.Value;
                if (SetupForm.RX1subAPFControls)
                    SetupForm.RX1subAPFFreq = ptbCWAPFFreq.Value;
                if (SetupForm.RX2APFControls)
                    SetupForm.RX2APFFreq = ptbCWAPFFreq.Value;
            }
            lblCWAPFTune.Text = "Tune:  " + ptbCWAPFFreq.Value.ToString();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbCWAPFFreq.Focus();
            }
        }

        private void ptbCWAPFBandwidth_Scroll(object sender, System.EventArgs e)
        {
            //if (SetupForm != null) SetupForm.APFBandwidth = ptbCWAPFBandwidth.Value;
            if (SetupForm != null)
            {
                if (SetupForm.RX1APFControls)
                    SetupForm.RX1APFBandwidth = ptbCWAPFBandwidth.Value;
                if (SetupForm.RX1subAPFControls)
                    SetupForm.RX1subAPFBandwidth = ptbCWAPFBandwidth.Value;
                if (SetupForm.RX2APFControls)
                    SetupForm.RX2APFBandwidth = ptbCWAPFBandwidth.Value;
            }
            lblCWAPFBandwidth.Text = "Bandwidth:  " + ptbCWAPFBandwidth.Value.ToString();

            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbCWAPFBandwidth.Focus();
            }
        }

        private void ptbCWAPFGain_Scroll(object sender, System.EventArgs e)
        {
            if (SetupForm != null)
            {
                if (SetupForm.RX1APFControls)
                    SetupForm.RX1APFGain = ptbCWAPFGain.Value;
                if (SetupForm.RX1subAPFControls)
                    SetupForm.RX1subAPFGain = ptbCWAPFGain.Value;
                if (SetupForm.RX2APFControls)
                    SetupForm.RX2APFGain = ptbCWAPFGain.Value;
                // apf_gain = ptbCWAPFGain.Value;
            }
            double gain_value = Math.Round(ptbCWAPFGain.Value / 10.0, 0);
            // lblCWAPFGain.Text = "Gain:  " + ptbCWAPFGain.Value.ToString();
            lblCWAPFGain.Text = "Gain:  " + gain_value.ToString();
            // if (ptbCWAPFGain.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbCWAPFGain.Focus();
            }
        }

        public void DisableDAX()
        {
            // disable VAC on console. dax_audio_enum = false by default
            chkVAC1.Checked = false;
            chkVAC1.Enabled = false;
            chkVAC2.Checked = false;
            chkVAC2.Enabled = false;
        }

        public void EnableDAX()
        {
            // enable VAC on console
            chkVAC1.Enabled = true;
            chkVAC2.Enabled = false;  // set to true later if RX2 installed 
            // dax_audio_enum = true;
        }

        private void chkVAC1_CheckedChanged(object sender, System.EventArgs e)
        {
            if (SetupForm != null) SetupForm.VACEnable = chkVAC1.Checked;
            if (chkVAC1.Checked)
            {
                chkVAC1.BackColor = button_selected_color;

                if (chkVOX.Checked)
                {
                    chkVOX.Checked = false;
                    if (SetupForm != null) SetupForm.VOXEnable = chkVOX.Checked;
                    Audio.VOXActive = false;
                    chkVOX.BackColor = SystemColors.Control;
                }
            }
            else chkVAC1.BackColor = SystemColors.Control;
        }

        private void chkVAC2_CheckedChanged(object sender, EventArgs e)
        {
            if (SetupForm != null) SetupForm.VAC2Enable = chkVAC2.Checked;
            /* if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK || !chkRX2.Checked)
             {
                 if (chkVOX.Checked)
                 {
                     chkVOX.Checked = false;
                     if (SetupForm != null) SetupForm.VOXEnable = chkVOX.Checked;
                     Audio.VOXActive = false;
                     chkVOX.BackColor = SystemColors.Control;
                 }
                 return;
             } */

            if (chkVFOBTX.Checked)
            {
                if (chkVAC2.Checked)
                {
                    ptbVACRXGain.Value = vac2_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac2_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac2_sample_rate;

                    chkVACStereo.Checked = vac2_stereo;
                }
                else
                {
                    ptbVACRXGain.Value = vac_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac_sample_rate;

                    chkVACStereo.Checked = vac_stereo;
                }
            }

            if (chkVAC2.Checked)
            {
                chkVAC2.BackColor = button_selected_color;

                if (chkVOX.Checked)
                {
                    chkVOX.Checked = false;
                    if (SetupForm != null) SetupForm.VOXEnable = chkVOX.Checked;
                    Audio.VOXActive = false;
                    chkVOX.BackColor = SystemColors.Control;
                }
            }
            else chkVAC2.BackColor = SystemColors.Control;
        }

        private void chkRXEQ_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRXEQ.Checked) chkRXEQ.BackColor = button_selected_color;
            else chkRXEQ.BackColor = SystemColors.Control;
            if (EQForm != null) EQForm.RXEQEnabled = chkRXEQ.Checked;
        }

        private void chkTXEQ_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkTXEQ.Checked) chkTXEQ.BackColor = button_selected_color;
            else chkTXEQ.BackColor = SystemColors.Control;
            if (EQForm != null) EQForm.TXEQEnabled = chkTXEQ.Checked;
        }

        private void chkBCI_CheckedChanged(object sender, System.EventArgs e)
        {
            //  if (chkBCI.Checked)
            //      chkBCI.BackColor = button_selected_color;
            //  else
            //    chkBCI.BackColor = SystemColors.Control;
        }

        public bool CheckForTXCW()
        {
            if (!cw_semi_break_in_enabled) return false;
            DSPMode tx_mode = rx1_dsp_mode;
            if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

            bool ret_val = false;

            switch (tx_mode)
            {
                case DSPMode.CWL:
                case DSPMode.CWU:
                    ret_val = true;
                    break;
                default:
                    ret_val = false;
                    break;
            }

            return ret_val;
        }

        #endregion

        #region VFO Events

        private enum TuneLocation
        {
            VFOA = 0,
            VFOB,
            VFOASub,
            DisplayBottom,
            Other,
        }

        private TuneLocation TuneHitTest(int x, int y)
        {
            int left, right, top, bottom;
            left = grpVFOA.Left + txtVFOAFreq.Left;
            right = left + txtVFOAFreq.Width;
            top = grpVFOA.Top + txtVFOAFreq.Top;
            bottom = top + txtVFOAFreq.Height;
            if (x > left && x < right && y > top && y < bottom)
                return TuneLocation.VFOA;

            left = grpVFOB.Left + txtVFOBFreq.Left;
            right = left + txtVFOBFreq.Width;
            top = grpVFOB.Top + txtVFOBFreq.Top;
            bottom = top + txtVFOBFreq.Height;
            if (x > left && x < right && y > top && y < bottom)
                return TuneLocation.VFOB;

            left = grpVFOA.Left + txtVFOABand.Left;
            right = left + txtVFOABand.Width;
            top = grpVFOA.Top + txtVFOABand.Top;
            bottom = top + txtVFOABand.Height;
            if (x > left && x < right && y > top && y < bottom)
                return TuneLocation.VFOASub;

            left = panelDisplay.Left + picDisplay.Left;
            right = left + picDisplay.Width;
            top = panelDisplay.Top + picDisplay.Top + picDisplay.Height / 2;
            bottom = top + picDisplay.Height / 2;
            if (x > left && x < right && y > top && y < bottom)
                return TuneLocation.DisplayBottom;

            return TuneLocation.Other;
        }

        private void Console_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            //			if(this.ActiveControl is TextBoxTS && this.ActiveControl != txtVFOAFreq
            //				&& this.ActiveControl != txtVFOBFreq) return;
            //			if(this.ActiveControl is NumericUpDownTS) return;
            if (this.ActiveControl is PrettyTrackBar)
            {
                btnHidden.Focus();
                return;
            }

            if (this.ActiveControl is TextBoxTS ||
                this.ActiveControl is NumericUpDownTS ||
                this.ActiveControl is TrackBarTS ||
                this.ActiveControl is PrettyTrackBar)
            {
                Console_KeyPress(this, new KeyPressEventArgs((char)Keys.Enter));
                return;
            }

            if (ClientRectangle.Contains(Form.MousePosition.X - Location.X,
                                        Form.MousePosition.Y - Location.Y))
                ToggleFocusMasterTimer();

            if (e.Delta == 0) return;
            int num_steps = 0;
            if (WheelReverse)
                num_steps = (e.Delta > 0 ? -1 : 1);	// 1 per click
            else num_steps = (e.Delta > 0 ? 1 : -1);	// 1 per click
            //int numberToMove = e.Delta / 120;	// 1 per click

            if (vfo_char_width == 0)
                GetVFOCharWidth();

            if (num_steps == 0) return;
            int step = CurrentTuneStepHz;
            if (shift_down && step >= 10) step /= 10;

            switch (TuneHitTest(e.X, e.Y))
            {
                case TuneLocation.VFOA:
                    if (mox) return;
                    double freq = double.Parse(txtVFOAFreq.Text);
                    double mult = 1000.0;
                    int right = grpVFOA.Left + txtVFOAFreq.Left + txtVFOAFreq.Width;
                    if (vfoa_hover_digit < 0)
                    {
                        int x = right + 2 - (vfo_pixel_offset - 5);
                        while (x < e.X && mult > 0.0000011)
                        {
                            mult /= 10.0;
                            x += vfo_char_width;
                            if (mult == 1.0)
                                x += vfo_decimal_space;
                            else x += vfo_char_space;
                        }
                    }
                    else
                    {
                        mult = Math.Pow(10, -vfoa_hover_digit) * 1000.0;
                    }

                    if (mult <= 1.0)
                    {
                        freq += mult * num_steps;
                        //Debug.WriteLine("freq: "+freq.ToString("f6"));
                        VFOAFreq = freq;
                    }
                    break;

                case TuneLocation.VFOB:
                    if (mox && VFOBTX) return;
                    freq = double.Parse(txtVFOBFreq.Text);
                    mult = 1000.0;
                    right = grpVFOB.Left + txtVFOBFreq.Left + txtVFOBFreq.Width;
                    if (vfob_hover_digit < 0)
                    {
                        int x = right + 2 - (vfo_pixel_offset - 5);
                        while (x < e.X && mult > 0.0000011)
                        {
                            mult /= 10;
                            x += vfo_char_width;
                            if (mult == 1.0)
                                x += vfo_decimal_space;
                            else x += vfo_char_space;
                        }
                    }
                    else
                    {
                        mult = Math.Pow(10, -vfob_hover_digit) * 1000.0;
                    }

                    if (mult <= 1.0)
                    {
                        freq += mult * num_steps;
                        VFOBFreq = freq;
                    }
                    break;

                case TuneLocation.VFOASub:
                    if (rx2_enabled && (chkEnableMultiRX.Checked || chkVFOSplit.Checked))
                    {
                        freq = VFOASubFreq;
                        mult = 1000.0;
                        right = grpVFOA.Left + txtVFOABand.Left + txtVFOABand.Width;
                        if (vfoa_sub_hover_digit < 0)
                        {
                            int x = right + 2 - (vfo_sub_pixel_offset - 5);
                            while (x < e.X && mult > 0.0000011)
                            {
                                mult /= 10;
                                x += vfo_sub_char_width;
                                if (mult == 1.0)
                                    x += vfo_sub_decimal_space;
                                else x += vfo_sub_char_space;
                            }
                        }
                        else
                        {
                            mult = Math.Pow(10, -vfoa_sub_hover_digit) * 1000.0;
                        }

                        if (mult <= 1.0)
                        {
                            freq += mult * num_steps;
                            VFOASubFreq = freq;
                        }
                    }
                    else
                    {
                        VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
                    }
                    break;

                case TuneLocation.DisplayBottom:
                    if (rx2_enabled && chkVFOSplit.Checked && current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob)
                        VFOASubFreq = SnapTune(VFOASubFreq, step, num_steps);
                    else if (rx2_enabled || (current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob))
                        VFOBFreq = SnapTune(VFOBFreq, step, num_steps);
                    else
                        VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
                    break;

                case TuneLocation.Other:
                    if (current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob)
                    {
                        if (rx2_enabled && chkVFOSplit.Checked)
                            VFOASubFreq = SnapTune(VFOASubFreq, step, num_steps);
                        else
                            VFOBFreq = SnapTune(VFOBFreq, step, num_steps);
                    }
                    else 
                        if (!mox) VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
                    break;
            }
        }

        /// <summary>
        /// Calculates a "Snapped" frequency that lies on an integer multiple of the Tune Step.
        /// </summary>
        /// <param name="freq_mhz">The starting frequency in MHz</param>
        /// <param name="step_size_hz">The selected step size in Hz</param>
        /// <param name="num_steps">Indicates both the number and direction of steps.  Negative
        /// numbers indicate steps down while positive numbers indicate steps up.</param>
        /// <returns>The adjusted frequency in MHz</returns>
        public double SnapTune(double freq_mhz, int step_size_hz, int num_steps)
        {
            long freq_hz = (long)Math.Round(freq_mhz * 1e6); // convert frequency to Hz -- use long to support >4GHz
            long temp = freq_hz / step_size_hz; // do integer division to end up on a step size boundary

            // handle when starting frequency was already on a step size boundary and tuning down
            if (num_steps < 0 && freq_hz % step_size_hz != 0)
                num_steps++; // off boundary -- add one as the divide takes care of one step

            temp += num_steps; // increment by the number of steps (positive or negative

            freq_hz = temp * step_size_hz; // multiply back up to get hz
            return Math.Round(freq_hz * 1e-6, 6); // return freq in MHz
        }

        private void txtVFOAFreq_LostFocus(object sender, System.EventArgs e)
        {
            if (current_hpsdr_model == HPSDRModel.ANAN200D ||
                current_hpsdr_model == HPSDRModel.ORIONMKII ||
                current_hpsdr_model == HPSDRModel.ANAN7000D ||
                current_hpsdr_model == HPSDRModel.ANAN8000D) UpdateRXADCCtrl();

            if (txtVFOAFreq.Text == "." || txtVFOAFreq.Text == "")
            {
                VFOAFreq = saved_vfoa_freq;
                return;
            }

            double freq = double.Parse(txtVFOAFreq.Text);
            if (freq > 30.0) rx1_above30 = true;
            else rx1_above30 = false;

            if (!click_tune_display || update_centerfreq) // || initializing) !!!! - G3OQD - !!!!
            {
                center_frequency = freq;
                update_centerfreq = false;
            }

            // Lock the display
            if (click_tune_display &&
                ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER && mox && VFOBTX) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANADAPTER && display_duplex) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANADAPTER && !mox) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && mox && VFOBTX) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && display_duplex) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && !mox) ||
                 (Display.CurrentDisplayMode == DisplayMode.WATERFALL)))
            {
                double rx1_osc = Math.Round(-(VFOAFreq - center_frequency) * 1e6);

                //if (rx1_osc < -sample_rate1 / 2)
                //{
                //    VFOAFreq = center_frequency + ((sample_rate1 / 2) - 1) * 0.0000010; 
                //    return;
                //}
                //else if (rx1_osc > sample_rate1 / 2)
                //{
                //    VFOAFreq = center_frequency + ((-sample_rate1 / 2) + 1) * 0.0000010;
                //    return;
                //}

                //-W2PA If we tune beyond the display limits, re-center and keep going.  Original code above just stops tuning at edges.
                double Lmargin = Convert.ToDouble(-Display.RX1FilterLow);
                double Hmargin = Convert.ToDouble(Display.RX1FilterHigh);
                if (Lmargin < 0.0) Lmargin = 0.0;
                if (Hmargin < 0.0) Hmargin = 0.0;
                //double Lmargin = 50.0;
                //double Hmargin = 50.0;
                double Ldisp = Convert.ToDouble(Display.RXDisplayLow);
                double Hdisp = Convert.ToDouble(Display.RXDisplayHigh);
                if (((-rx1_osc) - Lmargin) < Ldisp || ((-rx1_osc) + Hmargin) > Hdisp)
                {
                    center_frequency = freq;
                    update_centerfreq = false;
                    //VFOAFreq = freq;
                    rx1_osc = 0.0;
                }

                if (chkRIT.Checked)
                    rx1_osc -= (int)udRIT.Value;// *0.000001;

                if (rx1_osc > -sample_rate1 / 2 && rx1_osc < sample_rate1 / 2)
                {
                    radio.GetDSPRX(0, 0).RXOsc = rx1_osc; // keep tuning
                    Display.FreqDiff = (int)radio.GetDSPRX(0, 0).RXOsc;
                    if (stereo_diversity)
                    {
                        radio.GetDSPRX(1, 0).RXOsc = rx1_osc; // keep tuning
                        Display.RX2FreqDiff = (int)radio.GetDSPRX(1, 0).RXOsc;
                    }
                }

            }
            else
            {
                radio.GetDSPRX(0, 0).RXOsc = 0.0; // keep tuning
                if (rx1_dsp_mode == DSPMode.DRM)
                {
                    Display.FreqDiff = -12000;
                }
                else Display.FreqDiff = (int)radio.GetDSPRX(0, 0).RXOsc;
            }

            UpdateVFOAFreq(freq.ToString("f6"));

            if (click_tune_display &&
                ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER && mox && VFOBTX) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANADAPTER && display_duplex) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANADAPTER && !mox) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && mox && VFOBTX) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && display_duplex) ||
                 (Display.CurrentDisplayMode == DisplayMode.PANAFALL && !mox) ||
                 (Display.CurrentDisplayMode == DisplayMode.WATERFALL)))
                Display.VFOA = (long)(center_frequency * 1e6); // freeze display vfo
            else
            {
                if (rx1_dsp_mode == DSPMode.DRM)
                {
                    Display.VFOA = (long)(freq * 1e6) - 12000;
                }
                else Display.VFOA = (long)(freq * 1e6);
            }

            if (chkTUN.Checked && chkVFOATX.Checked && !chkVFOSplit.Checked)
            {
                switch (radio.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        Display.VFOA += cw_pitch;
                        break;
                    case DSPMode.CWU:
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                        if (RX1IsOn60mChannel() && current_region == FRSRegion.US)
                            Display.VFOA -= (long)((ModeFreqOffset(rx1_dsp_mode) * 1e6) + cw_pitch);
                        else
                            Display.VFOA -= cw_pitch;
                        break;
                }
            }

            if (stereo_diversity) Display.VFOB = Display.VFOA;

            if (XVTRForm.XVTRFreq(freq) != rx1_xvtr_index)
                RX1XVTRIndex = XVTRForm.XVTRFreq(freq);

            if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                tx_xvtr_index = rx1_xvtr_index;

            if (rx1_xvtr_index < 0) //in HF
            {
                int old_xvtr_index = XVTRForm.XVTRFreq(saved_vfoa_freq);
                if (old_xvtr_index >= 0 && freq >= max_freq)
                {
                    VFOAFreq = saved_vfoa_freq;
                    return;
                }
            }

            //rx
            if (rx1_xvtr_index >= 0)
            {
                RX1XVTRGainOffset = XVTRForm.GetRXGain(rx1_xvtr_index);
                VHFTRRelay = XVTRForm.GetDisablePA(tx_xvtr_index);

                if (vhf_tr_relay)
                {
                    NetworkIO.SetXVTREnable(1);
                    NetworkIO.DisablePA(1);
                }
                else
                {
                    NetworkIO.SetXVTREnable(0);
                    NetworkIO.DisablePA(0);
                }
            }

            if (rx1_xvtr_index < 0)
            {
                RX1XVTRGainOffset = 0.0f;

                if (hf_tr_relay)
                {
                    // NetworkIO.SetXVTREnable(1);
                    NetworkIO.DisablePA(1);
                }
                else
                {
                    //NetworkIO.SetXVTREnable(0);
                    NetworkIO.DisablePA(0);
                }

                if (enable_xvtr_hf)
                    NetworkIO.SetXVTREnable(1); // enable
                else
                    NetworkIO.SetXVTREnable(0); // disable

                if (rx1_step_att_present) udRX1StepAttData_ValueChanged(this, EventArgs.Empty);
                else comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);

            }

            //tx
            if (last_tx_xvtr_index != tx_xvtr_index)
            {
                if (tx_xvtr_index >= 0)
                {
                    if (last_tx_xvtr_index == -1)
                        saved_rx_only = rx_only;

                    RXOnly = XVTRForm.GetRXOnly(tx_xvtr_index);
                }

                if (tx_xvtr_index < 0)
                {
                    if (last_tx_xvtr_index >= 0)
                        RXOnly = saved_rx_only;
                }

            }

            // update Band Info
            string bandInfo;
            double db_freq = freq;
            if (RX1IsIn60m() && current_region == FRSRegion.US) db_freq -= ModeFreqOffset(rx1_dsp_mode);
            bool transmit_allowed = DB.BandText(db_freq, out bandInfo);
            if (!transmit_allowed)
            {
                txtVFOABand.BackColor = out_of_band_color;
            }
            else txtVFOABand.BackColor = band_background_color;

            if (!(rx2_enabled && (chkEnableMultiRX.Checked || chkVFOSplit.Checked)))
                txtVFOABand.Text = bandInfo;

            Band b = BandByFreq(freq, rx1_xvtr_index, false, current_region, true);
            if (b != rx1_band)
                SetRX1Band(b);

            Band old_tx_band = tx_band;
            if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
            {
                b = BandByFreq(freq, tx_xvtr_index, true, current_region, true);

                Band b1 = b; // ke9ns add

                if (extended) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
                {
                    if (Band.BLMF == b) b1 = Band.B160M;
                    else if (Band.B120M == b) b1 = Band.B160M;
                    else if (Band.B90M == b) b1 = Band.B80M;
                    else if (Band.B61M == b) b1 = Band.B80M;
                    else if (Band.B49M == b) b1 = Band.B60M;
                    else if (Band.B41M == b) b1 = Band.B40M;
                    else if (Band.B31M == b) b1 = Band.B30M;
                    else if (Band.B25M == b) b1 = Band.B20M;
                    else if (Band.B22M == b) b1 = Band.B20M;
                    else if (Band.B19M == b) b1 = Band.B17M;
                    else if (Band.B16M == b) b1 = Band.B17M;
                    else if (Band.B14M == b) b1 = Band.B15M;
                    else if (Band.B13M == b) b1 = Band.B12M;
                    else if (Band.B11M == b) b1 = Band.B10M;
                }

                if (b1 != tx_band)
                    SetTXBand(b1);
            }

            Band lo_band = Band.FIRST;
            Band lo_bandb = Band.FIRST;

            if (chkPower.Checked)
            {
                lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, true);
                lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region, false);
                if (penny_ext_ctrl_enabled)
                    Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                UpdateTRXAnt();
                if (rx1_xvtr_index >= 0)
                {
                    // Fix Penny O/C VHF control Vk4xv
                    //lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region);
                    // lo_bandb = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region);
                    // if (penny_ext_ctrl_enabled)
                    // Penny.getPenny().UpdateExtCtrl(lo_band, lo_bandb, mox);

                    //  if (alex_ant_ctrl_enabled)
                    //  Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, true);
                    Alex.getAlex().UpdateAlexAntSelection(lo_band, mox, alex_ant_ctrl_enabled, true);

                }
                else
                {
                    // if (penny_ext_ctrl_enabled)
                    //  Penny.getPenny().UpdateExtCtrl(RX1Band, RX2Band, mox);

                    // if (alex_ant_ctrl_enabled)
                    //  Alex.getAlex().UpdateAlexAntSelection(RX1Band, mox, false);
                    Alex.getAlex().UpdateAlexAntSelection(RX1Band, mox, alex_ant_ctrl_enabled, false);
                }
                UpdateTRXAnt();
            }

            if (tx_band != old_tx_band)
            {
                if (tx_band == Band.B60M)
                {
                    chkXIT.Enabled = false;
                    chkXIT.Checked = false;
                }
                else
                    chkXIT.Enabled = true;
            }

            saved_vfoa_freq = freq;
            double f_LO = 0.0;
            if (rx1_xvtr_index >= 0)
            {
                f_LO = freq - XVTRForm.TranslateFreq(freq);
                freq -= f_LO;
            }
            else
            {
                if (freq < min_freq)
                {
                    freq = min_freq;
                    UpdateVFOAFreq(freq.ToString("f6"));
                }
                else if (freq > max_freq)
                {
                    freq = max_freq;
                    UpdateVFOAFreq(freq.ToString("f6"));
                }
            }

            if (anan7000dpresent || anan8000dpresent)
            {
                if (alexpresent && rx1_band == Band.B6M &&
                   (chkSR.Checked || (!chkSR.Checked && !disable_6m_lna_on_rx && !bpf1_6bp_bypass && !alex_hpf_bypass)))
                    RX16mGainOffset = -RX6mGainOffset;
                else RX16mGainOffset = 0;
            }
            else
            {
                if (alexpresent && rx1_band == Band.B6M &&
                   (chkSR.Checked || (!chkSR.Checked && !disable_6m_lna_on_rx && !alex6bphpf_bypass && !alex_hpf_bypass)) &&
                    current_hpsdr_model != HPSDRModel.ANAN10 &&
                    current_hpsdr_model != HPSDRModel.ANAN10E)
                    RX16mGainOffset = -RX6mGainOffset;
                else RX16mGainOffset = 0;
            }

            double rx_freq = freq;
            double tx_freq = freq;

            if (chkRIT.Checked)
                rx_freq += (int)udRIT.Value * 0.000001;

            if (rx_freq < min_freq) rx_freq = min_freq;
            else if (rx_freq > max_freq) rx_freq = max_freq;

            if (chkXIT.Checked)
                tx_freq += (int)udXIT.Value * 0.000001;

            if (tx_freq < min_freq) tx_freq = min_freq;
            else if (tx_freq > max_freq) tx_freq = max_freq;

            if (mox && !chkVFOSplit.Checked && !full_duplex && !chkVFOBTX.Checked)
            {
                if (!CheckValidTXFreq(current_region, tx_freq, radio.GetDSPTX(0).CurrentDSPMode))
                {
                    switch (radio.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz is not within the\n" +
                                "Band specifications for your region (" + current_region.ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                        default:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                "Band specifications for your region (" + current_region.ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                    }
                    chkMOX.Checked = false;
                    return;
                }
            }

            if (rx1_dsp_mode == DSPMode.CWL)
            {
                rx_freq += (double)cw_pitch * 0.0000010;
                if (!cw_fw_keyer || (cw_fw_keyer && chkTUN.Checked))
                    tx_freq += (double)cw_pitch * 0.0000010;
            }
            else if (rx1_dsp_mode == DSPMode.CWU)
            {
                rx_freq -= (double)cw_pitch * 0.0000010;
                if (!cw_fw_keyer || (cw_fw_keyer && chkTUN.Checked))
                    tx_freq -= (double)cw_pitch * 0.0000010;
            }

            switch (RX1DSPMode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                    if (chkTUN.Checked) tx_freq -= cw_pitch * 1e-6;
                    break;
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.DSB:
                    if (chkTUN.Checked)
                    {
                        if (RX1IsOn60mChannel() && current_region == FRSRegion.US)
                            tx_freq -= (ModeFreqOffset(rx1_dsp_mode) + cw_pitch * 1e-6);
                        else
                            tx_freq -= cw_pitch * 1e-6;
                    }
                    break;
                case DSPMode.LSB:
                case DSPMode.DIGL:
                    if (chkTUN.Checked) tx_freq += cw_pitch * 1e-6;
                    break;
            }

            if (rx_freq < min_freq) rx_freq = min_freq;
            else if (rx_freq > max_freq) rx_freq = max_freq;
            if (tx_freq < min_freq) tx_freq = min_freq;
            else if (tx_freq > max_freq) tx_freq = max_freq;

            if (chkPower.Checked)
            {
                if (Audio.WavePlayback)
                {
                    double f = (wave_freq - (VFOAFreq * 1e6) % sample_rate1);
                    if (f > sample_rate1 / 2) f -= sample_rate1;
                    if (f < -sample_rate1 / 2) f += sample_rate1;
                    radio.GetDSPRX(0, 0).RXOsc = f;
                }
                else
                {
                    if (!chkVFOSplit.Checked && !chkFullDuplex.Checked /*&& !rx1_spectrum_drag*/ && !chkVFOBTX.Checked)
                    {
                        tx_dds_freq_mhz = tx_freq;
                        tx_dds_freq_updated = true;
                        UpdateTXDDSFreq(); // update tx freq
                    }
                    if (!click_tune_display)
                        FWCDDSFreq = rx_freq; // update rx freq

                    if (click_tune_display) //&& rx1_spectrum_tune_drag) //-W2PA This was preventing proper receiver adjustment
                    {
                        if (rx1_xvtr_index >= 0)
                            FWCDDSFreq = XVTRForm.TranslateFreq(center_frequency);
                        else
                        {
                            FWCDDSFreq = center_frequency;
                            switch (RX1DSPMode)  //-W2PA Account for offset when in CW modes.
                            {
                                case DSPMode.CWL:
                                    FWCDDSFreq += CWPitch * 1.0e-6;
                                    break;
                                case DSPMode.CWU:
                                    FWCDDSFreq -= CWPitch * 1.0e-6;
                                    break;
                            }
                        }
                    }

                    if (chkEnableMultiRX.Checked)
                    {
                        int diff;
                        if (rx2_enabled) diff = (int)((VFOASubFreq - VFOAFreq) * 1e6);
                        else diff = (int)((VFOBFreq - VFOAFreq) * 1e6);
                        if (chkRIT.Checked && !mox) diff -= (int)udRIT.Value;
                        int rx2_osc = (int)(radio.GetDSPRX(0, 0).RXOsc - diff);
                        if (rx2_osc > -sample_rate1 / 2 && rx2_osc < sample_rate1 / 2)
                        {
                            radio.GetDSPRX(0, 1).RXOsc = rx2_osc;
                        }
                        else if (chkEnableMultiRX.Checked)
                            chkEnableMultiRX.Checked = false;
                    }

                }
            }
            else if (rx1_xvtr_index >= 0)
                FWCDDSFreq = XVTRForm.TranslateFreq(center_frequency);
            else
                FWCDDSFreq = center_frequency;


            if (chkVFOSync.Checked && txtVFOBFreq.Text != txtVFOAFreq.Text)
            {
                txtVFOBFreq.Text = txtVFOAFreq.Text;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                if (!initializing && RX2Enabled)
                {
                    RX2DSPMode = RX1DSPMode;
                    RX2Filter = RX1Filter;
                }
            }

            if (small_lsd)
            {
                txtVFOAMSD.Visible = true;
                txtVFOALSD.Visible = true;
            }

            if (Display.PeakOn) Display.ResetRX1DisplayPeak();
            last_rx1_xvtr_index = rx1_xvtr_index;
            last_tx_xvtr_index = tx_xvtr_index;

            // UpdateRX1Notches();
            WDSP.RXANBPSetTuneFrequency(WDSP.id(0, 0), (FWCDDSFreq + f_LO) * 1.0e6);
            WDSP.RXANBPSetTuneFrequency(WDSP.id(0, 1), (FWCDDSFreq + f_LO) * 1.0e6);
            UpdatePreamps();

        }

        private static double tuned_freq;
        private void txtVFOAFreq_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    VFOAFreq = saved_vfoa_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtVFOAFreq_LostFocus(txtVFOAFreq, new System.EventArgs());
                btnHidden.Focus();
            }
        }

        private void txtVFOAFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (this.ContainsFocus)
            {
                int old_digit = vfoa_hover_digit;
                int digit_index = 0;
                if (vfo_char_width == 0)
                    GetVFOCharWidth();

                int x = txtVFOAFreq.Width - (vfo_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    if (small_lsd && txtVFOALSD.Visible)
                    {
                        if (digit_index < 6)
                            x += (vfo_char_width + vfo_char_space);
                        else
                            x += (vfo_small_char_width + vfo_small_char_space);

                        if (digit_index == 3)
                            x += (vfo_decimal_space - vfo_char_space);
                        if (digit_index == 6)
                            x += vfo_small_char_width;
                    }
                    else
                    {
                        x += vfo_char_width;
                        if (digit_index == 3)
                            x += vfo_decimal_space;
                        else
                            x += vfo_char_space;
                    }
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                vfoa_hover_digit = digit_index;
                if (vfoa_hover_digit != old_digit)
                    panelVFOAHover.Invalidate();
            }
        }

        private void txtVFOAFreq_MouseLeave(object sender, System.EventArgs e)
        {
            vfoa_hover_digit = -1;
            panelVFOAHover.Invalidate();
        }

        private void txtVFOABand_LostFocus(object sender, System.EventArgs e)
        {
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
            if (txtVFOABand.Text == "." || txtVFOABand.Text == "")
            {
                VFOASubFreq = VFOAFreq;
                return;
            }

            double freq = VFOASubFreq;
            double vfoa = VFOAFreq;

            txtVFOABand.Text = freq.ToString("f6");
            Display.VFOASub = (long)(freq * 1e6);
            if (chkTUN.Checked && chkVFOATX.Checked && chkVFOSplit.Checked)
            {
                switch (radio.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        Display.VFOASub += cw_pitch;
                        break;
                    case DSPMode.CWU:
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                        Display.VFOASub -= cw_pitch;
                        break;
                }
            }
            saved_vfoa_sub_freq = freq;

            //Band b = BandByFreq(freq, tx_xvtr_index, true, current_region);
            //if(chkVFOSplit.Checked)
            //	SetTXBand(b);

            string bandInfo;
            bool transmit_allowed = DB.BandText(freq, out bandInfo);
            if (!CheckValidTXFreq(current_region, freq, radio.GetDSPTX(0).CurrentDSPMode))
            {
                if (chkVFOSplit.Checked && mox && !extended)
                    chkMOX.Checked = false;
            }

            if (chkEnableMultiRX.Checked)
            {
                int diff = (int)((freq - vfoa) * 1e6);
                double sub_osc = radio.GetDSPRX(0, 0).RXOsc - diff;

                if (sub_osc < -sample_rate1 / 2)
                {
                    VFOASubFreq = vfoa + (sample_rate1 / 2 + radio.GetDSPRX(0, 0).RXOsc - 1) * 0.0000010;
                    return;
                }
                else if (sub_osc > sample_rate1 / 2)
                {
                    VFOASubFreq = vfoa + (-sample_rate1 / 2 + radio.GetDSPRX(0, 0).RXOsc + 1) * 0.0000010;
                    return;
                }

                if (sub_osc > -sample_rate1 / 2 && sub_osc < sample_rate1 / 2)
                {
                    radio.GetDSPRX(0, 1).RXOsc = sub_osc;
                }

                // if (PowerOn)
                // {
                //    SetupForm.textBoxTS5.Text = sub_osc.ToString();
                //    SetupForm.textBoxTS6.Text = VFOASubFreq.ToString();
                // }

                //UpdateRX1SubNotches();
            }

            if (chkVFOSplit.Checked)
            {
                tx_xvtr_index = XVTRForm.XVTRFreq(freq);
                Band old_tx_band = tx_band;
                Band b = BandByFreq(freq, tx_xvtr_index, true, current_region, true);

                Band b1 = b; // ke9ns add
                if (extended) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
                {
                    if (Band.BLMF == b) b1 = Band.B160M;
                    else if (Band.B120M == b) b1 = Band.B160M;
                    else if (Band.B90M == b) b1 = Band.B80M;
                    else if (Band.B61M == b) b1 = Band.B80M;
                    else if (Band.B49M == b) b1 = Band.B60M;
                    else if (Band.B41M == b) b1 = Band.B40M;
                    else if (Band.B31M == b) b1 = Band.B30M;
                    else if (Band.B25M == b) b1 = Band.B20M;
                    else if (Band.B22M == b) b1 = Band.B20M;
                    else if (Band.B19M == b) b1 = Band.B17M;
                    else if (Band.B16M == b) b1 = Band.B17M;
                    else if (Band.B14M == b) b1 = Band.B15M;
                    else if (Band.B13M == b) b1 = Band.B12M;
                    else if (Band.B11M == b) b1 = Band.B10M;
                }

                if (chkVFOSplit.Checked && old_tx_band != b1)
                    SetTXBand(b1); // ke9ns mod b1

                //tx
                if (last_tx_xvtr_index != tx_xvtr_index)
                {
                    if (tx_xvtr_index >= 0)
                    {
                        SetupForm.RXOnly = XVTRForm.GetRXOnly(tx_xvtr_index);
                    }
                }

                if (tx_xvtr_index >= 0)
                    freq = XVTRForm.TranslateFreq(freq);

                if (old_tx_band != tx_band)
                {
                    if (tx_band == Band.B60M)
                    {
                        chkXIT.Enabled = false;
                        chkXIT.Checked = false;
                    }
                    else
                        chkXIT.Enabled = true;
                }

                if (chkXIT.Checked)
                    freq += (int)udXIT.Value * 0.000001;

                if (freq < min_freq) freq = min_freq;
                else if (freq > max_freq) freq = max_freq;

                switch (radio.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                        if (chkTUN.Checked) freq -= (double)cw_pitch * 1e-6;
                        break;
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        if (chkTUN.Checked) freq += (double)cw_pitch * 1e-6;
                        break;
                    case DSPMode.CWL:
                        freq += (double)cw_pitch * 0.0000010;
                        break;
                    case DSPMode.CWU:
                        freq -= (double)cw_pitch * 0.0000010;
                        break;
                }

                //Debug.WriteLine("freq: "+freq.ToString("f6"));
                if (!rx1_sub_drag)
                {
                    tx_dds_freq_mhz = freq;
                    tx_dds_freq_updated = true;
                    UpdateTXDDSFreq();
                }
                last_tx_xvtr_index = tx_xvtr_index;
            }
        }

        private void txtVFOABand_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked))
            {
                e.Handled = true;
                return;
            }

            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    VFOASubFreq = saved_vfoa_sub_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtVFOABand_LostFocus(txtVFOABand, new System.EventArgs());
                btnHidden.Focus();
            }
        }

        // txtVFOBFreq
        private void txtVFOBFreq_LostFocus(object sender, System.EventArgs e)
        {
            if (txtVFOBFreq.Text == "" || txtVFOBFreq.Text == ".")
            {
                VFOBFreq = saved_vfob_freq;
                return;
            }

            double freq = double.Parse(txtVFOBFreq.Text);
            if (freq > 30.0) rx2_above30 = true;
            else rx2_above30 = false;

            if (anan7000dpresent || anan8000dpresent)
            {
                if (alexpresent && rx2_band == Band.B6M &&
                   (chkSR.Checked || (!chkSR.Checked && !disable_6m_lna_on_rx && !alex26bphpf_bypass && !alex2_hpf_bypass)))
                    RX26mGainOffset = -RX6mGainOffsetRx2;
                else RX26mGainOffset = 0;
            }

            if (!click_tune_rx2_display || update_rx2_centerfreq)
            {
                center_rx2_frequency = freq;
                update_rx2_centerfreq = false;
            }

            // Lock the display
            if ((click_tune_rx2_display) &&
                             ((Display.CurrentDisplayModeBottom == DisplayMode.PANADAPTER && mox && !VFOBTX) ||
                             (Display.CurrentDisplayModeBottom == DisplayMode.WATERFALL && mox && !VFOBTX) ||
                             (Display.CurrentDisplayModeBottom == DisplayMode.PANADAPTER && !mox) ||
                             (Display.CurrentDisplayModeBottom == DisplayMode.WATERFALL && !mox)))
            {
                double rx2_osc = Math.Round(-(VFOBFreq - center_rx2_frequency) * 1e6);

                //if (rx2_osc < -sample_rate1 / 2)
                //{
                //    VFOBFreq = center_rx2_frequency + ((sample_rate1 / 2) - 1) * 0.0000010;
                //    return;
                //}
                //else if (rx2_osc > sample_rate1 / 2)
                //{
                //    VFOBFreq = center_rx2_frequency + ((-sample_rate1 / 2) + 1) * 0.0000010;
                //    return;
                //}

                //-W2PA If we tune beyond the display limits, re-center and keep going.  Original code above just stops tuning at edges.
                double Lmargin = Convert.ToDouble(-Display.RX2FilterLow);
                double Hmargin = Convert.ToDouble(Display.RX2FilterHigh);
                if (Lmargin < 0.0) Lmargin = 0.0;
                if (Hmargin < 0.0) Hmargin = 0.0;
                //double Lmargin = 50.0;
                //double Hmargin = 50.0;
                double Ldisp = Convert.ToDouble(Display.RX2DisplayLow);
                double Hdisp = Convert.ToDouble(Display.RX2DisplayHigh);
                if (((-rx2_osc) - Lmargin) < Ldisp || ((-rx2_osc) + Hmargin) > Hdisp)
                {
                    center_rx2_frequency = freq;
                    update_rx2_centerfreq = false;
                    VFOBFreq = freq;
                    rx2_osc = 0.0;
                }

                if (chkRIT.Checked && VFOSync)
                    rx2_osc -= (int)udRIT.Value;// *0.000001;

                if (rx2_osc > -sample_rate1 / 2 && rx2_osc < sample_rate1 / 2)
                {
                    radio.GetDSPRX(1, 0).RXOsc = rx2_osc; // keep tuning
                    Display.RX2FreqDiff = (int)radio.GetDSPRX(1, 0).RXOsc;
                }

                // SetupForm.txtRX1VFO.Text = rx1_osc.ToString();
                // SetupForm.txtRX2VFO.Text = diff.ToString();
                // UpdateRX1SubNotches();
            }
            else
            {
                radio.GetDSPRX(1, 0).RXOsc = 0.0;
                Display.RX2FreqDiff = (int)radio.GetDSPRX(1, 0).RXOsc;
            }

            if (chkEnableMultiRX.Checked && !rx2_enabled)
            {
                int diff = (int)((VFOBFreq - VFOAFreq) * 1e6);
                double rx2_osc = radio.GetDSPRX(0, 0).RXOsc - diff;

                if (rx2_osc < -sample_rate1 / 2)
                {
                    VFOBFreq = VFOAFreq + (sample_rate1 / 2 + radio.GetDSPRX(0, 0).RXOsc - 1) * 0.0000010;
                    return;
                }
                else if (rx2_osc > sample_rate1 / 2)
                {
                    VFOBFreq = VFOAFreq + (-sample_rate1 / 2 + radio.GetDSPRX(0, 0).RXOsc + 1) * 0.0000010;
                    return;
                }

                if (rx2_osc > -sample_rate1 / 2 && rx2_osc < sample_rate1 / 2)
                {
                    radio.GetDSPRX(0, 1).RXOsc = rx2_osc;
                }

                //UpdateRX1SubNotches();
            }

            //txtVFOBFreq.Text = freq.ToString("f6"); 
            UpdateVFOBFreq(freq.ToString("f6"));
            if (rx2_enabled)
            {
                if (!stereo_diversity)
                {
                    if ((click_tune_rx2_display) &&
                                     ((Display.CurrentDisplayModeBottom == DisplayMode.PANADAPTER && mox && !VFOBTX) ||
                                     (Display.CurrentDisplayModeBottom == DisplayMode.WATERFALL && mox && !VFOBTX) ||
                                     (Display.CurrentDisplayModeBottom == DisplayMode.PANADAPTER && !mox) ||
                                     (Display.CurrentDisplayModeBottom == DisplayMode.WATERFALL && !mox)))
                    {
                        Display.VFOB = (long)(center_rx2_frequency * 1e6);
                    }
                    else
                        Display.VFOB = (long)(freq * 1e6);

                    if (chkTUN.Checked && chkVFOBTX.Checked)
                    {
                        switch (radio.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                Display.VFOB += cw_pitch;
                                break;
                            case DSPMode.CWU:
                            case DSPMode.USB:
                            case DSPMode.DIGU:
                            case DSPMode.AM:
                            case DSPMode.SAM:
                            case DSPMode.FM:
                            case DSPMode.DSB:
                                Display.VFOB -= cw_pitch;
                                break;
                        }
                    }

                    if (mox && (current_hpsdr_hardware == HPSDRHW.Hermes ||
                                current_hpsdr_hardware == HPSDRHW.HermesII))
                    {
                        if (chkVFOSplit.Checked)
                        {
                            if (display_duplex && !PSState && !click_tune_display)
                                Display.VFOASub = (long)(VFOAFreq * 1e6);
                            else if (display_duplex && !PSState && click_tune_display)
                                Display.VFOASub = (long)(center_frequency * 1e6);

                            else
                                UpdateVFOASub();

                        }

                        else if (!chkVFOSplit.Checked && chkVFOBTX.Checked)
                        {
                            if (PSState)
                                Display.VFOA = (long)(VFOBFreq * 1e6);
                            // else
                            // UpdateVFOASub();

                        }
                        else if (!chkVFOSplit.Checked && !chkVFOBTX.Checked &&
                            PSState && display_duplex)
                            Display.VFOA = (long)(VFOAFreq * 1e6);
                        else
                            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    }

                }
            }
            else
            {
                if (mox)
                {
                    if (current_hpsdr_hardware == HPSDRHW.Hermes ||
                         current_hpsdr_hardware == HPSDRHW.HermesII)
                    {
                        if (chkVFOSplit.Checked)
                        {
                            if (PSState && !display_duplex)
                                Display.VFOASub = (long)(freq * 1e6);
                            else if (!PSState && !display_duplex)
                                Display.VFOASub = (long)(freq * 1e6);
                            else if (!PSState)
                                // Display.VFOA = (long)(VFOAFreq * 1e6);
                                Display.VFOASub = (long)(center_frequency * 1e6);
                            else if (PSState)
                                Display.VFOASub = (long)(freq * 1e6);
                        }
                        else if (click_tune_display && PSState && display_duplex)
                        {
                            Display.VFOA = (long)(VFOAFreq * 1e6);
                            // Display.VFOA = (long)(center_frequency * 1e6);
                        }
                        else if (click_tune_display && PSState && !display_duplex)
                        {
                            Display.VFOA = (long)(VFOAFreq * 1e6);
                        }
                        else
                            Display.VFOASub = (long)(VFOAFreq * 1e6);
                    }
                    else if (display_duplex)
                       // Display.VFOASub = (long)(VFOAFreq * 1e6);
                        Display.VFOASub = (long)(center_frequency * 1e6);
                }
                else
                    Display.VFOASub = (long)(freq * 1e6);

                if (chkTUN.Checked && chkVFOBTX.Checked)
                {
                    switch (radio.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.LSB:
                        case DSPMode.DIGL:
                            Display.VFOASub += cw_pitch;
                            break;
                        case DSPMode.CWU:
                        case DSPMode.USB:
                        case DSPMode.DIGU:
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FM:
                        case DSPMode.DSB:
                            Display.VFOASub -= cw_pitch;
                            break;
                    }
                }
            }

            if (XVTRForm != null)
            {
                if (XVTRForm.XVTRFreq(freq) != rx2_xvtr_index)
                    RX2XVTRIndex = XVTRForm.XVTRFreq(freq);
                if (rx2_xvtr_index < 0)
                {
                    int old_xvtr_index = XVTRForm.XVTRFreq(saved_vfob_freq);
                    if (old_xvtr_index >= 0 && freq >= max_freq)
                    {
                        VFOBFreq = saved_vfob_freq;
                        return;
                    }
                }
            }

            // update Band Info
            string bandInfo;
            double db_freq = freq;
            if (current_region == FRSRegion.US)
            {
                if (RX2IsIn60m())
                    db_freq -= ModeFreqOffset(rx2_dsp_mode);
                else if (RX1IsIn60m())
                    db_freq -= ModeFreqOffset(rx1_dsp_mode);
            }

            bool transmit = DB.BandText(db_freq, out bandInfo);
            if (transmit == false)
            {
                txtVFOBBand.BackColor = Color.DimGray;
                // if (chkVFOSplit.Checked && mox)
                //   chkMOX.Checked = false;
            }
            else txtVFOBBand.BackColor = band_background_color;
            txtVFOBBand.Text = bandInfo;

            Band lo_band = Band.FIRST;
            Band lo_banda = Band.FIRST;

            if (chkPower.Checked)
            {
                //  if (rx2_xvtr_index >= 0)
                //{
                // Fix Penny O/C VHF control Vk4xv
                lo_band = BandByFreq(XVTRForm.TranslateFreq(VFOBFreq), rx2_xvtr_index, false, current_region, false);
                lo_banda = BandByFreq(XVTRForm.TranslateFreq(VFOAFreq), rx1_xvtr_index, false, current_region, false);

                if (penny_ext_ctrl_enabled)
                    Penny.getPenny().UpdateExtCtrl(lo_banda, lo_band, mox);
                // }
                //else
                //{
                //    if (penny_ext_ctrl_enabled)
                //        Penny.getPenny().UpdateExtCtrl(RX1Band, RX2Band, mox);                
                //}
            }

            saved_vfob_freq = freq;

            // if (current_model == Model.HPSDR || current_model == Model.HERMES)
            //  {
            if (chkVFOBTX.Checked) goto set_tx_freq;
            if (chkVFOATX.Checked) goto set_rx2_freq;
            else if (chkVFOSplit.Checked || full_duplex)
                goto set_tx_freq;
            else goto end;
        // }
        //  else if (mox && chkVFOSplit.Checked)
        //     goto set_tx_freq;
        // else goto end;

        set_tx_freq:
            // int last_tx_xvtr_index = tx_xvtr_index;
            tx_xvtr_index = rx2_xvtr_index;
            double tx_freq = freq;
            Band old_tx_band = tx_band;
            Band b = BandByFreq(tx_freq, tx_xvtr_index, true, current_region, false);

            Band b1 = b; // ke9ns add
            if (extended) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
            {
                if (Band.BLMF == b) b1 = Band.B160M;
                else if (Band.B120M == b) b1 = Band.B160M;
                else if (Band.B90M == b) b1 = Band.B80M;
                else if (Band.B61M == b) b1 = Band.B80M;
                else if (Band.B49M == b) b1 = Band.B60M;
                else if (Band.B41M == b) b1 = Band.B40M;
                else if (Band.B31M == b) b1 = Band.B30M;
                else if (Band.B25M == b) b1 = Band.B20M;
                else if (Band.B22M == b) b1 = Band.B20M;
                else if (Band.B19M == b) b1 = Band.B17M;
                else if (Band.B16M == b) b1 = Band.B17M;
                else if (Band.B14M == b) b1 = Band.B15M;
                else if (Band.B13M == b) b1 = Band.B12M;
                else if (Band.B11M == b) b1 = Band.B10M;
            }
            if (old_tx_band != b1)
                SetTXBand(b1); // ke9ns mod b1

            if (tx_xvtr_index >= 0)
            {
                tx_freq = XVTRForm.TranslateFreq(tx_freq);

                if (XVTRForm.GetDisablePA(tx_xvtr_index))
                {
                    NetworkIO.SetXVTREnable(1);
                    NetworkIO.DisablePA(1);
                }
                else
                {
                    NetworkIO.SetXVTREnable(0);
                    NetworkIO.DisablePA(0);
                }

            }

            //tx
            if (last_tx_xvtr_index != tx_xvtr_index)
            {
                if (tx_xvtr_index >= 0)
                {
                    if (last_tx_xvtr_index == -1)
                        saved_rx_only = rx_only;
                    RXOnly = XVTRForm.GetRXOnly(tx_xvtr_index);
                }
                else if (tx_xvtr_index < 0)
                {
                    if (last_tx_xvtr_index >= 0)
                        RXOnly = saved_rx_only;
                }
            }

            if (tx_xvtr_index < 0) //tx on HF
            {
                int old_xvtr_index = XVTRForm.XVTRFreq(saved_vfob_freq);
                if (old_xvtr_index >= 0 && freq >= max_freq)
                {
                    VFOBFreq = saved_vfob_freq;
                    return;
                }

                if (hf_tr_relay)
                {
                    // NetworkIO.SetXVTREnable(1);
                    NetworkIO.DisablePA(1);
                }
                else
                {
                    // NetworkIO.SetXVTREnable(0);
                    NetworkIO.DisablePA(0);
                }

                if (enable_xvtr_hf)
                    NetworkIO.SetXVTREnable(1); // enable
                else
                    NetworkIO.SetXVTREnable(0); // disable
            }

            if (old_tx_band != tx_band)
            {
                if (tx_band == Band.B60M)
                {
                    chkXIT.Enabled = false;
                    chkXIT.Checked = false;
                }
                else
                    chkXIT.Enabled = true;
            }
            if (chkXIT.Checked)
                tx_freq += (int)udXIT.Value * 0.000001;

            if (tx_freq < min_freq) tx_freq = min_freq;
            else if (tx_freq > max_freq) tx_freq = max_freq;

            DSPMode tx_mode = radio.GetDSPTX(0).CurrentDSPMode;
            // if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

            if (mox)
            {
                if (!CheckValidTXFreq(current_region, tx_freq, tx_mode))
                {
                    switch (radio.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz is not within the\n" +
                                "Band specifications for your region (" + ((int)current_region).ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                        default:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                "Band specifications for your region (" + ((int)current_region).ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                    }
                    chkMOX.Checked = false;
                    return;
                }
            }

            switch (tx_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.DSB:
                    if (chkTUN.Checked) tx_freq -= (double)cw_pitch * 1e-6;
                    break;
                case DSPMode.LSB:
                case DSPMode.DIGL:
                    if (chkTUN.Checked) tx_freq += (double)cw_pitch * 1e-6;
                    break;
                case DSPMode.CWL:
                    if (!cw_fw_keyer || (cw_fw_keyer && chkTUN.Checked))
                        tx_freq += (double)cw_pitch * 0.0000010;
                    break;
                case DSPMode.CWU:
                    if (!cw_fw_keyer || (cw_fw_keyer && chkTUN.Checked))
                        tx_freq -= (double)cw_pitch * 0.0000010;
                    break;
            }
            // }

            if (!rx1_sub_drag)
            {
                tx_dds_freq_mhz = tx_freq;
                tx_dds_freq_updated = true;
                UpdateTXDDSFreq();

                //if (rx2_enabled) 
                goto set_rx2_freq;
            }
            goto end;

        set_rx2_freq:
            //rx2_xvtr_index = xvtr_index;

            Band band = BandByFreq(freq, rx2_xvtr_index, false, current_region, false);
            if (band != rx2_band)
                SetRX2Band(band);

            // SetRX2Band(BandByFreq(freq, rx2_xvtr_index, false, current_region));
            double f_LO = 0.0;
            if (rx2_xvtr_index >= 0)
            {
                f_LO = freq - XVTRForm.TranslateFreq(freq);
                freq -= f_LO;
            }

            if (rx2_xvtr_index < 0)
            {
                RX2XVTRGainOffset = 0.0f;
            }
            else
            {
                freq = XVTRForm.TranslateFreq(freq);
                RX2XVTRGainOffset = XVTRForm.GetRXGain(rx2_xvtr_index);
            }

            if (chkRIT.Checked && VFOSync)
                freq += (int)udRIT.Value * 0.000001;

            if (freq < min_freq) freq = min_freq;
            else if (freq > max_freq) freq = max_freq;

            if (rx2_dsp_mode == DSPMode.CWL)
                freq += (double)cw_pitch * 0.0000010;
            else if (rx2_dsp_mode == DSPMode.CWU)
                freq -= (double)cw_pitch * 0.0000010;

            if (!stereo_diversity)
            {
                if (!click_tune_rx2_display || set_rx2_freq)
                    RX2DDSFreq = freq;

                if (click_tune_rx2_display) //&& rx2_spectrum_tune_drag) //-W2PA This was preventing proper receiver adjustment
                {
                    RX2DDSFreq = center_rx2_frequency;
                    switch (RX2DSPMode)  //-W2PA Account for offset when in CW modes.
                    {
                        case DSPMode.CWL:
                            RX2DDSFreq += CWPitch * 1.0e-6;
                            break;
                        case DSPMode.CWU:
                            RX2DDSFreq -= CWPitch * 1.0e-6;
                            break;
                    }
                }
            }

            set_rx2_freq = false;
            // UpdateRX2Notches();
            WDSP.RXANBPSetTuneFrequency(WDSP.id(2, 0), (RX2DDSFreq + f_LO) * 1.0e6);
            goto end;

        end:

            if (chkVFOSync.Checked && txtVFOAFreq.Text != txtVFOBFreq.Text)
            {
                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }

            if (small_lsd)
            {
                txtVFOBMSD.Visible = true;
                txtVFOBLSD.Visible = true;
            }
            last_tx_xvtr_index = tx_xvtr_index;
            last_rx2_xvtr_index = rx2_xvtr_index;
        }

        private void txtVFOBFreq_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
        {
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            int KeyCode = (int)e.KeyChar;
            if ((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
                KeyCode != 8 &&								// backspace
                !e.KeyChar.ToString().Equals(separator) &&	// decimal
                KeyCode != 27)								// escape
            {
                e.Handled = true;
            }
            else
            {
                if (e.KeyChar.ToString().Equals(separator))
                {
                    e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
                }
                else if (KeyCode == 27)
                {
                    VFOBFreq = saved_vfob_freq;
                    btnHidden.Focus();
                }
            }
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtVFOBFreq_LostFocus(txtVFOBFreq, new System.EventArgs());
                btnHidden.Focus();
            }
        }

        private void txtVFOBFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (this.ContainsFocus)
            {
                int old_digit = vfob_hover_digit;
                int digit_index = 0;
                if (vfo_char_width == 0)
                    GetVFOCharWidth();

                int x = txtVFOBFreq.Width - (vfo_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    if (small_lsd && txtVFOBLSD.Visible)
                    {
                        if (digit_index < 6)
                            x += (vfo_char_width + vfo_char_space);
                        else
                            x += (vfo_small_char_width + vfo_small_char_space);

                        if (digit_index == 3)
                            x += (vfo_decimal_space - vfo_char_space);
                        if (digit_index == 6)
                            x += vfo_small_char_width;
                    }
                    else
                    {
                        x += vfo_char_width;
                        if (digit_index == 3)
                            x += vfo_decimal_space;
                        else
                            x += vfo_char_space;
                    }
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                vfob_hover_digit = digit_index;
                if (vfob_hover_digit != old_digit)
                    panelVFOBHover.Invalidate();
            }
        }

        private void txtVFOBFreq_MouseLeave(object sender, System.EventArgs e)
        {
            vfob_hover_digit = -1;
            panelVFOBHover.Invalidate();
        }

        private void panelVFOAHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOAFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));

            /*txtVFOAFreq_MouseMove(sender, new MouseEventArgs(MouseButtons.None, 0,
                e.X+panelVFOAHover.Left-10, e.Y+panelVFOAHover.Top, 0));*/
        }

        private void panelVFOBHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOBFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));

            /*txtVFOBFreq_MouseMove(sender, new MouseEventArgs(MouseButtons.None, 0,
                e.X+panelVFOBHover.Left-10, e.Y+panelVFOBHover.Top, 0));*/
        }

        private void txtVFOALSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAMSD.Visible = false;
            txtVFOALSD.Visible = false;
            txtVFOAFreq.Focus();
            txtVFOAFreq.SelectAll();
        }

        private void txtVFOALSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOAFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));

            /*txtVFOAFreq_MouseMove(txtVFOALSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X+165, e.Y+25, e.Delta));*/
        }

        private void txtVFOAMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAMSD.Visible = false;
            txtVFOALSD.Visible = false;
            txtVFOAFreq.Focus();
            txtVFOAFreq.SelectAll();
        }

        private void txtVFOAMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOAFreq_MouseMove(txtVFOAMSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
        }

        private void txtVFOAMSD_MouseLeave(object sender, System.EventArgs e)
        {
            txtVFOAFreq_MouseLeave(txtVFOAMSD, e);
        }

        private void txtVFOBMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBMSD.Visible = false;
            txtVFOBLSD.Visible = false;
            txtVFOBFreq.Focus();
            txtVFOBFreq.SelectAll();
        }

        private void txtVFOBMSD_MouseLeave(object sender, System.EventArgs e)
        {
            txtVFOBFreq_MouseLeave(txtVFOBMSD, e);
        }

        private void txtVFOBMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBFreq_MouseMove(txtVFOBMSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
        }

        private void txtVFOBLSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            txtVFOBMSD.Visible = false;
            txtVFOBLSD.Visible = false;
            txtVFOBFreq.Focus();
            txtVFOBFreq.SelectAll();
        }

        private void txtVFOBLSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Control c1 = (Control)sender;
            Control c2 = txtVFOBFreq;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));

            /*txtVFOBFreq_MouseMove(txtVFOBLSD,
                new MouseEventArgs(e.Button, e.Clicks, e.X+165, e.Y+25, e.Delta));*/
        }

        #endregion

        #region Display Events

        private bool rx1_low_filter_drag = false;
        private bool rx1_high_filter_drag = false;
        private bool rx1_whole_filter_drag = false;
        private bool rx1_sub_drag = false;
        private bool rx1_spectrum_drag = false;

        private bool rx2_low_filter_drag = false;
        private bool rx2_high_filter_drag = false;
        private bool rx2_whole_filter_drag = false;
        //private bool rx2_sub_drag = false;
        private bool rx2_spectrum_drag = false;

        private bool tx_low_filter_drag = false;
        private bool tx_high_filter_drag = false;
        private bool tx_whole_filter_drag = false;

        private int whole_filter_start_x = 0;
        private int whole_filter_start_low = 0;
        private int whole_filter_start_high = 0;
        private int sub_drag_last_x = 0;
        private int spectrum_drag_last_x = 0;
        private double sub_drag_start_freq = 0.0;

        private bool notch_drag = false;
        private Point notch_drag_start_point = new Point(0, 0);
        private Notch notch_drag_start; // starting settings for notch
        private Notch notch_drag_active; // notch to use for modifying
        private int notch_drag_max_delta_x = 0;
        private int notch_drag_max_delta_y = 0;
        private bool notch_zoom = false;
        private bool agc_knee_drag = false;
        private Point agc_knee_drag_start_point = new Point(0, 0);
        private bool agc_hang_drag = false;
        private bool rx1_click_tune_drag = false;
        private bool rx2_click_tune_drag = false;
        private bool rx1_spectrum_tune_drag = false;
        private bool rx2_spectrum_tune_drag = false;

        private bool rx1_grid_adjust = false;
        private bool rx2_grid_adjust = false;
        private bool tx1_grid_adjust = false;
        private bool tx2_grid_adjust = false;
        private bool gridmaxadjust = false;
        private bool wfmaxadjust = false;
        private bool wfminadjust = false;
        private bool gridminmaxadjust = false;

        private Point grid_minmax_drag_start_point = new Point(0, 0);
        //  private int grid_minmax_drag_max_delta_x = 0;
        private float grid_minmax_max_y = 0;
        private float grid_minmax_min_y = 0;
        private Cursor grab = new Cursor(msgrab);
        private Cursor grabbing = new Cursor(msgrabbing);

        private void picDisplay_MouseMove(object sender, MouseEventArgs e)
        {
            Cursor next_cursor = null;
            try
            {
                // get filter location information
                int filt_low_x = 0;
                int filt_high_x = 0;
                if (rx2_enabled && e.Y > picDisplay.Height / 2) // if RX2 is enabled and the cursor is in the lower half of the display
                {
                    if (mox)// && chkVFOBTX.Checked)
                    {
                        filt_low_x = HzToPixel(radio.GetDSPTX(0).TXFilterLow, 2);
                        filt_high_x = HzToPixel(radio.GetDSPTX(0).TXFilterHigh, 2);
                    }
                    else
                    {
                        filt_low_x = HzToPixel(radio.GetDSPRX(1, 0).RXFilterLow, 2);
                        filt_high_x = HzToPixel(radio.GetDSPRX(1, 0).RXFilterHigh, 2);
                    }
                }
                else
                {
                    if (mox)// && chkVFOATX.Checked)
                    {
                        filt_low_x = HzToPixel(radio.GetDSPTX(0).TXFilterLow);
                        filt_high_x = HzToPixel(radio.GetDSPTX(0).TXFilterHigh);
                    }
                    else
                    {
                        filt_low_x = HzToPixel(radio.GetDSPRX(0, 0).RXFilterLow);
                        filt_high_x = HzToPixel(radio.GetDSPRX(0, 0).RXFilterHigh);
                    }
                }

                // get VFO A Sub + Filter location information
                int vfoa_sub_x = 0;
                int vfoa_sub_low_x = 0;
                int vfoa_sub_high_x = 0;
                if (chkEnableMultiRX.Checked && !mox)
                {
                    if (!rx2_enabled)
                    {
                        vfoa_sub_x = HzToPixel((float)((VFOBFreq - VFOAFreq) * 1e6));
                        vfoa_sub_low_x = vfoa_sub_x + (HzToPixel(radio.GetDSPRX(0, 0).RXFilterLow) - HzToPixel(0.0f));
                        vfoa_sub_high_x = vfoa_sub_x + (HzToPixel(radio.GetDSPRX(0, 0).RXFilterHigh) - HzToPixel(0.0f));
                    }
                    else
                    {
                        vfoa_sub_x = HzToPixel((float)((VFOASubFreq - VFOAFreq) * 1e6));
                        vfoa_sub_low_x = vfoa_sub_x + (HzToPixel(radio.GetDSPRX(0, 1).RXFilterLow) - HzToPixel(0.0f));
                        vfoa_sub_high_x = vfoa_sub_x + (HzToPixel(radio.GetDSPRX(0, 1).RXFilterHigh) - HzToPixel(0.0f));
                    }
                }

                // get VFO B filter location information
                int vfob_x = 0;
                int vfob_low_x = 0;
                int vfob_high_x = 0;
                if (rx2_enabled && rx2_spectrum_drag)
                {
                    vfob_x = HzToPixel((float)((VFOBFreq - VFOAFreq) * 1e6));
                    vfob_low_x = vfob_x + (HzToPixel(radio.GetDSPRX(1, 0).RXFilterLow) - HzToPixel(0.0f));
                    vfob_high_x = vfob_x + (HzToPixel(radio.GetDSPRX(1, 0).RXFilterHigh) - HzToPixel(0.0f));
                }

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.PANAFALL:

                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANAFALL:
                                if ((e.X > display_grid_x && e.X < display_grid_w) &&
                                    (e.Y < picDisplay.Height / 2 && e.Y > 10))
                                {
                                    if (gridminmaxadjust || gridmaxadjust) Cursor = grabbing;
                                    else Cursor = grab;
                                    rx1_grid_adjust = true;
                                    rx2_grid_adjust = false;
                                }
                                else
                                {
                                    rx1_grid_adjust = false;
                                    rx2_grid_adjust = false;
                                }
                                break;
                            default:
                                if (rx2_enabled && (e.Y > (picDisplay.Height / 2) && e.Y > 10) &&
                                   (e.X > display_grid_x && e.X < display_grid_w))
                                {
                                    if (gridminmaxadjust || gridmaxadjust) Cursor = grabbing;
                                    else Cursor = grab;
                                    rx2_grid_adjust = true;
                                    rx1_grid_adjust = false;
                                }
                                else if ((e.X > display_grid_x && e.X < display_grid_w) &&
                                    (e.Y < picDisplay.Height && e.Y > 10))
                                {
                                    if (gridminmaxadjust || gridmaxadjust) Cursor = grabbing;
                                    else Cursor = grab;
                                    rx1_grid_adjust = true;
                                    rx2_grid_adjust = false;
                                }
                                else
                                {
                                    rx1_grid_adjust = false;
                                    rx2_grid_adjust = false;
                                }
                                break;
                        }

                        if (rx1_grid_adjust && gridminmaxadjust && !tx1_grid_adjust)
                        {
                           // bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                            float min_val = grid_minmax_min_y;
                            min_val += (float)delta_db;

                           // if (update)
                           // {
                                SetupForm.DisplayGridMax = val;
                                SetupForm.DisplayGridMin = min_val;
                           // }
                        }

                        if (rx2_grid_adjust && gridminmaxadjust && !tx2_grid_adjust)
                        {
                          //  bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;

                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                            float min_val = grid_minmax_min_y;
                            min_val += (float)delta_db;

                          //  if (update)
                          //  {
                                SetupForm.RX2DisplayGridMax = val;
                                SetupForm.RX2DisplayGridMin= min_val;
                           // }
                        }

                        if (rx1_grid_adjust && gridmaxadjust && !tx1_grid_adjust)
                        {
                           // bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                          //  if (update)
                          //  {
                                SetupForm.DisplayGridMax = val;
                          //  }
                        }

                        if (rx2_grid_adjust && gridmaxadjust && !tx2_grid_adjust)
                        {
                          //  bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;

                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;

                         //   if (update)
                         //   {
                                SetupForm.RX2DisplayGridMax = val;
                         //   }
                        }

                        if (rx1_grid_adjust && gridminmaxadjust && tx1_grid_adjust)
                        {
                        //    bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                            float min_val = grid_minmax_min_y;
                            min_val += (float)delta_db;

                        //    if (update)
                        //    {
                                SetupForm.TXGridMax = val;
                                SetupForm.TXGridMin = min_val;
                         //   }
                        }

                        if (rx2_grid_adjust && gridminmaxadjust && tx2_grid_adjust)
                        {
                          //  bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;

                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                            float min_val = grid_minmax_min_y;
                            min_val += (float)delta_db;

                          //  if (update)
                          //  {
                                SetupForm.TXGridMax = val;
                                SetupForm.TXGridMin = min_val;
                         //   }
                        }

                        if (rx1_grid_adjust && gridmaxadjust && tx1_grid_adjust)
                        {
                        //    bool update = true;
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;

                          //  if (update)
                          //  {
                                SetupForm.TXGridMax = val;
                          //  }
                        }

                        if (rx2_grid_adjust && gridmaxadjust && tx2_grid_adjust)
                        {
                       //     bool update = true;
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;

                         //   if (update)
                          //  {
                                SetupForm.TXGridMax = val;
                          //  }
                        }

                        break;
                }

         /*       switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANAFALL:
                       
                        if ((e.X > display_grid_x && e.X < display_grid_w) &&
                            (e.Y < picDisplay.Height / 2 && e.Y > 10))
                        {
                            if (gridminmaxadjust || gridmaxadjust) Cursor = grabbing;
                            else Cursor = grab;
                            rx1_grid_adjust = true;
                            rx2_grid_adjust = false;
                        }
                        else
                        {
                            rx1_grid_adjust = false;
                            rx2_grid_adjust = false;
                        }

                        if (rx1_grid_adjust && gridminmaxadjust)// && !tx1_grid_adjust)
                        {
                            bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;
                            float min_val = grid_minmax_min_y;
                            min_val += (float)delta_db;

                            if (update)
                            {
                                SetupForm.DisplayGridMax = val;
                                SetupForm.DisplayGridMin = min_val;
                            }
                        }

                        if (rx1_grid_adjust && gridmaxadjust)// && !tx1_grid_adjust)
                        {
                            bool update = true;
                            //  double db_per_pixel = PixelToDb(1) - PixelToDb(0);
                            int delta_y = e.Y - grid_minmax_drag_start_point.Y;
                            double delta_db = (delta_y / 10) * 5;
                            float val = grid_minmax_max_y;
                            val += (float)delta_db;

                            if (update)
                            {
                                SetupForm.DisplayGridMax = val;
                            }
                        }

                        break;
                } */

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.SPECTRUM:
                        DisplayCursorX = e.X;
                        DisplayCursorY = e.Y;
                        float x = PixelToHz(e.X);
                        float y = PixelToDb(e.Y);
                        double rf_freq;
                        if (rx2_enabled && e.Y > picDisplay.Height / 2)
                            rf_freq = VFOBFreq + (double)x * 0.0000010;
                        else rf_freq = VFOAFreq + (double)x * 0.0000010;

                        if (rx1_dsp_mode == DSPMode.CWL)
                            rf_freq += (double)cw_pitch * 0.0000010;
                        else if (rx1_dsp_mode == DSPMode.CWU)
                            rf_freq -= (double)cw_pitch * 0.0000010;
                        txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";
                        txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

                        string temp_text = rf_freq.ToString("f6") + " MHz";
                        int jper = temp_text.IndexOf(separator) + 4;
                        txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));
                        break;
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                        DisplayCursorX = e.X; // update display cursor position
                        DisplayCursorY = e.Y;
                        x = PixelToHz(e.X);
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                            case DisplayMode.PANADAPTER:
                                y = PixelToDb(e.Y);
                                txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

                                float cal_offset = 0.0f;
                                if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                {
                                    switch (RX2AGCMode)
                                    {
                                        case AGCMode.FIXD:
                                            cal_offset = 0.0f;
                                            break;
                                        default:
                                            cal_offset = 2.0f + (Display.RX1DisplayCalOffset +
                                           (Display.RX1PreampOffset - Display.AlexPreampOffset) - Display.RX2FFTSizeOffset);
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (RX1AGCMode)
                                    {
                                        case AGCMode.FIXD:
                                            cal_offset = 0.0f;
                                            break;
                                        default:
                                            cal_offset = 2.0f + (Display.RX1DisplayCalOffset +
                                           (Display.RX1PreampOffset - Display.AlexPreampOffset) - Display.RX1FFTSizeOffset);
                                            break;
                                    }
                                }

                                if (!mox)
                                {
                                    if (show_agc)
                                    {
                                        if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                        {
                                            if (Display.AGCRX2Knee.Contains(e.X, e.Y))
                                            {
                                                if (agc_knee_drag) Cursor = grabbing;
                                                else Cursor = grab;
                                            }
                                            if (Display.AGCRX2Hang.Contains(e.X, e.Y))
                                            {
                                                if (agc_hang_drag) Cursor = grabbing;
                                                else Cursor = grab;
                                            }
                                        }
                                        else
                                        {
                                            if (Display.AGCKnee.Contains(e.X, e.Y))
                                            {
                                                if (agc_knee_drag) Cursor = grabbing;
                                                else Cursor = grab;
                                            }
                                            if (Display.AGCHang.Contains(e.X, e.Y))
                                            {
                                                if (agc_hang_drag) Cursor = grabbing;
                                                else Cursor = grab;
                                            }
                                        }
                                    }
                                }

                                if (agc_knee_drag && show_agc)
                                {
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                    {
                                        double agc_rx2_thresh_point = (double)PixelToRx2Db(e.Y + 4);
                                        agc_rx2_thresh_point -= (double)cal_offset;
                                        if (agc_rx2_thresh_point > 2) agc_rx2_thresh_point = 2;
                                        if (agc_rx2_thresh_point < -143.0) agc_rx2_thresh_point = -143.0;
                                        // Debug.WriteLine("agc_db_point2: " + agc_db_point);

                                        double agc_rx2_top = 0.0;
                                        //DttSP.SetRXAGCThresh(2, 0, agc_rx2_thresh_point);
                                        WDSP.SetRXAAGCThresh(WDSP.id(2, 0), agc_rx2_thresh_point, 4096.0, sample_rate1);
                                        //DttSP.GetRXAGCMaxGain(2, 0, &agc_rx2_top);
                                        WDSP.GetRXAAGCTop(WDSP.id(2, 0), &agc_rx2_top);

                                        agc_rx2_top = Math.Round(agc_rx2_top);

                                        //DttSP.SetRXAGCThresh(1, 0, agc_rx2_thresh_point);
                                        //DttSP.SetRXAGCThresh(0, 0, agc_rx2_thresh_point);
                                        // txtOverload.Text = agc_top.ToString("f3") + " " + agc_thresh_point.ToString("f3");
                                        switch (RX2AGCMode)
                                        {
                                            case AGCMode.FIXD:
                                                if (agc_rx2_top > 120) agc_rx2_top = 120;
                                                if (agc_rx2_top < -20.0) agc_rx2_top = -20.0;

                                                if (SetupForm != null) SetupForm.AGCRX2FixedGain = (int)agc_rx2_top;// agc_top;
                                                // Debug.WriteLine("agc_db_point3: " + agc_db_point);
                                                break;
                                            default:
                                                if (agc_rx2_top > 120) agc_rx2_top = 120;
                                                if (agc_rx2_top < -20.0) agc_rx2_top = -20.0;

                                                if (SetupForm != null) SetupForm.AGCRX2MaxGain = (int)agc_rx2_top;
                                                //DttSP.SetRXAGCMaxGain(1, 0, agc_rx2_top);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        double agc_thresh_point = (double)PixelToDb(e.Y + 4);
                                        agc_thresh_point -= (double)cal_offset;// (double)Display.RX1PreampOffset;
                                        if (agc_thresh_point > 2) agc_thresh_point = 2;
                                        if (agc_thresh_point < -143.0) agc_thresh_point = -143.0;
                                        // Debug.WriteLine("agc_db_point2: " + agc_db_point);

                                        double agc_top = 0.0;
                                        //DttSP.SetRXAGCThresh(0, 0, agc_thresh_point);
                                        WDSP.SetRXAAGCThresh(WDSP.id(0, 0), agc_thresh_point, 4096.0, sample_rate1);
                                        //DttSP.GetRXAGCMaxGain(0, 0, &agc_top);
                                        WDSP.GetRXAAGCTop(WDSP.id(0, 0), &agc_top);
                                        agc_top = Math.Round(agc_top);

                                        //DttSP.SetRXAGCThresh(0, 0, agc_thresh_point);
                                        //txtOverload.Text = agc_top.ToString("f3") + " " + agc_thresh_point.ToString("f3");
                                        switch (RX1AGCMode)
                                        {
                                            case AGCMode.FIXD:
                                                if (agc_top > 120) agc_top = 120;
                                                if (agc_top < -20.0) agc_top = -20.0;

                                                if (SetupForm != null) SetupForm.AGCFixedGain = (int)agc_top;// agc_top;
                                                // Debug.WriteLine("agc_db_point3: " + agc_db_point);
                                                break;
                                            default:
                                                if (agc_top > 120) agc_top = 120;
                                                if (agc_top < -20.0) agc_top = -20.0;

                                                if (SetupForm != null) SetupForm.AGCMaxGain = (int)agc_top;
                                                break;
                                        }
                                    }
                                }

                                if (agc_hang_drag && show_agc)
                                {
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                    {
                                        double agc_hang_point = (double)PixelToRx2Db(e.Y + 4);
                                        agc_hang_point -= (double)cal_offset;// (double)Display.RX1PreampOffset;
                                        //agc_hang_point += 120;
                                        // Debug.WriteLine("agc_db_point1: " + agc_db_point);
                                        if (agc_hang_point > 4.0) agc_hang_point = 4.0;
                                        if (agc_hang_point < -121.0) agc_hang_point = -121.0;
                                        // Debug.WriteLine("agc_db_point2: " + agc_db_point);

                                        // SetupForm.AGCMaxGain = agc_db_point - agc_slope;
                                        int hang_threshold = 0;
                                        //DttSP.SetRXAGCHangLevel(2, 0, agc_hang_point);
                                        WDSP.SetRXAAGCHangLevel(WDSP.id(2, 0), agc_hang_point);
                                        //DttSP.GetRXAGCHangThreshold(2, 0, &hang_threshold);
                                        WDSP.GetRXAAGCHangThreshold(WDSP.id(2, 0), &hang_threshold);
                                        if (hang_threshold > 100)
                                        {
                                            hang_threshold = 100;
                                            // agc_hang_point = 0.0;
                                        }
                                        if (hang_threshold < 0) hang_threshold = 0;

                                        //if (SetupForm != null) SetupForm.AGCHangThreshold = agc_hang_point;
                                        //DttSP.SetRXAGCHangLevel(1, 0, agc_hang_point);
                                        // Debug.WriteLine("agc_hang_point: " + agc_hang_point);
                                        // Debug.WriteLine("hang_threshold: " + hang_threshold);
                                        if (SetupForm != null) SetupForm.SetAGCRX2HangThreshold = hang_threshold;
                                    }
                                    else
                                    {
                                        //int agc_hang_point = (int)PixelToDb(e.Y);
                                        double agc_hang_point = (double)PixelToDb(e.Y + 4);
                                        agc_hang_point -= (double)cal_offset;// (double)Display.RX1PreampOffset;
                                        //agc_hang_point += 120;
                                        // int agc_slope = radio.GetDSPRX(0, 0).RXAGCSlope / 10;
                                        // Debug.WriteLine("agc_db_point1: " + agc_db_point);
                                        if (agc_hang_point > 4.0) agc_hang_point = 4.0;
                                        if (agc_hang_point < -121.0) agc_hang_point = -121.0;
                                        // Debug.WriteLine("agc_db_point2: " + agc_db_point);
                                        // SetupForm.AGCMaxGain = agc_db_point - agc_slope;
                                        int hang_threshold = 0;
                                        //DttSP.SetRXAGCHangLevel(0, 0, agc_hang_point);
                                        WDSP.SetRXAAGCHangLevel(WDSP.id(0, 0), agc_hang_point);
                                        //DttSP.GetRXAGCHangThreshold(0, 0, &hang_threshold);
                                        WDSP.GetRXAAGCHangThreshold(WDSP.id(0, 0), &hang_threshold);
                                        if (hang_threshold > 100)
                                        {
                                            hang_threshold = 100;
                                            // agc_hang_point = 0.0;
                                        }
                                        if (hang_threshold < 0) hang_threshold = 0;

                                        //if (SetupForm != null) SetupForm.AGCHangThreshold = agc_hang_point;
                                        // DttSP.SetRXAGCHangLevel(0, 0, agc_hang_point);

                                        if (SetupForm != null) SetupForm.AGCHangThreshold = hang_threshold;
                                    }
                                }
                                break;
                            case DisplayMode.WATERFALL:
                                y = WaterfallPixelToTime(e.Y);
                                txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec";
                                break;
                        }
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANAFALL:
                                if (e.Y < picDisplay.Height / 2)
                                {
                                    y = PixelToDb(e.Y);
                                    txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";
                                }
                                else
                                {
                                    y = WaterfallPixelToTime(e.Y);
                                    txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec";
                                }
                                break;
                            case DisplayMode.PANASCOPE:
                                if (e.Y < picDisplay.Height / 2)
                                {
                                    y = PixelToDb(e.Y);
                                    txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";
                                }
                                else
                                {
                                    txtDisplayCursorPower.Text = "";
                                }
                                break;
                        }

                        if (rx2_enabled && e.Y > picDisplay.Height / 2) // if RX2 is enabled and the cursor is in the lower half of the display
                        {

                            x = PixelToHz(e.X, 2);
                            rf_freq = VFOBFreq + (double)x * 0.0000010;
                            if (rx2_dsp_mode == DSPMode.CWL)
                                rf_freq += (double)cw_pitch * 0.0000010;
                            else if (rx2_dsp_mode == DSPMode.CWU)
                                rf_freq -= (double)cw_pitch * 0.0000010;
                            Display.FREQ = x;
                        }
                        else
                        {
                            x = PixelToHz(e.X, 1);
                            rf_freq = VFOAFreq + (double)x * 0.0000010;
                            if (rx1_dsp_mode == DSPMode.CWL)
                                rf_freq += (double)cw_pitch * 0.0000010;
                            else if (rx1_dsp_mode == DSPMode.CWU)
                                rf_freq -= (double)cw_pitch * 0.0000010;
                            Display.FREQ = x; // PixelToHz(e.X); //for cross hair filter
                        }
                        double freq = double.Parse(txtVFOAFreq.Text);

                        txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";

                        if (click_tune_display && !mox)    // Correct cursor frequency when CTUN on -G3OQD
                            temp_text = (rf_freq + (center_frequency - freq)).ToString("f6") + " MHz";      // Disply cursor frequency under Spectrum - G3OQD                            
                        else
                            temp_text = rf_freq.ToString("f6") + " MHz";      // Disply cursor frequency under Spectrum  

                        jper = temp_text.IndexOf(separator) + 4;
                        txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper, " "));

                        // if near a notch and not already doing something else, display appropriate cursor
                        if (Cursor != Cursors.Hand && !mox)
                        {
                            if (!rx1_low_filter_drag && !rx1_high_filter_drag && !rx1_whole_filter_drag &&
                                !rx2_low_filter_drag && !rx2_high_filter_drag && !rx2_whole_filter_drag &&
                                !tx_low_filter_drag && !tx_high_filter_drag && !tx_whole_filter_drag &&
                                !rx1_sub_drag && !notch_drag)
                            {
                                rf_freq = VFOAFreq;

                                if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                {
                                    rf_freq = VFOBFreq;

                                    switch (rx2_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6; ;
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (rx1_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6; ;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6; ;
                                            break;
                                    }
                                }

                                //Debug.WriteLine("x: " + e.X);
                                int low = (int)PixelToHz(e.X - 3);
                                int high = (int)PixelToHz(e.X + 3);

                                // NEW !!!!
                                if (click_tune_display)    // Correct Notch frequency when CTUN on -G3OQD
                                    rf_freq = rf_freq + (center_frequency - freq);

                                List<Notch> list = NotchList.NotchesInBW(rf_freq, low, high);
                                if (list.Count > 0)
                                {
                                    next_cursor = Cursors.VSplit;
                                }
                                else
                                {
                                    next_cursor = Cursors.Cross;
                                }
                            }
                        }

                        if (notch_drag)
                        {
                            double hz_per_pixel = PixelToHz(1) - PixelToHz(0);
                            int delta_x = e.X - notch_drag_start_point.X;
                            int delta_y = e.Y - notch_drag_start_point.Y;

                            if (Math.Abs(delta_x) > notch_drag_max_delta_x)
                                notch_drag_max_delta_x = Math.Abs(delta_x);
                            if (Math.Abs(delta_y) > notch_drag_max_delta_y)
                                notch_drag_max_delta_y = Math.Abs(delta_y);

                            // offset the notch frequency based on the current mouse position
                            double delta_freq = delta_x * hz_per_pixel;
                            if (notch_zoom) delta_freq /= 10.0;
                            notch_drag_active.Freq = notch_drag_start.Freq + delta_freq * 1e-6;

                            // change the BW of the notch filter once outside a 20 pixel boundary
                            if (delta_y > 10)
                            {
                                notch_drag_active.BW = notch_drag_start.BW - (delta_y - 10) * 5;
                                // don't go negative or less than 10Hz
                                if (notch_drag_active.BW < 10) notch_drag_active.BW = 10;
                            }
                            else if (delta_y < -10)
                                notch_drag_active.BW = notch_drag_start.BW - (delta_y + 10) * 5;

                            // UpdateRX1Notches();
                            //UpdateRX1SubNotches();
                            // UpdateRX2Notches();
                        }

                        if (((!rx2_enabled && rx1_dsp_mode != DSPMode.DRM) || // exclude DRM for RX1
                            (rx2_enabled && rx1_dsp_mode != DSPMode.DRM && e.Y < picDisplay.Height / 2) ||
                            (rx2_enabled && rx2_dsp_mode != DSPMode.DRM && e.Y >= picDisplay.Height / 2)))
                        {
                            if (!click_tune_display && !click_tune_rx2_display && current_click_tune_mode == ClickTuneMode.Off &&
                                picDisplay.Cursor != Cursors.Hand && next_cursor != Cursors.SizeNS && next_cursor != Cursors.VSplit)
                            {
                                if (Math.Abs(e.X - filt_low_x) < 3 || // RX low filter edge
                                    Math.Abs(e.X - filt_high_x) < 3 || // RX high filter edge
                                    rx1_high_filter_drag || rx1_low_filter_drag || // already dragging a filter edge
                                    (chkEnableMultiRX.Checked && // RX1 Sub
                                        ((rx2_enabled && e.Y < picDisplay.Height / 2) || !rx2_enabled) && (e.X > vfoa_sub_low_x - 3 && e.X < vfoa_sub_high_x + 3)) ||
                                    (rx2_enabled && e.Y > picDisplay.Height / 2 && (Math.Abs(e.X - vfob_low_x) < 3)) || // RX2 low filter edge
                                    (rx2_enabled && e.Y > picDisplay.Height / 2 && (Math.Abs(e.X - vfob_high_x) < 3)) ||
                                    rx2_high_filter_drag || rx2_low_filter_drag) // already dragging a filter edge
                                {
                                    next_cursor = Cursors.SizeWE;
                                }
                                else if (e.X > filt_low_x && e.X < filt_high_x)
                                {
                                    next_cursor = Cursors.NoMoveHoriz;
                                }
                                else
                                {
                                    next_cursor = Cursors.Cross;
                                }
                            }

                            if (notch_drag)
                            {
                                // do nothing -- already handled above
                            }
                            else if (rx1_high_filter_drag)
                            {
                                SelectRX1VarFilter();
                                int new_high = (int)Math.Max(PixelToHz(e.X), radio.GetDSPRX(0, 0).RXFilterLow + 10);
                                UpdateRX1Filters(radio.GetDSPRX(0, 0).RXFilterLow, new_high);
                            }
                            else if (rx1_low_filter_drag)
                            {
                                SelectRX1VarFilter();
                                int new_low = (int)Math.Min(PixelToHz(e.X), radio.GetDSPRX(0, 0).RXFilterHigh - 10);
                                UpdateRX1Filters(new_low, radio.GetDSPRX(0, 0).RXFilterHigh);
                            }
                            else if (rx1_whole_filter_drag)
                            {
                                SelectRX1VarFilter();
                                int diff = (int)(PixelToHz(e.X) - PixelToHz(whole_filter_start_x));
                                UpdateRX1Filters(whole_filter_start_low + diff, whole_filter_start_high + diff);
                            }
                            else if (rx1_sub_drag)
                            {
                                int diff = (int)(PixelToHz(e.X) - PixelToHz(sub_drag_last_x));
                                if (rx2_enabled)
                                    VFOASubFreq = sub_drag_start_freq + diff * 1e-6;
                                else VFOBFreq = sub_drag_start_freq + diff * 1e-6;
                            }
                            else if (rx2_high_filter_drag)
                            {
                                SelectRX2VarFilter();
                                int new_high = (int)Math.Max(PixelToHz(e.X, 2), radio.GetDSPRX(1, 0).RXFilterLow + 10);
                                UpdateRX2Filters(radio.GetDSPRX(1, 0).RXFilterLow, new_high);
                            }
                            else if (rx2_low_filter_drag)
                            {
                                SelectRX2VarFilter();
                                int new_low = (int)Math.Min(PixelToHz(e.X, 2), radio.GetDSPRX(1, 0).RXFilterHigh - 10);
                                UpdateRX2Filters(new_low, radio.GetDSPRX(1, 0).RXFilterHigh);
                            }
                            else if (rx2_whole_filter_drag)
                            {
                                SelectRX2VarFilter();
                                int diff = (int)(PixelToHz(e.X, 2) - PixelToHz(whole_filter_start_x, 2));
                                UpdateRX2Filters(whole_filter_start_low + diff, whole_filter_start_high + diff);
                            }
                            else if (tx_high_filter_drag)
                            {
                                int new_high = (int)Math.Max(Math.Abs(PixelToHz(e.X)), tx_filter_low + 10);
                                SetupForm.TXFilterHigh = new_high;
                            }
                            else if (tx_low_filter_drag)
                            {
                                int new_low = (int)(Math.Min(Math.Abs(PixelToHz(e.X)), tx_filter_high - 10));
                                SetupForm.TXFilterLow = new_low;
                            }
                            else if (tx_whole_filter_drag)
                            {
                                int diff = (int)(PixelToHz(e.X) - PixelToHz(whole_filter_start_x));
                                switch (rx1_dsp_mode)
                                {
                                    case DSPMode.LSB:
                                    case DSPMode.DIGL:
                                        SetupForm.TXFilterLow = whole_filter_start_low - diff;
                                        SetupForm.TXFilterHigh = whole_filter_start_high - diff;
                                        break;
                                    case DSPMode.USB:
                                    case DSPMode.DIGU:
                                        SetupForm.TXFilterLow = whole_filter_start_low + diff;
                                        SetupForm.TXFilterHigh = whole_filter_start_high + diff;
                                        break;
                                    case DSPMode.AM:
                                    case DSPMode.SAM:
                                    case DSPMode.FM:
                                    case DSPMode.DSB:
                                        SetupForm.TXFilterHigh = whole_filter_start_high + diff;
                                        break;
                                }
                            }
                        }
                        break;
                    default:
                        txtDisplayCursorOffset.Text = "";
                        txtDisplayCursorPower.Text = "";
                        txtDisplayCursorFreq.Text = "";
                        break;
                }

                if (rx1_spectrum_tune_drag)
                {
                    if (!mox || (rx2_enabled && chkVFOBTX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x);
                        float end_freq = PixelToHz(e.X);
                        spectrum_drag_last_x = e.X;
                        float delta = end_freq - start_freq;
                        CenterFrequency -= delta * 0.0000010;
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    }
                }

                if (rx2_spectrum_tune_drag)
                {
                    if (rx2_enabled && (!mox || chkVFOATX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x, 2);
                        float end_freq = PixelToHz(e.X, 2);
                        spectrum_drag_last_x = e.X;
                        float delta = end_freq - start_freq;
                        CenterRX2Frequency -= delta * 0.0000010;
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    }
                }


                if (rx1_spectrum_drag)
                {
                    if (!mox || (rx2_enabled && chkVFOBTX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x);
                        float end_freq = PixelToHz(e.X);
                        spectrum_drag_last_x = e.X;
                        float delta = end_freq - start_freq;
                        VFOAFreq -= delta * 0.0000010;
                    }
                }

                if (rx2_spectrum_drag)
                {
                    if (rx2_enabled && (!mox || chkVFOATX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x, 2);
                        float end_freq = PixelToHz(e.X, 2);
                        spectrum_drag_last_x = e.X;
                        float delta = end_freq - start_freq;
                        VFOBFreq -= delta * 0.0000010;
                    }
                }

                if (rx1_click_tune_drag)
                {
                    if (!mox || (rx2_enabled && chkVFOBTX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x);
                        float end_freq = PixelToHz(e.X);
                        spectrum_drag_last_x = e.X;
                        float delta = start_freq - end_freq;
                        VFOAFreq -= delta * 0.0000010;
                    }
                }

                if (rx2_click_tune_drag)
                {
                    if (rx2_enabled && (!mox || chkVFOATX.Checked))
                    {
                        float start_freq = PixelToHz(spectrum_drag_last_x, 2);
                        float end_freq = PixelToHz(e.X, 2);
                        spectrum_drag_last_x = e.X;
                        float delta = start_freq - end_freq;
                        VFOBFreq -= delta * 0.0000010;
                    }
                }

            }
            catch (Exception)
            {

            }

            if (next_cursor != null && picDisplay.Cursor != next_cursor)
                picDisplay.Cursor = next_cursor;
        }


        private void picDisplay_MouseLeave(object sender, System.EventArgs e)
        {
            txtDisplayCursorOffset.Text = "";
            txtDisplayCursorPower.Text = "";
            txtDisplayCursorFreq.Text = "";
            DisplayCursorX = -1;
            DisplayCursorY = -1;
            Cursor = Cursors.Default;
        }

        private void picDisplay_MouseDown(object sender, MouseEventArgs e)
        {
            switch (e.Button)
            {
                case MouseButtons.Left:
                    bool near_notch = false;
                    if (!mox && !agc_knee_drag && !agc_hang_drag)
                    {
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                                // check first for being near a Notch
                                double rf_freq = VFOAFreq;
                                if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                {
                                    rf_freq = VFOBFreq;

                                    switch (rx2_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6;
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (rx1_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6;
                                            break;
                                    }
                                }

                                int low = (int)PixelToHz(e.X - 3);
                                int high = (int)PixelToHz(e.X + 3);

                                // NEW !!!!
                                double freq = double.Parse(txtVFOAFreq.Text);
                                if (click_tune_display)    // Correct Notch frequency when CTUN on -G3OQD
                                    rf_freq = rf_freq + (center_frequency - freq);

                                //List<Notch> list = NotchList.NotchesInBW(rf_freq, low, high);
                                //if (list.Count > 0)
                                //{
                                //    near_notch = true;

                                //    int index = 0;
                                //    if (list[index].Permanent)
                                //    {
                                //        list[index].Details = true;
                                //        notch_drag_active = list[index];
                                //    }
                                //    else
                                //    {
                                //        notch_drag = true;
                                //        timerNotchZoom.Enabled = true;
                                //        notch_drag_active = list[index];
                                //        notch_drag_start = list[index].Copy();
                                //        notch_drag_start_point = new Point(e.X, e.Y);
                                //        list[index].Details = true;
                                //        // mark which receiver the click occurred on so that we can show the callout only there
                                //        list[index].RX = 1;
                                //        if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                //            list[index].RX = 2;
                                //    }
                                //}
                                break;
                        }
                    }

                    // if (!mox)
                    // {
                    switch (Display.CurrentDisplayMode)
                    {
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.PANAFALL:
                        case DisplayMode.HISTOGRAM:
                        case DisplayMode.SPECTRUM:

                            if (!mox)
                            {
                                if (rx1_grid_adjust)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx1_grid_adjust = false;
                                    grid_minmax_max_y = Display.SpectrumGridMax;
                                    grid_minmax_min_y = Display.SpectrumGridMin;
                                    Cursor = grabbing;
                                }

                                if (rx2_grid_adjust)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx1_grid_adjust = false;
                                    grid_minmax_max_y = Display.RX2SpectrumGridMax;
                                    grid_minmax_min_y = Display.RX2SpectrumGridMin;
                                    Cursor = grabbing;
                                }
                            }
                            else
                            {
                                if ((rx1_grid_adjust && !Display.TXOnVFOB) ||
                                    (rx1_grid_adjust && Display.TXOnVFOB && !RX2Enabled)) // &&
                                   // Display.CurrentDisplayMode != DisplayMode.PANAFALL)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx1_grid_adjust = true;
                                    grid_minmax_max_y = Display.TXSpectrumGridMax;
                                    grid_minmax_min_y = Display.TXSpectrumGridMin;
                                    Cursor = grabbing;
                                }
                                else if (rx1_grid_adjust && Display.TXOnVFOB)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx1_grid_adjust = false;
                                    grid_minmax_max_y = Display.SpectrumGridMax;
                                    grid_minmax_min_y = Display.SpectrumGridMin;
                                    Cursor = grabbing;
                                }                             

                                if (rx2_grid_adjust && Display.TXOnVFOB)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx2_grid_adjust = true;
                                    grid_minmax_max_y = Display.TXSpectrumGridMax;
                                    grid_minmax_min_y = Display.TXSpectrumGridMin;
                                    Cursor = grabbing;
                                }
                                else if (rx2_grid_adjust && !Display.TXOnVFOB)
                                {
                                    grid_minmax_drag_start_point = new Point(e.X, e.Y);
                                    gridminmaxadjust = true;
                                    tx2_grid_adjust = false;
                                    grid_minmax_max_y = Display.RX2SpectrumGridMax;
                                    grid_minmax_min_y = Display.RX2SpectrumGridMin;
                                    Cursor = grabbing;
                                }
                            }
                            break;
                        case DisplayMode.WATERFALL:
                            break;
                    }
                    // }

                    if (!mox)
                    {
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                            case DisplayMode.PANADAPTER:
                                if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                {
                                    if (Display.AGCRX2Knee.Contains(e.X, e.Y) && show_agc)
                                    {
                                        agc_knee_drag = true;
                                        Cursor = grabbing;// Cursors.HSplit;
                                        // Debug.WriteLine("AGCKnee Y:" + Display.AGCKnee.Y);

                                    }
                                    else
                                        if (Display.AGCRX2Hang.Contains(e.X, e.Y) && show_agc)
                                        {
                                            agc_hang_drag = true;
                                            Cursor = grabbing; // Cursors.HSplit;
                                            // Debug.WriteLine("AGCKnee Y:" + Display.AGCKnee.Y);

                                        }
                                        else
                                        {
                                            agc_knee_drag = false;
                                            agc_hang_drag = false;
                                            // Cursor = Cursors.Cross;
                                        }
                                }
                                else
                                {
                                    if (Display.AGCKnee.Contains(e.X, e.Y) && show_agc)
                                    {
                                        agc_knee_drag = true;
                                        Cursor = grabbing; // Cursors.HSplit;
                                        // Debug.WriteLine("AGCKnee Y:" + Display.AGCKnee.Y);

                                    }
                                    else
                                        if (Display.AGCHang.Contains(e.X, e.Y) && show_agc)
                                        {
                                            agc_hang_drag = true;
                                            Cursor = grabbing; // Cursors.HSplit;
                                            // Debug.WriteLine("AGCKnee Y:" + Display.AGCKnee.Y);

                                        }
                                        else
                                        {
                                            agc_knee_drag = false;
                                            agc_hang_drag = false;
                                            // Cursor = Cursors.Cross;
                                        }
                                }
                                break;
                        }
                    }

                    if (!near_notch &&
                        !agc_knee_drag &&
                        !agc_hang_drag &&
                        !gridminmaxadjust &&
                        !gridmaxadjust &&
                        (current_click_tune_mode != ClickTuneMode.Off || click_tune_display || click_tune_rx2_display))
                    {
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.SPECTRUM:
                            case DisplayMode.WATERFALL:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                                float x = PixelToHz(e.X);
                                double freq;
                                if (rx2_enabled && e.Y > picDisplay.Height / 2) //RX2
                                {
                                    x = PixelToHz(e.X, 2);
                                    //if (!click_tune_rx2_display)
                                    //    freq = double.Parse(txtVFOBFreq.Text) + (double)x * 0.0000010; // click tune w/x-hairs
                                    //else if (click_tune_drag) freq = center_rx2_frequency + (double)x * 0.0000010; // click tune & drag vfo
                                    //else freq = double.Parse(txtVFOBFreq.Text); // click & drag vfo
                                    if (click_tune_rx2_display && current_click_tune_mode != ClickTuneMode.Off)
                                        freq = center_rx2_frequency + (double)x * 0.0000010;
                                    else if (current_click_tune_mode != ClickTuneMode.Off)
                                        freq = double.Parse(txtVFOBFreq.Text) + (double)x * 0.0000010; // click tune w/x-hairs
                                    else if (click_tune_drag)
                                        freq = center_rx2_frequency + (double)x * 0.0000010; // click tune & drag vfo
                                    else
                                        freq = double.Parse(txtVFOBFreq.Text); // click & drag vfo

                                    switch (rx2_dsp_mode)
                                    {
                                        case DSPMode.CWL:
                                            freq += (float)cw_pitch * 0.0000010;
                                            break;
                                        case DSPMode.CWU:
                                            freq -= (float)cw_pitch * 0.0000010;
                                            break;
                                        case DSPMode.DIGL:
                                            freq += (float)digl_click_tune_offset * 0.0000010;
                                            break;
                                        case DSPMode.DIGU:
                                            freq -= (float)digu_click_tune_offset * 0.0000010;
                                            break;
                                    }

                                    if (snap_to_click_tuning &&
                                        (current_click_tune_mode != ClickTuneMode.Off || click_tune_drag) &&
                                        rx2_dsp_mode != DSPMode.CWL &&
                                        rx2_dsp_mode != DSPMode.CWU &&
                                        rx2_dsp_mode != DSPMode.DIGL &&
                                        rx2_dsp_mode != DSPMode.DIGU &&
                                        Audio.WavePlayback == false)
                                    {
                                        // round freq to the nearest tuning step
                                        long f = (long)(freq * 1000000.0);
                                        int mult = CurrentTuneStepHz;
                                        if (f % mult > mult / 2) f += (mult - f % mult);
                                        else f -= f % mult;
                                        freq = (double)f * 0.0000010;
                                    }
                                }
                                else
                                {
                                    if (click_tune_display && current_click_tune_mode != ClickTuneMode.Off)
                                        freq = center_frequency + (double)x * 0.0000010;
                                    else if (current_click_tune_mode != ClickTuneMode.Off)
                                        freq = double.Parse(txtVFOAFreq.Text) + (double)x * 0.0000010; // click tune w/x-hairs
                                    else if (click_tune_drag)
                                        freq = center_frequency + (double)x * 0.0000010; // click tune & drag vfo
                                    else
                                        freq = double.Parse(txtVFOAFreq.Text); // click & drag vfo

                                    switch (rx1_dsp_mode)
                                    {
                                        case DSPMode.CWL:
                                            freq += (float)cw_pitch * 0.0000010;
                                            break;
                                        case DSPMode.CWU:
                                            freq -= (float)cw_pitch * 0.0000010;
                                            break;
                                        case DSPMode.DIGL:
                                            if (!ClickTuneFilter) freq += (float)digl_click_tune_offset * 0.0000010;
                                            break;
                                        case DSPMode.DIGU:
                                            if (!ClickTuneFilter) freq -= (float)digu_click_tune_offset * 0.0000010;
                                            break;
                                    }

                                    if (snap_to_click_tuning &&
                                        (current_click_tune_mode != ClickTuneMode.Off || click_tune_drag) &&
                                        rx1_dsp_mode != DSPMode.CWL &&
                                        rx1_dsp_mode != DSPMode.CWU &&
                                        rx1_dsp_mode != DSPMode.DIGL &&
                                        rx1_dsp_mode != DSPMode.DIGU &&
                                        Audio.WavePlayback == false)
                                    {
                                        // round freq to the nearest tuning step
                                        long f = (long)(freq * 1000000.0);
                                        int mult = CurrentTuneStepHz; //(int)(wheel_tune_list[wheel_tune_index] * 1000000.0);
                                        if (f % mult > mult / 2) f += (mult - f % mult);
                                        else f -= f % mult;
                                        freq = (double)f * 0.0000010;
                                    }
                                }

                                //  if (click_tune_rx2_display || click_tune_display)
                                // {
                                // spectrum_drag_last_x = e.X;
                                if (current_click_tune_mode == ClickTuneMode.Off)
                                {
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                    {
                                        spectrum_drag_last_x = e.X;
                                        if (click_tune_rx2_display)
                                        {
                                            if (e.Y < ((picDisplay.Height / 2) + 15))
                                            {
                                                rx2_spectrum_tune_drag = true;
                                                Cursor = Cursors.SizeWE;
                                            }
                                            else
                                            {
                                                rx2_click_tune_drag = true;
                                                Cursor = grabbing;
                                            }
                                        }
                                        else rx2_spectrum_drag = true;
                                    }
                                    else
                                    {
                                        spectrum_drag_last_x = e.X;
                                        if (click_tune_display)
                                        {
                                            if (e.Y < 15)
                                            {
                                                rx1_spectrum_tune_drag = true;
                                                Cursor = Cursors.SizeWE;
                                            }
                                            else
                                            {
                                                rx1_click_tune_drag = true;
                                                Cursor = grabbing;
                                            }
                                        }
                                        else rx1_spectrum_drag = true;
                                    }
                                }
                                // }

                                if (!rx1_spectrum_drag && !rx2_spectrum_drag)
                                {
                                    if (!rx2_enabled)
                                    {
                                        if (!rx1_spectrum_tune_drag)
                                        {
                                            if (current_click_tune_mode == ClickTuneMode.VFOA ||
                                                (click_tune_display && current_click_tune_mode != ClickTuneMode.VFOB))
                                            {
                                                VFOAFreq = Math.Round(freq, 6);
                                            }
                                            else
                                                VFOBFreq = Math.Round(freq, 6);
                                        }
                                    }
                                    else
                                    {

                                        if (current_click_tune_mode == ClickTuneMode.VFOB && // red cross hairs
                                            (chkVFOSplit.Checked || chkEnableMultiRX.Checked))
                                        {
                                            VFOASubFreq = Math.Round(freq, 6);
                                        }
                                        else
                                        {
                                            if (e.Y <= picDisplay.Height / 2)
                                            {
                                                if (!rx1_spectrum_tune_drag)
                                                    VFOAFreq = Math.Round(freq, 6);
                                            }

                                            else
                                            {
                                                if (!rx2_spectrum_tune_drag)
                                                    VFOBFreq = Math.Round(freq, 6);
                                            }
                                        }
                                    }
                                }

                                // disable RIT reset on click tune
                                //if (!chkMOX.Checked && (chkRIT.Checked && current_click_tune_mode == ClickTuneMode.VFOA))
                                //    udRIT.Value = 0;
                                //else 

                                if (chkMOX.Checked && chkXIT.Checked && current_click_tune_mode == ClickTuneMode.VFOB)
                                    udXIT.Value = 0;
                                break;
                            default:
                                break;
                        }
                    }
                    else if (!near_notch &&
                              !agc_knee_drag &&
                              !agc_hang_drag &&
                              !gridminmaxadjust &&
                              !gridmaxadjust)// current_click_tune_mode == ClickTuneMode.Off) 
                    {
                        switch (Display.CurrentDisplayMode)
                        {
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                                int low_x = 0, high_x = 0;
                                int vfoa_sub_x = 0;
                                int vfoa_sub_low_x = 0;
                                int vfoa_sub_high_x = 0;
                                if (rx2_enabled && e.Y > picDisplay.Height / 2)//rx2
                                {
                                    if (mox)// && chkVFOBTX.Checked)
                                    {
                                        low_x = HzToPixel(radio.GetDSPTX(0).TXFilterLow);
                                        high_x = HzToPixel(radio.GetDSPTX(0).TXFilterHigh);
                                    }
                                    else if (rx2_dsp_mode != DSPMode.DRM)
                                    {
                                        low_x = HzToPixel(radio.GetDSPRX(1, 0).RXFilterLow, 2);
                                        high_x = HzToPixel(radio.GetDSPRX(1, 0).RXFilterHigh, 2);
                                    }
                                }
                                else
                                {
                                    if (mox)// && chkVFOATX.Checked)
                                    {
                                        low_x = HzToPixel(radio.GetDSPTX(0).TXFilterLow);
                                        high_x = HzToPixel(radio.GetDSPTX(0).TXFilterHigh);
                                    }
                                    else if (rx1_dsp_mode != DSPMode.DRM)
                                    {
                                        low_x = HzToPixel(radio.GetDSPRX(0, 0).RXFilterLow);
                                        high_x = HzToPixel(radio.GetDSPRX(0, 0).RXFilterHigh);
                                    }

                                    if (chkEnableMultiRX.Checked && !mox)
                                    {
                                        if (!rx2_enabled)
                                        {
                                            vfoa_sub_x = HzToPixel((float)((VFOBFreq - VFOAFreq) * 1000000.0));
                                            vfoa_sub_low_x = vfoa_sub_x + (HzToPixel((int)udFilterLow.Value) - HzToPixel(0.0f));
                                            vfoa_sub_high_x = vfoa_sub_x + (HzToPixel((int)udFilterHigh.Value) - HzToPixel(0.0f));
                                        }
                                        else
                                        {
                                            vfoa_sub_x = HzToPixel((float)((VFOASubFreq - VFOAFreq) * 1000000.0));
                                            vfoa_sub_low_x = vfoa_sub_x + (HzToPixel((int)udFilterLow.Value) - HzToPixel(0.0f));
                                            vfoa_sub_high_x = vfoa_sub_x + (HzToPixel((int)udFilterHigh.Value) - HzToPixel(0.0f));
                                        }
                                    }
                                }

                                if (Math.Abs(e.X - low_x) < 3 && e.X < high_x)
                                {
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2) //rx2_low_filter_drag = true;
                                    {
                                        if (mox && chkVFOBTX.Checked)
                                        {
                                            switch (radio.GetDSPTX(0).CurrentDSPMode)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FM:
                                                case DSPMode.DSB:
                                                    tx_high_filter_drag = true;
                                                    break;
                                                default:
                                                    tx_low_filter_drag = true;
                                                    break;
                                            }
                                        }
                                        else rx2_low_filter_drag = true;
                                    }
                                    else
                                    {
                                        if (mox && (!chkSplitDisplay.Checked || chkVFOATX.Checked))
                                        {
                                            switch (radio.GetDSPTX(0).CurrentDSPMode)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                case DSPMode.AM:
                                                case DSPMode.SAM:
                                                case DSPMode.FM:
                                                case DSPMode.DSB:
                                                    tx_high_filter_drag = true;
                                                    break;
                                                default:
                                                    tx_low_filter_drag = true;
                                                    break;
                                            }
                                        }
                                        else rx1_low_filter_drag = true;
                                    }
                                }
                                else if (Math.Abs(e.X - high_x) < 3)
                                {
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2) //rx2_high_filter_drag = true;
                                    {
                                        if (mox && chkVFOBTX.Checked)
                                        {
                                            switch (radio.GetDSPTX(0).CurrentDSPMode)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                    tx_low_filter_drag = true;
                                                    break;
                                                default:
                                                    tx_high_filter_drag = true;
                                                    break;
                                            }
                                        }
                                        else rx2_high_filter_drag = true;
                                        //Cursor = Cursors.SizeWE;
                                    }
                                    else if (mox && (!chkSplitDisplay.Checked || (chkSplitDisplay.Checked && chkVFOATX.Checked)))
                                    {
                                        switch (radio.GetDSPTX(0).CurrentDSPMode)
                                        {
                                            case DSPMode.LSB:
                                            case DSPMode.CWL:
                                            case DSPMode.DIGL:
                                                tx_low_filter_drag = true;
                                                break;
                                            default:
                                                tx_high_filter_drag = true;
                                                break;
                                        }
                                    }
                                    else rx1_high_filter_drag = true;
                                }
                                else if (e.X > low_x && e.X < high_x)
                                {
                                    whole_filter_start_x = e.X;
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2)
                                    {
                                        if (mox && chkVFOBTX.Checked)
                                        {
                                            tx_whole_filter_drag = true;
                                            whole_filter_start_low = SetupForm.TXFilterLow;
                                            whole_filter_start_high = SetupForm.TXFilterHigh;
                                        }
                                        else
                                        {
                                            rx2_whole_filter_drag = true;
                                            whole_filter_start_low = radio.GetDSPRX(1, 0).RXFilterLow;
                                            whole_filter_start_high = radio.GetDSPRX(1, 0).RXFilterHigh;
                                        }
                                    }
                                    else
                                    {

                                        if (!mox)
                                        {
                                            rx1_whole_filter_drag = true;
                                            whole_filter_start_low = radio.GetDSPRX(0, 0).RXFilterLow;
                                            whole_filter_start_high = radio.GetDSPRX(0, 0).RXFilterHigh;
                                        }
                                        else
                                        {
                                            tx_whole_filter_drag = true;
                                            whole_filter_start_low = SetupForm.TXFilterLow;
                                            whole_filter_start_high = SetupForm.TXFilterHigh;
                                        }
                                    }
                                }
                                else if (chkEnableMultiRX.Checked && !mox &&
                                    (e.X > vfoa_sub_low_x - 3 && e.X < vfoa_sub_high_x + 3))
                                {
                                    sub_drag_last_x = e.X;
                                    if (rx2_enabled) sub_drag_start_freq = VFOASubFreq;
                                    else sub_drag_start_freq = VFOBFreq;
                                    rx1_sub_drag = true;
                                }
                                else
                                {
                                    spectrum_drag_last_x = e.X;
                                    if (rx2_enabled && e.Y > picDisplay.Height / 2) rx2_spectrum_drag = true;
                                    else rx1_spectrum_drag = true;
                                }

                                break;
                        }
                    }
                    break;
                case MouseButtons.Right:
                    double cfreq;

                    if (rx2_enabled && e.Y > picDisplay.Height / 2)
                    {
                        cfreq = VFOBFreq;
                        switch (rx2_dsp_mode)
                        {
                            case DSPMode.CWU: cfreq -= cw_pitch * 1e-6; break;
                            case DSPMode.CWL: cfreq += cw_pitch * 1e-6; break;
                        }
                    }
                    else
                    {
                        cfreq = VFOAFreq;
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.CWU: cfreq -= cw_pitch * 1e-6; break;
                            case DSPMode.CWL: cfreq += cw_pitch * 1e-6; break;
                        }
                    }

                    int clow = (int)PixelToHz(e.X - 3);
                    int chigh = (int)PixelToHz(e.X + 3);

                    // NEW !!!!
                    double Freq = double.Parse(txtVFOAFreq.Text);
                    if (click_tune_display)    // Correct Notch frequency when CTUN on -G3OQD
                        cfreq = cfreq + (center_frequency - Freq);

                    //List<Notch> lst = NotchList.NotchesInBW(cfreq, clow, chigh);

                    //if (lst.Count > 0)
                    //{
                    //    // make sure we have a check mark on remembered in the context menu if necessary
                    //    toolStripNotchRemember.Checked = lst[0].Permanent;
                    //    // display the pop-up
                    //    contextMenuStripNotch.Show(Cursor.Position);
                    //    Context_Notch = lst[0];
                    //    toolStripNotchNormal.Checked = (lst[0].Depth == 1);
                    //    toolStripNotchDeep.Checked = (lst[0].Depth == 2);
                    //    toolStripNotchVeryDeep.Checked = (lst[0].Depth == 3);
                    //}
                    //else 

                    if (!mox && (rx1_grid_adjust || rx2_grid_adjust))
                    {
                        if (rx1_grid_adjust)
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx1_grid_adjust = false;
                            grid_minmax_max_y = Display.SpectrumGridMax;
                            Cursor = grabbing;
                        }

                        if (rx2_grid_adjust)
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx1_grid_adjust = false;
                            grid_minmax_max_y = Display.RX2SpectrumGridMax;
                            Cursor = grabbing;
                        }
                    }
                    else if (mox && (rx1_grid_adjust || rx2_grid_adjust))
                    {
                        if ((rx1_grid_adjust && !Display.TXOnVFOB) ||
                            (rx1_grid_adjust && Display.TXOnVFOB && !RX2Enabled))
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx1_grid_adjust = true;
                            grid_minmax_max_y = Display.TXSpectrumGridMax;
                            Cursor = grabbing;
                        }
                        else if (rx1_grid_adjust && Display.TXOnVFOB)
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx1_grid_adjust = false;
                            grid_minmax_max_y = Display.SpectrumGridMax;
                            Cursor = grabbing;
                        }

                        if (rx2_grid_adjust && Display.TXOnVFOB)
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx2_grid_adjust = true;
                            grid_minmax_max_y = Display.TXSpectrumGridMax;
                            Cursor = grabbing;
                        }
                        else if (rx2_grid_adjust && !Display.TXOnVFOB)
                        {
                            grid_minmax_drag_start_point = new Point(e.X, e.Y);
                            gridmaxadjust = true;
                            tx2_grid_adjust = false;
                            grid_minmax_max_y = Display.RX2SpectrumGridMax;
                            Cursor = grabbing;
                        }
                    }
                    else
                    {
                        switch (current_click_tune_mode)
                        {
                            case ClickTuneMode.Off:
                                CurrentClickTuneMode = ClickTuneMode.VFOA;
                                break;
                            case ClickTuneMode.VFOA:
                                if (chkVFOSplit.Checked || chkEnableMultiRX.Checked)
                                    CurrentClickTuneMode = ClickTuneMode.VFOB;
                                else
                                    CurrentClickTuneMode = ClickTuneMode.Off;
                                break;
                            case ClickTuneMode.VFOB:
                                CurrentClickTuneMode = ClickTuneMode.Off;
                                break;
                        }
                    }
                    break;
                case MouseButtons.Middle:
                    if (mouse_tune_step)
                    {
                        if (shift_down) ChangeTuneStepDown();
                        else ChangeTuneStepUp();
                    }
                    break;
            }
        }

        //=================================================================================================
        // ke9ns mod 


        public static int[] SXX = new int[200]; // ke9ns add used for qrz hyperlinking(these are the callsign locations on the screen)
        public static int[] SXY = new int[200]; // 
        public static int[] SXW = new int[200]; //
        public static int[] SXH = new int[200]; //  
        public static string[] SXS = new string[200]; // ties it back to the real DX_Index
        public static int SXK = 0;               // number of spots on picdisplay

        public static int SXR = 0;               // 1=doing an QRZ hyperlink
        public static int SX_X = 0;               //x cursor pos inside picdisplay
        public static int SX_Y = 0;               //y  cursor pos inside picdisplay


        public static int[] DXX = new int[200]; // ke9ns add used for qrz hyperlinking(these are the callsign locations on the screen)
        public static int[] DXY = new int[200]; // 
        public static int[] DXW = new int[200]; //
        public static int[] DXH = new int[200]; //  
        public static string[] DXS = new string[200]; // ties it back to the real DX_Index
        public static int DXK = 0;               // number of spots on picdisplay
        public static int DXK2 = 0;               // number of spots on picdisplay



        public static int[] MMX = new int[200]; // ke9ns add X used for MEMORY hyperlinking(these are the callsign locations on the screen)
        public static int[] MMY = new int[200]; //           Y
        public static int[] MMW = new int[200]; //           W
        public static int[] MMH = new int[200]; //           H
        public static int[] MMM = new int[200]; //           Index postion in Memory.xml file
        public static string[] MMS = new string[200]; // ties it back to the real MEMORY NAME

        public static int MMK3 = 0;               // number of MEMORY spots on picdisplay
        public static int MMK4 = 0;               // number of spots on picdisplay

        public static int DXR = 0;               // 1=display SPOTTER on screen instead of DX spot, 0=DX Spot only

        public static int DX_X = 0;               //x cursor pos inside picdisplay 
        public static int DX_Y = 0;               //y  cursor pos inside picdisplay

        private void picDisplay_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                    case DisplayMode.HISTOGRAM:
                        rx1_low_filter_drag = false;
                        rx1_high_filter_drag = false;
                        rx1_whole_filter_drag = false;
                        rx2_low_filter_drag = false;
                        rx2_high_filter_drag = false;
                        rx2_whole_filter_drag = false;
                        tx_low_filter_drag = false;
                        tx_high_filter_drag = false;
                        tx_whole_filter_drag = false;
                        rx1_click_tune_drag = false;
                        rx2_click_tune_drag = false;
                        rx1_spectrum_tune_drag = false;
                        rx2_spectrum_tune_drag = false;

                        agc_knee_drag = false;
                        agc_hang_drag = false;
                        // agc_knee_drag_max_delta_x = 0;
                        // agc_knee_drag_max_delta_y = 0;
                        gridminmaxadjust = false;
                        rx1_grid_adjust = false;
                        rx2_grid_adjust = false;
                        tx1_grid_adjust = false;
                        tx2_grid_adjust = false;

                        // grid_minmax_drag_max_delta_y = 0;

                        notch_drag = false;
                        notch_drag_max_delta_x = 0;
                        notch_drag_max_delta_y = 0;
                        timerNotchZoom.Enabled = false;
                        notch_zoom = false;
                        if (Display.TNFZoom)
                        {
                            Display.TNFZoom = false;
                        }
                        // stop showing details for this notch in the panadapter
                        if (notch_drag_active != null)
                        {
                            notch_drag_active.Details = false;
                            notch_drag_active = null;
                        }
                        //rx2_sub_drag = false;
                        break;
                }

                if (rx1_sub_drag)
                {
                    rx1_sub_drag = false;
                    if (rx2_enabled) txtVFOABand_LostFocus(this, EventArgs.Empty);
                    else txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                if (rx1_spectrum_drag)
                {
                    rx1_spectrum_drag = false;
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                rx2_spectrum_drag = false;
                //Cursor = Cursors.Default;
            }

            if (e.Button == MouseButtons.Right)
            {
                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.SPECTRUM:
                        gridminmaxadjust = false;
                        gridmaxadjust = false;
                        rx1_grid_adjust = false;
                        rx2_grid_adjust = false;
                        tx1_grid_adjust = false;
                        tx2_grid_adjust = false;
                        break;
                }
            }

        }

        private void picDisplay_DoubleClick(object sender, EventArgs e)
        {
            int new_val = (int)PixelToDb(display_cursor_y);
            if (!(rx1_grid_adjust || gridmaxadjust))
            {
                if (!mox) //RX1
                {
                    if (rx1_dsp_mode == DSPMode.FM)
                        return;

                    if (new_val > ptbSquelch.Maximum) new_val = ptbSquelch.Maximum;
                    if (new_val < ptbSquelch.Minimum) new_val = ptbSquelch.Minimum;
                    ptbSquelch.Value = new_val;
                    ptbSquelch_Scroll(this, EventArgs.Empty);
                }
                else // TX
                {
                    new_val += 24;
                    if (new_val > ptbNoiseGate.Maximum) new_val = ptbNoiseGate.Maximum;
                    if (new_val < ptbNoiseGate.Minimum) new_val = ptbNoiseGate.Minimum;
                    ptbNoiseGate.Value = new_val;
                    ptbNoiseGate_Scroll(this, EventArgs.Empty);
                }
            }

        }

        private void picDisplay_Resize(object sender, System.EventArgs e)
        {
            if (chkPower.Checked)
                pause_DisplayThread = true;

            Display.Target = picDisplay;
            switch (current_display_engine)
            {
                case (DisplayEngine.GDI_PLUS):
                    {
                        Thread.Sleep(100);
                        Display.Init();
                        if (!booting)
                        {
                            UpdateDisplay();
                        }
                        picDisplay.Invalidate();
                    }
                    break;
                //case (DisplayEngine.DIRECT_X):
                //    if (!booting)
                //    {
                //        Display.WaterfallTarget = picWaterfall;
                //        //Display.DirectXRelease();
                //       // Display.DirectXInit();
                //        // Display.RenderDirectX();
                //    }
                //break;
            }
            pause_DisplayThread = false;

            if (!initializing)
            {
                UpdateRXSpectrumDisplayVars();
                UpdateTXSpectrumDisplayVars();
            }
        }

        private void ptbDisplayPan_Scroll(object sender, System.EventArgs e)
        {
            specRX.GetSpecRX(0).PanSlider = (double)ptbDisplayPan.Value / 1000.0;
            specRX.GetSpecRX(1).PanSlider = (double)ptbDisplayPan.Value / 1000.0;
            specRX.GetSpecRX(cmaster.inid(1, 0)).PanSlider = (double)ptbDisplayPan.Value / 1000.0;
            CalcDisplayFreq();
            CalcRX2DisplayFreq();
            CalcTXDisplayFreq();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbDisplayPan.Focus();
            }
        }

        private void btnDisplayPanCenter_Click(object sender, System.EventArgs e)
        {
            //double edge_alias = 7200.0;
            //double if_freq = 11025.0;
            double spur_tune_width = 200e6 / Math.Pow(2, 16);
            // if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
            // spur_tune_width = 500e6 / Math.Pow(2, 16);
            int width = Display.RXDisplayHigh - Display.RXDisplayLow;

            int max_pan_width = (int)(sample_rate1 - 2 * spur_tune_width - width);
            if (max_pan_width == 0)
            {
                ptbDisplayPan.Value = (ptbDisplayPan.Maximum - ptbDisplayPan.Minimum) / 2;
                ptbDisplayPan_Scroll(btnDisplayPanCenter, EventArgs.Empty);
                return;
            }

            int low = -width / 2; // target -- if width is centered at 0, low will be half the width below 0
            //if (ModelIsHPSDRorHermes())
            int abs_low = (int)(-(double)sample_rate1 * 0.5 + spur_tune_width);
            // else
            // abs_low = (int)(-(double)sample_rate1 * 0.5 - if_freq * 1000000.0 + spur_tune_width);
            int offset = low - abs_low;

            int new_val = (int)((double)offset * (double)ptbDisplayPan.Maximum / (double)max_pan_width);
            ptbDisplayPan.Value = Math.Min(Math.Max(ptbDisplayPan.Minimum, new_val), ptbDisplayPan.Maximum);
            ptbDisplayPan_Scroll(btnDisplayPanCenter, EventArgs.Empty);
        }

        private double lastZoom = 1.0;

        private void ptbDisplayZoom_Scroll(object sender, System.EventArgs e)
        {
            specRX.GetSpecRX(0).ZoomSlider = ((double)ptbDisplayZoom.Value - 10.0) / 230.0;
            specRX.GetSpecRX(1).ZoomSlider = ((double)ptbDisplayZoom.Value - 10.0) / 230.0;
            specRX.GetSpecRX(cmaster.inid(1, 0)).ZoomSlider = ((double)ptbDisplayZoom.Value - 10.0) / 230.0;
            double zoom_factor = 1.0 / ((ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - ptbDisplayZoom.Value) * 0.01);
            //toolTip1.SetToolTip(ptbDisplayZoom, specRX.GetSpecRX(0).ZoomSlider.ToString("F"));
            //double zoom_factor = ptbDisplayZoom.Value / 4;
            // toolTip1.SetToolTip(ptbDisplayZoom, zoom_factor.ToString("F"));
            if (zoom_factor == 0.5) radDisplayZoom05.Checked = true;
            else if (zoom_factor == 1.0) radDisplayZoom1x.Checked = true;
            else if (zoom_factor == 2.0) radDisplayZoom2x.Checked = true;
            else if (zoom_factor == 4.0) radDisplayZoom4x.Checked = true;
            else
            {
                radDisplayZoom05.Checked = false;
                radDisplayZoom1x.Checked = false;
                radDisplayZoom2x.Checked = false;
                radDisplayZoom4x.Checked = false;
            }

            CalcDisplayFreq();
            CalcRX2DisplayFreq();
            CalcTXDisplayFreq();


            if (initializing) lastZoom = zoom_factor;
            Boolean zoomingIn = (zoom_factor > lastZoom);
            if (ClickTuneDisplay && zoomingIn)  //-W2PA Force centering display when zooming in with CTUN on, to keep the vfo within the display
            {
                center_frequency = VFOAFreq;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
            lastZoom = zoom_factor;

            //if (ptbDisplayZoom.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbDisplayZoom.Focus();
            }
        }

        private void radDisplayZoom05_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radDisplayZoom05.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 0.5);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
        }

        private void radDisplayZoom1x_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radDisplayZoom1x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 1.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
        }

        private void radDisplayZoom2x_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radDisplayZoom2x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 2.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
        }

        private void radDisplayZoom4x_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radDisplayZoom4x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 4.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
        }

        #endregion

        #region Band Button Events
        // ======================================================
        // Band Button Events
        // ======================================================

        private void radBand160_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("160M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_160m_index = (band_160m_index - 1 + band_160m_register) % band_160m_register;
                else
                    band_160m_index = (band_160m_index + 1) % band_160m_register;
            }
            last_band = "160M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;

            if (DB.GetBandStack(last_band, band_160m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand80_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("80M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_80m_index = (band_80m_index - 1 + band_80m_register) % band_80m_register;
                else
                    band_80m_index = (band_80m_index + 1) % band_80m_register;
            }
            last_band = "80M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_80m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand60_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            if (RX1IsIn60m() && !RX1IsOn60mChannel() && current_region == FRSRegion.US)
            {
                // jump to nearest 60m band
                double jump_freq = 0;
                double min_delta = double.MaxValue;
                double offset = ModeFreqOffset(rx1_dsp_mode);
                int index = 0;
                int min_index = 0;
                foreach (Channel c in Channels60m)
                {
                    double freq = c.Freq + offset;
                    double delta = Math.Abs(freq - VFOAFreq);
                    if (delta < min_delta)
                    {
                        min_delta = delta;
                        jump_freq = freq;
                        min_index = index;
                    }
                    index++;
                }

                VFOAFreq = jump_freq;
                band_60m_index = min_index; // sets the band stack index
                last_band = "60M";
            }
            else
            {
                SaveBand();
                if (last_band.Equals("60M"))
                {
                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        band_60m_index = (band_60m_index - 1 + band_60m_register) % band_60m_register;
                    else
                        band_60m_index = (band_60m_index + 1) % band_60m_register;
                }
                last_band = "60M";

                string filter, mode;
                double freq;
                bool CTUN;
                int ZoomFactor;
                double CenterFreq;
                if (DB.GetBandStack(last_band, band_60m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
                {
                    if (filter.Contains("@"))
                    {
                        filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                    }
                    SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
                }
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand40_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("40M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_40m_index = (band_40m_index - 1 + band_40m_register) % band_40m_register;
                else
                    band_40m_index = (band_40m_index + 1) % band_40m_register;
            }
            last_band = "40M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_40m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand30_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("30M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_30m_index = (band_30m_index - 1 + band_30m_register) % band_30m_register;
                else
                    band_30m_index = (band_30m_index + 1) % band_30m_register;
            }
            last_band = "30M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_30m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand20_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("20M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_20m_index = (band_20m_index - 1 + band_20m_register) % band_20m_register;
                else
                    band_20m_index = (band_20m_index + 1) % band_20m_register;
            }
            last_band = "20M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_20m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand17_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("17M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_17m_index = (band_17m_index - 1 + band_17m_register) % band_17m_register;
                else
                    band_17m_index = (band_17m_index + 1) % band_17m_register;
            }
            last_band = "17M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_17m_index, out mode, out filter, out freq, out CTUN, out  ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand15_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("15M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_15m_index = (band_15m_index - 1 + band_15m_register) % band_15m_register;
                else
                    band_15m_index = (band_15m_index + 1) % band_15m_register;
            }
            last_band = "15M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_15m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand12_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("12M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_12m_index = (band_12m_index - 1 + band_12m_register) % band_12m_register;
                else
                    band_12m_index = (band_12m_index + 1) % band_12m_register;
            }
            last_band = "12M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_12m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand10_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("10M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_10m_index = (band_10m_index - 1 + band_10m_register) % band_10m_register;
                else
                    band_10m_index = (band_10m_index + 1) % band_10m_register;
            }
            last_band = "10M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_10m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand6_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("6M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_6m_index = (band_6m_index - 1 + band_6m_register) % band_6m_register;
                else
                    band_6m_index = (band_6m_index + 1) % band_6m_register;
            }
            last_band = "6M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_6m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBand2_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("2M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_2m_index = (band_2m_index - 1 + band_2m_register) % band_2m_register;
                else
                    band_2m_index = (band_2m_index + 1) % band_2m_register;
            }
            last_band = "2M";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_2m_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
        }

        private void radBandWWV_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band.Equals("WWV"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_wwv_index = (band_wwv_index - 1 + band_wwv_register) % band_wwv_register;
                else
                    band_wwv_index = (band_wwv_index + 1) % band_wwv_register;
            }
            last_band = "WWV";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_wwv_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBandGEN_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            SaveBand();
            if (last_band == "GEN")
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_gen_index = (band_gen_index - 1 + band_gen_register) % band_gen_register;
                else
                    band_gen_index = (band_gen_index + 1) % band_gen_register;
            }
            last_band = "GEN";

            string filter, mode;
            double freq;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            if (DB.GetBandStack(last_band, band_gen_index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        private void radBandVHF_Click(object sender, EventArgs e)
        {
            NetworkIO.SendHighPriority(0);
            if (rx1_click_tune_drag || rx2_click_tune_drag)
            {
                chkFWCATU.Checked = false;
                chkX2TR.Checked = false;
            }

            SaveBand();

            string new_band = ((Control)sender).Name.Substring(7);
            int index = -1, register = -1;

            switch (new_band)
            {
                case "VHF0": index = band_vhf0_index; register = band_vhf0_register; break;
                case "VHF1": index = band_vhf1_index; register = band_vhf1_register; break;
                case "VHF2": index = band_vhf2_index; register = band_vhf2_register; break;
                case "VHF3": index = band_vhf3_index; register = band_vhf3_register; break;
                case "VHF4": index = band_vhf4_index; register = band_vhf4_register; break;
                case "VHF5": index = band_vhf5_index; register = band_vhf5_register; break;
                case "VHF6": index = band_vhf6_index; register = band_vhf6_register; break;
                case "VHF7": index = band_vhf7_index; register = band_vhf7_register; break;
                case "VHF8": index = band_vhf8_index; register = band_vhf8_register; break;
                case "VHF9": index = band_vhf9_index; register = band_vhf9_register; break;
                case "VHF10": index = band_vhf10_index; register = band_vhf10_register; break;
                case "VHF11": index = band_vhf11_index; register = band_vhf11_register; break;
                case "VHF12": index = band_vhf12_index; register = band_vhf12_register; break;
                case "VHF13": index = band_vhf13_index; register = band_vhf13_register; break;
            }

            int xvtr_index = Int32.Parse(new_band.Substring(3));
            double start_freq = XVTRForm.GetBegin(xvtr_index);
            double end_freq = XVTRForm.GetEnd(xvtr_index);
            bool CTUN = ClickTuneDisplay;
            int ZoomFactor = ptbDisplayZoom.Value;
            double CenterFreq = center_frequency;
            if (register < 3)
            {
                for (int i = 0; i < 3 - register; i++)
                    DB.AddBandStack(new_band, "USB", "2600", start_freq + i * 0.0010, CTUN, ZoomFactor, CenterFreq);

                UpdateBandStackRegisters();
                register = 3;
            }
            else
            {
                if (last_band == new_band)
                {
                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        index = (index - 1 + register) % register;
                    else
                        index = (index + 1) % register;
                }

                switch (new_band)
                {
                    case "VHF0": band_vhf0_index = index; break;
                    case "VHF1": band_vhf1_index = index; break;
                    case "VHF2": band_vhf2_index = index; break;
                    case "VHF3": band_vhf3_index = index; break;
                    case "VHF4": band_vhf4_index = index; break;
                    case "VHF5": band_vhf5_index = index; break;
                    case "VHF6": band_vhf6_index = index; break;
                    case "VHF7": band_vhf7_index = index; break;
                    case "VHF8": band_vhf8_index = index; break;
                    case "VHF9": band_vhf9_index = index; break;
                    case "VHF10": band_vhf10_index = index; break;
                    case "VHF11": band_vhf11_index = index; break;
                    case "VHF12": band_vhf12_index = index; break;
                    case "VHF13": band_vhf13_index = index; break;
                }
            }
            last_band = new_band;

            string filter, mode;
            double freq;

            for (int i = 0; i < 3; i++)
            {
                DB.GetBandStack(last_band, i, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                if (freq < start_freq || freq > end_freq)
                    DB.SaveBandStack(last_band, i, mode, filter, start_freq + i * 0.001, CTUN, ZoomFactor, CenterFreq);
            }

            if (DB.GetBandStack(last_band, index, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq, CTUN, ZoomFactor, CenterFreq);
            }
            UpdateWaterfallLevelValues();
            UpdateDisplayGridLevelValues();
            UpdateDiversityValues();
            NetworkIO.SendHighPriority(1);
        }

        #endregion

        #region Mode Button Events
        // ======================================================
        // Mode Button Events
        // ======================================================

        private void SetRX1Mode(DSPMode new_mode)
        {
            if (new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;

            DSPMode old_mode = rx1_dsp_mode;
            bool old_sd = stereo_diversity;

            WDSP.SetChannelState(WDSP.id(0, 1), 0, 0);              // turn off the DSP channels
            WDSP.SetChannelState(WDSP.id(0, 0), 0, 1);
            Thread.Sleep(1);

            if (new_mode == DSPMode.FM)                             // set DSP samplerate
            {
                WDSP.SetDSPSamplerate(WDSP.id(0, 0), 192000);
                WDSP.SetDSPSamplerate(WDSP.id(0, 1), 192000);
            }
            else
            {
                WDSP.SetDSPSamplerate(WDSP.id(0, 0), 48000);
                WDSP.SetDSPSamplerate(WDSP.id(0, 1), 48000);
            }

            StereoDiversity = false;

            radio.GetDSPRX(0, 0).DSPMode = new_mode;				// set new DSP mode
            radio.GetDSPRX(0, 1).DSPMode = new_mode;

            if (chkVFOATX.Checked || !rx2_enabled)
            {
                Audio.TXDSPMode = new_mode;
                radio.GetDSPTX(0).CurrentDSPMode = new_mode;
            }
            Display.RX1DSPMode = new_mode;
            RadioDSP.RX1DSPMode = new_mode;

            if (new_mode == DSPMode.CWL || new_mode == DSPMode.CWU)
            {
                WDSP.SetChannelTDelayUp(WDSP.id(0, 0), 0.005);
                WDSP.SetChannelTDelayUp(WDSP.id(0, 1), 0.005);
                WDSP.SetChannelTSlewUp(WDSP.id(0, 0), 0.010);
                WDSP.SetChannelTSlewUp(WDSP.id(0, 1), 0.010);
                WDSP.SetChannelTDelayDown(WDSP.id(0, 0), 0.000);
                WDSP.SetChannelTDelayDown(WDSP.id(0, 1), 0.000);
                WDSP.SetChannelTSlewDown(WDSP.id(0, 0), 0.005);
                WDSP.SetChannelTSlewDown(WDSP.id(0, 1), 0.005);
            }
            else
            {
                WDSP.SetChannelTDelayUp(WDSP.id(0, 0), 0.000);
                WDSP.SetChannelTDelayUp(WDSP.id(0, 1), 0.000);
                WDSP.SetChannelTSlewUp(WDSP.id(0, 0), 0.010);
                WDSP.SetChannelTSlewUp(WDSP.id(0, 1), 0.010);
                WDSP.SetChannelTDelayDown(WDSP.id(0, 0), 0.000);
                WDSP.SetChannelTDelayDown(WDSP.id(0, 1), 0.000);
                WDSP.SetChannelTSlewDown(WDSP.id(0, 0), 0.010);
                WDSP.SetChannelTSlewDown(WDSP.id(0, 1), 0.010);
            }

            double rx1_freq = VFOAFreq;
            // int old_txosc = (int)radio.GetDSPTX(0).TXOsc;

            ptbFilterShift.Value = 0;
            btnFilterShiftReset.BackColor = SystemColors.Control;

            switch (old_mode)
            {
                case DSPMode.LSB:
                    radModeLSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.USB:
                    radModeUSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.DSB:
                    radModeDSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.CWL:
                    radModeCWL.BackColor = SystemColors.Control;

                    if ((chkVFOATX.Checked || !rx2_enabled) && new_mode != DSPMode.CWU && new_mode != DSPMode.CWL)
                    {
                        chkMON.Checked = mon_recall;
                    }

                    if (!cw_auto_mode_switch)
                        //CWFWKeyer = false;

                    // turn off APF
                    radio.GetDSPRX(0, 0).RXAPFRun = false;
                    radio.GetDSPRX(0, 1).RXAPFRun = false;
                    SetupForm.EnableRX1APFControl = false;
                    lblRX1APF.Hide();
                    // enable ANF
                    chkANF.Enabled = true;
                    chkANF_CheckedChanged(this, EventArgs.Empty);


                    if (!RX1IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.USB:
                                rx1_freq -= (cw_pitch * 0.0000010);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx1_freq += (cw_pitch * 0.0000010);
                                break;
                        }
                        // UpdateVFOAFreq(rx1_freq.ToString("f6"));
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
                    break;
                case DSPMode.CWU:
                    radModeCWU.BackColor = SystemColors.Control;

                    if ((chkVFOATX.Checked || !rx2_enabled) && new_mode != DSPMode.CWL && new_mode != DSPMode.CWU)
                    {
                        chkMON.Checked = mon_recall;
                    }

                    if (!cw_auto_mode_switch)
                        //CWFWKeyer = false;

                    // turn off APF
                    radio.GetDSPRX(0, 0).RXAPFRun = false;
                    radio.GetDSPRX(0, 1).RXAPFRun = false;
                    SetupForm.EnableRX1APFControl = false;
                    lblRX1APF.Hide();
                    // enable ANF
                    chkANF.Enabled = true;
                    chkANF_CheckedChanged(this, EventArgs.Empty);

                    if (!RX1IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.LSB:
                                rx1_freq += (cw_pitch * 0.0000010);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx1_freq -= (cw_pitch * 0.0000010);
                                break;
                        }
                        //UpdateVFOAFreq(rx1_freq.ToString("f6"));
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
                    break;
                case DSPMode.FM:
                    radModeFMN.BackColor = SystemColors.Control;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM)
                        {
                            // chkMON.Enabled = true;
                            chkBIN.Enabled = true;
                        }
                        chkMON.Enabled = true;

                        ptbMic_Scroll(this, EventArgs.Empty);
                    }
                    if (new_mode != DSPMode.SPEC || new_mode != DSPMode.DRM)
                        EnableAllFilters();

                    if (!initializing)
                        rx1_fm_squelch_threshold_scroll = ptbSquelch.Value;

                    ptbSquelch.Minimum = -160;
                    ptbSquelch.Maximum = 0;
                    if (!collapsedDisplay)
                        picSquelch.Visible = true;

                    ptbSquelch.Value = rx1_squelch_threshold_scroll;
                    break;
                case DSPMode.AM:
                    radModeAM.BackColor = SystemColors.Control;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM)
                        {
                            // chkMON.Enabled = true;
                            chkBIN.Enabled = true;
                        }
                        chkMON.Enabled = true;
                    }
                    break;
                case DSPMode.SAM:
                    radModeSAM.BackColor = SystemColors.Control;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM)
                        {
                            // chkMON.Enabled = true;
                            chkBIN.Enabled = true;
                        }
                        chkMON.Enabled = true;
                    }
                    break;
                case DSPMode.SPEC:
                    radModeSPEC.BackColor = SystemColors.Control;
                    comboDisplayMode.Items.Insert(1, "Panadapter");
                    comboDisplayMode.Items.Insert(5, "Waterfall");
                    ptbFilterShift.Enabled = true;
                    btnFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.DRM || new_mode != DSPMode.FM)
                        EnableAllFilters();
                    RX1Filter = rx1_filter;
                    //if_shift = true;
                    if (was_panadapter) comboDisplayMode.Text = "Panadapter";
                    else if (was_waterfall) comboDisplayMode.Text = "Waterfall";
                    switch (Display.CurrentDisplayMode)
                    {
                        case DisplayMode.PANADAPTER:
                        case DisplayMode.WATERFALL:
                        case DisplayMode.PANAFALL:
                        case DisplayMode.PANASCOPE:
                            radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                            break;
                        default:
                            radio.GetDSPRX(0, 0).SpectrumPreFilter = false;
                            break;
                    }
                    break;
                case DSPMode.DIGL:
                    radModeDIGL.BackColor = SystemColors.Control;
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }

                    if (new_mode != DSPMode.DIGU) SetDigiMode(1, "reset");
                    break;
                case DSPMode.DIGU:
                    radModeDIGU.BackColor = SystemColors.Control;
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VACEnable = false;
                    }

                    if (new_mode != DSPMode.DIGL) SetDigiMode(1, "reset");
                    break;
                case DSPMode.DRM:
                    radModeDRM.BackColor = SystemColors.Control;
                    // if_shift = true;
                    vfo_offset = 0.0;
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU)
                    {
                        SetupForm.VACEnable = false;
                    }
                    ptbFilterShift.Enabled = true;
                    btnFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.SPEC || new_mode != DSPMode.FM)
                        EnableAllFilters();
                    // if_freq = SetupForm.IFFreq;
                    //  CalcDisplayFreq();
                    chkTNF.Enabled = true;
                    btnTNFAdd.Enabled = true;
                    break;
            }

            switch (new_mode)
            {
                case DSPMode.LSB:
                    vfo_offset = 0.0;
                    radModeLSB.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - LSB";
                    if (!rx_only && PowerOn)
                        chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    panelModeSpecificPhone.BringToFront();
                    break;
                case DSPMode.USB:
                    radModeUSB.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - USB";
                    if (!rx_only && chkPower.Checked)
                        chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    panelModeSpecificPhone.BringToFront();
                    break;
                case DSPMode.DSB:
                    radModeDSB.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - DSB";
                    if (!rx_only && chkPower.Checked)
                        chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    panelModeSpecificPhone.BringToFront();
                    break;
                case DSPMode.CWL:
                    radModeCWL.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - CWL";

                    if (chkVFOATX.Checked || !rx2_enabled)
                    {

                        CWPitch = cw_pitch;
                        radio.GetDSPTX(0).TXOsc = 0.0;
                        if (!rx_only && chkPower.Checked)
                        {
                            chkMOX.Enabled = true;
                        }

                        if (old_mode != DSPMode.CWL && old_mode != DSPMode.CWU)
                        {
                            if (!initializing)
                                mon_recall = chkMON.Checked;
                            chkMON.Checked = cw_sidetone;
                        }
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                    }

                    if (!RX1IsOn60mChannel())
                    {
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.USB:
                                rx1_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx1_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }

                    // enable APF
                    SetupForm.EnableRX1APFControl = true;
                    lblRX1APF.Show();
                    // turn off ANF
                    radio.GetDSPRX(0, 0).AutoNotchFilter = false;
                    radio.GetDSPRX(0, 1).AutoNotchFilter = false;
                    chkANF.Enabled = false;

                    //chkCWFWKeyer_CheckedChanged(this, EventArgs.Empty);
                    // chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
                    panelModeSpecificCW.BringToFront();
                    break;
                case DSPMode.CWU:
                    radModeCWU.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - CWU";
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        CWPitch = cw_pitch;
                        radio.GetDSPTX(0).TXOsc = 0.0;
                        // RadioDSP.KeyerFreq = -cw_pitch;
                        if (!rx_only && chkPower.Checked)
                        {
                            chkMOX.Enabled = true;
                        }


                        if (rx1_dsp_mode != DSPMode.CWL)
                        {
                            if (!initializing)
                                mon_recall = chkMON.Checked;
                            chkMON.Checked = cw_sidetone;
                        }

                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                    }

                    if (!RX1IsOn60mChannel())
                    {
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.LSB:
                                rx1_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx1_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }

                    // enable APF
                    SetupForm.EnableRX1APFControl = true;
                    chkANF.Enabled = false;
                    lblRX1APF.Show();
                    // turn off ANF
                    radio.GetDSPRX(0, 0).AutoNotchFilter = false;
                    radio.GetDSPRX(0, 1).AutoNotchFilter = false;

                    //chkCWFWKeyer_CheckedChanged(this, EventArgs.Empty);
                    // chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
                    panelModeSpecificCW.BringToFront();
                    break;
                case DSPMode.FM:
                    radModeFMN.BackColor = button_selected_color;
                    DisableAllFilters();
                    if (chkNR.CheckState == CheckState.Indeterminate)
                        chkNR.CheckState = CheckState.Unchecked;
                    if (!initializing)
                        rx1_squelch_threshold_scroll = ptbSquelch.Value;

                    ptbSquelch.Minimum = 0;
                    ptbSquelch.Maximum = 100;

                    ptbSquelch.Value = rx1_fm_squelch_threshold_scroll;

                    picSquelch.Visible = false;

                    if (!initializing)
                        rx1_squelch_on = chkSquelch.Checked;    //save state of non-FM squelch
                    chkSquelch.Checked = rx1_fm_squelch_on; //set fm squelch state

                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        if (!rx_only && chkPower.Checked)
                            chkMOX.Enabled = true;
                        chkMON.Checked = false;
                        chkMON.Enabled = false;
                        chkBIN.Checked = false;
                        chkBIN.Enabled = false;
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        //radio.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
                    }
                    panelModeSpecificFM.BringToFront();
                    // chkANF.Enabled = true;
                    break;
                case DSPMode.AM:
                    radModeAM.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - AM";
                    if (!rx_only && chkPower.Checked)
                        chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        // chkMON.Checked = false;
                        // chkMON.Enabled = true;
                        chkBIN.Checked = false;
                        chkBIN.Enabled = false;
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        //radio.GetDSPTX(0).TXOsc = 11025.0;
                    }
                    panelModeSpecificPhone.BringToFront();
                    break;
                case DSPMode.SAM:
                    radModeSAM.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - SAM";
                    if (!rx_only && chkPower.Checked)
                        chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        //  chkMON.Checked = false;
                        //  chkMON.Enabled = true;
                        chkBIN.Checked = false;
                        chkBIN.Enabled = false;
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        //radio.GetDSPTX(0).TXOsc = 11025.0; 
                    }
                    panelModeSpecificPhone.BringToFront();
                    break;
                case DSPMode.SPEC:
                    radModeSPEC.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - SPEC";
                    if_shift = false;
                    radio.GetDSPRX(0, 0).RXOsc = 0.0;
                    DisableAllFilters();
                    ptbFilterShift.Enabled = false;
                    btnFilterShiftReset.Enabled = false;
                    bool save_pan = (Display.CurrentDisplayMode == DisplayMode.PANADAPTER);
                    bool save_water = (Display.CurrentDisplayMode == DisplayMode.WATERFALL);
                    if (save_pan || save_water)
                    {
                        comboDisplayMode.Text = "Spectrum";
                    }
                    comboDisplayMode.Items.Remove("Panadapter");
                    comboDisplayMode.Items.Remove("Waterfall");
                    was_panadapter = save_pan;
                    was_waterfall = save_water;
                    radio.GetDSPRX(0, 0).SpectrumPreFilter = true;
                    Display.RXDisplayLow = -(int)sample_rate1 / 2;
                    Display.RXDisplayHigh = (int)sample_rate1 / 2;
                    break;
                case DSPMode.DIGL:
                    radModeDIGL.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - DIGL";
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;

                    panelModeSpecificDigital.BringToFront();

                    if (old_mode != DSPMode.DIGU)
                    {
                        SetDigiMode(1, "preset");
                        SetDigiMode(1, "set");
                    }
                    break;
                case DSPMode.DIGU:
                    radModeDIGU.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - DIGU";
                    if (chkVFOATX.Checked)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;

                    panelModeSpecificDigital.BringToFront();

                    if (old_mode != DSPMode.DIGL)
                    {
                        SetDigiMode(1, "preset");
                        SetDigiMode(1, "set");
                    }

                    break;
                case DSPMode.DRM:
                    if_shift = false;
                    vfo_offset = -0.012;
                    radModeDRM.BackColor = button_selected_color;
                    //grpMode.Text = "Mode - DRM";
                    if (vac_auto_enable)
                        SetupForm.VACEnable = true;
                    //chkMOX.Enabled = false;
                    if (chkVFOATX.Checked || !rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    DisableAllFilters();
                    ptbFilterShift.Enabled = false;
                    btnFilterShiftReset.Enabled = false;
                    //grpFilter.Text = "Filter - DRM";
                    radio.GetDSPRX(0, 0).SetRXFilter(7000, 17000);
                    /*Display.RXDisplayLow = -8000;
                        Display.RXDisplayHigh = 8000;*/
                    panelModeSpecificDigital.BringToFront();
                    btnTNFAdd.Enabled = false;
                    chkTNF.Enabled = false;
                    chkTNF.Checked = false;
                    break;
            }

            if (RX1IsOn60mChannel() && current_region == FRSRegion.US)
            {
                rx1_freq += (-ModeFreqOffset(old_mode) + ModeFreqOffset(new_mode));
                txtVFOAFreq.Text = rx1_freq.ToString("f6");
            }

            // int new_txosc = (int)radio.GetDSPTX(0).TXOsc;


            FilterToolStripMenuItem1.Text = (radFilter1.Text = rx1_filters[(int)new_mode].GetName(Filter.F1));
            FilterToolStripMenuItem2.Text = (radFilter2.Text = rx1_filters[(int)new_mode].GetName(Filter.F2));
            FilterToolStripMenuItem3.Text = (radFilter3.Text = rx1_filters[(int)new_mode].GetName(Filter.F3));
            FilterToolStripMenuItem4.Text = (radFilter4.Text = rx1_filters[(int)new_mode].GetName(Filter.F4));
            FilterToolStripMenuItem5.Text = (radFilter5.Text = rx1_filters[(int)new_mode].GetName(Filter.F5));
            FilterToolStripMenuItem6.Text = (radFilter6.Text = rx1_filters[(int)new_mode].GetName(Filter.F6));
            FilterToolStripMenuItem7.Text = (radFilter7.Text = rx1_filters[(int)new_mode].GetName(Filter.F7));
            FilterToolStripMenuItem8.Text = (radFilter8.Text = rx1_filters[(int)new_mode].GetName(Filter.F8));
            FilterToolStripMenuItem9.Text = (radFilter9.Text = rx1_filters[(int)new_mode].GetName(Filter.F9));
            FilterToolStripMenuItem10.Text = (radFilter10.Text = rx1_filters[(int)new_mode].GetName(Filter.F10));
            radFilterVar1.Text = rx1_filters[(int)new_mode].GetName(Filter.VAR1);
            radFilterVar2.Text = rx1_filters[(int)new_mode].GetName(Filter.VAR2);

            rx1_dsp_mode = new_mode;
            //  Keyer.RX1DSPMode = new_mode;

            if (!initializing && old_mode == DSPMode.FM)
                chkSquelch.Checked = rx1_squelch_on; //!chkSquelch.Checked;

            if (old_mode == DSPMode.FM || new_mode == DSPMode.FM)
            {
                ptbSquelch_Scroll(this, EventArgs.Empty);
            }

            if (rx1_dsp_mode != DSPMode.SPEC && rx1_dsp_mode != DSPMode.FM && rx1_dsp_mode != DSPMode.DRM)
            {
                RX1Filter = rx1_filters[(int)new_mode].LastFilter;
            }
            else
            {
                if (rx1_dsp_mode == DSPMode.FM)
                {
                    if (radio.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        UpdateRX1Filters(-8000, 8000);
                    }
                    else
                    {
                        UpdateRX1Filters(-5500, 5500);
                    }
                }

                RX1Filter = Filter.NONE;
                //grpFilter.Text = "Filter - "+(sample_rate1/1000).ToString("f0")+"kHz";
            }
            BINToolStripMenuItem.Enabled = chkBIN.Enabled;

            tbFilterWidthScroll_newMode(); // wjt 

            //Display.DrawBackground();

            UpdateDSP();
            // UpdateDSPBufTX();

            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            ptbPWR_Scroll(this, EventArgs.Empty);
            if (chkVFOSplit.Checked || full_duplex || psstate)
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            chkSquelch_CheckedChanged(this, EventArgs.Empty);
            CalcDisplayFreq();
            if (new_mode == DSPMode.CWL || new_mode == DSPMode.CWU)
            {
                chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
            }

            if (old_mode == DSPMode.FM || new_mode == DSPMode.FM)
            {
                SetupForm.ForceReset = true;
            }

            StereoDiversity = old_sd;

            WDSP.SetChannelState(WDSP.id(0, 0), 1, 0);              // turn on the DSP channels
            if (radio.GetDSPRX(0, 1).Active)
                WDSP.SetChannelState(WDSP.id(0, 1), 1, 0);

            // Manage QSK appropriately when switching modes --------------
            if (new_mode != DSPMode.CWL && new_mode != DSPMode.CWU)  // Changing to a non-CW mode
            {
                // Although CWFWKeyer is mostly a deprecated flag, it's useful in the QSK-enabled firmware (1.7 or later) -W2PA
                // It is used here solely to prevent keying in non-CW modes.
                CWFWKeyer = false;  // Disallow the FW to key the rig except in CW modes
                if (chkCWBreakInEnabled.Checked) NonCWModeBreakInDisabled = true;  // Disable break-in if not in a CW mode
            }
            else // Changing to a CW mode
            {
                CWFWKeyer = true;
                NonCWModeBreakInDisabled = false; // Re-enable break-in if necessary
            }

            if ((new_mode != DSPMode.CWL && new_mode != DSPMode.CWU)
                && (old_mode == DSPMode.CWL || old_mode == DSPMode.CWU)) // Changing to a non-CW mode from CW
            {
                if (QSKEnabled)
                {
                    chkQSK.Checked = false; // If QSK was on, turn it off to return to non-QSK settings
                    qsk_in_CW = true; // But remember it was on in CW modes
                }
                else qsk_in_CW = false;
            }

            if ((new_mode == DSPMode.CWL || new_mode == DSPMode.CWU)
                && (old_mode != DSPMode.CWL && old_mode != DSPMode.CWU)) // Changing to a CW mode from non-CW
            {
                if (qsk_in_CW) chkQSK.Checked = true;
            }
            // end of QSK-related code ---------------------------------------

        }

        private void radModeButton_CheckedChanged(object sender, System.EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(RadioButtonTS)) return;
            RadioButtonTS radioBtnTS = (RadioButtonTS)sender;
            if (!radioBtnTS.Checked) return;
            string radiobut = ((RadioButtonTS)sender).Text;

            switch (radiobut)
            {
                case "LSB":
                    SetRX1Mode(DSPMode.LSB);
                    lblModeLabel.Text = radModeLSB.Text;
                    break;
                case "USB":
                    SetRX1Mode(DSPMode.USB);
                    lblModeLabel.Text = radModeUSB.Text;
                    break;
                case "DSB":
                    SetRX1Mode(DSPMode.DSB);
                    lblModeLabel.Text = radModeDSB.Text;
                    break;
                case "CWL":
                    SetRX1Mode(DSPMode.CWL);
                    lblModeLabel.Text = radModeCWL.Text;
                    break;
                case "CWU":
                    SetRX1Mode(DSPMode.CWU);
                    lblModeLabel.Text = radModeCWU.Text;
                    break;
                case "FM":
                    SetRX1Mode(DSPMode.FM);
                    lblModeLabel.Text = radModeFMN.Text;
                    break;
                case "AM":
                    SetRX1Mode(DSPMode.AM);
                    lblModeLabel.Text = radModeAM.Text;
                    break;
                case "SAM":
                    SetRX1Mode(DSPMode.SAM);
                    lblModeLabel.Text = radModeSAM.Text;
                    break;
                case "SPEC":
                    SetRX1Mode(DSPMode.SPEC);
                    lblModeLabel.Text = radModeSPEC.Text;
                    break;
                case "DIGL":
                    SetRX1Mode(DSPMode.DIGL);
                    lblModeLabel.Text = radModeDIGL.Text;
                    break;
                case "DIGU":
                    SetRX1Mode(DSPMode.DIGU);
                    lblModeLabel.Text = radModeDIGU.Text;
                    break;
                case "DRM":
                    SetRX1Mode(DSPMode.DRM);
                    lblModeLabel.Text = radModeDRM.Text;
                    break;
            }
            lSBToolStripMenuItem.Checked = radModeLSB.Checked;
            uSBToolStripMenuItem.Checked = radModeUSB.Checked;
            dSBToolStripMenuItem.Checked = radModeDSB.Checked;
            cWLToolStripMenuItem.Checked = radModeCWL.Checked;
            cWUToolStripMenuItem.Checked = radModeCWU.Checked;
            fMToolStripMenuItem.Checked = radModeFMN.Checked;
            aMToolStripMenuItem.Checked = radModeAM.Checked;
            sAMToolStripMenuItem.Checked = radModeSAM.Checked;
            sPECToolStripMenuItem.Checked = radModeSPEC.Checked;
            dIGLToolStripMenuItem.Checked = radModeDIGL.Checked;
            dIGUToolStripMenuItem.Checked = radModeDIGU.Checked;
            dRMToolStripMenuItem.Checked = radModeDRM.Checked;
        }

        #endregion

        #region Filter Button Events
        // ======================================================
        // Filter Button Events
        // ======================================================

        public void SetRX1Filter(Filter new_filter)
        {
            if (rx1_dsp_mode == DSPMode.FIRST || rx1_dsp_mode == DSPMode.LAST) return;

            int low = 0, high = 0;

            switch (rx1_filter)
            {
                case Filter.F1:
                    radFilter1.BackColor = SystemColors.Control;
                    break;
                case Filter.F2:
                    radFilter2.BackColor = SystemColors.Control;
                    break;
                case Filter.F3:
                    radFilter3.BackColor = SystemColors.Control;
                    break;
                case Filter.F4:
                    radFilter4.BackColor = SystemColors.Control;
                    break;
                case Filter.F5:
                    radFilter5.BackColor = SystemColors.Control;
                    break;
                case Filter.F6:
                    radFilter6.BackColor = SystemColors.Control;
                    break;
                case Filter.F7:
                    radFilter7.BackColor = SystemColors.Control;
                    break;
                case Filter.F8:
                    radFilter8.BackColor = SystemColors.Control;
                    break;
                case Filter.F9:
                    radFilter9.BackColor = SystemColors.Control;
                    break;
                case Filter.F10:
                    radFilter10.BackColor = SystemColors.Control;
                    break;
                case Filter.VAR1:
                    radFilterVar1.BackColor = SystemColors.Control;
                    //udFilterLow.BackColor = button_selected_color;
                    //udFilterHigh.BackColor = button_selected_color;
                    //udFilterLow.ReadOnly = true;
                    //udFilterHigh.ReadOnly = true;
                    udFilterLow.Enabled = false;
                    udFilterHigh.Enabled = false;
                    break;
                case Filter.VAR2:
                    radFilterVar2.BackColor = SystemColors.Control;
                    //udFilterLow.BackColor = button_selected_color;
                    //udFilterHigh.BackColor = button_selected_color;
                    //udFilterLow.ReadOnly = true;
                    //udFilterHigh.ReadOnly = true;
                    udFilterLow.Enabled = false;
                    udFilterHigh.Enabled = false;
                    break;
            }

            rx1_filter = new_filter;

            low = rx1_filters[(int)rx1_dsp_mode].GetLow(new_filter);
            high = rx1_filters[(int)rx1_dsp_mode].GetHigh(new_filter);
            rx1_filters[(int)rx1_dsp_mode].LastFilter = new_filter;

            //grpFilter.Text = "Filter - "+rx1_filters[(int)rx1_dsp_mode].GetName(new_filter);

            switch (new_filter)
            {
                case Filter.F1:
                    radFilter1.BackColor = button_selected_color;
                    break;
                case Filter.F2:
                    radFilter2.BackColor = button_selected_color;
                    break;
                case Filter.F3:
                    radFilter3.BackColor = button_selected_color;
                    break;
                case Filter.F4:
                    radFilter4.BackColor = button_selected_color;
                    break;
                case Filter.F5:
                    radFilter5.BackColor = button_selected_color;
                    break;
                case Filter.F6:
                    radFilter6.BackColor = button_selected_color;
                    break;
                case Filter.F7:
                    radFilter7.BackColor = button_selected_color;
                    break;
                case Filter.F8:
                    radFilter8.BackColor = button_selected_color;
                    break;
                case Filter.F9:
                    radFilter9.BackColor = button_selected_color;
                    break;
                case Filter.F10:
                    radFilter10.BackColor = button_selected_color;
                    break;
                case Filter.VAR1:
                    radFilterVar1.BackColor = button_selected_color;
                    udFilterLow.Enabled = true;
                    udFilterHigh.Enabled = true;
                    break;
                case Filter.VAR2:
                    radFilterVar2.BackColor = button_selected_color;
                    udFilterLow.Enabled = true;
                    udFilterHigh.Enabled = true;
                    break;
                case Filter.NONE:
                    foreach (Control c in panelFilter.Controls)
                    {
                        if (c.GetType() == typeof(RadioButtonTS))
                        {
                            ((RadioButtonTS)c).Checked = false;

                            if (c.BackColor != SystemColors.Control)
                                ((RadioButtonTS)c).BackColor = SystemColors.Control;
                        }
                    }
                    return;
            }
            UpdateRX1Filters(low, high);
        }

        private void radRX2Filter_CheckedChanged(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(RadioButtonTS)) return;
            RadioButtonTS radioBtnTS = (RadioButtonTS)sender;
            if (!radioBtnTS.Checked) return;

            string radiobut = ((RadioButtonTS)sender).Name;

            switch (radiobut)
            {
                case "radRX2Filter1":
                    SetRX2Filter(Filter.F1);
                    lblRX2FilterLabel.Text = radRX2Filter1.Text;
                    kToolStripMenuItem.Text = radRX2Filter1.Text;
                    break;
                case "radRX2Filter2":
                    SetRX2Filter(Filter.F2);
                    lblRX2FilterLabel.Text = radRX2Filter2.Text;
                    kToolStripMenuItem1.Text = radRX2Filter2.Text;
                    break;
                case "radRX2Filter3":
                    SetRX2Filter(Filter.F3);
                    lblRX2FilterLabel.Text = radRX2Filter3.Text;
                    kToolStripMenuItem2.Text = radRX2Filter3.Text;
                    break;
                case "radRX2Filter4":
                    SetRX2Filter(Filter.F4);
                    lblRX2FilterLabel.Text = radRX2Filter4.Text;
                    kToolStripMenuItem3.Text = radRX2Filter4.Text;
                    break;
                case "radRX2Filter5":
                    SetRX2Filter(Filter.F5);
                    lblRX2FilterLabel.Text = radRX2Filter5.Text;
                    kToolStripMenuItem4.Text = radRX2Filter5.Text;
                    break;
                case "radRX2Filter6":
                    SetRX2Filter(Filter.F6);
                    lblRX2FilterLabel.Text = radRX2Filter6.Text;
                    toolStripMenuItem13.Text = radRX2Filter6.Text;
                    break;
                case "radRX2Filter7":
                    SetRX2Filter(Filter.F7);
                    lblRX2FilterLabel.Text = radRX2Filter7.Text;
                    toolStripMenuItem14.Text = radRX2Filter7.Text;
                    break;
                case "radRX2FilterVar1":
                    SetRX2Filter(Filter.VAR1);
                    lblRX2FilterLabel.Text = radRX2FilterVar1.Text;
                    break;
                case "radRX2FilterVar2":
                    SetRX2Filter(Filter.VAR2);
                    lblRX2FilterLabel.Text = radRX2FilterVar2.Text;
                    break;
            }
            kToolStripMenuItem.Checked = radRX2Filter1.Checked;
            kToolStripMenuItem1.Checked = radRX2Filter2.Checked;
            kToolStripMenuItem2.Checked = radRX2Filter3.Checked;
            kToolStripMenuItem3.Checked = radRX2Filter4.Checked;
            kToolStripMenuItem4.Checked = radRX2Filter5.Checked;
            toolStripMenuItem13.Checked = radRX2Filter6.Checked;
            toolStripMenuItem14.Checked = radRX2Filter7.Checked;
        }

        private void radFilter_CheckedChanged(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(RadioButtonTS)) return;
            RadioButtonTS radioBtnTS = (RadioButtonTS)sender;
            if (!radioBtnTS.Checked) return;

            string radiobut = ((RadioButtonTS)sender).Name;

            switch (radiobut)
            {
                case "radFilter1":
                    SetRX1Filter(Filter.F1);
                    lblFilterLabel.Text = radFilter1.Text;
                    FilterToolStripMenuItem1.Text = radFilter1.Text;
                    break;
                case "radFilter2":
                    SetRX1Filter(Filter.F2);
                    lblFilterLabel.Text = radFilter2.Text;
                    FilterToolStripMenuItem2.Text = radFilter2.Text;
                    break;
                case "radFilter3":
                    SetRX1Filter(Filter.F3);
                    lblFilterLabel.Text = radFilter3.Text;
                    FilterToolStripMenuItem3.Text = radFilter3.Text;
                    break;
                case "radFilter4":
                    SetRX1Filter(Filter.F4);
                    lblFilterLabel.Text = radFilter4.Text;
                    FilterToolStripMenuItem4.Text = radFilter4.Text;
                    break;
                case "radFilter5":
                    SetRX1Filter(Filter.F5);
                    lblFilterLabel.Text = radFilter5.Text;
                    FilterToolStripMenuItem5.Text = radFilter5.Text;
                    break;
                case "radFilter6":
                    SetRX1Filter(Filter.F6);
                    lblFilterLabel.Text = radFilter6.Text;
                    FilterToolStripMenuItem6.Text = radFilter6.Text;
                    break;
                case "radFilter7":
                    SetRX1Filter(Filter.F7);
                    lblFilterLabel.Text = radFilter7.Text;
                    FilterToolStripMenuItem7.Text = radFilter7.Text;
                    break;
                case "radFilter8":
                    SetRX1Filter(Filter.F8);
                    lblFilterLabel.Text = radFilter8.Text;
                    FilterToolStripMenuItem8.Text = radFilter8.Text;
                    break;
                case "radFilter9":
                    SetRX1Filter(Filter.F9);
                    lblFilterLabel.Text = radFilter9.Text;
                    FilterToolStripMenuItem9.Text = radFilter9.Text;
                    break;
                case "radFilter10":
                    SetRX1Filter(Filter.F10);
                    lblFilterLabel.Text = radFilter10.Text;
                    FilterToolStripMenuItem10.Text = radFilter10.Text;
                    break;
                case "radFilterVar1":
                    SetRX1Filter(Filter.VAR1);
                    lblFilterLabel.Text = radFilterVar1.Text;
                    break;
                case "radFilterVar2":
                    SetRX1Filter(Filter.VAR2);
                    lblFilterLabel.Text = radFilterVar2.Text;
                    break;
            }
            FilterToolStripMenuItem1.Checked = radFilter1.Checked;
            FilterToolStripMenuItem2.Checked = radFilter2.Checked;
            FilterToolStripMenuItem3.Checked = radFilter3.Checked;
            FilterToolStripMenuItem4.Checked = radFilter4.Checked;
            FilterToolStripMenuItem5.Checked = radFilter5.Checked;
            FilterToolStripMenuItem6.Checked = radFilter6.Checked;
            FilterToolStripMenuItem7.Checked = radFilter7.Checked;
            FilterToolStripMenuItem8.Checked = radFilter8.Checked;
            FilterToolStripMenuItem9.Checked = radFilter9.Checked;
            FilterToolStripMenuItem10.Checked = radFilter10.Checked;
        }

        /*       private void radFilter1_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem1.Text = radFilter1.Text;
 
                    if (radFilter1.Checked)
                    {
                        SetRX1Filter(Filter.F1);
                        lblFilterLabel.Text = radFilter1.Text;
                        FilterToolStripMenuItem1.Checked = radFilter1.Checked;
                    }
                }

                private void radFilter2_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem2.Text = radFilter2.Text;
                    if (radFilter2.Checked)
                    {
                        SetRX1Filter(Filter.F2);            
                        lblFilterLabel.Text = radFilter2.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = true;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter3_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem3.Text = radFilter3.Text;
                    if (radFilter3.Checked)
                    {
                        SetRX1Filter(Filter.F3);
                        lblFilterLabel.Text = radFilter3.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = true;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter4_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem4.Text = radFilter4.Text;
                    if (radFilter4.Checked)
                    {
                        SetRX1Filter(Filter.F4);
                        lblFilterLabel.Text = radFilter4.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = true;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter5_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem5.Text = radFilter5.Text;
                    if (radFilter5.Checked)
                    {
                        SetRX1Filter(Filter.F5);
                        lblFilterLabel.Text = radFilter5.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = true;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter6_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem6.Text = radFilter6.Text;
                    if (radFilter6.Checked)
                    {
                        SetRX1Filter(Filter.F6);
                        lblFilterLabel.Text = radFilter6.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = true;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter7_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem7.Text = radFilter7.Text;
                    if (radFilter7.Checked)
                    {
                        SetRX1Filter(Filter.F7);
                        lblFilterLabel.Text = radFilter7.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = true;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter8_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem8.Text = radFilter8.Text;
                    if (radFilter8.Checked)
                    {
                        SetRX1Filter(Filter.F8);
                        lblFilterLabel.Text = radFilter8.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = true;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter9_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem9.Text = radFilter9.Text;
                    if (radFilter9.Checked)
                    {
                        SetRX1Filter(Filter.F9);
                        lblFilterLabel.Text = radFilter9.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = true;
                        FilterToolStripMenuItem10.Checked = false;
                    }
                }

                private void radFilter10_CheckedChanged(object sender, System.EventArgs e)
                {
                    FilterToolStripMenuItem10.Text = radFilter10.Text;
                    if (radFilter10.Checked)
                    {
                        SetRX1Filter(Filter.F10);
                        lblFilterLabel.Text = radFilter10.Text;
                        FilterToolStripMenuItem1.Checked = false;
                        FilterToolStripMenuItem2.Checked = false;
                        FilterToolStripMenuItem3.Checked = false;
                        FilterToolStripMenuItem4.Checked = false;
                        FilterToolStripMenuItem5.Checked = false;
                        FilterToolStripMenuItem6.Checked = false;
                        FilterToolStripMenuItem7.Checked = false;
                        FilterToolStripMenuItem8.Checked = false;
                        FilterToolStripMenuItem9.Checked = false;
                        FilterToolStripMenuItem10.Checked = true;
                    }
                }

                private void radFilterVar1_CheckedChanged(object sender, System.EventArgs e)
                {
                    if (radFilterVar1.Checked)
                    {
                        SetRX1Filter(Filter.VAR1);
                        lblFilterLabel.Text = radFilterVar1.Text;
                    }
                }

                private void radFilterVar2_CheckedChanged(object sender, System.EventArgs e)
                {
                    if (radFilterVar2.Checked)
                    {
                        SetRX1Filter(Filter.VAR2);
                        lblFilterLabel.Text = radFilterVar2.Text;
                    }
                } */

        private void udFilterLow_ValueChanged(object sender, System.EventArgs e)
        {
            if (udFilterLow.Focused)
            {
                if (udFilterLow.Value >= udFilterHigh.Value - 10)
                {
                    udFilterLow.Value = udFilterHigh.Value - 10;
                    return;
                }

                UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);

                if (!save_filter_changes)
                    rx1_filters[(int)rx1_dsp_mode].SetLow(rx1_filter, (int)udFilterLow.Value);
            }

            if (save_filter_changes && rx1_filter >= Filter.F1 && rx1_filter <= Filter.VAR2)
                rx1_filters[(int)rx1_dsp_mode].SetLow(rx1_filter, (int)udFilterLow.Value);

            /*if(udFilterLow.Focused)
                btnHidden.Focus();*/
        }

        private void udFilterHigh_ValueChanged(object sender, System.EventArgs e)
        {
            if (udFilterHigh.Focused)
            {
                if (udFilterHigh.Value <= udFilterLow.Value + 10)
                {
                    udFilterHigh.Value = udFilterLow.Value + 10;
                    return;
                }

                UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);

                if (!save_filter_changes)
                    rx1_filters[(int)rx1_dsp_mode].SetHigh(rx1_filter, (int)udFilterHigh.Value);
            }

            if (save_filter_changes && rx1_filter >= Filter.F1 && rx1_filter <= Filter.VAR2)
                rx1_filters[(int)rx1_dsp_mode].SetHigh(rx1_filter, (int)udFilterHigh.Value);

            /*if(udFilterHigh.Focused)
                btnHidden.Focus();*/
        }

        private void DoFilterShift(int shift, bool redraw)
        {
            // VK6APH: Does the Filter Shift function, alters the filter low and high frequency values 
            // as the Filter Shift slider is moved. We need to keep the last Filter Shift values
            // that the variable filters use since, unlike the other filters, there are 
            // no pre-set bandwidths that they can default to when the Filter Shift is 
            // turned off. These values are stored in the public variables last_var1_shift and
            // last_var2_shift. 
            int IFShift;
            int low;
            int high;
            int bandwidth;
            int max_shift = 9999;		// needed when using variable filters so we can't exceed +/- 10kHz DSP limits

            if (rx1_dsp_mode == DSPMode.SPEC ||
                rx1_dsp_mode == DSPMode.DRM)
                return;

            bandwidth = (int)Math.Abs(udFilterHigh.Value - udFilterLow.Value); // calculate current filter bandwidth 

            // set the maximum IF Shift depending on filter bandwidth in use 
            if (bandwidth > 800)
            {
                ptbFilterShift.Maximum = 1000;  // max IF Shift +/- 1kHz for filters > 800Hz wide
                ptbFilterShift.Minimum = -1000;
            }
            else
            {
                ptbFilterShift.Maximum = 500;	// max IF Shift +/- 500Hz for filters < 800Hz wide
                ptbFilterShift.Minimum = -500;
            }
            // calculate how far the IF Shift slider has moved
            // if we are using variable bandwidth filters need to use their last shift value
            if (rx1_filter == Filter.VAR1)
                IFShift = shift - last_var1_shift;
            else if (rx1_filter == Filter.VAR2)
                IFShift = shift - last_var2_shift;
            else
                IFShift = shift - last_filter_shift;

            high = (int)Math.Min(udFilterHigh.Value + IFShift, max_shift);	// limit high shift to maximum value
            low = (int)Math.Max(udFilterLow.Value + IFShift, -max_shift);	// limit low shift to maximum value

            radio.GetDSPRX(0, 0).SetRXFilter(low, high);			// select new filters
            udFilterLow.Value = low;						// display new low value 
            udFilterHigh.Value = high;						// display new high value
            // if (redraw) Display.DrawBackground();			// draw new background for updated filter values

            // store the last IF Shift applied for use next time
            if (rx1_filter == Filter.VAR1)
                last_var1_shift = last_var1_shift + IFShift;
            else if (rx1_filter == Filter.VAR2)
                last_var2_shift = last_var2_shift + IFShift;
            else
                last_filter_shift = last_filter_shift + IFShift;
            // show the IF Shift is active by setting the zero button colour
            if (shift != 0)
                btnFilterShiftReset.BackColor = button_selected_color;
        }

        private void ptbFilterShift_Scroll(object sender, System.EventArgs e)
        {
            SelectRX1VarFilter();

            int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
            int default_center = 0;

            switch (rx1_dsp_mode)
            {
                case DSPMode.USB:
                    default_center = default_low_cut + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift;
            if (default_center > 0)
            {
                if (ptbFilterShift.Value > 0)
                {
                    adjusted_max = Math.Min(max_filter_shift, 9999 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (ptbFilterShift.Value < 0)
                {
                    adjusted_max = Math.Min(max_filter_shift, 9999 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift, 9999 - bw / 2);
            }

            int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
            int new_center = default_center + (int)((float)ptbFilterShift.Value / (range / 2) * adjusted_max);
            UpdateRX1Filters(new_center - bw / 2, new_center + bw / 2);

            btnFilterShiftReset.BackColor = button_selected_color;

            // if (ptbFilterShift.Focused)
            // btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbFilterShift.Focus();
            }
        }

        private void ptbFilterShift_Update(int low, int high)
        {
            int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
            int default_center = 0;
            int current_center = (low + high) / 2;

            switch (rx1_dsp_mode)
            {
                case DSPMode.USB:
                    default_center = default_low_cut + bw / 2;
                    break;
                case DSPMode.LSB:
                    default_center = -default_low_cut - bw / 2;
                    break;
                case DSPMode.CWU:
                    default_center = cw_pitch;
                    break;
                case DSPMode.CWL:
                    default_center = -cw_pitch;
                    break;
                case DSPMode.DIGU:
                    default_center = digu_click_tune_offset;
                    break;
                case DSPMode.DIGL:
                    default_center = -digl_click_tune_offset;
                    break;
            }

            int adjusted_max = max_filter_shift;
            if (default_center > 0)
            {
                if (current_center > default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift, 9999 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else if (default_center < 0)
            {
                if (current_center < default_center)
                {
                    adjusted_max = Math.Min(max_filter_shift, 9999 - (Math.Abs(default_center) + bw / 2));
                }
            }
            else //default_center == 0
            {
                adjusted_max = Math.Min(max_filter_shift, 9999 - bw / 2);
            }

            int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
            int delta = current_center - default_center;
            int new_val = (int)((float)delta / adjusted_max * (range / 2));
            if (new_val > ptbFilterShift.Maximum) new_val = ptbFilterShift.Maximum;
            if (new_val < ptbFilterShift.Minimum) new_val = ptbFilterShift.Minimum;
            ptbFilterShift.Value = new_val;
        }
        /*
                private void tbFilterShift_Scroll(object sender, System.EventArgs e)
                {
                    DoFilterShift(tbFilterShift.Value, true);

                    if(tbFilterShift.Focused)
                        btnHidden.Focus();
                }
        */
        private void btnFilterShiftReset_Click(object sender, System.EventArgs e)
        {
            int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
            int low, high;
            switch (rx1_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                case DSPMode.DSB:
                    ptbFilterShift.Value = 0;
                    ptbFilterShift_Scroll(this, EventArgs.Empty);
                    break;
                case DSPMode.USB:
                    low = default_low_cut;
                    high = low + bw;
                    UpdateRX1Filters(low, high);
                    break;
                case DSPMode.CWU:
                    low = cw_pitch - bw / 2;
                    high = cw_pitch + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 9999)
                    {
                        int delta = high - 9999;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateRX1Filters(low, high);
                    break;
                case DSPMode.DIGU:
                    low = digu_click_tune_offset - bw / 2;
                    high = digu_click_tune_offset + bw / 2;
                    if (low < 0)
                    {
                        int delta = -low;
                        low += delta;
                        high += delta;
                    }
                    else if (high > 9999)
                    {
                        int delta = high - 9999;
                        high -= delta;
                        low -= delta;
                    }
                    UpdateRX1Filters(low, high);
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut;
                    low = high - bw;
                    UpdateRX1Filters(low, high);
                    break;
                case DSPMode.CWL:
                    high = -cw_pitch + bw / 2;
                    low = -cw_pitch - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -9999)
                    {
                        int delta = low + 9999;
                        high += delta;
                        low += delta;
                    }
                    UpdateRX1Filters(low, high);
                    break;
                case DSPMode.DIGL:
                    high = -digl_click_tune_offset + bw / 2;
                    low = -digl_click_tune_offset - bw / 2;
                    if (high > 0)
                    {
                        int delta = -high;
                        low -= delta;
                        high -= delta;
                    }
                    else if (low < -9999)
                    {
                        int delta = low + 9999;
                        high += delta;
                        low += delta;
                    }
                    UpdateRX1Filters(low, high);
                    break;
            }
            btnFilterShiftReset.BackColor = SystemColors.Control;	// make button grey
        }

        private FilterWidthMode current_filter_width_mode = FilterWidthMode.Linear;
        public FilterWidthMode CurrentFilterWidthMode
        {
            get { return current_filter_width_mode; }
            set
            {
                current_filter_width_mode = value;
                UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);
            }
        }

        private void ptbFilterWidth_Update(int low, int high)
        {
            int bw = high - low;
            switch (rx1_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                case DSPMode.DSB:
                    bw /= 2;
                    break;
            }

            int range = ptbFilterWidth.Maximum - ptbFilterWidth.Minimum;
            int new_val = 0;

            switch (current_filter_width_mode)
            {
                case FilterWidthMode.Linear:
                    new_val = ptbFilterWidth.Minimum + (int)((float)bw / max_filter_width * range);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbFilterWidth.Maximum);
                    double temp = max_log - (float)bw / max_filter_width * max_log;
                    new_val = ptbFilterWidth.Maximum - (int)Math.Pow(Math.E, temp);
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbFilterWidth.Maximum);
                    temp = max_log - (float)bw / max_filter_width * max_log;
                    new_val = ptbFilterWidth.Maximum - (int)Math.Pow(10, temp);
                    break;
            }

            if (new_val > ptbFilterWidth.Maximum) new_val = ptbFilterWidth.Maximum;
            if (new_val < ptbFilterWidth.Minimum) new_val = ptbFilterWidth.Minimum;
            ptbFilterWidth.Value = new_val;
        }

        //-W2PA Remember the width when the Width slider last hit the image limit.  Used by ptbFilterWidth_Scroll.
        private int var1WdithAtLimit = 0;
        private int Var1WidthAtLimit
        {
            get
            {
                return var1WdithAtLimit;
            }
            set
            {
                var1WdithAtLimit = value;
            }
        }

        private Boolean beyondLimit = false;
        private void ptbFilterWidth_Scroll(object sender, System.EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC)
            {
                return;  // no good in this mode 
            }

            SelectRX1VarFilter();

            int range = ptbFilterWidth.Maximum - ptbFilterWidth.Minimum;
            int new_bw = 0;

            switch (current_filter_width_mode)
            {
                case FilterWidthMode.Linear:
                    new_bw = (int)((float)(ptbFilterWidth.Value - ptbFilterWidth.Minimum) / range * max_filter_width);
                    break;
                case FilterWidthMode.Log:
                    double max_log = Math.Log(ptbFilterWidth.Maximum);
                    double temp = Math.Log(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width));
                    break;
                case FilterWidthMode.Log10:
                    max_log = Math.Log10(ptbFilterWidth.Maximum);
                    temp = Math.Log10(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
                    temp = max_log - temp;
                    new_bw = (int)((float)(temp / max_log * max_filter_width));
                    break;
            }

            new_bw = Math.Max(new_bw, 10);
            int current_center = ((int)udFilterLow.Value + (int)udFilterHigh.Value) / 2;
            int low = 0, high = 0;
            switch (rx1_dsp_mode)
            {
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                case DSPMode.DSB:
                    low = current_center - new_bw;
                    high = current_center + new_bw;
                    if (low < -max_filter_width)
                    {
                        low += (-max_filter_width - low);
                        high += (-max_filter_width - low);
                    }
                    else if (high > max_filter_width)
                    {
                        high -= (high - max_filter_width);
                        low -= (high - max_filter_width);
                    }
                    break;
                case DSPMode.LSB:
                    high = -default_low_cut;
                    low = high - new_bw;
                    break;
                case DSPMode.CWL:
                case DSPMode.DIGL:
                    if ((int)udFilterHigh.Value > 0) // If we're already starting out of bounds, suspend trying to stay on the correct side.
                    {
                        low = current_center - new_bw / 2;
                        high = current_center + new_bw / 2;
                        beyondLimit = true;
                    }
                    else
                    {
                        //-W2PA Stop shifting the passband when it hits the image limit, while allowing width to continue to increa                   
                        if (!beyondLimit)
                        {
                            if ((current_center + new_bw / 2) < 0) // new bw doesn't put us beyond limit
                            {
                                low = current_center - new_bw / 2;
                                high = current_center + new_bw / 2;
                            }
                            else  // new bw puts us beyond limit
                            {
                                Var1WidthAtLimit = Math.Abs(-current_center) * 2;
                                beyondLimit = true;
                                high = 0;
                                low = -new_bw;
                            }
                        }
                        else  // currently beyond limit
                        {
                            if (new_bw < Var1WidthAtLimit)  // new bw will go below limit
                            {
                                beyondLimit = false;
                                low = current_center - new_bw / 2;
                                high = current_center + new_bw / 2;
                            }
                            else  // new bw will still be above limit
                            {
                                high = 0;
                                low = -new_bw;
                            }
                        }
                    }

                    if (low < -9999)
                    {
                        low = -9999;
                        high = low + new_bw;
                    }
                    break;
                case DSPMode.USB:
                    low = default_low_cut;
                    high = low + new_bw;
                    break;
                case DSPMode.CWU:
                case DSPMode.DIGU:
                    if ((int)udFilterLow.Value < 0) // If we're already starting out of bounds, suspend trying to stay on the correct side.
                    {
                        low = current_center - new_bw / 2;
                        high = current_center + new_bw / 2;
                        beyondLimit = true;
                    }
                    else
                    {
                        //-W2PA Stop shifting the passband when it hits the image limit, while allowing width to continue to increa                   
                        if (!beyondLimit)
                        {
                            if ((current_center - new_bw / 2) > 0) // new bw doesn't put us beyond limit
                            {
                                low = current_center - new_bw / 2;
                                high = current_center + new_bw / 2;
                            }
                            else  // new bw puts us beyond limit
                            {
                                Var1WidthAtLimit = Math.Abs(current_center) * 2;
                                beyondLimit = true;
                                low = 0;
                                high = new_bw;
                            }
                        }
                        else  // currently beyond limit
                        {
                            if (new_bw < Var1WidthAtLimit)  // new bw will go below limit
                            {
                                beyondLimit = false;
                                low = current_center - new_bw / 2;
                                high = current_center + new_bw / 2;
                            }
                            else  // new bw will still be above limit
                            {
                                low = 0;
                                high = new_bw;
                            }
                        }
                    }

                    if (high > 9999)
                    {
                        high = 9999;
                        low = high - new_bw;
                    }
                    break;
            }
            UpdateRX1Filters(low, high);

            // if (ptbFilterWidth.Focused)
            // btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbFilterWidth.Focus();
            }
        }

        private void tbFilterWidthScroll_newMode()
        {
            //centerSave = 0;  // dump any save center with scroller is keeping 
            switch (rx1_dsp_mode)
            {
                case DSPMode.SPEC:
                case DSPMode.DRM:
                    ptbFilterWidth.Enabled = false;
                    break;

                default:
                    ptbFilterWidth.Enabled = true;
                    break;
            }
        }

        #endregion

        #region VFO Button Events
        // ======================================================
        // VFO Button Events
        // ======================================================

        // Added 6/20/05 BT for CAT commands
        public void CATVFOSwap(string pChangec)
        {
            string c = pChangec;
            if (c.Length > 0)
            {
                switch (c)
                {
                    case "0":
                        btnVFOAtoB_Click(btnVFOAtoB, EventArgs.Empty);
                        break;
                    case "1":
                        btnVFOBtoA_Click(btnVFOBtoA, EventArgs.Empty);
                        break;
                    case "2":
                        btnVFOSwap_Click(btnVFOSwap, EventArgs.Empty);
                        break;
                    case "3":
                        btnIFtoVFO_Click(btnIFtoVFO, EventArgs.Empty);
                        break;
                }
            }
        }

        public void CopyVFOAtoB()
        {
            btnVFOAtoB_Click(this, EventArgs.Empty);
        }

        private void btnVFOAtoB_Click(object sender, System.EventArgs e)
        {
            if (rx2_enabled)
            {
                RX2DSPMode = rx1_dsp_mode;
                txtVFOBFreq.Text = txtVFOAFreq.Text;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                switch (rx1_filter)
                {
                    case Filter.F8:
                    case Filter.F9:
                    case Filter.F10:
                        RX2Filter = Filter.F1;
                        break;
                    case Filter.VAR1:
                    case Filter.VAR2:
                        RX2Filter = RX1Filter;
                        RX2FilterLow = RX1FilterLow;
                        RX2FilterHigh = RX2FilterHigh;
                        break;
                    default:
                        RX2Filter = rx1_filter;
                        break;
                }
                vfob_dsp_mode = rx1_dsp_mode;
                vfob_filter = rx1_filter;

                // chkRX2SR.Checked = chkSR.Checked;
                comboRX2AGC.Text = comboAGC.Text;
            }
            else
            {
                txtVFOBFreq.Text = txtVFOAFreq.Text;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                vfob_dsp_mode = rx1_dsp_mode;
                vfob_filter = rx1_filter;
            }
        }

        public void CopyVFOBtoA()
        {
            btnVFOBtoA_Click(this, EventArgs.Empty);
        }

        private void btnVFOBtoA_Click(object sender, System.EventArgs e)
        {
            if (!rx2_enabled)
            {
                if (!chkEnableMultiRX.Checked)
                {
                    RX1DSPMode = vfob_dsp_mode;
                    RX1Filter = vfob_filter;
                }
                //UpdateVFOAFreq(txtVFOBFreq.Text);
                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
            else
            {
                RX1DSPMode = rx2_dsp_mode;

                // UpdateVFOAFreq(txtVFOBFreq.Text);
                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                switch (rx2_filter)
                {
                    case Filter.VAR1:
                    case Filter.VAR2:
                        RX1Filter = RX2Filter;
                        RX1FilterLow = RX2FilterLow;
                        RX1FilterHigh = RX2FilterHigh;
                        break;
                    default:
                        //RX2Filter = rx1_filter;
                        RX1Filter = RX2Filter;
                        break;
                }
                //RX1Filter = rx2_filter;

                //  chkSR.Checked = chkRX2SR.Checked;
                comboAGC.Text = comboRX2AGC.Text;
            }
        }

        public void VFOSwap()
        {
            btnVFOSwap_Click(this, EventArgs.Empty);
        }

        private void btnVFOSwap_Click(object sender, System.EventArgs e)
        {
            if (!rx2_enabled)
            {
                string temp = txtVFOAFreq.Text;

                if (!chkEnableMultiRX.Checked)
                {
                    DSPMode mode = rx1_dsp_mode;
                    Filter filter = rx1_filter;

                    RX1DSPMode = vfob_dsp_mode;
                    RX1Filter = vfob_filter;
                    vfob_dsp_mode = mode;
                    vfob_filter = filter;
                }

                txtVFOAFreq.Text = txtVFOBFreq.Text;
                txtVFOBFreq.Text = temp;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            }
            else
            {
                string a_freq = txtVFOAFreq.Text;
                DSPMode a_mode = rx1_dsp_mode;
                Filter a_filter = rx1_filter;
                int a_filter_low = 0, a_filter_high = 0;
                if (a_filter == Filter.VAR1 || a_filter == Filter.VAR2)
                {
                    a_filter_low = RX1FilterLow;
                    a_filter_high = RX1FilterHigh;
                }

                RX1DSPMode = rx2_dsp_mode;
                VFOAFreq = VFOBFreq;
                RX1Filter = rx2_filter;

                RX2DSPMode = a_mode;
                txtVFOBFreq.Text = a_freq;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                switch (a_filter)
                {
                    case Filter.F8:
                    case Filter.F9:
                    case Filter.F10:
                        RX2Filter = Filter.F1;
                        break;
                    case Filter.VAR1:
                    case Filter.VAR2:
                        RX2Filter = a_filter;
                        RX2FilterLow = a_filter_low;
                        RX2FilterHigh = a_filter_high;
                        break;
                    default:
                        RX2Filter = a_filter;
                        break;
                }

                // bool sr = chkSR.Checked;
                // chkSR.Checked = chkRX2SR.Checked;
                // chkRX2SR.Checked = sr;

                string agc = comboAGC.Text;
                comboAGC.Text = comboRX2AGC.Text;
                comboRX2AGC.Text = agc;
            }
        }

        private void UpdateVFOASub()
        {
            if (rx2_enabled)
            {
                if (chkVFOSplit.Checked)
                {
                    txtVFOABand.Font = new Font("Microsoft Sans Sarif", 14.0f, FontStyle.Regular);
                    if (saved_vfoa_sub_freq == Display.CLEAR_FLAG) saved_vfoa_sub_freq = saved_vfoa_freq;
                    txtVFOABand.Text = saved_vfoa_sub_freq.ToString("f6");
                    tx_xvtr_index = XVTRForm.XVTRFreq(VFOASubFreq);
                    TXBand = BandByFreq(VFOASubFreq, tx_xvtr_index, true, current_region, true);
                    if (chkPower.Checked) txtVFOABand.ForeColor = Color.Red;
                    else txtVFOABand.ForeColor = Color.DarkRed;
                    txtVFOABand.TextAlign = HorizontalAlignment.Right;
                    txtVFOABand.ReadOnly = false;
                    txtVFOABand_LostFocus(this, EventArgs.Empty);
                    panelVFOASubHover.Visible = true;
                    return;
                }
                else if (chkEnableMultiRX.Checked)
                {
                    txtVFOABand.Font = new Font("Microsoft Sans Sarif", 14.0f, FontStyle.Regular);
                    txtVFOABand.Text = saved_vfoa_sub_freq.ToString("f6");
                    if (chkPower.Checked) txtVFOABand.ForeColor = vfo_text_light_color;
                    else txtVFOABand.ForeColor = vfo_text_dark_color;
                    txtVFOABand.TextAlign = HorizontalAlignment.Right;
                    txtVFOABand.ReadOnly = false;
                    txtVFOABand_LostFocus(this, EventArgs.Empty);
                    panelVFOASubHover.Visible = true;

                    return;
                }
            }

            if (chkPower.Checked)
            {
                txtVFOABand.Font = new Font("Microsoft Sans Sarif", 12.0f, FontStyle.Regular);
                txtVFOABand.ForeColor = band_text_light_color;
                txtVFOABand.TextAlign = HorizontalAlignment.Center;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                panelVFOASubHover.Visible = false;
            }
            else
            {
                txtVFOABand.Font = new Font("Microsoft Sans Sarif", 12.0f, FontStyle.Regular);
                txtVFOABand.ForeColor = band_text_dark_color;
                txtVFOABand.TextAlign = HorizontalAlignment.Center;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                panelVFOASubHover.Visible = false;
            }
        }

        private void chkVFOSplit_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.SplitEnabled = chkVFOSplit.Checked;
            if (chkVFOSplit.Checked)
            {
                chkVFOSplit.BackColor = button_selected_color;
                //FM front panel
                chkFMTXHigh.Enabled = false;
                chkFMTXHigh.Checked = false;
                chkFMTXLow.Enabled = false;
                chkFMTXLow.Checked = false;
                chkFMTXSimplex.Enabled = false;
                chkFMTXSimplex.Checked = false;
                chkFMTXRev.Enabled = false;
                chkFMTXRev.Checked = false;
                udFMOffset.Enabled = false;
                current_fm_tx_mode = FMTXMode.Simplex;
                //fm_tx_offset_mhz = 0;		
                //  chkX2TR.Checked = false;
                chkFWCATU.Checked = false;
            }
            else
            {
                chkVFOSplit.BackColor = SystemColors.Control;
                //FM front panel
                chkFMTXHigh.Enabled = true;
                chkFMTXLow.Enabled = true;
                chkFMTXSimplex.Enabled = true;
                chkFMTXSimplex.Checked = true;
                chkFMTXRev.Enabled = true;
                udFMOffset.Enabled = true;
                //fm_tx_offset_mhz = 0;
            }

            if (rx2_enabled && !stereo_diversity)
            {
                UpdateVFOASub();
                if (chkVFOSplit.Checked)
                {
                    if (chkVFOBTX.Checked)
                        chkVFOATX.Checked = true;
                }
                else
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
            }
            else
            {
                if (chkVFOSplit.Checked)
                {
                    if (chkVFOSync.Checked) chkVFOSync.Checked = false;
                    TXBand = BandByFreq(VFOBFreq, tx_xvtr_index, true, current_region, false);
                    grpVFOB.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
                    grpVFOB.ForeColor = Color.Red;
                    //grpVFOB.ForeColor = SystemColors.ControlLightLight;
                    grpVFOA.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
                    grpVFOA.ForeColor = SystemColors.ControlLightLight;
                    chkVFOBTX.Checked = true;
                    //chkVFOBTX.ForeColor = Color.Black;
                    if (chkPower.Checked)
                    {
                        txtVFOBFreq.ForeColor = Color.Red;
                        //txtVFOBMSD.ForeColor = Color.Red;
                        //txtVFOBFreq.ForeColor = vfo_text_light_color;
                        txtVFOBMSD.ForeColor = vfo_text_light_color;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;

                        //  if (current_model == Model.FLEX5000 && fwc_init)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    }
                }
                else
                {

                    grpVFOB.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
                    grpVFOB.ForeColor = SystemColors.ControlLightLight;
                    grpVFOA.Font = new Font("Microsoft Sans Serif", 8.25F, FontStyle.Bold);
                    grpVFOA.ForeColor = Color.Red;
                    chkVFOATX.Checked = true;
                    if (chkPower.Checked)
                    {
                        if (chkEnableMultiRX.Checked)
                        {
                            txtVFOBFreq.ForeColor = vfo_text_light_color;
                            txtVFOBMSD.ForeColor = vfo_text_light_color;
                            txtVFOBLSD.ForeColor = small_vfo_color;
                            txtVFOBBand.ForeColor = band_text_light_color;
                        }
                        else
                        {
                            txtVFOBFreq.ForeColor = vfo_text_dark_color;
                            txtVFOBMSD.ForeColor = vfo_text_dark_color;
                            txtVFOBLSD.ForeColor = vfo_text_dark_color;
                            txtVFOBBand.ForeColor = band_text_dark_color;
                        }

                        if (!full_duplex)
                            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    }
                    if (current_click_tune_mode == ClickTuneMode.VFOB && !chkEnableMultiRX.Checked && !chkFullDuplex.Checked)
                        CurrentClickTuneMode = ClickTuneMode.VFOA;
                }
            }
#if false 
			// wjtFIXME! 
			// if we're doing soft rock stuff may need to update osc (tx mainly) when split is on
			if ( current_model ==  Model.SOFTROCK40 )
			
			{
				SetSoftRockOscFreqs();
			}
#endif
        }


        private void chkXIT_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkXIT.Checked)
            {
                chkXIT.BackColor = button_selected_color;
                chkXIT.ForeColor = Color.Red;
                Display.XIT = (int)udXIT.Value;
            }
            else
            {
                chkXIT.BackColor = SystemColors.Control;
                chkXIT.ForeColor = SystemColors.ControlLightLight;
                Display.XIT = 0;
            }
#if false
			// wjtFIXME!
			if ( current_model == Model.SOFTROCK40 )			
			{
				SetSoftRockOscFreqs();
			}
#endif

            //	if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
            //	{
            if (chkVFOSplit.Checked || full_duplex)
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            else
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //	}
            /*	else
                {
                    if(mox)
                    {
                        if(chkVFOSplit.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                    }
                }*/
        }

        private void chkRIT_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRIT.Checked)
            {
                chkRIT.BackColor = button_selected_color;
                chkRIT.ForeColor = Color.Red;
                // if (!click_tune_display)
                Display.RIT = (int)udRIT.Value;
            }
            else
            {
                chkRIT.BackColor = SystemColors.Control;
                chkRIT.ForeColor = SystemColors.ControlLightLight;
                Display.RIT = 0;
            }

            if (!mox)
            {
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private void udRIT_ValueChanged(object sender, System.EventArgs e)
        {
            if (chkRIT.Checked && !mox)
            {
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            }
            if (chkRIT.Checked) Display.RIT = (int)udRIT.Value;

            /*if(udRIT.Focused)
                btnHidden.Focus();*/
            setRIT_LEDs();  //-W2PA Behringer LEDs

            //-W2PA Sync XIT/XIT if selected
            //if (chkSyncIT.Checked)
            //{
            //    udXIT.Value = udRIT.Value;
            //    setXIT_LEDs();
            //}
        }

        private void udXIT_ValueChanged(object sender, System.EventArgs e)
        {
            if (chkXIT.Checked)
            {
                if (chkVFOSplit.Checked)
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                else
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
#if false
			//wjtFIXME
			else if ( current_model == Model.SOFTROCK40 )			
			{
				SetSoftRockOscFreqs();
			}
#endif


            if (chkXIT.Checked) Display.XIT = (int)udXIT.Value;

            /*if(udXIT.Focused)
                btnHidden.Focus();*/

            setXIT_LEDs(); //-W2PA Behringer LEDs

            //-W2PA Sync XIT/XIT if selected
            //if (chkSyncIT.Checked)
            //{
            //    udRIT.Value = udXIT.Value;
            //    setRIT_LEDs();
            //}
        }

        private void btnXITReset_Click(object sender, System.EventArgs e)
        {
            udXIT.Value = 0;
        }

        private void btnRITReset_Click(object sender, System.EventArgs e)
        {
            udRIT.Value = 0;
        }

        private void setRIT_LEDs()
        {
            //-W2PA Update LEDs on Behringer MIDI controller, within limits of +/- 2kHz.  Beyond that range the extreme L or R LED remains lit.
            int IT_MIDIminimum = -2000; //-W2PA Change these two values to enable a broader range for the LEDs
            int IT_MIDImaximum = 2000;  //      But when you do so, it makes them change more gradually, i.e. it takes more turns
            double fracBetweenLEDs = 1.0 / 14.0;
            double negTol = 0.5 - fracBetweenLEDs;
            double posTol = 0.5 + fracBetweenLEDs;
            double fract = Convert.ToDouble(udRIT.Value - IT_MIDIminimum) / Convert.ToDouble(IT_MIDImaximum - IT_MIDIminimum);

            //-W2PA Light the center LED (#8) only if exactly at zero RIT/XIT
            if (udRIT.Value < 0 && (fract >= negTol)) fract = negTol;
            else if (udRIT.Value > 0 && (fract <= posTol)) fract = posTol;

            //-W2PA Prevent the lowest LED from going out completely.
            if (udRIT.Value <= IT_MIDIminimum + Convert.ToDecimal(fracBetweenLEDs * IT_MIDImaximum)) fract = fracBetweenLEDs;
            Midi2Cat.SendUpdateToMidi(CatCmd.RIT_inc, fract);
        }

        private void setXIT_LEDs()
        {
            //-W2PA Update LEDs on Behringer MIDI controller, within limits of +/- 2kHz
            int IT_MIDIminimum = -2000; //-W2PA Change these two values to enable a broader range for the LEDs
            int IT_MIDImaximum = 2000;  //      But when you do so, it makes them change more gradually, i.e. it takes more turns
            double fracBetweenLEDs = 1.0 / 14.0;
            double negTol = 0.5 - fracBetweenLEDs;
            double posTol = 0.5 + fracBetweenLEDs;
            double fract = Convert.ToDouble(udXIT.Value - IT_MIDIminimum) / Convert.ToDouble(IT_MIDImaximum - IT_MIDIminimum);

            //-W2PA Light the center LED (#8) only if exactly at zero RIT/XIT
            if (udXIT.Value < 0 && (fract >= negTol)) fract = negTol;
            else if (udXIT.Value > 0 && (fract <= posTol)) fract = posTol;

            //-W2PA Prevent the lowest LED from going out completely.
            if (udXIT.Value <= IT_MIDIminimum + Convert.ToDecimal(fracBetweenLEDs * IT_MIDImaximum)) fract = fracBetweenLEDs;
            Midi2Cat.SendUpdateToMidi(CatCmd.XIT_inc, fract);
        }

        public void ZeroBeat()
        {
            // if (btnZeroBeat.Enabled)
            btnZeroBeat_Click(this, EventArgs.Empty);
        }

        private void btnZeroBeat_Click(object sender, System.EventArgs e)
        {
            if (!PowerOn) return;

            int peak_hz = FindPeakFreqInPassband();
            if (peak_hz == -1)
            {
                return; // find peak croaked - bail
            }
            // Debug.WriteLine("peak: " + peak_hz);
            int delta_hz = 0;

            // if we're in CW mode, zero beat to CWPitch, provided it is in the passband
            switch (rx1_dsp_mode)
            {
                case DSPMode.CWL:
                case DSPMode.CWU:
                case DSPMode.USB:
                case DSPMode.LSB:
                    int local_pitch = CWPitch;
                    if (rx1_dsp_mode == DSPMode.CWL || rx1_dsp_mode == DSPMode.LSB)
                    {
                        local_pitch = -local_pitch;
                    }
                    // is cwoffset in passband?
                    if (local_pitch >= udFilterLow.Value &&
                        local_pitch <= udFilterHigh.Value)
                    {
                        delta_hz = peak_hz - local_pitch;
                        // Debug.WriteLine("delta(cw): " + delta_hz);
                    }
                    else
                    {
                        // if we get here and delta_hz is still 0, the current
                        // CW pitch is not within the passband.
                        // Put strongest peak @ center of passband
                        int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value) / 2;
                        delta_hz = peak_hz - center_hz;
                    }
                    break;
                case DSPMode.DIGL:
                    local_pitch = -digl_click_tune_offset;
                    if (local_pitch >= udFilterLow.Value &&
                        local_pitch <= udFilterHigh.Value)
                    {
                        delta_hz = peak_hz - local_pitch;
                    }
                    else
                    {
                        // if we get here and delta_hz is still 0, the current
                        // pitch is not within the passband.
                        // Put strongest peak @ center of passband
                        int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value) / 2;
                        delta_hz = peak_hz - center_hz;
                    }
                    break;
                case DSPMode.DIGU:
                    local_pitch = digu_click_tune_offset;
                    if (local_pitch >= udFilterLow.Value &&
                        local_pitch <= udFilterHigh.Value)
                    {
                        delta_hz = peak_hz - local_pitch;
                    }
                    else
                    {
                        // if we get here and delta_hz is still 0, the current
                        // pitch is not within the passband.
                        // Put strongest peak @ center of passband
                        int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value) / 2;
                        delta_hz = peak_hz - center_hz;
                    }
                    break;
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                    delta_hz = peak_hz;
                    break;
            }

            //          Debug.WriteLine("peak: " + peak_hz);
            //          Debug.WriteLine("center: " + center_hz);
            //          Debug.WriteLine("delta: " + delta_hz + "\n");

            if (zero_beat_rit)
            {
                udRIT.Value += delta_hz;
                chkRIT.Checked = true;
            }
            else
            {
                VFOAFreq += delta_hz * 0.0000010;
            }
        }

        unsafe private int FindPeakFreqInPassband()
        {
            // convert hz to buckets in the averaging data
            int lo_cut_hz = (int)udFilterLow.Value;
            int hi_cut_hz = (int)udFilterHigh.Value;
            //double hz_per_bucket = sample_rate1 / (double)Display.BUFFER_SIZE;
            double hz_per_bucket = sample_rate1 / (double)specRX.GetSpecRX(0).FFTSize;
            //int zero_hz_bucket = Display.BUFFER_SIZE / 2;
            int zero_hz_bucket = specRX.GetSpecRX(0).FFTSize / 2;
            int lo_bucket = (int)(lo_cut_hz / hz_per_bucket) + zero_hz_bucket;
            int hi_bucket = (int)(hi_cut_hz / hz_per_bucket) + zero_hz_bucket;

            //~~~~ 
            //float max_val = float.MinValue;
            double max_val = double.MinValue;
            int max_bucket = 0;
            int ss = 0;

            //float[] spectrum_data;
            double[,] spectrum_data;

            spectrum_data = new double[specRX.GetSpecRX(0).FFTSize, 2];
            if (spectrum_data == null)
            {
                return -1; // bail out - not buffer 
            }
            fixed (double* ptr = &(spectrum_data[0, 0]))
                SpecHPSDRDLL.SnapSpectrum(0, ss, 0, ptr);        //depends upon receiver configuration, want center sub-span from disp 0, I think

            double mag_sqr;
            for (int i = lo_bucket; i <= hi_bucket; i++)
            {
                mag_sqr = spectrum_data[i, 0] * spectrum_data[i, 0] + spectrum_data[i, 1] * spectrum_data[i, 1];
                if (mag_sqr > max_val)
                {
                    max_bucket = i;
                    max_val = mag_sqr;
                }
            }

            int peak_hz = (int)((max_bucket - zero_hz_bucket) * hz_per_bucket);
            return peak_hz;
        }

        private void btnIFtoVFO_Click(object sender, System.EventArgs e)
        {
            int current_if_shift;

            bool is_centered_mode = false;
            bool is_cw_mode = false;
            bool is_lower_sb_mode = false;

            current_if_shift = ptbFilterShift.Value;

            //			Debug.WriteLine("current if shift: " + current_if_shift);

            if (current_if_shift == 0) return; // nothing to do

            switch (RX1DSPMode)
            {
                case DSPMode.DRM:
                case DSPMode.SPEC:
                case DSPMode.DIGL:
                case DSPMode.DIGU:
                    return; // nothing to do for these modes

                case DSPMode.AM:
                case DSPMode.FM:
                case DSPMode.DSB:
                case DSPMode.SAM:
                    is_centered_mode = true;
                    break;

                case DSPMode.CWL:
                    is_cw_mode = true;
                    is_lower_sb_mode = true;
                    break;
                case DSPMode.CWU:
                    is_cw_mode = true;
                    break;
                case DSPMode.LSB:
                    is_lower_sb_mode = true;
                    break;
                case DSPMode.USB:
                    break;
                default:
                    // no clue what the mode is -- bail out
                    return;
            }

            int current_width = (int)udFilterHigh.Value - (int)udFilterLow.Value;
            int current_center = (int)udFilterLow.Value + (current_width / 2);
            //			Debug.WriteLine("w: " + current_width + " center: " + current_center + " vfo: " +  VFOAFreq);

            double new_vfo = 0;
            int new_lo = 0;
            int new_hi = 0;

            if (is_centered_mode)
            {
                new_vfo = VFOAFreq + ((double)current_center) / (1000000);
                new_lo = -(current_width / 2);
                new_hi = current_width / 2;
            }
            else  // sideband style mode
            {
                int new_center;
                if (is_cw_mode)
                {
                    new_center = cw_pitch;
                }
                else  // sideband mode
                {
                    new_center = default_low_cut + (current_width / 2);
                }
                if (is_lower_sb_mode)
                {
                    new_center = -new_center;
                }
                new_vfo = VFOAFreq + ((double)(current_center - new_center)) / (1000000);
                // now figure out filter limits
                new_lo = new_center - (current_width / 2);
                new_hi = new_center + (current_width / 2);
            }
            //			Debug.WriteLine("new vfo: " + new_vfo + " lo: " + new_lo + " hi: " + new_hi );
            if (VFOAFreq > new_vfo)  // need to change this in the right order!
            {
                udFilterHigh.Value = new_hi;
                udFilterLow.Value = new_lo;
            }
            else
            {
                udFilterLow.Value = new_lo;
                udFilterHigh.Value = new_hi;
            }

            VFOAFreq = new_vfo;
            switch (RX1Filter)
            {
                case Filter.VAR1:
                    last_var1_shift = 0;
                    break;
                case Filter.VAR2:
                    last_var2_shift = 0;
                    break;
                default:
                    last_filter_shift = 0;
                    break;
            }
            btnFilterShiftReset_Click(this, EventArgs.Empty);
        }

        #endregion

        #region DSP Button Events

        private void chkANF_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkANF.Checked) chkANF.BackColor = button_selected_color;
            else chkANF.BackColor = SystemColors.Control;
            radio.GetDSPRX(0, 0).AutoNotchFilter = chkANF.Checked;
            radio.GetDSPRX(0, 1).AutoNotchFilter = chkANF.Checked;
            cat_anf_status = Convert.ToInt32(chkANF.Checked);
            ANFToolStripMenuItem.Checked = chkANF.Checked;
        }

        private void chkDSPNB2_CheckedChanged(object sender, EventArgs e)
        {
            if (chkDSPNB2.Checked) chkDSPNB2.BackColor = button_selected_color;
            else chkDSPNB2.BackColor = SystemColors.Control;
            WDSP.SetRXASNBARun(WDSP.id(0, 0), chkDSPNB2.Checked);
            WDSP.SetRXASNBARun(WDSP.id(0, 1), chkDSPNB2.Checked);
            cat_snb_status = Convert.ToInt32(chkDSPNB2.Checked);
            SNBtoolStripMenuItem.Checked = chkDSPNB2.Checked;
            SNBtoolStripMenuItem1.Checked = chkRX2NB2.Checked;
        }

        private void chkRX2NB2_CheckedChanged(object sender, EventArgs e)
        {
            if (chkRX2NB2.Checked) chkRX2NB2.BackColor = button_selected_color;
            else chkRX2NB2.BackColor = SystemColors.Control;
            WDSP.SetRXASNBARun(WDSP.id(2, 0), chkRX2NB2.Checked);
            cat_rx2snb_status = Convert.ToInt32(chkRX2NB2.Checked);
        }

        #endregion

        #region Mode Specific Events

        private bool txosctrl = false;
        public bool TxOsctrl
        {
            get { return txosctrl; }
            set { txosctrl = value; }
        }

        private void chkCPDR_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkCPDR.Checked)
            {
                chkCPDR.BackColor = button_selected_color;
                //chkDX.Checked = false;
                ptbCPDR_Scroll(this, EventArgs.Empty);
            }
            else
            {
                chkCPDR.BackColor = SystemColors.Control;
            }
            if (chkCPDR.Checked)
            {
                //radio.GetDSPRX(0, 0).RXANR2Run = 1;  ////////////////////////////////////////////////////////////////////////
                radio.GetDSPTX(0).TXCompandOn = true;
                if (txosctrl)
                    radio.GetDSPTX(0).TXOsctrlOn = true;
                else
                    radio.GetDSPTX(0).TXOsctrlOn = false;
            }
            else
            {
                // radio.GetDSPRX(0, 0).RXANR2Run = 0;  ////////////////////////////////////////////////////////////////////////
                radio.GetDSPTX(0).TXCompandOn = false;
                radio.GetDSPTX(0).TXOsctrlOn = false;
            }
            cat_cmpd_status = Convert.ToInt32(chkCPDR.Checked);
        }

        private void ptbCPDR_Scroll(object sender, System.EventArgs e)
        {
            lblCPDRVal.Text = ptbCPDR.Value.ToString() + " dB";

            if (chkCPDR.Checked)
                radio.GetDSPTX(0).TXCompandLevel = (double)ptbCPDR.Value;

            //if (ptbCPDR.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbCPDR.Focus();
            }
        }

        private void chkDX_CheckedChanged(object sender, System.EventArgs e)
        {
            StereoDiversity = chkDX.Checked;

            //if (!initializing && RX2Enabled && chkDX.Checked)
            //{
            //    RX2DSPMode = RX1DSPMode;
            //    RX2Filter = RX1Filter;
            //    RX2PreampMode = RX1PreampMode;
            //    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            //}

            //if (!initializing && RX2Enabled && !chkDX.Checked)
            //{
            //    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            //}

            //if (chkDX.Checked)
            //{
            //    chkDX.BackColor = button_selected_color;
            //    if (chkCPDR.Checked) chkCPDR.Checked = false;
            //    ptbDX_Scroll(this, EventArgs.Empty);
            //}
            //else
            //{
            //    chkDX.BackColor = SystemColors.Control;
            //}
            //if (chkDX.Checked || chkCPDR.Checked)
            //    radio.GetDSPTX(0).TXCompandOn = true;
            //else radio.GetDSPTX(0).TXCompandOn = false;
        }

        private void ptbDX_Scroll(object sender, System.EventArgs e)
        {
            lblDXVal.Text = ptbDX.Value.ToString();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbDX.Focus();
            }
            //if (chkDX.Checked)
            //    radio.GetDSPTX(0).TXCompandLevel = 1.0 + 0.4 * (double)ptbDX.Value;
            //if (ptbDX.Focused) btnHidden.Focus();
        }

        #endregion

        #region Memory Events
        // ======================================================
        // Memory Events
        // ======================================================

        private void btnMemoryQuickSave_Click(object sender, System.EventArgs e)
        {
            txtMemoryQuick.Text = txtVFOAFreq.Text;
            quick_save_mode = RX1DSPMode;
            quick_save_filter = RX1Filter;
        }

        private void btnMemoryQuickRestore_Click(object sender, System.EventArgs e)
        {
            SaveBand();
            last_band = "";
            RX1DSPMode = quick_save_mode;
            txtVFOAFreq.Text = txtMemoryQuick.Text;
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            RX1Filter = quick_save_filter;
        }

        #endregion

        #region Menu Events

        private void menu_setup_Click(object sender, System.EventArgs e)
        {
            if (SetupForm.IsDisposed)
                SetupForm = new Setup(this);
            SetupForm.Show();
            SetupForm.Focus();
        }

        private void menu_wave_Click(object sender, System.EventArgs e)
        {
            if (WaveForm.IsDisposed)
                WaveForm = new WaveControl(this);
            WaveForm.Show();
            WaveForm.Focus();
        }

        private void mnuEQ_Click(object sender, System.EventArgs e)
        {
            if (EQForm == null || EQForm.IsDisposed)
                EQForm = new EQForm(this);
            EQForm.Show();
            EQForm.Focus();
        }

        private void mnuXVTR_Click(object sender, System.EventArgs e)
        {
            if (XVTRForm == null || XVTRForm.IsDisposed)
                XVTRForm = new XVTRForm(this);

            XVTRForm.Show();
            XVTRForm.Focus();
        }

        private void mnuCWX_Click(object sender, System.EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.LSB)
                RX1DSPMode = DSPMode.CWL;
            else if (rx1_dsp_mode == DSPMode.USB)
                RX1DSPMode = DSPMode.CWU;

            if (rx1_dsp_mode != DSPMode.CWL &&
                rx1_dsp_mode != DSPMode.CWU)
            {
                MessageBox.Show("The radio must be in CWL or CWU mode in order to open the " +
                    "CWX Control Form.",
                    "CWX Error: Wrong Mode",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            //	cw_key_mode = true;
            if (CWXForm == null || CWXForm.IsDisposed)
            {
                CWXForm = new CWX(this);
            }

            CWXForm.Show();
            CWXForm.Focus();
        }

        /*	private void mnuMemRecall_Click(object sender, System.EventArgs e)
            {
                if(MemForm == null || MemForm.IsDisposed)
                    MemForm = new Memory(this);
                MemForm.Show();
                MemForm.Focus();
            } */

        private void menuItemFilterConfigure_Click(object sender, System.EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC) return;

            if (filterRX1Form == null || filterRX1Form.IsDisposed)
                filterRX1Form = new FilterForm(this, rx1_filters, false);

            filterRX1Form.DSPMode = rx1_dsp_mode;
            filterRX1Form.CurrentFilter = rx1_filter;
            filterRX1Form.Show();
            filterRX1Form.Focus();
        }

        private void menuItemRX2FilterConfigure_Click(object sender, System.EventArgs e)
        {
            if (rx2_dsp_mode == DSPMode.DRM || rx2_dsp_mode == DSPMode.SPEC) return;

            if (filterRX2Form == null || filterRX2Form.IsDisposed)
                filterRX2Form = new FilterForm(this, rx2_filters, true);

            filterRX2Form.DSPMode = rx2_dsp_mode;
            filterRX2Form.CurrentFilter = rx2_filter;
            filterRX2Form.Show();
            filterRX2Form.Focus();
        }

        #endregion

        #region Sub RX Events

        private void ptbPanMainRX_Scroll(object sender, System.EventArgs e)
        {
            //if(chkEnableMultiRX.Checked)
            {
                float val = (int)ptbPanMainRX.Value / 100.0f;
                // float val = (int)ptbRX0Gain.Value / 100.0f;
                if (chkPanSwap.Checked) val = 1.0f - val;
                radio.GetDSPRX(0, 0).Pan = val;
            }
            //if(ptbPanMainRX.Focused)
            //	btnHidden.Focus();
            // if (ptbRX0Gain.Focused)
            //   btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbPanMainRX.Focus();
            }
        }

        private void ptbPanSubRX_Scroll(object sender, System.EventArgs e)
        {
            float val = (int)ptbPanSubRX.Value / 100.0f;
            if (chkPanSwap.Checked) val = 1.0f - val;
            radio.GetDSPRX(0, 1).Pan = val;

            // if (ptbPanSubRX.Focused)
            // btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbPanSubRX.Focus();
            }
        }

        private void chkEnableMultiRX_CheckedChanged(object sender, System.EventArgs e)
        {
            radio.GetDSPRX(0, 1).Active = chkEnableMultiRX.Checked;
            if (chkEnableMultiRX.Checked)
            {
                cmaster.SetAAudioMixWhat((void*)0, 0, 1, true);
                if (!mox) WDSP.SetChannelState(WDSP.id(0, 1), 1, 0);
                //tbPanMainRX_Scroll(this, EventArgs.Empty);
                //tbRX0Gain_Scroll(this, EventArgs.Empty);

                chkEnableMultiRX.BackColor = button_selected_color;
                if (chkPower.Checked)
                {
                    if (rx2_enabled)
                    {
                        UpdateVFOASub();
                    }
                    else
                    {
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        if (chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
                        else
                        {
                            txtVFOBFreq.ForeColor = vfo_text_light_color;
                            txtVFOBMSD.ForeColor = vfo_text_light_color;
                            txtVFOBLSD.ForeColor = small_vfo_color;
                            txtVFOBBand.ForeColor = band_text_light_color;
                        }
                    }
                }
                radio.GetDSPRX(0, 1).SetRXFilter(
                    radio.GetDSPRX(0, 0).RXFilterLow,
                    radio.GetDSPRX(0, 0).RXFilterHigh);
            }
            else
            {
                WDSP.SetChannelState(WDSP.id(0, 1), 0, 0);
                cmaster.SetAAudioMixWhat((void*)0, 0, 1, false);
                //radio.GetDSPRX(0, 0).RXOutputGain = 1.0;
                //radio.GetDSPRX(0, 0).Pan = 0.5f;
                chkEnableMultiRX.BackColor = SystemColors.Control;
                //if(chkPower.Checked)
                {
                    if (rx2_enabled)
                    {
                        UpdateVFOASub();
                    }
                    else
                    {
                        if (chkVFOSplit.Checked && !rx2_enabled)
                        {
                            chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
                        }
                        else if (rx2_enabled)
                        {
                            update_rx2_display = false;
                            chkRX2_CheckedChanged(this, EventArgs.Empty);
                        }
                        else
                        {
                            txtVFOBFreq.ForeColor = vfo_text_dark_color;
                            txtVFOBMSD.ForeColor = vfo_text_dark_color;
                            txtVFOBLSD.ForeColor = vfo_text_dark_color;
                            txtVFOBBand.ForeColor = band_text_dark_color;
                        }
                    }
                }
                if (current_click_tune_mode == ClickTuneMode.VFOB && !chkFullDuplex.Checked && !chkVFOSplit.Checked)
                    CurrentClickTuneMode = ClickTuneMode.VFOA;
            }
            Display.SubRX1Enabled = chkEnableMultiRX.Checked;
            MultiRXToolStripMenuItem.Checked = chkEnableMultiRX.Checked;
            //UpdateRX1SubNotches();
        }

        private void chkPanSwap_CheckedChanged(object sender, System.EventArgs e)
        {
            //if(chkEnableMultiRX.Checked)
            {
                ptbPanMainRX_Scroll(this, EventArgs.Empty);
                ptbPanSubRX_Scroll(this, EventArgs.Empty);
            }
        }

        private void ptbRX0Gain_Scroll(object sender, System.EventArgs e)
        {
            //if(chkEnableMultiRX.Checked)
            lblRX1Vol.Text = "Vol";

            /*  if (chkMUT.Checked)
              {
                  radio.GetDSPRX(0, 0).RXOutputGain = 0.0;
              }
              else*/
            {
                radio.GetDSPRX(0, 0).RXOutputGain = (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum;
                ptbRX1AF.Value = ptbRX0Gain.Value;

                //-W2PA Update LEDs on Behringer MIDI controller
                double pct = Convert.ToDouble(ptbRX1AF.Value - ptbRX1AF.Minimum) / Convert.ToDouble(ptbRX1AF.Maximum - ptbRX1AF.Minimum);
                Midi2Cat.SendUpdateToMidi(CatCmd.VolumeVfoA_inc, pct);
            }

            lblRX1AF.Text = "RX1 AF:  " + ptbRX0Gain.Value.ToString();
            // if (ptbRX0Gain.Focused)
            //  btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX0Gain.Focus();
            }
        }

        private void ptbRX1Gain_Scroll(object sender, System.EventArgs e)
        {
            radio.GetDSPRX(0, 1).RXOutputGain = (double)ptbRX1Gain.Value / ptbRX1Gain.Maximum;

            // if (ptbRX1Gain.Focused)
            // btnHidden.Focus();
            ptbRX1Gain.Focus();
        }

        #endregion

        private bool full_duplex = false;
        public bool FullDuplex
        {
            get { return full_duplex; }
            set
            {
                full_duplex = value;
                chkFullDuplex.Checked = value;
            }
        }

        private void chkFullDuplex_CheckedChanged(object sender, System.EventArgs e)
        {
            FullDuplex = chkFullDuplex.Checked;
            Audio.FullDuplex = chkFullDuplex.Checked;
            if (chkFullDuplex.Checked)
            {
                //MessageBox.Show("Full Duplex is On");
                chkFullDuplex.BackColor = Color.Red;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                //DttSP.SetThreadProcessingMode(0, 2);
                //DttSP.SetThreadProcessingMode(1, 2);
                WDSP.SetChannelState(WDSP.id(0, 0), 1, 0);
                //txtOverload.Text = "FDX";
            }
            else
            {
                chkFullDuplex.BackColor = SystemColors.Control;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                if (chkMOX.Checked)
                {
                    //DttSP.SetThreadProcessingMode(0, 0);
                    //DttSP.SetThreadProcessingMode(1, 2);
                    WDSP.SetChannelState(WDSP.id(0, 0), 0, 0);
                }
                /*else
                {
                    DttSP.SetThreadProcessingMode(0, 2);
                    DttSP.SetThreadProcessingMode(1, 0);
                }*/
                if (current_click_tune_mode == ClickTuneMode.VFOB && !chkVFOSplit.Checked && !chkEnableMultiRX.Checked)
                    CurrentClickTuneMode = ClickTuneMode.VFOA;
                // txtOverload.Text = "HDX";
            }
        }

        private static Console theConsole = null;

        public static Console getConsole()
        {
            return theConsole;
        }

        protected override void WndProc(ref Message m)
        {
            const int WM_QUERYENDSESSION = 0x0011;
            // Listen for operating system messages. 

            if (m.Msg == WM_QUERYENDSESSION)
            {
                chkPower.Checked = false;
                this.Close();
            }
            else base.WndProc(ref m);
        }

        public void FWCATUBypass()
        {
            // chkFWCATU.Checked = false;
            //  chkFWCATUBypass.Checked = true;
        }

        public void FWCATUTuned()
        {
            // chkFWCATU.Checked = true;
            // chkFWCATUBypass.Checked = false;
        }

        public void FWCATUFailed()
        {
            // chkFWCATU.Checked = false;
            // chkFWCATUBypass.Checked = true;
        }

        public void SetATUFeedback(string s)
        {
            // toolTip1.SetToolTip(chkFWCATU, s);
        }

        private void chkFWCATU_Click(object sender, System.EventArgs e)
        {
            // if (SetupForm != null) SetupForm.X2TR = chkX2TR.Checked;
            ClickTuneDisplay = chkFWCATU.Checked;

            // if (chkX2TR.Checked) chkX2TR.BackColor = button_selected_color;
            // else chkX2TR.BackColor = SystemColors.Control;
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //  txtVFOBFreq_LostFocus(this, EventArgs.Empty);
        }

        private void chkFWCATUBypass_Click(object sender, System.EventArgs e)
        {
        }

        private void chkSplitDisplay_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkSplitDisplay.Checked)
                chkSplitDisplay.BackColor = button_selected_color;
            else
                chkSplitDisplay.BackColor = SystemColors.Control;

            Display.SplitDisplay = chkSplitDisplay.Checked;
        }

        private void comboDisplayModeTop_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            /*switch(comboDisplayModeTop.Text)
            {
                case "Spectrum":
                    Display.CurrentDisplayModeTop = DisplayMode.SPECTRUM;
                    if(chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    break;
                case "Panadapter":
                    Display.CurrentDisplayModeTop = DisplayMode.PANADAPTER;
                    if(chkSplitDisplay.Checked) CalcDisplayFreq();
                    break;
                case "Scope":
                    Display.CurrentDisplayModeTop = DisplayMode.SCOPE;
                    break;
                case "Phase":
                    Display.CurrentDisplayModeTop = DisplayMode.PHASE;
                    break;
                case "Phase2":
                    Display.CurrentDisplayModeTop = DisplayMode.PHASE2;
                    break;
                case "Waterfall":
                    Display.CurrentDisplayModeTop = DisplayMode.WATERFALL;
                    if(chkSplitDisplay.Checked) CalcDisplayFreq();
                    break;
                case "Histogram":
                    Display.CurrentDisplayModeTop = DisplayMode.HISTOGRAM;
                    break;
                case "Off":
                    Display.CurrentDisplayModeTop = DisplayMode.OFF;
                    break;
            }*/
        }

        private void comboDisplayModeBottom_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            switch (comboDisplayModeBottom.Text)
            {
                case "Spectrum":
                    Display.CurrentDisplayModeBottom = DisplayMode.SPECTRUM;
                    if (chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    break;
                case "Panadapter":
                    Display.CurrentDisplayModeBottom = DisplayMode.PANADAPTER;
                    if (chkSplitDisplay.Checked)
                    {
                        CalcDisplayFreq();
                        CalcRX2DisplayFreq();
                        CalcTXDisplayFreq();
                    }
                    break;
                case "Scope":
                    Display.CurrentDisplayModeBottom = DisplayMode.SCOPE;
                    break;
                case "Phase":
                    Display.CurrentDisplayModeBottom = DisplayMode.PHASE;
                    break;
                case "Phase2":
                    Display.CurrentDisplayModeBottom = DisplayMode.PHASE2;
                    break;
                case "Waterfall":
                    Display.CurrentDisplayModeBottom = DisplayMode.WATERFALL;
                    if (chkSplitDisplay.Checked)
                    {
                        CalcDisplayFreq();
                        CalcRX2DisplayFreq();
                        CalcTXDisplayFreq();
                    }
                    break;
                case "Histogram":
                    Display.CurrentDisplayModeBottom = DisplayMode.HISTOGRAM;
                    break;
                case "Off":
                    Display.CurrentDisplayModeBottom = DisplayMode.OFF;
                    break;
            }
            UpdateRX2DisplayOffsets();
        }

        private void ckQuickPlay_CheckedChanged(object sender, System.EventArgs e)
        {
            // if (!mox)
            //  {
            //     ckQuickPlay.Checked = false;
            //     return;
            // }

            if (ckQuickPlay.Checked)
            {
                WaveForm.QuickPlay = true;
                ckQuickPlay.BackColor = button_selected_color;
            }
            else
            {
                WaveForm.QuickPlay = false;
                ckQuickPlay.BackColor = SystemColors.Control;//k6jca 1/13/08
            }
            ckQuickRec.Enabled = !ckQuickPlay.Checked;
        }

        private void ckQuickRec_CheckedChanged(object sender, System.EventArgs e)
        {
            if (ckQuickRec.Checked)
            {
                WaveForm.QuickRec = true;
                ckQuickPlay.Enabled = true;
                ckQuickRec.BackColor = button_selected_color;
            }
            else
            {
                WaveForm.QuickRec = false;
                ckQuickRec.BackColor = SystemColors.Control;//k6jca 1/13/08
            }
            ckQuickPlay.Enabled = !ckQuickRec.Checked;
        }

        private void ResizeConsole(int h_delta, int v_delta)		//k6jca 1/15/08
        {

            // This routine captures the size and location parameters *after* windows
            // has resized the image, (if the video is set for "120 dpi" in lieu of the
            // normal 96 dpi).  These will be used as the "basis" for all new size calcs.


            if ((h_delta == 0) && (v_delta == 0) && (previous_delta == 0))
            {
                // do nothing - this only occurs for my first call to Resize with both deltas zero during init
                // and at that time windows hasn't resized the display if in 120 dpi mode.
                // Use the "previous_delta" variable to ensure that if we *reduce* size back
                // to original, we do the calcs for that, too (previous_delta won't be 0 in that case);
            }
            else
            {

                //this.Size = new Size (console_basis_size.Width + h_delta,console_basis_size.Height + v_delta);
                //this.Width = console_basis_size.Width + h_delta;
                //this.Height = console_basis_size.Height + v_delta;
                panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + v_delta);

                grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y);
                panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, gr_BandHF_basis_location.Y + (v_delta / 4));
                panelBandGEN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, gr_BandGEN_basis_location.Y + (v_delta / 4));
                panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, gr_BandVHF_basis_location.Y + (v_delta / 4));
                panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, gr_Mode_basis_location.Y + (v_delta / 2));
                //grpVFOB.Location = new Point(gr_VFOB_basis_location.X+h_delta-(h_delta/4),gr_VFOB_basis_location.Y);
                //grpVFOA.Location = new Point(gr_VFOA_basis_location.X+(h_delta/4),gr_VFOA_basis_location.Y);
                panelModeSpecificPhone.Location = new Point(gr_ModePhone_basis_location.X + h_delta - (h_delta / 4), gr_ModePhone_basis_location.Y + v_delta);
                panelModeSpecificCW.Location = new Point(gr_ModeCW_basis_location.X + h_delta - (h_delta / 4), gr_ModeCW_basis_location.Y + v_delta);
                panelModeSpecificDigital.Location = new Point(gr_ModeDig_basis_location.X + h_delta - (h_delta / 4), gr_ModeDig_basis_location.Y + v_delta);
                panelModeSpecificFM.Location = new Point(gr_ModeFM_basis_location.X + h_delta - (h_delta / 4), gr_ModeFM_basis_location.Y + v_delta);

                panelVFO.Location = new Point(gr_VFO_basis_location.X + (h_delta / 4), gr_VFO_basis_location.Y + v_delta);
                grpVFOBetween.Location = new Point(gr_vfobetween_basis_location.X + (h_delta / 2), gr_vfobetween_basis_location.Y);

                if (!this.collapsedDisplay)
                {
                    grpVFOB.Location = new Point(gr_VFOB_basis_location.X + h_delta - (h_delta / 4), gr_VFOB_basis_location.Y);
                    grpVFOA.Location = new Point(gr_VFOA_basis_location.X + (h_delta / 4), gr_VFOA_basis_location.Y);

                    //btnDisplayPanCenter.Location = new Point(btn_display_pan_center_basis.X+(h_delta),btn_display_pan_center_basis.Y+v_delta);
                    btnDisplayPanCenter.Location = new Point(btn_display_pan_center_basis.X, btn_display_pan_center_basis.Y + v_delta);
                    // ptbDisplayPan.Size = new Size(tb_display_pan_size_basis.Width+(h_delta),tb_display_pan_size_basis.Height);
                    radDisplayZoom4x.Location = new Point(btn_display_zoom_4x_basis.X + h_delta, btn_display_zoom_4x_basis.Y + v_delta);
                    radDisplayZoom2x.Location = new Point(btn_display_zoom_2x_basis.X + h_delta, btn_display_zoom_2x_basis.Y + v_delta);
                    radDisplayZoom1x.Location = new Point(btn_display_zoom_1x_basis.X + h_delta, btn_display_zoom_1x_basis.Y + v_delta);
                    radDisplayZoom05.Location = new Point(btn_display_zoom_05_basis.X + h_delta, btn_display_zoom_05_basis.Y + v_delta);
                    ptbDisplayZoom.Location = new Point(tb_display_zoom_basis.X + h_delta, tb_display_zoom_basis.Y + v_delta);
                    txtDisplayPeakFreq.Location = new Point(txt_display_peak_freq_basis.X + h_delta, txt_display_peak_freq_basis.Y + v_delta);
                    txtDisplayPeakPower.Location = new Point(txt_display_peak_power_basis.X + h_delta, txt_display_peak_power_basis.Y + v_delta);
                    txtDisplayPeakOffset.Location = new Point(txt_display_peak_offset_basis.X + h_delta, txt_display_peak_offset_basis.Y + v_delta);
                    lblDisplayZoom.Location = new Point(lbl_display_zoom_basis.X + h_delta, lbl_display_zoom_basis.Y + v_delta);

                    panelDisplay.Size = new Size(gr_display_size_basis.Width + h_delta, gr_display_size_basis.Height + v_delta);
                    picDisplay.Size = new Size(pic_display_size_basis.Width + h_delta, pic_display_size_basis.Height + v_delta);
                    picWaterfall.Size = new Size(pic_waterfall_size_basis.Width + h_delta, pic_waterfall_size_basis.Height + v_delta);
                    txtOverload.Size = new Size(txtOverload_size_basis.Width + h_delta, txtOverload_size_basis.Height);
                    txtOverload.Location = new Point(txtOverload_basis.X, txtOverload_basis.Y + v_delta);
                    panelDisplay2.Location = new Point(gr_display2_basis.X + (h_delta / 2), gr_display2_basis.Y + v_delta);
                    panelDSP.Location = new Point(gr_dsp_basis.X + (h_delta / 2), gr_dsp_basis.Y + v_delta);

                    //panelMultiRX.Location = new Point(gr_multirx_basis.X + (h_delta / 2), gr_multirx_basis.Y + v_delta);
                    ptbDisplayPan.Location = new Point(tb_displaypan_basis.X, tb_displaypan_basis.Y + v_delta);
                    lblDisplayPan.Location = new Point(lbl_displaypan_basis.X, lbl_displaypan_basis.Y + v_delta);
                    txtDisplayCursorFreq.Location = new Point(txt_display_cursor_freq_basis.X, txt_display_cursor_freq_basis.Y + v_delta);
                    txtDisplayCursorPower.Location = new Point(txt_display_cursor_power_basis.X, txt_display_cursor_power_basis.Y + v_delta);
                    txtDisplayCursorOffset.Location = new Point(txt_display_cursor_offset_basis.X, txt_display_cursor_offset_basis.Y + v_delta);

                    txtDisplayOrionMKIIPAVolts.Location = new Point(txt_display_orion_mkii_pa_volts_basis.X, txt_display_orion_mkii_pa_volts_basis.Y + v_delta);
                    txtDisplayOrionMKIIBlank.Location = new Point(txt_display_orion_mkii_blank_basis.X, txt_display_orion_mkii_blank_basis.Y + v_delta);
                    txtDisplayOrionMKIIPAAmps.Location = new Point(txt_display_orion_mkii_pa_amps_basis.X, txt_display_orion_mkii_pa_amps_basis.Y + v_delta);

                    //chkPower.Location = new Point(chk_power_basis.X, chk_power_basis.Y + (v_delta / 8));
                    panelPower.Location = new Point(gr_power_basis.X, gr_power_basis.Y + (v_delta / 8));
                    //chkRX2.Location = new Point(chk_rx2_enable_basis.X, chk_rx2_enable_basis.Y + v_delta);
                    panelRX2Power.Location = new Point(gr_rx2_enable_basis.X, gr_rx2_enable_basis.Y + v_delta);
                    panelOptions.Location = new Point(gr_options_basis.X, gr_options_basis.Y + (v_delta / 4));

                }
                //chkPower.Location = new Point(chk_power_basis.X, chk_power_basis.Y + (v_delta / 8));
                panelMultiRX.Location = new Point(gr_multirx_basis.X + (h_delta / 2), gr_multirx_basis.Y + v_delta);
                panelSoundControls.Location = new Point(gr_sound_controls_basis.X, gr_sound_controls_basis.Y + (v_delta / 8) + (v_delta / 4));
                chkSquelch.Location = new Point(chk_squelch_basis.X, chk_squelch_basis.Y + (v_delta / 2));
                picSquelch.Location = new Point(pic_sql_basis.X, pic_sql_basis.Y + (v_delta / 2));
                ptbSquelch.Location = new Point(tb_sql_basis.X, tb_sql_basis.Y + (v_delta / 2));
                // panelAntenna.Location = new Point(gr_antenna_basis.X, gr_antenna_basis.Y + (v_delta / 8) + (v_delta / 2));
                panelDateTime.Location = new Point(gr_date_time_basis.X, gr_date_time_basis.Y + (v_delta / 2) + (v_delta / 4));
                //lblCPUMeter.Location = new Point(lbl_cpu_meter_basis.X,lbl_cpu_meter_basis.Y+(v_delta/8)+(v_delta/2)+(v_delta/4));

                //panelRX2Divider.Location = new Point(pan_rx2_divider_basis.X, pan_rx2_divider_basis.Y+v_delta);
                //panelRX2Divider.Size = new Size(pan_rx2_divider_size_basis.Width+h_delta, pan_rx2_divider_size_basis.Height);

                grpDisplaySplit.Location = new Point(gr_display_split_basis.X + (h_delta / 2), gr_display_split_basis.Y + v_delta);
                grpRX2Meter.Location = new Point(gr_rx2_meter_basis.X + h_delta, gr_rx2_meter_basis.Y + v_delta);
                panelRX2Filter.Location = new Point(gr_rx2_filter_basis.X + (int)(h_delta * 0.66), gr_rx2_filter_basis.Y + v_delta);
                panelRX2Mode.Location = new Point(gr_rx2_mode_basis.X + (int)(h_delta * 0.492), gr_rx2_mode_basis.Y + v_delta);
                panelRX2Display.Location = new Point(gr_rx2_display_basis.X + (int)(h_delta * 0.383), gr_rx2_display_basis.Y + v_delta);
                panelRX2DSP.Location = new Point(gr_rx2_dsp_basis.X + (int)(h_delta * 0.258), gr_rx2_dsp_basis.Y + v_delta);

                //lblRX2RF.Location = new Point(lbl_rx2_rf_basis.X+(int)(h_delta*0.164), lbl_rx2_rf_basis.Y+v_delta);
                //ptbRX2RF.Location = new Point(tb_rx2_rf_basis.X+(int)(h_delta*0.164), tb_rx2_rf_basis.Y+v_delta);
                panelRX2RF.Location = new Point(gr_rx2_rf_basis.X + (int)(h_delta * 0.164), gr_rx2_rf_basis.Y + v_delta);
                chkRX2Squelch.Location = new Point(chk_rx2_squelch_basis.X + (int)(h_delta * 0.164), chk_rx2_squelch_basis.Y + v_delta);
                ptbRX2Squelch.Location = new Point(tb_rx2_squelch_basis.X + (int)(h_delta * 0.164), tb_rx2_squelch_basis.Y + v_delta);
                picRX2Squelch.Location = new Point(pic_rx2_squelch_basis.X + (int)(h_delta * 0.164), pic_rx2_squelch_basis.Y + v_delta);

                panelRX2Mixer.Location = new Point(gr_rx2_mixer_basis.X + (int)(h_delta * 0.078), gr_rx2_mixer_basis.Y + v_delta);
                //chkRX2.Location = new Point(chk_rx2_enable_basis.X, chk_rx2_enable_basis.Y+v_delta);
                //chkRX2Preamp.Location = new Point(chk_rx2_preamp_basis.X, chk_rx2_preamp_basis.Y+v_delta);
                //  lblRX2Band.Location = new Point(lbl_rx2_band_basis.X, lbl_rx2_band_basis.Y + v_delta);
                // comboRX2Band.Location = new Point(combo_rx2_band_basis.X, combo_rx2_band_basis.Y + v_delta);
            }
            previous_delta = h_delta + v_delta; //we'll check this next time through...


            if (collapsedDisplay)
                RepositionControlsForCollapsedlDisplay();

        }

        public int HDelta
        {
            get { return h_delta; }
            set
            {
                h_delta = value;
                ResizeConsole(h_delta, v_delta);
            }
        }

        public int VDelta
        {
            get { return v_delta; }
            set
            {
                v_delta = value;
                ResizeConsole(h_delta, v_delta);
            }
        }

        public void GrabConsoleSizeBasis()
        {
            console_basis_size = this.Size;
            gr_filter_basis_location = this.panelFilter.Location;
            //Debug.WriteLine("console basis:  "+console_basis_size+"  "+gr_filter_basis_location);

            gr_Multimeter_basis_location = this.grpMultimeter.Location;
            gr_BandHF_basis_location = this.panelBandHF.Location;
            gr_BandGEN_basis_location = this.panelBandGEN.Location;
            gr_BandVHF_basis_location = this.panelBandVHF.Location;
            gr_Mode_basis_location = this.panelMode.Location;
            gr_VFOB_basis_location = this.grpVFOB.Location;
            gr_VFOA_basis_location = this.grpVFOA.Location;
            gr_ModePhone_basis_location = this.panelModeSpecificPhone.Location;
            gr_ModeCW_basis_location = this.panelModeSpecificCW.Location;
            gr_ModeDig_basis_location = this.panelModeSpecificDigital.Location;
            gr_ModeFM_basis_location = this.panelModeSpecificFM.Location;
            gr_VFO_basis_location = this.panelVFO.Location;
            gr_vfobetween_basis_location = this.grpVFOBetween.Location;
            btn_display_pan_center_basis = this.btnDisplayPanCenter.Location;
            tb_display_pan_size_basis = this.ptbDisplayPan.Size;
            btn_display_zoom_4x_basis = this.radDisplayZoom4x.Location;
            btn_display_zoom_2x_basis = this.radDisplayZoom2x.Location;
            btn_display_zoom_1x_basis = this.radDisplayZoom1x.Location;
            btn_display_zoom_05_basis = this.radDisplayZoom05.Location;
            tb_display_zoom_basis = this.ptbDisplayZoom.Location;
            txt_display_peak_freq_basis = this.txtDisplayPeakFreq.Location;
            txt_display_peak_power_basis = this.txtDisplayPeakPower.Location;
            txt_display_peak_offset_basis = this.txtDisplayPeakOffset.Location;
            lbl_display_zoom_basis = this.lblDisplayZoom.Location;

            gr_display_size_basis = this.panelDisplay.Size;
            pic_display_size_basis = this.picDisplay.Size;
            pic_waterfall_size_basis = this.picWaterfall.Size;
            txtOverload_size_basis = this.txtOverload.Size;
            txtOverload_basis = this.txtOverload.Location;
            gr_display2_basis = this.panelDisplay2.Location;
            gr_dsp_basis = this.panelDSP.Location;
            gr_multirx_basis = this.panelMultiRX.Location;
            tb_displaypan_basis = this.ptbDisplayPan.Location;
            lbl_displaypan_basis = this.lblDisplayPan.Location;
            txt_display_cursor_freq_basis = this.txtDisplayCursorFreq.Location;
            txt_display_cursor_power_basis = this.txtDisplayCursorPower.Location;
            txt_display_cursor_offset_basis = this.txtDisplayCursorOffset.Location;

            txt_display_orion_mkii_pa_volts_basis = this.txtDisplayOrionMKIIPAVolts.Location;
            txt_display_orion_mkii_blank_basis = this.txtDisplayOrionMKIIBlank.Location;
            txt_display_orion_mkii_pa_amps_basis = this.txtDisplayOrionMKIIPAAmps.Location;

            chk_power_basis = this.chkPower.Location;
            gr_power_basis = this.panelPower.Location;
            gr_rx2_enable_basis = this.panelRX2Power.Location;
            gr_options_basis = this.panelOptions.Location;
            gr_sound_controls_basis = this.panelSoundControls.Location;
            chk_squelch_basis = this.chkSquelch.Location;
            pic_sql_basis = this.picSquelch.Location;
            tb_sql_basis = this.ptbSquelch.Location;
            // gr_antenna_basis = this.panelAntenna.Location;
            gr_date_time_basis = this.panelDateTime.Location;
            //lbl_cpu_meter_basis = this.lblCPUMeter.Location;

            //pan_rx2_divider_basis = this.panelRX2Divider.Location;
            //pan_rx2_divider_size_basis = this.panelRX2Divider.Size;

            gr_display_split_basis = this.grpDisplaySplit.Location;
            gr_rx2_meter_basis = this.grpRX2Meter.Location;
            gr_rx2_filter_basis = this.panelRX2Filter.Location;
            gr_rx2_mode_basis = this.panelRX2Mode.Location;
            gr_rx2_display_basis = this.panelRX2Display.Location;
            gr_rx2_dsp_basis = this.panelRX2DSP.Location;

            gr_rx2_rf_basis = this.panelRX2RF.Location;
            lbl_rx2_rf_basis = this.lblRX2RF.Location;
            tb_rx2_rf_basis = this.ptbRX2RF.Location;
            chk_rx2_squelch_basis = this.chkRX2Squelch.Location;
            tb_rx2_squelch_basis = this.ptbRX2Squelch.Location;
            pic_rx2_squelch_basis = this.picRX2Squelch.Location;

            gr_rx2_mixer_basis = this.panelRX2Mixer.Location;
            chk_rx2_enable_basis = this.chkRX2.Location;

            // gr_rx2_enable_basis = this.panelRX2Power.Location; //

            combo_rx2_preamp_basis = this.comboRX2Preamp.Location;
            lbl_rx2_band_basis = this.lblRX2Band.Location;
            combo_rx2_band_basis = this.comboRX2Band.Location;

            // :W1CEG:
            gr_multi_meter_size_basis = this.grpMultimeter.Size;
            pic_multi_meter_digital_basis = this.picMultiMeterDigital.Location;
            pic_multi_meter_size_basis = this.picMultiMeterDigital.Size;
            lbl_multi_smeter_basis = this.lblMultiSMeter.Location;
            lbl_multi_smeter_size_basis = this.lblMultiSMeter.Size;
            pic_rx2meter_basis = this.picRX2Meter.Location;
            pic_rx2meter_size_basis = this.picRX2Meter.Size;
            lbl_rx2meter_basis = this.lblRX2Meter.Location;
            lbl_rx2meter_size_basis = this.lblRX2Meter.Size;
            txt_multi_text_basis = this.txtMultiText.Location;
            txt_rx2meter_basis = this.txtRX2Meter.Location;
            gr_options_size_basis = this.panelOptions.Size;
            chk_mon_basis = this.chkMON.Location;
            chk_mut_basis = this.chkMUT.Location;
            chk_mox_basis = this.chkMOX.Location;
            chk_tun_basis = this.chkTUN.Location;
            chk_vox_basis = this.chkVOX.Location;
            chk_dup_basis = this.chkRX2SR.Location;
            chk_ctun_basis = this.chkFWCATU.Location;
            chk_x2tr_basis = this.chkX2TR.Location;
            //lbl_af_basis = this.lblAF.Location;
            tb_af_basis = this.ptbAF.Location;
            tb_rf_basis = this.ptbRF.Location;
            tb_pwr_basis = this.ptbPWR.Location;
            //gr_rx2_rf_basis = this.ptbRX2RF.Location;
            // tb_rx2_rf_basis = this.ptbRX2RF.Location;
            tb_rx1af_basis = this.ptbRX1AF.Location;
            tb_rx2af_basis = this.ptbRX2AF.Location;
            gr_display_basis = this.panelDisplay.Location;
            pic_display_basis = this.picDisplay.Location;
            pic_waterfall_basis = this.picWaterfall.Location;
            combo_display_mode_basis = this.comboDisplayMode.Location;
            combo_agc_basis = this.comboAGC.Location;
            combo_rx2agc_basis = this.comboRX2AGC.Location;
            combo_preamp_basis = this.comboPreamp.Location;
            combo_meter_rxmode_basis = this.comboMeterRXMode.Location;
            combo_rx2meter_mode_basis = this.comboRX2MeterMode.Location;
            combo_meter_txmode_basis = this.comboMeterTXMode.Location;
            tb_display_zoom_size_basis = this.ptbDisplayZoom.Size;
            ud_rx1_step_att_present_data_basis = this.udRX1StepAttData.Location;
            ud_rx2_step_att_present_data_basis = this.udRX2StepAttData.Location;
            gr_BandHF_basis_size = panelBandHF.Size;
            gr_BandGEN_basis_size = panelBandGEN.Size;
            gr_BandVHF_basis_size = panelBandVHF.Size;
            gr_Mode_basis_size = panelMode.Size;
            rad_band160_basis = radBand160.Location;
            rad_band80_basis = radBand80.Location;
            rad_band60_basis = radBand60.Location;
            rad_band40_basis = radBand40.Location;
            rad_band30_basis = radBand30.Location;
            rad_band20_basis = radBand20.Location;
            rad_band17_basis = radBand17.Location;
            rad_band15_basis = radBand15.Location;
            rad_band12_basis = radBand12.Location;
            rad_band10_basis = radBand10.Location;
            rad_band6_basis = radBand6.Location;
            rad_band2_basis = radBand2.Location;
            rad_bandwwv_basis = radBandWWV.Location;
            rad_bandgen_basis = radBandGEN.Location;
            rad_bandVHF0_basis = radBandVHF0.Location;
            rad_bandVHF1_basis = radBandVHF1.Location;
            rad_bandVHF2_basis = radBandVHF2.Location;
            rad_bandVHF3_basis = radBandVHF3.Location;
            rad_bandVHF4_basis = radBandVHF4.Location;
            rad_bandVHF5_basis = radBandVHF5.Location;
            rad_bandVHF6_basis = radBandVHF6.Location;
            rad_bandVHF7_basis = radBandVHF7.Location;
            rad_bandVHF8_basis = radBandVHF8.Location;
            rad_bandVHF9_basis = radBandVHF9.Location;
            rad_bandVHF10_basis = radBandVHF10.Location;
            rad_bandVHF11_basis = radBandVHF11.Location;
            rad_bandVHF12_basis = radBandVHF12.Location;
            rad_bandVHF13_basis = radBandVHF13.Location;
            btn_bandHF_basis = btnBandHF.Location; //w3sz
            btn_bandVHF_basis = btnBandVHF.Location; //w3sz
            rad_bandGEN0_basis = radBandGEN0.Location;
            rad_bandGEN1_basis = radBandGEN1.Location;
            rad_bandGEN2_basis = radBandGEN2.Location;
            rad_bandGEN3_basis = radBandGEN3.Location;
            rad_bandGEN4_basis = radBandGEN4.Location;
            rad_bandGEN5_basis = radBandGEN5.Location;
            rad_bandGEN6_basis = radBandGEN6.Location;
            rad_bandGEN7_basis = radBandGEN7.Location;
            rad_bandGEN8_basis = radBandGEN8.Location;
            rad_bandGEN9_basis = radBandGEN9.Location;
            rad_bandGEN10_basis = radBandGEN10.Location;
            rad_bandGEN11_basis = radBandGEN11.Location;
            rad_bandGEN12_basis = radBandGEN12.Location;
            rad_bandGEN13_basis = radBandGEN13.Location;
            btn_bandHF1_basis = btnBandHF1.Location;
            rad_mode_lsb_basis = radModeLSB.Location;
            rad_mode_usb_basis = radModeUSB.Location;
            rad_mode_dsb_basis = radModeDSB.Location;
            rad_mode_cwl_basis = radModeCWL.Location;
            rad_mode_cwu_basis = radModeCWU.Location;
            rad_mode_fmn_basis = radModeFMN.Location;
            rad_mode_am_basis = radModeAM.Location;
            rad_mode_sam_basis = radModeSAM.Location;
            rad_mode_spec_basis = radModeSPEC.Location;
            rad_mode_digl_basis = radModeDIGL.Location;
            rad_mode_digu_basis = radModeDIGU.Location;
            rad_mode_drm_basis = radModeDRM.Location;
        }

        private string old_rx1_display_mode = "";
        private bool set_rx2_freq = false;
        private bool rx2_enabled = false;
        public bool RX2Enabled
        {
            get { return rx2_enabled; }
            set
            {
                rx2_enabled = value;
                if (DataFlowing)
                {
                    if (rx2_enabled)
                    {
                        UpdateDDCs(rx2_enabled);
                        // Thread.Sleep(20);
                    }
                    // cmaster.SetAAudioMixState((void*)0, 0, 2, rx2_enabled);
                    UpdateAAudioMixerStates();          // What is the 'DataFlowing' thing all about????
                    if (!rx2_enabled) UpdateDDCs(rx2_enabled);
                }
                cmaster.CMSetFRXNBRun(1);
                cmaster.CMSetFRXNB2Run(1);
                cmaster.SetRunPanadapter(1, true);
                cmaster.CMSetSRXWavePlayRun(1);
                cmaster.CMSetSRXWaveRecordRun(1);
                chkRX2.Checked = value;
                Display.Init();
                if (rx2_enabled)
                {
                    old_rx1_display_mode = comboDisplayMode.Text;
                    UpdateRXADCCtrl();
                    chkDX_CheckedChanged(this, EventArgs.Empty); // stereo_diversity
                    // comboRX2Preamp_SelectedIndexChanged(this, EventArgs.Empty);
                    if (RX2StepAttPresent) udRX2StepAttData_ValueChanged(this, EventArgs.Empty);
                    else comboRX2Preamp_SelectedIndexChanged(this, EventArgs.Empty);

                    if (chkPower.Checked)
                    {
                        if (rx2_meter_thread == null || !rx2_meter_thread.IsAlive)
                        {
                            rx2_meter_thread = new Thread(new ThreadStart(UpdateRX2MeterData));
                            rx2_meter_thread.Name = "RX2 Meter Thread";
                            rx2_meter_thread.Priority = ThreadPriority.Lowest;
                            rx2_meter_thread.IsBackground = true;
                            rx2_meter_thread.Start();
                        }

                        if (rx2_sql_update_thread == null || !rx2_sql_update_thread.IsAlive)
                        {
                            rx2_sql_update_thread = new Thread(new ThreadStart(UpdateRX2SQL));
                            rx2_sql_update_thread.Name = "Update RX2 SQL";
                            rx2_sql_update_thread.Priority = ThreadPriority.Normal;
                            rx2_sql_update_thread.IsBackground = true;
                            rx2_sql_update_thread.Start();
                        }

                        set_rx2_freq = true;
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        if (!rx2_enabled) return;

                        txtVFOBFreq.ForeColor = vfo_text_light_color;
                        txtVFOBMSD.ForeColor = vfo_text_light_color;
                        txtVFOBLSD.ForeColor = small_vfo_color;
                        txtVFOBBand.ForeColor = band_text_light_color;

                        if (chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
                        if (chkEnableMultiRX.Checked) chkEnableMultiRX_CheckedChanged(this, EventArgs.Empty);
                    }

                    radio.GetDSPRX(1, 0).Active = true;
                    //DttSP.SetThreadProcessingMode(2, 2);
                    WDSP.SetChannelState(WDSP.id(2, 0), 1, 0);
                    //RadioDSP.SetThreadNumber(3);

                    if (chkEnableMultiRX.Checked)
                        txtVFOABand_LostFocus(this, EventArgs.Empty);

                    if (comboDisplayMode.Items.Contains("Panafall"))
                        comboDisplayMode.Items.Remove("Panafall");
                    if (comboDisplayMode.SelectedIndex < 0)
                        comboDisplayMode.Text = "Panadapter";

                    if (comboDisplayMode.Items.Contains("Panascope"))
                        comboDisplayMode.Items.Remove("Panascope");
                    if (comboDisplayMode.SelectedIndex < 0)
                        comboDisplayMode.Text = "Panadapter";

                    if (comboDisplayMode.Items.Contains("Spectrascope"))
                        comboDisplayMode.Items.Remove("Spectrascope");
                    if (comboDisplayMode.SelectedIndex < 0)
                        comboDisplayMode.Text = "Pandapter";
                }
                else
                {
                    if (chkPower.Checked)
                    {
                        if (chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
                        else if (chkEnableMultiRX.Checked) chkEnableMultiRX_CheckedChanged(this, EventArgs.Empty);
                        else
                        {
                            txtVFOBFreq.ForeColor = vfo_text_dark_color;
                            txtVFOBMSD.ForeColor = vfo_text_dark_color;
                            txtVFOBLSD.ForeColor = vfo_text_dark_color;
                            txtVFOBBand.ForeColor = band_text_dark_color;
                            panelVFOASubHover.Visible = false;
                        }
                        if (chkVFOBTX.Checked && !chkVFOSplit.Checked)
                            chkVFOATX.Checked = true;
                        UpdateVFOASub();
                    }

                    radio.GetDSPRX(1, 0).Active = false;
                    //DttSP.SetThreadProcessingMode(2, 0);
                    WDSP.SetChannelState(WDSP.id(2, 0), 0, 0);
                    //RadioDSP.SetThreadNumber(2);

                    /*if(comboMeterRXMode.Items.Contains("ADC2_L"))
                        comboMeterRXMode.Items.Remove("ADC2_L");
                    if(comboMeterRXMode.Items.Contains("ADC2_R"))
                        comboMeterRXMode.Items.Remove("ADC2_R");*/

                    if (chkEnableMultiRX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);

                    if (!comboDisplayMode.Items.Contains("Panafall"))
                        comboDisplayMode.Items.Insert(comboDisplayMode.Items.Count - 1, "Panafall");
                    if (!comboDisplayMode.Items.Contains("Panascope"))
                        comboDisplayMode.Items.Insert(comboDisplayMode.Items.Count - 1, "Panascope");

                    comboDisplayMode.Text = old_rx1_display_mode;
                }

                Audio.RX2Enabled = rx2_enabled;
                Display.RX2Enabled = rx2_enabled;
                chkSplitDisplay.Checked = rx2_enabled;
            }
        }

        private bool update_rx2_display = false;
        private void chkRX2_CheckedChanged(object sender, System.EventArgs e)
        {
            RX2Enabled = chkRX2.Checked;

            if (chkVFOBTX.Checked && chkVAC2.Checked && chkRX2.Checked)
            {
                ptbVACRXGain.Value = vac2_rx_gain;
                ptbVACRXGain_Scroll(this, EventArgs.Empty);

                ptbVACTXGain.Value = vac2_tx_gain;
                ptbVACTXGain_Scroll(this, EventArgs.Empty);

                comboVACSampleRate.Text = vac2_sample_rate;

                chkVACStereo.Checked = vac2_stereo;
            }
            else
            {
                ptbVACRXGain.Value = vac_rx_gain;
                ptbVACRXGain_Scroll(this, EventArgs.Empty);

                ptbVACTXGain.Value = vac_tx_gain;
                ptbVACTXGain_Scroll(this, EventArgs.Empty);

                comboVACSampleRate.Text = vac_sample_rate;

                chkVACStereo.Checked = vac_stereo;
            }

            if (chkRX2.Checked)
            {
                chkRX2.BackColor = button_selected_color;
                chkRX2DisplayAVG_CheckedChanged(this, EventArgs.Empty);
                click_tune_rx2_display = chkX2TR.Checked;
            }
            else
            {
                //JanusAudio.SetVFOfreqRX2(0.0, true);
                // JanusAudio.SetVFOfreqRX5(0.0);
                chkRX2.BackColor = SystemColors.Control;
                if (chkVAC2.Checked) chkVAC2.Checked = false;
                click_tune_rx2_display = false;
            }

            if (update_rx2_display)
            {
                if (chkRX2.Checked)
                {
                    console_basis_size.Height += (panelRX2Filter.Height + 8);
                    if (!(this.WindowState == FormWindowState.Maximized))
                        this.Height += (panelRX2Filter.Height + 8);
                }
                else
                {
                    console_basis_size.Height -= (panelRX2Filter.Height + 8);
                    if (!(this.WindowState == FormWindowState.Maximized))
                        this.Height -= (panelRX2Filter.Height + 8);
                }
                Console_Resize(this, EventArgs.Empty);
            }
            update_rx2_display = true;

        }

        private void chkRX2SR_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRX2SR.Checked) chkRX2SR.BackColor = button_selected_color;
            else chkRX2SR.BackColor = SystemColors.Control;
            // RX2SpurReduction = chkRX2SR.Checked;
            DisplayDuplex = chkRX2SR.Checked;
            Display.DisplayDuplex = chkRX2SR.Checked;

            if (path_Illustrator != null)
                path_Illustrator.pi_Changed();

        }

        private void panelVFOASubHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
            if (vfoa_sub_hover_digit < 0) return;

            int x = 0;
            int width = 0;

            /*if(small_lsd && txtVFOALSD.Visible)
            {
                x += (vfo_char_width+vfo_char_space)*vfoa_hover_digit;
                if(vfoa_hover_digit > 3)
                    x += (vfo_decimal_space-vfo_char_space);
				
                if(vfoa_hover_digit > 6)
                {
                    x += vfo_small_char_width;
                    x += (vfo_small_char_width+vfo_small_char_space-vfo_char_width-vfo_char_space)*(vfoa_hover_digit-6);
                    width = x+vfo_small_char_width;
                }
                else width = x+vfo_char_width;
            }
            else*/
            {
                x += (vfo_sub_char_width + vfo_sub_char_space) * vfoa_sub_hover_digit;
                if (vfoa_sub_hover_digit > 3)
                    x += (vfo_sub_decimal_space - vfo_sub_char_space);
                width = x + vfo_sub_char_width;
            }

            e.Graphics.DrawLine(new Pen(txtVFOABand.ForeColor, 2.0f), x, 1, width, 1);
        }

        private void panelVFOASubHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
            Control c1 = (Control)sender;
            Control c2 = txtVFOABand;
            int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
            int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);
            int x_offset = c1.Left - c2.Left - client_width / 2;
            int y_offset = c1.Top - c2.Top - client_height / 2;
            txtVFOABand_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
        }

        private void txtVFOABand_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked) || !chkPower.Checked) return;
            panelVFOASubHover.Visible = true;
            if (this.ContainsFocus)
            {
                int old_digit = vfoa_sub_hover_digit;
                int digit_index = 0;
                if (vfo_sub_char_width == 0)
                    GetVFOSubCharWidth();

                int x = txtVFOABand.Width - (vfo_sub_pixel_offset - 5);
                while (x < e.X)
                {
                    digit_index++;

                    /*if(small_lsd && txtVFOALSD.Visible)
                    {
                        if(digit_index < 6)
                            x += (vfo_char_width+vfo_char_space);
                        else 
                            x += (vfo_small_char_width+vfo_small_char_space);

                        if(digit_index == 3)
                            x += (vfo_decimal_space-vfo_char_space);
                        if(digit_index == 6)
                            x += vfo_small_char_width;
                    }
                    else
                    {*/
                    x += vfo_sub_char_width;
                    if (digit_index == 3)
                        x += vfo_sub_decimal_space;
                    else
                        x += vfo_sub_char_space;
                    //}
                }

                if (digit_index < 3) digit_index = -1;
                if (digit_index > 9) digit_index = 9;
                vfoa_sub_hover_digit = digit_index;
                if (vfoa_sub_hover_digit != old_digit)
                    panelVFOASubHover.Invalidate();
                //Debug.WriteLine("vfoa_sub_hover_digit:"+vfoa_sub_hover_digit);
            }
        }

        private void txtVFOABand_MouseLeave(object sender, System.EventArgs e)
        {
            vfoa_sub_hover_digit = -1;
            panelVFOASubHover.Invalidate();
        }

        private void SetRX2Mode(DSPMode new_mode)
        {
            //if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
            if (new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;
            DSPMode old_mode = rx2_dsp_mode;

            WDSP.SetChannelState(WDSP.id(2, 0), 0, 1);              // turn OFF the DSP channel

            if (new_mode == DSPMode.FM)                             // set DSP samplerate
                WDSP.SetDSPSamplerate(WDSP.id(2, 0), 192000);
            else
                WDSP.SetDSPSamplerate(WDSP.id(2, 0), 48000);

            radio.GetDSPRX(1, 0).DSPMode = new_mode;			    // set new DSP mode
            // radio.GetDSPRX(1, 1).DSPMode = new_mode;

            if (rx2_enabled)
            {
                if (chkVFOBTX.Checked)
                {
                    Audio.TXDSPMode = new_mode;
                    radio.GetDSPTX(0).CurrentDSPMode = new_mode;
                }
            }
            Display.RX2DSPMode = new_mode;
            RadioDSP.RX2DSPMode = new_mode;

            if (new_mode == DSPMode.CWL || new_mode == DSPMode.CWU)
            {
                WDSP.SetChannelTDelayUp(WDSP.id(2, 0), 0.005);
                WDSP.SetChannelTDelayUp(WDSP.id(2, 1), 0.005);
                WDSP.SetChannelTSlewUp(WDSP.id(2, 0), 0.010);
                WDSP.SetChannelTSlewUp(WDSP.id(2, 1), 0.010);
                WDSP.SetChannelTDelayDown(WDSP.id(2, 0), 0.000);
                WDSP.SetChannelTDelayDown(WDSP.id(2, 1), 0.000);
                WDSP.SetChannelTSlewDown(WDSP.id(2, 0), 0.005);
                WDSP.SetChannelTSlewDown(WDSP.id(2, 1), 0.005);
            }
            else
            {
                WDSP.SetChannelTDelayUp(WDSP.id(2, 0), 0.010);
                WDSP.SetChannelTDelayUp(WDSP.id(2, 1), 0.010);
                WDSP.SetChannelTSlewUp(WDSP.id(2, 0), 0.025);
                WDSP.SetChannelTSlewUp(WDSP.id(2, 1), 0.025);
                WDSP.SetChannelTDelayDown(WDSP.id(2, 0), 0.000);
                WDSP.SetChannelTDelayDown(WDSP.id(2, 1), 0.000);
                WDSP.SetChannelTSlewDown(WDSP.id(2, 0), 0.010);
                WDSP.SetChannelTSlewDown(WDSP.id(2, 1), 0.010);
            }

            double rx2_freq = VFOBFreq;
            int old_txosc = (int)radio.GetDSPTX(0).TXOsc;

            switch (old_mode)
            {
                case DSPMode.LSB:
                    radRX2ModeLSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.USB:
                    radRX2ModeUSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.DSB:
                    radRX2ModeDSB.BackColor = SystemColors.Control;
                    break;
                case DSPMode.CWL:
                    radRX2ModeCWL.BackColor = SystemColors.Control;

                    if (!RX2IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.USB:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }

                    radio.GetDSPRX(1, 0).RXAPFRun = false;
                    SetupForm.EnableRX2APFControl = false;
                    lblRX2APF.Hide();
                    break;
                case DSPMode.CWU:
                    radRX2ModeCWU.BackColor = SystemColors.Control;

                    if (!RX2IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.LSB:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }

                    radio.GetDSPRX(1, 0).RXAPFRun = false;
                    SetupForm.EnableRX2APFControl = false;
                    lblRX2APF.Hide();
                    break;
                case DSPMode.FM:
                    radRX2ModeFMN.BackColor = SystemColors.Control;
                    if (rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM &&
                            new_mode != DSPMode.FM)
                        {
                            if (chkVFOBTX.Checked)
                                chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
                        }

                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
                    }

                    if (new_mode != DSPMode.DRM)
                        EnableAllRX2Filters();

                    if (!initializing)
                        rx2_fm_squelch_threshold_scroll = ptbRX2Squelch.Value;

                    ptbRX2Squelch.Minimum = -160;
                    ptbRX2Squelch.Maximum = 0;

                    picRX2Squelch.Visible = true;

                    ptbRX2Squelch.Value = rx2_squelch_threshold_scroll;
                    break;
                case DSPMode.AM:
                    radRX2ModeAM.BackColor = SystemColors.Control;
                    if (rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM &&
                            new_mode != DSPMode.FM)
                        {
                            if (chkVFOBTX.Checked)
                                chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
                        }
                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
                    }

                    if (new_mode != DSPMode.SPEC || new_mode != DSPMode.DRM)
                        EnableAllFilters();
                    break;
                case DSPMode.SAM:
                    radRX2ModeSAM.BackColor = SystemColors.Control;
                    if (rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM &&
                            new_mode != DSPMode.FM)
                        {
                            if (chkVFOBTX.Checked)
                                chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
                        }

                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
                    }
                    break;
                case DSPMode.DIGL:
                    radRX2ModeDIGL.BackColor = SystemColors.Control;
                    if (rx2_enabled && vac2_auto_enable &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VAC2Enable = false;
                    }
                    if (new_mode != DSPMode.DIGU) SetDigiMode(2, "reset");
                    break;
                case DSPMode.DIGU:
                    radRX2ModeDIGU.BackColor = SystemColors.Control;
                    if (rx2_enabled && vac2_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DRM)
                    {
                        SetupForm.VAC2Enable = false;
                    }
                    if (new_mode != DSPMode.DIGL) SetDigiMode(2, "reset");
                    break;
                case DSPMode.DRM:
                    radRX2ModeDRM.BackColor = SystemColors.Control;
                    //rx2_if_shift = true;
                    rx2_vfo_offset = 0.0;
                    if (rx2_enabled && vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU)
                        SetupForm.VAC2Enable = false;
                    if (new_mode != DSPMode.FM)
                        EnableAllFilters();
                    //rx2_if_freq = SetupForm.IFFreq;
                    CalcDisplayFreq();
                    break;
            }

            switch (new_mode)
            {
                case DSPMode.LSB:
                    radRX2ModeLSB.BackColor = button_selected_color;
                    //panelRX2Mode.Text = "RX2 Mode - LSB";
                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    break;
                case DSPMode.USB:
                    radRX2ModeUSB.BackColor = button_selected_color;
                    //panelRX2Mode.Text = "RX2 Mode - USB";
                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    break;
                case DSPMode.DSB:
                    radRX2ModeDSB.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - DSB";
                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    break;
                case DSPMode.CWL:
                    radRX2ModeCWL.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - CWL";

                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        radio.GetDSPTX(0).TXOsc = 0.0;
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        CWPitch = cw_pitch;
                    }

                    if (!RX2IsOn60mChannel())
                    {
                        switch (rx2_dsp_mode)
                        {
                            case DSPMode.USB:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }
                    SetupForm.EnableRX2APFControl = true;
                    lblRX2APF.Show();
                    // chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
                    break;
                case DSPMode.CWU:
                    radRX2ModeCWU.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - CWU";

                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        radio.GetDSPTX(0).TXOsc = 0.0;
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        CWPitch = cw_pitch;
                    }

                    if (!RX2IsOn60mChannel())
                    {
                        switch (rx2_dsp_mode)
                        {
                            case DSPMode.LSB:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }
                    SetupForm.EnableRX2APFControl = true;
                    lblRX2APF.Show();
                    // chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
                    break;
                case DSPMode.FM:
                    radRX2ModeFMN.BackColor = button_selected_color;
                    DisableAllRX2Filters();    //this needs to be for RX2 only
                    if (chkRX2NR.CheckState == CheckState.Indeterminate)
                        chkRX2NR.CheckState = CheckState.Unchecked;

                    if (!initializing)
                        rx2_squelch_threshold_scroll = ptbRX2Squelch.Value;

                    ptbRX2Squelch.Minimum = 0;
                    ptbRX2Squelch.Maximum = 100;

                    ptbRX2Squelch.Value = rx2_fm_squelch_threshold_scroll;

                    picRX2Squelch.Visible = false;

                    //chkRX2Squelch.Enabled = false;
                    if (!initializing)
                        rx2_squelch_on = chkRX2Squelch.Checked;    //save state of non-FM squelch
                    chkRX2Squelch.Checked = rx2_fm_squelch_on; // set fm squelch state

                    if (rx2_enabled)
                    {
                        if (chkVFOBTX.Checked)
                        {
                            if (!rx_only && chkPower.Checked)
                                chkMOX.Enabled = true;

                            chkMON.Checked = false;
                            chkMON.Enabled = false;

                            SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                            // radio.GetDSPTX(0).TXOsc = 11025.0;

                            ptbFMMic_Scroll(this, EventArgs.Empty);
                        }

                        chkRX2BIN.Checked = false;
                        chkRX2BIN.Enabled = false;
                    }
                    break;
                case DSPMode.AM:
                    radRX2ModeAM.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - AM";
                    if (chkVFOBTX.Checked)
                    {
                        if (!rx_only && chkPower.Checked)
                            chkMOX.Enabled = true;

                        chkMON.Checked = false;
                        chkMON.Enabled = false;

                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        // radio.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
                    }

                    chkRX2BIN.Checked = false;
                    chkRX2BIN.Enabled = false;
                    break;
                case DSPMode.SAM:
                    radRX2ModeSAM.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - SAM";

                    if (chkVFOBTX.Checked)
                    {
                        if (!rx_only && chkPower.Checked)
                            chkMOX.Enabled = true;

                        chkMON.Checked = false;
                        chkMON.Enabled = false;

                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        // wdsp.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
                    }

                    chkRX2BIN.Checked = false;
                    chkRX2BIN.Enabled = false;
                    break;
                case DSPMode.DIGL:
                    radRX2ModeDIGL.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - DIGL";

                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }

                    if (rx2_enabled && vac2_auto_enable)
                        SetupForm.VAC2Enable = true;

                    if (old_mode != DSPMode.DIGU)
                    {
                        SetDigiMode(2, "preset");
                        SetDigiMode(2, "set");
                    }

                    break;
                case DSPMode.DIGU:
                    radRX2ModeDIGU.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - DIGU";

                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    if (rx2_enabled && vac2_auto_enable)
                        SetupForm.VAC2Enable = true;

                    if (old_mode != DSPMode.DIGL)
                    {
                        SetDigiMode(2, "preset");
                        SetDigiMode(2, "set");
                    }

                    break;
                case DSPMode.DRM:
                    // rx2_if_shift = false;
                    rx2_vfo_offset = -0.012;
                    radRX2ModeDRM.BackColor = button_selected_color;
                    //grpRX2Mode.Text = "RX2 Mode - DRM";
                    if (rx2_enabled && vac2_auto_enable)
                        SetupForm.VAC2Enable = true;

                    if (chkVFOBTX.Checked && rx2_enabled)
                    {
                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        radio.GetDSPTX(0).TXOsc = 0.0;
                    }
                    //DisableAllRX2Filters(); // !FIXME

                    //grpFilter.Text = "Filter - DRM";
                    radio.GetDSPRX(1, 0).SetRXFilter(7000, 17000);
                    /*Display.RXDisplayLow = -8000;
                        Display.RXDisplayHigh = 8000;*/
                    break;
            }

            if (RX2IsOn60mChannel() && current_region == FRSRegion.US)
            {
                // adjust freq offset to ensure center of energy for new mode in 60m
                rx2_freq += (-ModeFreqOffset(old_mode) + ModeFreqOffset(new_mode));
                txtVFOBFreq.Text = rx2_freq.ToString("f6");
            }

            /* int new_txosc = (int)radio.GetDSPTX(0).TXOsc;
             if (new_txosc != old_txosc)
             {
                 if (fwc_init && (current_model == Model.FLEX5000))
                     FWC.SetTXOffset(new_txosc);
             }*/

            kToolStripMenuItem.Text = radRX2Filter1.Text = rx2_filters[(int)new_mode].GetName(Filter.F1);
            kToolStripMenuItem1.Text = radRX2Filter2.Text = rx2_filters[(int)new_mode].GetName(Filter.F2);
            kToolStripMenuItem2.Text = radRX2Filter3.Text = rx2_filters[(int)new_mode].GetName(Filter.F3);
            kToolStripMenuItem3.Text = radRX2Filter4.Text = rx2_filters[(int)new_mode].GetName(Filter.F4);
            kToolStripMenuItem4.Text = radRX2Filter5.Text = rx2_filters[(int)new_mode].GetName(Filter.F5);
            toolStripMenuItem13.Text = radRX2Filter6.Text = rx2_filters[(int)new_mode].GetName(Filter.F6);
            toolStripMenuItem14.Text = radRX2Filter7.Text = rx2_filters[(int)new_mode].GetName(Filter.F7);
            radRX2FilterVar1.Text = rx2_filters[(int)new_mode].GetName(Filter.VAR1);
            radRX2FilterVar2.Text = rx2_filters[(int)new_mode].GetName(Filter.VAR2);

            rx2_dsp_mode = new_mode;

            if (!initializing && old_mode == DSPMode.FM)
                chkRX2Squelch.Checked = rx2_squelch_on;

            if (old_mode == DSPMode.FM || new_mode == DSPMode.FM)
                ptbRX2Squelch_Scroll(this, EventArgs.Empty);

            if (rx2_dsp_mode != DSPMode.FM && rx2_dsp_mode != DSPMode.DRM)
            {
                RX2Filter = rx2_filters[(int)new_mode].LastFilter;
            }
            else
            {
                if (rx2_dsp_mode == DSPMode.FM)
                {
                    if (radio.GetDSPRX(1, 0).RXFMDeviation == 5000)
                    {
                        UpdateRX2Filters(-8000, 8000);
                    }
                    else
                    {
                        UpdateRX2Filters(-5500, 5500);
                    }
                }
                RX2Filter = Filter.NONE;
            }

            if (rx2_dsp_mode != DSPMode.FM && rx2_dsp_mode != DSPMode.DRM)
            {
                RX2Filter = rx2_filters[(int)new_mode].LastFilter;
            }
            else
            {
                RX2Filter = Filter.NONE;
            }

            tbFilterWidthScroll_newMode(); // wjt */

            //Display.DrawBackground();
            //if (rx2_enabled)
            //{
            //    UpdateDSP();
            //    if (chkVFOBTX.Checked)
            //        UpdateDSP();
            //}

            if (new_mode == DSPMode.CWL || new_mode == DSPMode.CWU)
            {
                chkCWAPFEnabled_CheckedChanged(this, EventArgs.Empty);
            }

            UpdateDSP();
            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
            chkRX2Squelch_CheckedChanged(this, EventArgs.Empty);
            ptbPWR_Scroll(this, EventArgs.Empty);

            if (old_mode == DSPMode.FM || new_mode == DSPMode.FM)
            {
                SetupForm.ForceReset = true;
            }

            if (rx2_enabled)
                WDSP.SetChannelState(WDSP.id(2, 0), 1, 0);              // turn ON the DSP channel
        }

        private void radRX2ModeButton_CheckedChanged(object sender, System.EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(RadioButtonTS)) return;
            RadioButtonTS radioBtnTS = (RadioButtonTS)sender;
            if (!radioBtnTS.Checked) return;
            string radiobut = ((RadioButtonTS)sender).Text;

            switch (radiobut)
            {
                case "LSB":
                    SetRX2Mode(DSPMode.LSB);
                    lblRX2ModeLabel.Text = radModeLSB.Text;
                    break;
                case "USB":
                    SetRX2Mode(DSPMode.USB);
                    lblRX2ModeLabel.Text = radModeUSB.Text;
                    break;
                case "DSB":
                    SetRX2Mode(DSPMode.DSB);
                    lblRX2ModeLabel.Text = radModeDSB.Text;
                    break;
                case "CWL":
                    SetRX2Mode(DSPMode.CWL);
                    lblRX2ModeLabel.Text = radModeCWL.Text;
                    break;
                case "CWU":
                    SetRX2Mode(DSPMode.CWU);
                    lblRX2ModeLabel.Text = radModeCWU.Text;
                    break;
                case "FM":
                    SetRX2Mode(DSPMode.FM);
                    lblRX2ModeLabel.Text = radModeFMN.Text;
                    break;
                case "AM":
                    SetRX2Mode(DSPMode.AM);
                    lblRX2ModeLabel.Text = radModeAM.Text;
                    break;
                case "SAM":
                    SetRX2Mode(DSPMode.SAM);
                    lblRX2ModeLabel.Text = radModeSAM.Text;
                    break;
                case "DIGL":
                    SetRX2Mode(DSPMode.DIGL);
                    lblRX2ModeLabel.Text = radModeDIGL.Text;
                    break;
                case "DIGU":
                    SetRX2Mode(DSPMode.DIGU);
                    lblRX2ModeLabel.Text = radModeDIGU.Text;
                    break;
                case "DRM":
                    SetRX2Mode(DSPMode.DRM);
                    lblRX2ModeLabel.Text = radModeDRM.Text;
                    break;
            }
            lSBToolStripMenuItem1.Checked = radRX2ModeLSB.Checked;
            uSBToolStripMenuItem1.Checked = radRX2ModeUSB.Checked;
            dSBToolStripMenuItem1.Checked = radRX2ModeDSB.Checked;
            cWLToolStripMenuItem1.Checked = radRX2ModeCWL.Checked;
            cWUToolStripMenuItem1.Checked = radRX2ModeCWU.Checked;
            fMToolStripMenuItem1.Checked = radRX2ModeFMN.Checked;
            aMToolStripMenuItem1.Checked = radRX2ModeAM.Checked;
            sAMToolStripMenuItem1.Checked = radRX2ModeSAM.Checked;
            dIGLToolStripMenuItem1.Checked = radRX2ModeDIGL.Checked;
            dIGUToolStripMenuItem1.Checked = radRX2ModeDIGU.Checked;
            dRMToolStripMenuItem1.Checked = radRX2ModeDRM.Checked;
        }

        private void radRX2ModeLSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeLSB.Checked)
            {
                SetRX2Mode(DSPMode.LSB);
            }
        }

        private void radRX2ModeUSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeUSB.Checked)
            {
                SetRX2Mode(DSPMode.USB);
            }
        }

        private void radRX2ModeDSB_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeDSB.Checked)
            {
                SetRX2Mode(DSPMode.DSB);
            }
        }

        private void radRX2ModeCWL_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeCWL.Checked)
            {
                SetRX2Mode(DSPMode.CWL);
            }
        }

        private void radRX2ModeCWU_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeCWU.Checked)
            {
                SetRX2Mode(DSPMode.CWU);
            }
        }

        private void radRX2ModeFMN_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeFMN.Checked)
            {
                SetRX2Mode(DSPMode.FM);
            }
        }

        private void radRX2ModeAM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeAM.Checked)
            {
                SetRX2Mode(DSPMode.AM);
            }
        }

        private void radRX2ModeSAM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeSAM.Checked)
            {
                SetRX2Mode(DSPMode.SAM);
            }
        }

        private void radRX2ModeDIGL_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeDIGL.Checked)
            {
                SetRX2Mode(DSPMode.DIGL);
            }
        }

        private void radRX2ModeDIGU_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeDIGU.Checked)
            {
                SetRX2Mode(DSPMode.DIGU);
            }
        }

        private void radRX2ModeDRM_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2ModeDRM.Checked)
            {
                SetRX2Mode(DSPMode.DRM);
            }
        }

        public void SetRX2Filter(Filter new_filter)
        {
            //if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
            if (rx2_dsp_mode == DSPMode.FIRST || rx2_dsp_mode == DSPMode.LAST) return;

            int low = 0, high = 0;

            switch (rx2_filter)
            {
                case Filter.F1:
                    radRX2Filter1.BackColor = SystemColors.Control;
                    break;
                case Filter.F2:
                    radRX2Filter2.BackColor = SystemColors.Control;
                    break;
                case Filter.F3:
                    radRX2Filter3.BackColor = SystemColors.Control;
                    break;
                case Filter.F4:
                    radRX2Filter4.BackColor = SystemColors.Control;
                    break;
                case Filter.F5:
                    radRX2Filter5.BackColor = SystemColors.Control;
                    break;
                case Filter.F6:
                    radRX2Filter6.BackColor = SystemColors.Control;
                    break;
                case Filter.F7:
                    radRX2Filter7.BackColor = SystemColors.Control;
                    break;
                case Filter.VAR1:
                    //radRX2FilterVar1.BackColor = SystemColors.Control;
                    //udRX2FilterLow.BackColor = SystemColors.Window;
                    //udRX2FilterHigh.BackColor = SystemColors.Window;
                    udRX2FilterLow.Enabled = false;
                    udRX2FilterHigh.Enabled = false;
                    break;
                case Filter.VAR2:
                    //radRX2FilterVar2.BackColor = SystemColors.Control;
                    //udRX2FilterLow.BackColor = SystemColors.Window;
                    //udRX2FilterHigh.BackColor = SystemColors.Window;
                    udRX2FilterLow.Enabled = false;
                    udRX2FilterHigh.Enabled = false;
                    break;
            }

            rx2_filter = new_filter;

            low = rx2_filters[(int)rx2_dsp_mode].GetLow(new_filter);
            high = rx2_filters[(int)rx2_dsp_mode].GetHigh(new_filter);
            rx2_filters[(int)rx2_dsp_mode].LastFilter = new_filter;

            panelRX2Filter.Text = "RX2 Filter - " + rx2_filters[(int)rx2_dsp_mode].GetName(new_filter);

            switch (new_filter)
            {
                case Filter.F1:
                    radRX2Filter1.BackColor = button_selected_color;
                    break;
                case Filter.F2:
                    radRX2Filter2.BackColor = button_selected_color;
                    break;
                case Filter.F3:
                    radRX2Filter3.BackColor = button_selected_color;
                    break;
                case Filter.F4:
                    radRX2Filter4.BackColor = button_selected_color;
                    break;
                case Filter.F5:
                    radRX2Filter5.BackColor = button_selected_color;
                    break;
                case Filter.F6:
                    radRX2Filter6.BackColor = button_selected_color;
                    break;
                case Filter.F7:
                    radRX2Filter7.BackColor = button_selected_color;
                    break;
                case Filter.VAR1:
                    //radRX2FilterVar1.BackColor = button_selected_color;
                    //udRX2FilterLow.BackColor = button_selected_color;
                    //udRX2FilterHigh.BackColor = button_selected_color;
                    udRX2FilterLow.Enabled = true;
                    udRX2FilterHigh.Enabled = true;
                    break;
                case Filter.VAR2:
                    //radRX2FilterVar2.BackColor = button_selected_color;
                    //udRX2FilterLow.BackColor = button_selected_color;
                    //udRX2FilterHigh.BackColor = button_selected_color;
                    udRX2FilterLow.Enabled = true;
                    udRX2FilterHigh.Enabled = true;
                    break;
                case Filter.NONE:
                    foreach (Control c in panelRX2Filter.Controls)
                    {
                        if (c.GetType() == typeof(RadioButtonTS))
                        {
                            ((RadioButtonTS)c).Checked = false;

                            if (c.BackColor != SystemColors.Control)
                                ((RadioButtonTS)c).BackColor = SystemColors.Control;
                        }
                    }
                    return;
            }

            UpdateRX2Filters(low, high);
        }

        private void radRX2Filter1_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter1.Checked)
                SetRX2Filter(Filter.F1);
        }

        private void radRX2Filter2_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter2.Checked)
                SetRX2Filter(Filter.F2);
        }

        private void radRX2Filter3_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter3.Checked)
                SetRX2Filter(Filter.F3);
        }

        private void radRX2Filter4_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter4.Checked)
                SetRX2Filter(Filter.F4);
        }

        private void radRX2Filter5_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter5.Checked)
                SetRX2Filter(Filter.F5);
        }

        private void radRX2Filter6_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter6.Checked)
                SetRX2Filter(Filter.F6);
        }

        private void radRX2Filter7_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2Filter7.Checked)
                SetRX2Filter(Filter.F7);
        }

        private void radRX2FilterVar1_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2FilterVar1.Checked)
                SetRX2Filter(Filter.VAR1);
        }

        private void radRX2FilterVar2_CheckedChanged(object sender, System.EventArgs e)
        {
            if (radRX2FilterVar2.Checked)
                SetRX2Filter(Filter.VAR2);
        }

        private void udRX2FilterLow_ValueChanged(object sender, System.EventArgs e)
        {
            if (udRX2FilterLow.Focused)
            {
                if (udRX2FilterLow.Value >= udRX2FilterHigh.Value - 10)
                {
                    udRX2FilterLow.Value = udRX2FilterHigh.Value - 10;
                    return;
                }

                UpdateRX2Filters((int)udRX2FilterLow.Value, (int)udRX2FilterHigh.Value);

                if (!save_filter_changes)
                    rx2_filters[(int)rx2_dsp_mode].SetLow(rx2_filter, (int)udRX2FilterLow.Value);
            }

            if (save_filter_changes && rx2_filter >= Filter.F1 && rx2_filter <= Filter.VAR2)
                rx2_filters[(int)rx2_dsp_mode].SetLow(rx2_filter, (int)udRX2FilterLow.Value);

            /*if(udFilterLow.Focused)
                btnHidden.Focus();*/
        }

        private void udRX2FilterHigh_ValueChanged(object sender, System.EventArgs e)
        {
            if (udRX2FilterHigh.Focused)
            {
                if (udRX2FilterHigh.Value <= udRX2FilterLow.Value + 10)
                {
                    udRX2FilterHigh.Value = udRX2FilterLow.Value + 10;
                    return;
                }

                UpdateRX2Filters((int)udRX2FilterLow.Value, (int)udRX2FilterHigh.Value);

                if (!save_filter_changes)
                    rx2_filters[(int)rx2_dsp_mode].SetHigh(rx2_filter, (int)udRX2FilterHigh.Value);
            }

            if (save_filter_changes && rx2_filter >= Filter.F1 && rx2_filter <= Filter.VAR2)
                rx2_filters[(int)rx2_dsp_mode].SetHigh(rx2_filter, (int)udRX2FilterHigh.Value);

            /*if(udFilterHigh.Focused)
                btnHidden.Focus();*/
        }

        private void chkRX2ANF_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRX2ANF.Checked) chkRX2ANF.BackColor = button_selected_color;
            else chkRX2ANF.BackColor = SystemColors.Control;
            radio.GetDSPRX(1, 0).AutoNotchFilter = chkRX2ANF.Checked;
            radio.GetDSPRX(1, 1).AutoNotchFilter = chkRX2ANF.Checked;
            //cat_anf_status = Convert.ToInt32(chkRX2ANF.Checked);
            aNF2ToolStripMenuItem.Checked = chkRX2ANF.Checked;
        }

        private void chkRX2BIN_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRX2BIN.Checked) chkRX2BIN.BackColor = button_selected_color;
            else chkRX2BIN.BackColor = SystemColors.Control;
            radio.GetDSPRX(1, 0).BinOn = chkRX2BIN.Checked;
            radio.GetDSPRX(1, 1).BinOn = chkRX2BIN.Checked;
            bIN2ToolStripMenuItem.Checked = chkRX2BIN.Checked;
        }

        private void comboRX2MeterMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboRX2MeterMode.Items.Count == 0 ||
                comboRX2MeterMode.SelectedIndex < 0)
            {
                rx2_meter_mode = MeterRXMode.FIRST;
            }
            else
            {
                MeterRXMode mode = MeterRXMode.FIRST;
                switch (comboRX2MeterMode.Text)
                {
                    case "Signal":
                        mode = MeterRXMode.SIGNAL_STRENGTH;
                        break;
                    case "Sig Avg":
                        rx2_meter_avg = Display.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_AVERAGE;
                        break;
                    case "ADC L":
                        mode = MeterRXMode.ADC_L;
                        break;
                    case "ADC R":
                        mode = MeterRXMode.ADC_R;
                        break;
                    case "ADC2 L":
                        mode = MeterRXMode.ADC2_L;
                        break;
                    case "ADC2 R":
                        mode = MeterRXMode.ADC2_R;
                        break;
                    case "Off":
                        mode = MeterRXMode.OFF;
                        break;
                }
                rx2_meter_mode = mode;

                if (collapsedDisplay)
                {
                    switch (mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_AVERAGE:
                            lblRX2Meter.Text = "  1   3   5   7   9  +20 +40 +60";
                            break;
                        case MeterRXMode.ADC_L:
                        case MeterRXMode.ADC_R:
                            lblRX2Meter.Text = "-100  -80   -60   -40   -20    0";
                            break;
                        case MeterRXMode.OFF:
                            lblRX2Meter.Text = "";
                            break;
                    }
                }
                else
                {
                    switch (mode)
                    {
                        case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_AVERAGE:
                            lblRX2Meter.Text = "  1   3   5   7   9  +20 +40 +60";
                            break;
                        case MeterRXMode.ADC_L:
                        case MeterRXMode.ADC_R:
                            lblRX2Meter.Text = "-100  -80   -60   -40   -20    0";
                            break;
                        case MeterRXMode.OFF:
                            lblRX2Meter.Text = "";
                            break;
                    }
                }
                ResetRX2MeterPeak();
            }

            picRX2Meter.Invalidate();

            if (comboRX2MeterMode.Focused)
                btnHidden.Focus();
        }

        private void chkRX2Preamp_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRX2Preamp.Checked)
            {
                chkRX2Preamp.BackColor = button_selected_color;
                // RX2PreampMode = PreampMode.HPSDR_ON;
            }
            else
            {
                chkRX2Preamp.BackColor = SystemColors.Control;
                //  RX2PreampMode = PreampMode.HPSDR_OFF;
            }

        }

        private void ptbRX2RF_Scroll(object sender, System.EventArgs e)
        {
            //  lblRX2RF.Text = "AGC-T:  " + ptbRX2RF.Value.ToString();
            /*  switch (RX2AGCMode)
              {
                  case AGCMode.FIXD:
                      radio.GetDSPRX(1, 0).RXFixedAGC = (double)ptbRX2RF.Value;
                      radio.GetDSPRX(1, 1).RXFixedAGC = (double)ptbRX2RF.Value;
                      rx2_fixed_gain = ptbRX2RF.Value;
                      break;
                  default:
                      radio.GetDSPRX(1, 0).RXAGCMaxGain = (double)ptbRX2RF.Value;
                      radio.GetDSPRX(1, 1).RXAGCMaxGain = (double)ptbRX2RF.Value;
                      rx2_max_gain = ptbRX2RF.Value;
                      break;
              }*/
            //  lblRF.Text = "AGC-T:  " + ptbRF.Value.ToString();

            switch (RX2AGCMode)
            {
                case AGCMode.FIXD:
                    lblRX2RF.Text = "Fixed Gain:  " + ptbRX2RF.Value.ToString();
                    if (SetupForm != null) SetupForm.AGCRX2FixedGain = ptbRX2RF.Value;
                    break;
                default:
                    lblRX2RF.Text = "AGC Gain:  " + ptbRX2RF.Value.ToString();
                    if (SetupForm != null) SetupForm.AGCRX2MaxGain = ptbRX2RF.Value;
                    break;
            }

            rx2_agct_by_band[(int)rx2_band] = ptbRX2RF.Value;
            // if (ptbRX2RF.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX2RF.Focus();
            }

            //-W2PA Update LEDs on Behringer MIDI controller
            double pct = Convert.ToDouble(ptbRX2RF.Value - ptbRX2RF.Minimum) / Convert.ToDouble(ptbRX2RF.Maximum - ptbRX2RF.Minimum);
            Midi2Cat.SendUpdateToMidi(CatCmd.RX2AGCLevel_inc, pct);
        }

        private void chkRX2Squelch_CheckedChanged(object sender, System.EventArgs e)
        {
            if (initializing) return;

            if (chkRX2Squelch.Checked) chkRX2Squelch.BackColor = button_selected_color;
            else chkRX2Squelch.BackColor = SystemColors.Control;

            if (chkRX2Squelch.Checked)
            {
                switch (rx2_dsp_mode)
                {
                    case DSPMode.FM:
                        radio.GetDSPRX(1, 0).RXAMSquelchOn = false;
                        radio.GetDSPRX(1, 1).RXAMSquelchOn = false;
                        radio.GetDSPRX(1, 0).RXFMSquelchOn = true;
                        radio.GetDSPRX(1, 1).RXFMSquelchOn = true;
                        break;
                    default:
                        radio.GetDSPRX(1, 0).RXFMSquelchOn = false;
                        radio.GetDSPRX(1, 1).RXFMSquelchOn = false;
                        radio.GetDSPRX(1, 0).RXAMSquelchOn = true;
                        radio.GetDSPRX(1, 1).RXAMSquelchOn = true;
                        break;
                }
            }
            else
            {
                radio.GetDSPRX(1, 0).RXFMSquelchOn = false;
                radio.GetDSPRX(1, 1).RXFMSquelchOn = false;
                radio.GetDSPRX(1, 0).RXAMSquelchOn = false;
                radio.GetDSPRX(1, 1).RXAMSquelchOn = false;
            }

            if (rx2_dsp_mode == DSPMode.FM) rx2_fm_squelch_on = chkRX2Squelch.Checked;
            // else rx2_squelch_on = chkRX2Squelch.Checked;
        }

        private void ptbRX2Squelch_Scroll(object sender, System.EventArgs e)
        {
            chkRX2Squelch.Text = "SQL:  " + ptbRX2Squelch.Value.ToString();

            if (rx2_dsp_mode == DSPMode.FM)
            {
                radio.GetDSPRX(1, 0).FMSquelchThreshold = (float)Math.Pow(10.0, -2 * ptbRX2Squelch.Value / 100.0);
                radio.GetDSPRX(1, 1).FMSquelchThreshold = (float)Math.Pow(10.0, -2 * ptbRX2Squelch.Value / 100.0);
            }
            else
            {
                radio.GetDSPRX(1, 0).RXSquelchThreshold = ((float)ptbRX2Squelch.Value -
                    rx2_meter_cal_offset -
                    rx2_preamp_offset[(int)rx2_preamp_mode] -
                    //rx2_filter_size_cal_offset -
                    rx2_path_offset);

                radio.GetDSPRX(1, 1).RXSquelchThreshold = ((float)ptbRX2Squelch.Value -
                    rx2_meter_cal_offset -
                    rx2_preamp_offset[(int)rx2_preamp_mode] -
                    //rx2_filter_size_cal_offset -
                    rx2_path_offset);
            }

            // if (ptbRX2Squelch.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX2Squelch.Focus();
            }
        }

        private void picRX2Squelch_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int signal_x = (int)((rx2_sql_data + 160.0) * (picRX2Squelch.Width - 1) / 160.0);
            int sql_x = (int)(((float)ptbRX2Squelch.Value + 160.0) * (picRX2Squelch.Width - 1) / 160.0);

            e.Graphics.FillRectangle(Brushes.LimeGreen, 0, 0, signal_x, picRX2Squelch.Height);
            if (sql_x < signal_x)
                e.Graphics.FillRectangle(Brushes.Red, sql_x + 1, 0, signal_x - sql_x - 1, picRX2Squelch.Height);
        }

        private void chkRX1Preamp_CheckedChanged(object sender, System.EventArgs e)
        {
            // if (!fwc_init || current_model != Model.FLEX5000) return;
            if (chkRX1Preamp.Checked)
            {
                chkRX1Preamp.BackColor = button_selected_color;
                chkRX1Preamp.Text = "On";
                RX1PreampMode = PreampMode.HPSDR_ON;
            }
            else
            {
                chkRX1Preamp.BackColor = SystemColors.Control;
                chkRX1Preamp.Text = "Off";
                RX1PreampMode = PreampMode.HPSDR_OFF;
            }
        }

        private void ptbRX2Pan_Scroll(object sender, System.EventArgs e)
        {
            float val = (int)ptbRX2Pan.Value / 100.0f;
            radio.GetDSPRX(1, 0).Pan = val;

            // if (ptbRX2Pan.Focused)
            // btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX2Pan.Focus();
            }
        }

        private void ptbRX2Gain_Scroll(object sender, System.EventArgs e)
        {
            // if (chkRX2Mute.Checked) chkRX2Mute.Checked = false; ;
            radio.GetDSPRX(1, 0).RXOutputGain = (double)ptbRX2Gain.Value / ptbRX2Gain.Maximum;
            ptbRX2AF.Value = ptbRX2Gain.Value;
            lblRX2AF.Text = "RX2 AF:  " + ptbRX2Gain.Value.ToString();

            // if (ptbRX2Gain.Focused)
            // btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX2Gain.Focus();
            }

            //-W2PA Update LEDs on Behringer MIDI controller
            double pct = Convert.ToDouble(ptbRX2AF.Value - ptbRX2AF.Minimum) / Convert.ToDouble(ptbRX2AF.Maximum - ptbRX2AF.Minimum);
            Midi2Cat.SendUpdateToMidi(CatCmd.VolumeVfoB_inc, pct);
        }

        private void chkRX2Mute_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkRX2Mute.Checked)
            {
                Audio.MuteRX2 = true;
                //  radio.GetDSPRX(1, 0).RXOutputGain = 0.0;
                lblRX2MuteVFOB.Text = "MUTE";
            }
            else
            {
                Audio.MuteRX2 = false;
                ptbRX2Gain_Scroll(this, EventArgs.Empty);
                lblRX2MuteVFOB.Text = "";
            }
            if (chkRX2Mute.Focused)
                btnHidden.Focus();

            if (path_Illustrator != null)
                path_Illustrator.pi_Changed();

        }

        private void comboRX2DisplayMode_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            switch (comboRX2DisplayMode.Text)
            {
                case "Spectrum":
                    Display.CurrentDisplayModeBottom = DisplayMode.SPECTRUM;
                    if (chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    break;
                case "Panadapter":
                    Display.CurrentDisplayModeBottom = DisplayMode.PANADAPTER;
                    if (chkSplitDisplay.Checked) CalcDisplayFreq();
                    break;
                case "Scope":
                    Display.CurrentDisplayModeBottom = DisplayMode.SCOPE;
                    break;
                case "Phase":
                    Display.CurrentDisplayModeBottom = DisplayMode.PHASE;
                    break;
                case "Phase2":
                    Display.CurrentDisplayModeBottom = DisplayMode.PHASE2;
                    break;
                case "Waterfall":
                    Display.CurrentDisplayModeBottom = DisplayMode.WATERFALL;
                    if (chkSplitDisplay.Checked) CalcDisplayFreq();
                    break;
                case "Histogram":
                    Display.CurrentDisplayModeBottom = DisplayMode.HISTOGRAM;
                    break;
                case "Off":
                    Display.CurrentDisplayModeBottom = DisplayMode.OFF;
                    break;
            }

            if (comboRX2DisplayMode.Focused)
                btnHidden.Focus();
        }

        private void chkRX2DisplayAVG_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.RX2AverageOn = chkRX2DisplayAVG.Checked;
            specRX.GetSpecRX(1).AverageOn = chkRX2DisplayAVG.Checked;

            if (chkRX2DisplayAVG.Checked)
            {
                chkRX2DisplayAVG.BackColor = button_selected_color;
            }
            else
            {
                chkRX2DisplayAVG.BackColor = SystemColors.Control;
            }

            /*if(chkRX2DisplayAVG.Checked)
            {
                switch(Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.WATERFALL:
                        btnZeroBeat.Enabled = true; // only allow zerobeat when avg is on 
                        break;
                    default:
                        btnZeroBeat.Enabled = false;
                        break;
                }
            }
            else btnZeroBeat.Enabled = false;*/
            RX2AVGToolStripMenuItem.Checked = chkRX2DisplayAVG.Checked;
        }

        private void chkRX2DisplayPeak_CheckedChanged(object sender, System.EventArgs e)
        {
            Display.RX2PeakOn = chkRX2DisplayPeak.Checked;
            specRX.GetSpecRX(1).PeakOn = chkRX2DisplayPeak.Checked;

            if (chkRX2DisplayPeak.Checked)
            {
                chkRX2DisplayPeak.BackColor = button_selected_color;
            }
            else
            {
                chkRX2DisplayPeak.BackColor = SystemColors.Control;
            }
            RX2PeakToolStripMenuItem.Checked = chkRX2DisplayPeak.Checked;
        }

        private void UpdateDSP()
        {
            int bufsizerx1 = 64, bufsizerx2 = 64, bufsizetx = 128;
            int filtsizerx1 = 4096, filtsizerx2 = 4096, filtsizetx = 4096;
            DSPFilterType filttyperx1 = DSPFilterType.Low_Latency;
            DSPFilterType filttyperx2 = DSPFilterType.Low_Latency;
            DSPFilterType filttypetx = DSPFilterType.Low_Latency;

            switch (rx1_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.USB:
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                    bufsizerx1 = dsp_buf_phone_rx;
                    filtsizerx1 = dsp_filt_size_phone_rx;
                    filttyperx1 = dsp_filt_type_phone_rx;
                    break;
                case DSPMode.FM:
                    bufsizerx1 = dsp_buf_fm_rx;
                    filtsizerx1 = dsp_filt_size_fm_rx;
                    filttyperx1 = dsp_filt_type_fm_rx;
                    break;
                case DSPMode.CWL:
                case DSPMode.CWU:
                    bufsizerx1 = dsp_buf_cw_rx;
                    filtsizerx1 = dsp_filt_size_cw_rx;
                    filttyperx1 = dsp_filt_type_cw_rx;
                    break;
                case DSPMode.DIGL:
                case DSPMode.DIGU:
                case DSPMode.DRM:
                    bufsizerx1 = dsp_buf_dig_rx;
                    filtsizerx1 = dsp_filt_size_dig_rx;
                    filttyperx1 = dsp_filt_type_dig_rx;
                    break;
            }

            switch (rx2_dsp_mode)
            {
                case DSPMode.LSB:
                case DSPMode.USB:
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                    bufsizerx2 = dsp_buf_phone_rx;
                    filtsizerx2 = dsp_filt_size_phone_rx;
                    filttyperx2 = dsp_filt_type_phone_rx;
                    break;
                case DSPMode.FM:
                    bufsizerx2 = dsp_buf_fm_rx;
                    filtsizerx2 = dsp_filt_size_fm_rx;
                    filttyperx2 = dsp_filt_type_fm_rx;
                    break;
                case DSPMode.CWL:
                case DSPMode.CWU:
                    bufsizerx2 = dsp_buf_cw_rx;
                    filtsizerx2 = dsp_filt_size_cw_rx;
                    filttyperx2 = dsp_filt_type_cw_rx;
                    break;
                case DSPMode.DIGL:
                case DSPMode.DIGU:
                case DSPMode.DRM:
                    bufsizerx2 = dsp_buf_dig_rx;
                    filtsizerx2 = dsp_filt_size_dig_rx;
                    filttyperx2 = dsp_filt_type_dig_rx;
                    break;
            }

            DSPMode mode = rx1_dsp_mode;
            if (chkVFOBTX.Checked) mode = rx2_dsp_mode;
            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.USB:
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                    bufsizetx = dsp_buf_phone_tx;
                    filtsizetx = dsp_filt_size_phone_tx;
                    filttypetx = dsp_filt_type_phone_tx;
                    break;
                case DSPMode.FM:
                    bufsizetx = dsp_buf_fm_tx;
                    filtsizetx = dsp_filt_size_fm_tx;
                    filttypetx = dsp_filt_type_fm_tx;
                    break;
                case DSPMode.CWL:
                case DSPMode.CWU:
                    break;
                case DSPMode.DIGL:
                case DSPMode.DIGU:
                case DSPMode.DRM:
                    bufsizetx = dsp_buf_dig_tx;
                    filtsizetx = dsp_filt_size_dig_tx;
                    filttypetx = dsp_filt_type_dig_rx;
                    break;
            }

            // buffer size
            if (radio.GetDSPRX(0, 0).BufferSize != bufsizerx1 ||
                radio.GetDSPRX(0, 1).BufferSize != bufsizerx1)
            {
                radio.GetDSPRX(0, 0).BufferSize = bufsizerx1;
                radio.GetDSPRX(0, 1).BufferSize = bufsizerx1;
            }

            if (radio.GetDSPRX(1, 0).BufferSize != bufsizerx2 ||
                radio.GetDSPRX(1, 1).BufferSize != bufsizerx2)
            {
                radio.GetDSPRX(1, 0).BufferSize = bufsizerx2;
                radio.GetDSPRX(1, 1).BufferSize = bufsizerx2;
            }

            if (radio.GetDSPTX(0).BufferSize != bufsizetx)
            {
                radio.GetDSPTX(0).BufferSize = bufsizetx;
            }

            // filter size
            if (radio.GetDSPRX(0, 0).FilterSize != filtsizerx1 ||
                radio.GetDSPRX(0, 1).FilterSize != filtsizerx1)
            {
                radio.GetDSPRX(0, 0).FilterSize = filtsizerx1;
                radio.GetDSPRX(0, 1).FilterSize = filtsizerx1;
            }

            if (radio.GetDSPRX(1, 0).FilterSize != filtsizerx2 ||
                radio.GetDSPRX(1, 1).FilterSize != filtsizerx2)
            {
                radio.GetDSPRX(1, 0).FilterSize = filtsizerx2;
                radio.GetDSPRX(1, 1).FilterSize = filtsizerx2;
            }

            if (radio.GetDSPTX(0).FilterSize != filtsizetx)
            {
                radio.GetDSPTX(0).FilterSize = filtsizetx;
            }

            // filter type
            if (radio.GetDSPRX(0, 0).FilterType != filttyperx1 ||
                radio.GetDSPRX(0, 1).FilterType != filttyperx1)
            {
                radio.GetDSPRX(0, 0).FilterType = filttyperx1;
                radio.GetDSPRX(0, 1).FilterType = filttyperx1;
            }

            if (radio.GetDSPRX(1, 0).FilterType != filttyperx2 ||
                radio.GetDSPRX(1, 1).FilterType != filttyperx2)
            {
                radio.GetDSPRX(1, 0).FilterType = filttyperx2;
                radio.GetDSPRX(1, 1).FilterType = filttyperx2;
            }

            if (radio.GetDSPTX(0).FilterType != filttypetx)
            {
                radio.GetDSPTX(0).FilterType = filttypetx;
            }

            UpdateRXSpectrumDisplayVars();
            UpdateTXSpectrumDisplayVars();
        }


        //private void UpdateDSPBufRX1()
        //{
        //    int size = 64;

        //    switch (rx1_dsp_mode)
        //    {
        //        case DSPMode.LSB:
        //        case DSPMode.USB:
        //        case DSPMode.DSB:
        //        case DSPMode.AM:
        //        case DSPMode.SAM:
        //            size = dsp_buf_phone_rx;
        //            break;
        //        case DSPMode.FM:
        //            size = dsp_buf_fm_rx;
        //            break;
        //        case DSPMode.CWL:
        //        case DSPMode.CWU:
        //            size = dsp_buf_cw_rx;
        //            break;
        //        case DSPMode.DIGL:
        //        case DSPMode.DIGU:
        //        case DSPMode.DRM:
        //            size = dsp_buf_dig_rx;
        //            break;
        //    }

        //    if (radio.GetDSPRX(0, 0).BufferSize != size ||
        //        radio.GetDSPRX(0, 1).BufferSize != size)
        //    {
        //bool poweron = PowerOn;
        //if (poweron)
        //{
        //            PowerOn = false;
        //}

        //        //WDSP.SetDSPBuffsize(WDSP.id(0, 0), size);
        //        //WDSP.SetDSPBuffsize(WDSP.id(0, 1), size);

        //        radio.GetDSPRX(0, 0).BufferSize = size;
        //        radio.GetDSPRX(0, 1).BufferSize = size;

        //if (!initializing)
        //{
        // RadioDSP.SyncStatic();

        //    for (int i = 0; i < 1; i++)
        //    {
        //        for (int j = 0; j < 2; j++)
        //        {
        //            RadioDSPRX dsp_rx = radio.GetDSPRX(i, j);
        //            dsp_rx.Update = false;
        //            dsp_rx.Force = true;
        //            dsp_rx.Update = true;
        //            dsp_rx.Force = false;
        //        }
        //    }

        //    for (int i = 0; i < 1; i++)
        //    {
        //        RadioDSPTX dsp_tx = radio.GetDSPTX(i);
        //        dsp_tx.Update = false;
        //        dsp_tx.Force = true;
        //        dsp_tx.Update = true;
        //        dsp_tx.Force = false;
        //    }
        //}

        //        UpdateRXSpectrumDisplayVars();
        //        if (poweron) PowerOn = true;
        //    }
        //}

        //private void UpdateDSPBufRX2()
        //{
        //    int size = 64;

        //    switch (rx2_dsp_mode)
        //    {
        //        case DSPMode.LSB:
        //        case DSPMode.USB:
        //        case DSPMode.DSB:
        //        case DSPMode.AM:
        //        case DSPMode.SAM:
        //            size = dsp_buf_phone_rx;
        //            break;
        //        case DSPMode.FM:
        //            size = dsp_buf_fm_rx;
        //            break;
        //        case DSPMode.CWL:
        //        case DSPMode.CWU:
        //            size = dsp_buf_cw_rx;
        //            break;
        //        case DSPMode.DIGL:
        //        case DSPMode.DIGU:
        //        case DSPMode.DRM:
        //            size = dsp_buf_dig_rx;
        //            break;
        //    }

        //    if (radio.GetDSPRX(1, 0).BufferSize != size ||
        //      radio.GetDSPRX(1, 1).BufferSize != size)
        //    {
        //bool poweron = PowerOn;
        //if (poweron)
        //{
        //            PowerOn = false;
        //            Thread.Sleep(100);
        //}

        //        // WDSP.SetDSPBuffsize(WDSP.id(0, 0), size);
        //        //WDSP.SetDSPBuffsize(WDSP.id(0, 1), size);

        //        radio.GetDSPRX(1, 0).BufferSize = size;
        //        radio.GetDSPRX(1, 1).BufferSize = size;

        //if (!initializing)
        //{
        //    RadioDSP.SyncStatic();

        //    for (int i = 1; i < 2; i++)
        //    {
        //        for (int j = 0; j < 2; j++)
        //        {
        //            RadioDSPRX dsp_rx = radio.GetDSPRX(i, 0);
        //            dsp_rx.Update = false;
        //            dsp_rx.Force = true;
        //            dsp_rx.Update = true;
        //            dsp_rx.Force = false;
        //        }
        //    }

        //    RadioDSPTX dsp_tx = radio.GetDSPTX(0);
        //    dsp_tx.Update = false;
        //    dsp_tx.Force = true;
        //    dsp_tx.Update = true;
        //    dsp_tx.Force = false;
        //}

        //        if (poweron) PowerOn = true;

        //    }
        //}

        //private void UpdateDSPBufTX()
        //{
        //    int size = 2048;
        //    DSPMode mode = rx1_dsp_mode;
        //    if (chkVFOBTX.Checked) mode = rx2_dsp_mode;
        //    switch (mode)
        //    {
        //        case DSPMode.LSB:
        //        case DSPMode.USB:
        //        case DSPMode.DSB:
        //        case DSPMode.AM:
        //        case DSPMode.SAM:
        //            size = dsp_buf_phone_tx;
        //            break;
        //        case DSPMode.FM:
        //            size = dsp_buf_fm_tx;
        //            break;
        //        case DSPMode.CWL:
        //        case DSPMode.CWU:
        //            size = dsp_buf_cw_tx;
        //            break;
        //        case DSPMode.DIGL:
        //        case DSPMode.DIGU:
        //        case DSPMode.DRM:
        //            size = dsp_buf_dig_tx;
        //            break;
        //    }

        //    if (radio.GetDSPTX(0).BufferSize != size)
        //    {
        //bool poweron = PowerOn;
        //if (poweron)
        //{
        // PowerOn = false;
        //    Thread.Sleep(100);
        //}

        //        radio.GetDSPTX(0).BufferSize = size;

        //if (!initializing)
        //{
        //    RadioDSP.SyncStatic();

        //    for (int i = 0; i < 2; i++)
        //    {
        //        for (int j = 0; j < 2; j++)
        //        {
        //            RadioDSPRX dsp_rx = radio.GetDSPRX(i, j);
        //            dsp_rx.Update = false;
        //            dsp_rx.Force = true;
        //            dsp_rx.Update = true;
        //            dsp_rx.Force = false;
        //        }
        //    }

        //    for (int i = 0; i < 1; i++)
        //    {
        //        RadioDSPTX dsp_tx = radio.GetDSPTX(i);
        //        dsp_tx.Update = false;
        //        dsp_tx.Force = true;
        //        dsp_tx.Update = true;
        //        dsp_tx.Force = false;
        //    }
        //}
        //        Thread.Sleep(100);
        //if (poweron) PowerOn = true;
        //    }
        //}

        private int dsp_buf_phone_rx = 64;
        public int DSPBufPhoneRX
        {
            get { return dsp_buf_phone_rx; }
            set
            {
                dsp_buf_phone_rx = value;
                UpdateDSP();
                //UpdateDSPBufRX2();
            }
        }

        private int dsp_buf_phone_tx = 64;
        public int DSPBufPhoneTX
        {
            get { return dsp_buf_phone_tx; }
            set
            {
                dsp_buf_phone_tx = value;
                UpdateDSP();
            }
        }

        private int dsp_buf_fm_rx = 256;
        public int DSPBufFMRX
        {
            get { return dsp_buf_fm_rx; }
            set
            {
                dsp_buf_fm_rx = value;
                UpdateDSP();
                // UpdateDSPBufRX2();
            }
        }

        private int dsp_buf_fm_tx = 128;
        public int DSPBufFMTX
        {
            get { return dsp_buf_fm_tx; }
            set
            {
                dsp_buf_fm_tx = value;
                UpdateDSP();
            }
        }

        private int dsp_buf_cw_rx = 64;
        public int DSPBufCWRX
        {
            get { return dsp_buf_cw_rx; }
            set
            {
                dsp_buf_cw_rx = value;
                UpdateDSP();
                //UpdateDSPBufRX2();
            }
        }

        private int dsp_buf_dig_rx = 64;
        public int DSPBufDigRX
        {
            get { return dsp_buf_dig_rx; }
            set
            {
                dsp_buf_dig_rx = value;
                UpdateDSP();
                // UpdateDSPBufRX2();
            }
        }

        private int dsp_buf_dig_tx = 64;

        private int dsp_filt_size_phone_rx = 4096;
        public int DSPFiltSizePhoneRX
        {
            get { return dsp_filt_size_phone_rx; }
            set
            {
                dsp_filt_size_phone_rx = value;
                UpdateDSP();
                //UpdateDSPFiltSizeRX2();
            }
        }

        private int dsp_filt_size_phone_tx = 4096;
        public int DSPFiltSizePhoneTX
        {
            get { return dsp_filt_size_phone_tx; }
            set
            {
                dsp_filt_size_phone_tx = value;
                UpdateDSP();
            }
        }

        private int dsp_filt_size_fm_rx = 4096;
        public int DSPFiltSizeFMRX
        {
            get { return dsp_filt_size_fm_rx; }
            set
            {
                dsp_filt_size_fm_rx = value;
                UpdateDSP();
                //UpdateDSPFiltSizeRX2();
            }
        }

        private int dsp_filt_size_fm_tx = 4096;
        public int DSPFiltSizeFMTX
        {
            get { return dsp_filt_size_fm_tx; }
            set
            {
                dsp_filt_size_fm_tx = value;
                UpdateDSP();
            }
        }

        private int dsp_filt_size_cw_rx = 4096;
        public int DSPFiltSizeCWRX
        {
            get { return dsp_filt_size_cw_rx; }
            set
            {
                dsp_filt_size_cw_rx = value;
                UpdateDSP();
                // UpdateDSPFiltSizeRX2();
            }
        }

        private int dsp_filt_size_dig_rx = 4096;
        public int DSPFiltSizeDigRX
        {
            get { return dsp_filt_size_dig_rx; }
            set
            {
                dsp_filt_size_dig_rx = value;
                UpdateDSP();
                //UpdateDSPFiltSizeRX2();
            }
        }

        private int dsp_filt_size_dig_tx = 4096;
        public int DSPFiltSizeDigTX
        {
            get { return dsp_filt_size_dig_tx; }
            set
            {
                dsp_filt_size_dig_tx = value;
                UpdateDSP();
            }
        }

        private DSPFilterType dsp_filt_type_phone_rx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypePhoneRX
        {
            get { return dsp_filt_type_phone_rx; }
            set
            {
                dsp_filt_type_phone_rx = value;
                UpdateDSP();
                // UpdateDSPFiltTypeRX2();
            }
        }

        private DSPFilterType dsp_filt_type_phone_tx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypePhoneTX
        {
            get { return dsp_filt_type_phone_tx; }
            set
            {
                dsp_filt_type_phone_tx = value;
                UpdateDSP();
            }
        }

        private DSPFilterType dsp_filt_type_fm_rx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypeFMRX
        {
            get { return dsp_filt_type_fm_rx; }
            set
            {
                dsp_filt_type_fm_rx = value;
                UpdateDSP();
                // UpdateDSPFiltTypeRX2();
            }
        }

        private DSPFilterType dsp_filt_type_fm_tx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypeFMTX
        {
            get { return dsp_filt_type_fm_tx; }
            set
            {
                dsp_filt_type_fm_tx = value;
                UpdateDSP();
            }
        }

        private DSPFilterType dsp_filt_type_cw_rx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypeCWRX
        {
            get { return dsp_filt_type_cw_rx; }
            set
            {
                dsp_filt_type_cw_rx = value;
                UpdateDSP();
                // UpdateDSPFiltTypeRX2();
            }
        }

        private DSPFilterType dsp_filt_type_dig_rx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypeDigRX
        {
            get { return dsp_filt_type_dig_rx; }
            set
            {
                dsp_filt_type_dig_rx = value;
                UpdateDSP();
                // UpdateDSPFiltTypeRX2();
            }
        }

        private DSPFilterType dsp_filt_type_dig_tx = DSPFilterType.Low_Latency;
        public DSPFilterType DSPFiltTypeDigTX
        {
            get { return dsp_filt_type_dig_tx; }
            set
            {
                dsp_filt_type_dig_tx = value;
                UpdateDSP();
            }
        }




        private void comboRX2Band_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboRX2Band.Focused)
            {
                string filter = "", mode = "";
                double freq = 0.0;
                bool CTUN;
                int ZoomFactor;
                double CenterFreq;
                bool b = false;
                switch (comboRX2Band.Text)
                {
                    case "160m":
                        b = DB.GetBandStack("160M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "80m":
                        b = DB.GetBandStack("80M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "60m":
                        b = DB.GetBandStack("60M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "40m":
                        b = DB.GetBandStack("40M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "30m":
                        b = DB.GetBandStack("30M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "20m":
                        b = DB.GetBandStack("20M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "17m":
                        b = DB.GetBandStack("17M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "15m":
                        b = DB.GetBandStack("15M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "12m":
                        b = DB.GetBandStack("12M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "10m":
                        b = DB.GetBandStack("10M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "6m":
                        b = DB.GetBandStack("6M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "GEN":
                        b = DB.GetBandStack("GEN", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                    case "WWV":
                        b = DB.GetBandStack("WWV", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                        break;
                }

                if (b)
                {
                    if (filter.Contains("@"))
                    {
                        filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                    }
                    VFOBFreq = freq;
                    RX2DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode);
                    VFOBFreq = freq;
                    RX2Filter = (Filter)Enum.Parse(typeof(Filter), filter);
                }

                btnHidden.Focus();
            }
        }

        //bool done_console_basis = false;
        int dpi = 0;
        SizeF base_size = new SizeF(0, 0);
        bool dpi_resize_done = false;
        //bool set_min_size = false;
        private void Console_Resize(object sender, System.EventArgs e)
        {
            //this.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);

            if (this.WindowState == FormWindowState.Minimized)
                return;
            pause_DisplayThread = true;
            if (dpi == 0)
                dpi = (int)picDisplay.CreateGraphics().DpiX;
            if (dpi > 96 && !dpi_resize_done)
            {
                if (base_size.Width == 0)
                    base_size = this.AutoScaleDimensions;

                if (this.AutoScaleDimensions != base_size)
                    dpi_resize_done = true;
                else return;
            }

            /*if(!done_console_basis)
            {
                GrabConsoleSizeBasis();
                done_console_basis = true;
                if(dpi > 96)
                {
                    ArrayList a = DB.GetVars("State");
                    foreach(string s in a)
                    {
                        string[] vals = s.Split('/');
                        string name = vals[0];
                        string val = vals[1];
						
                        switch(name)
                        {
                            case "console_width":
                                this.Width = int.Parse(val);
                                break;
                            case "console_height":
                                this.Height = int.Parse(val);
                                break;
                        }
                    }						
                }
            }

            if(!set_min_size)
            {
                int W = console_basis_size.Width;
                int H;

                if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                    H = console_basis_size.Height - (panelRX2Filter.Height+8);
                else 
                    H = console_basis_size.Height;
				
                this.MinimumSize = new Size(W, H);
                set_min_size = true;
            }*/

            if (this.Width < console_basis_size.Width && !this.collapsedDisplay)
            {
                this.Width = console_basis_size.Width;
                return;
            }

            if (chkRX2.Checked)
            {
                if (this.Height < console_basis_size.Height - (panelRX2Filter.Height + 8))
                    this.Height = console_basis_size.Height - (panelRX2Filter.Height + 8);
            }
            else if (this.Height < console_basis_size.Height && !this.collapsedDisplay)
            {
                this.Height = console_basis_size.Height;
                return;
            }

            int h_delta = this.Width - console_basis_size.Width;
            int v_delta = Math.Max(this.Height - console_basis_size.Height, 0);

            if (this.SetupForm != null)
            {
                if (this.collapsedDisplay)
                {
                    this.SetupForm.CollapsedWidth = this.Width;
                    this.SetupForm.CollapsedHeight = this.Height;
                }
                else
                {
                    if (this.SetupForm.CollapsedWidth == 0)
                        this.SetupForm.CollapsedWidth = console_basis_size.Width;
                    if (this.SetupForm.CollapsedHeight == 0)
                        this.SetupForm.CollapsedHeight =
                            (current_hpsdr_model == HPSDRModel.HPSDR || current_hpsdr_model == HPSDRModel.HERMES) ?
                                console_basis_size.Height - (panelRX2Filter.Height + 8) :
                                console_basis_size.Height;
                }
            }

            ResizeConsole(h_delta, v_delta);
            pause_DisplayThread = false;
        }

        private void comboRX2AGC_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (SetupForm == null) return;
            radio.GetDSPRX(1, 0).RXAGCMode = (AGCMode)comboRX2AGC.SelectedIndex;

            switch ((AGCMode)comboRX2AGC.SelectedIndex)
            {
                case AGCMode.LONG:
                    SetupForm.CustomRX2AGCEnabled = false;
                    SetupForm.tbDSPAGCRX2HangThreshold.Enabled = true;
                    // SetupForm.RX2AGCAttack = 2;
                    //  SetupForm.RX2AGCHang = 2000;
                    //  SetupForm.RX2AGCDecay = 2000;  
                    radio.GetDSPRX(1, 0).RXAGCHang = 2000;
                    radio.GetDSPRX(1, 0).RXAGCDecay = 2000;
                    SetupForm.SetAGCRX2HangThreshold = SetupForm.tbDSPAGCRX2HangThreshold.Value;
                    toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n" +
                        "Long (Attack 2ms, Hang 2000ms, Decay 2000ms)");
                    //comboRX2AGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.SLOW:
                    SetupForm.CustomRX2AGCEnabled = false;
                    SetupForm.tbDSPAGCRX2HangThreshold.Enabled = true;
                    //  SetupForm.RX2AGCAttack = 2;
                    //  SetupForm.RX2AGCHang = 1000;
                    //   SetupForm.RX2AGCDecay = 500;
                    radio.GetDSPRX(1, 0).RXAGCHang = 1000;
                    radio.GetDSPRX(1, 0).RXAGCDecay = 500;
                    SetupForm.SetAGCRX2HangThreshold = SetupForm.tbDSPAGCRX2HangThreshold.Value;
                    toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n" +
                        "Slow (Attack 2ms, Hang 1000ms, Decay 500ms)");
                    //comboRX2AGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.MED:
                    SetupForm.CustomRX2AGCEnabled = false;
                    SetupForm.tbDSPAGCRX2HangThreshold.Enabled = false;
                    // SetupForm.RX2AGCAttack = 2;
                    //  SetupForm.RX2AGCHang = 5000; // OFF
                    //  SetupForm.RX2AGCDecay = 250;
                    radio.GetDSPRX(1, 0).RXAGCHang = 0;
                    radio.GetDSPRX(1, 0).RXAGCDecay = 250;
                    toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n" +
                        "Medium (Attack 2ms, Hang OFF, Decay 250ms)");
                    //comboRX2AGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.FAST:
                    SetupForm.CustomRX2AGCEnabled = false;
                    SetupForm.tbDSPAGCRX2HangThreshold.Enabled = false;
                    // SetupForm.RX2AGCAttack = 2;
                    // SetupForm.RX2AGCHang = 5000; // OFF
                    // SetupForm.RX2AGCDecay = 50;
                    radio.GetDSPRX(1, 0).RXAGCHang = 0;
                    radio.GetDSPRX(1, 0).RXAGCDecay = 50;
                    toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n" +
                       "Fast (Attack 2ms, Hang OFF, Decay 50ms)");
                    //comboRX2AGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.CUSTOM:
                    SetupForm.CustomRX2AGCEnabled = true;
                    // SetupForm.AGCHangThreshold = 0;
                    // DttSP.SetRXAGCHangLevel(0, 0, 0.0);
                    SetupForm.tbDSPAGCRX2HangThreshold.Enabled = true;
                    SetupForm.SetAGCRX2HangThreshold = SetupForm.tbDSPAGCRX2HangThreshold.Value;

                    toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n" +
                        "Custom - Set specifics in Setup Form -> DSP -> AGC/ALC");
                    // comboRX2AGC.BackColor = SystemColors.Window;
                    break;
                case AGCMode.FIXD:
                    SetupForm.CustomRX2AGCEnabled = false;
                    toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n" +
                        "Fixed - Set gain with AGC-T control above");
                    //comboRX2AGC.BackColor = Color.Orange;
                    break;
            }

            // set RF control to Max or Fixed gain depending on mode
            switch ((AGCMode)comboRX2AGC.SelectedIndex)
            {
                case AGCMode.FIXD:
                    ptbRX2RF.Value = SetupForm.AGCRX2FixedGain;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
                    break;
                default:
                    ptbRX2RF.Value = SetupForm.AGCRX2MaxGain;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
                    break;
            }
        }

        private void chkVFOSync_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkVFOSync.Checked)
            {
                chkVFOSync.BackColor = button_selected_color;
                if (click_tune_display)
                    chkFWCATU.Checked = false;
                if (click_tune_rx2_display)
                    chkX2TR.Checked = false;

                // if (!initializing && RX2Enabled)
                //  {
                //    RX2DSPMode = RX1DSPMode;
                //    RX2Filter = RX1Filter;
                //  }
                // RX2PreampMode = RX1PreampMode;
                // console.RX2AGCMode = console.RX1AGCMode;    // no custom AGC mode for RX2 causes UHE
                //   RX2RF = RF;                 //W4TME
                //  radio.GetDSPRX(1, 0).Copy(radio.GetDSPRX(0, 0));

                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
            else
            {
                chkVFOSync.BackColor = SystemColors.Control;
            }
        }

        private bool mute_rx1_on_vfob_tx = true;
        public bool MuteRX1OnVFOBTX
        {
            get { return mute_rx1_on_vfob_tx; }
            set
            {
                mute_rx1_on_vfob_tx = value;
                if (chkVFOBTX.Checked)
                    Audio.FullDuplex = !value;
            }
        }

        private bool mute_rx2_on_vfoa_tx = true;
        public bool MuteRX2OnVFOATX
        {
            get { return mute_rx2_on_vfoa_tx; }
            set
            {
                mute_rx2_on_vfoa_tx = value;
                if (chkVFOATX.Checked)
                    Audio.RX2AutoMuteTX = value;
            }
        }

        private bool blank_rx1_on_vfob_tx = false;
        public bool BlankRX1OnVFOBTX
        {
            get { return blank_rx1_on_vfob_tx; }
            set
            {
                blank_rx1_on_vfob_tx = value;
                if (chkVFOBTX.Checked)
                    Audio.RX1BlankDisplayTX = value;
            }
        }
        private bool blank_rx2_on_vfoa_tx = false;
        public bool BlankRX2OnVFOATX
        {
            get { return blank_rx2_on_vfoa_tx; }
            set
            {
                blank_rx2_on_vfoa_tx = value;
                if (chkVFOATX.Checked)
                    Audio.RX2BlankDisplayTX = value;
            }
        }

        public int DSPBufDigTX
        {
            get { return dsp_buf_dig_tx; }
            set
            {
                dsp_buf_dig_tx = value;
                UpdateDSP();
            }
        }

        private void chkVFOATX_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkVFOATX.Focused && !chkVFOATX.Checked) chkVFOATX.Checked = true;
            if (chkVFOATX.Checked)
            {
                //psform.RXrcvr = 1;
                if (chkVFOBTX.Checked) chkVFOBTX.Checked = false;
                swap_vfo_ab_tx = false;
                cmaster.SetTXVAC(0, 0);
                if (KWAutoInformation)
                    BroadcastVFOChange("0");
                chkVFOATX.BackColor = Color.Red;//button_selected_color;
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                chkMON_CheckedChanged(this, EventArgs.Empty);

                if (chkVAC2.Checked && chkRX2.Checked)
                {
                    ptbVACRXGain.Value = vac_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac_sample_rate;

                    chkVACStereo.Checked = vac_stereo;
                }

                // EnableDup();
            }
            else
            {
                chkVFOATX.BackColor = SystemColors.Control;
            }
            btnHidden.Focus();
        }

        private bool psstate = false;
        public bool PSState
        {
            get { return psstate; }
            set
            {
                psstate = value;
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                //EnableDup();
            }
        }

        public void EnableDup()
        {
            if (RX2PreampPresent || (!RX2PreampPresent && !PSState))//!psform.PSEnabled))
                chkRX2SR.Visible = true;

            //if (!RX2PreampPresent && PSState) //psform.PSEnabled)
            //    DisableDup();

        }

        private void DisableDup()
        {
            chkRX2SR.Checked = false;
            chkRX2SR.Visible = false;
        }

        private void BroadcastVFOChange(string ndx)
        {
            string cmd = "ZZSW" + ndx + ";";
            try
            {
                siolisten.SIO.put(cmd);
            }
            catch { }
        }

        private void chkVFOBTX_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkVFOBTX.Focused && !chkVFOBTX.Checked) chkVFOBTX.Checked = true;
            Display.TXOnVFOB = chkVFOBTX.Checked;
            if (chkVFOBTX.Checked)
            {
                //psform.RXrcvr = 2;
                if (chkVFOATX.Checked) chkVFOATX.Checked = false;
                chkVFOBTX.BackColor = button_selected_color;

                if (VAC2onSplit && VAC2Enabled) cmaster.SetTXVAC(0, 1);
                else cmaster.SetTXVAC(0, 0);

                swap_vfo_ab_tx = true;
                if (KWAutoInformation)
                    BroadcastVFOChange("1");
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                chkMON_CheckedChanged(this, EventArgs.Empty);

                if (chkRX2.Checked)
                {
                    Audio.RX2AutoMuteTX = true;
                    Audio.FullDuplex = !mute_rx1_on_vfob_tx;
                    Audio.TXDSPMode = rx2_dsp_mode;
                    radio.GetDSPTX(0).CurrentDSPMode = rx2_dsp_mode;

                    SetRX2Mode(rx2_dsp_mode);
                    // Display.TXOnVFOB = true;
                    if (chkVFOSplit.Checked && chkRX2.Checked)
                        chkVFOSplit.Checked = false;

                    if (chkRX2.Checked && chkVAC2.Checked)
                    {
                        ptbVACRXGain.Value = vac2_rx_gain;
                        ptbVACRXGain_Scroll(this, EventArgs.Empty);

                        ptbVACTXGain.Value = vac2_tx_gain;
                        ptbVACTXGain_Scroll(this, EventArgs.Empty);

                        comboVACSampleRate.Text = vac2_sample_rate;

                        chkVACStereo.Checked = vac2_stereo;
                    }

                    //  DisableDup();
                }

                if (chkRX2.Checked == false && chkVFOBTX.Checked)    //in case of VU/XVTR-split error
                    chkVFOSplit.Checked = true;
            }
            else // button is unchecked
            {
                if (chkRX2.Checked)
                {
                    Audio.RX2AutoMuteTX = mute_rx2_on_vfoa_tx;
                    Audio.FullDuplex = false;

                    //Display.TXOnVFOB = false;

                    if (chkRX2.Checked && chkVAC2.Checked)
                    {
                        ptbVACRXGain.Value = vac_rx_gain;
                        ptbVACRXGain_Scroll(this, EventArgs.Empty);

                        ptbVACTXGain.Value = vac_tx_gain;
                        ptbVACTXGain_Scroll(this, EventArgs.Empty);

                        comboVACSampleRate.Text = vac_sample_rate;

                        chkVACStereo.Checked = vac_stereo;
                    }
                }

                if (chkRX2.Checked == false)
                    chkVFOSplit.Checked = false;
                Audio.TXDSPMode = rx1_dsp_mode;
                radio.GetDSPTX(0).CurrentDSPMode = rx1_dsp_mode;
                SetRX1Mode(rx1_dsp_mode);
            }

            Audio.VFOBTX = chkVFOBTX.Checked;
            btnHidden.Focus();
        }

        private void toolStripMenuItemRX1FilterConfigure_Click(object sender, EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC) return;

            if (filterRX1Form == null || filterRX1Form.IsDisposed)
                filterRX1Form = new FilterForm(this, rx1_filters, false);

            filterRX1Form.DSPMode = rx1_dsp_mode;
            filterRX1Form.CurrentFilter = rx1_filter;
            filterRX1Form.Show();
            filterRX1Form.Focus();
        }

        private void toolStripMenuItemRX1FilterReset_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX1 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx1_filters);

            radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
            radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
            radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
            radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
            radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
            radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
            radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
            radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
            radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
            radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
            radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
            radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
            RX1Filter = rx1_filter;

            if (filterRX1Form != null && !filterRX1Form.IsDisposed)
            {
                filterRX1Form.DSPMode = rx1_dsp_mode;
            }
        }

        private void toolStripMenuItemRX2FilterConfigure_Click(object sender, EventArgs e)
        {
            if (rx2_dsp_mode == DSPMode.DRM || rx2_dsp_mode == DSPMode.SPEC) return;

            if (filterRX2Form == null || filterRX2Form.IsDisposed)
                filterRX2Form = new FilterForm(this, rx2_filters, true);

            filterRX2Form.DSPMode = rx2_dsp_mode;
            filterRX2Form.CurrentFilter = rx2_filter;
            filterRX2Form.Show();
            filterRX2Form.Focus();
        }

        private Notch Context_Notch;
        private void toolStripNotchDelete_Click(Object sender, EventArgs e)
        {
            NotchList.RemoveNotch(Context_Notch);
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
        }

        private void toolStripNotchRemember_Click(object sender, EventArgs e)
        {
            Context_Notch.Permanent = !toolStripNotchRemember.Checked;
            toolStripNotchRemember.Checked = !toolStripNotchRemember.Checked;
            contextMenuStripNotch.Close();
        }

        private void toolStripNotchNormal_Click(object sender, EventArgs e)
        {
            Context_Notch.Depth = 1;
            toolStripNotchNormal.Checked = true;
            toolStripNotchDeep.Checked = false;
            toolStripNotchVeryDeep.Checked = false;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
        }

        private void toolStripNotchDeep_Click(object sender, EventArgs e)
        {
            Context_Notch.Depth = 2;
            toolStripNotchNormal.Checked = false;
            toolStripNotchDeep.Checked = true;
            toolStripNotchVeryDeep.Checked = false;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
        }

        private void toolStripNotchVeryDeep_Click(object sender, EventArgs e)
        {
            Context_Notch.Depth = 3;
            toolStripNotchNormal.Checked = false;
            toolStripNotchDeep.Checked = false;
            toolStripNotchVeryDeep.Checked = true;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
        }

        private void toolStripMenuItemRX2FilterReset_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX2 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx2_filters);

            radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
            radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
            radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
            radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
            radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
            radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
            radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
            radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
            radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
            RX2Filter = rx2_filter;

            if (filterRX2Form != null && !filterRX2Form.IsDisposed)
            {
                filterRX2Form.DSPMode = rx2_dsp_mode;
            }
        }

        private static bool TDxButtonState = false;
        private static bool TDxCurrentVFO = false; //VFOA

        private void timer_navigate_Tick(object sender, System.EventArgs e)
        {
            /*  if (TDxSensor == null)
                  return;
              TDxInput.Vector3D t = TDxSensor.Translation;
              TDxInput.AngleAxis r = TDxSensor.Rotation;
              TDxDevice.Keyboard.IsKeyDown(1);
              double del;
              int val;

              if (TDxDevice.Keyboard.IsKeyDown(1)) //Button 1 assignment
              {
                  TDxButtonState = true;
              }
              else if (TDxButtonState)
              {
                  TDxButtonState = false;
                  //click
                  TDxCurrentVFO = !TDxCurrentVFO;
              } 

              if (spacenav_controlvfos)
              {
                  del = Math.Exp(r.Angle / 10.0) - 1.0;
                  if (del >= 0.1)
                  {
                      del *= -Math.Sign(r.Y) / 1000000.0;
  #if false
                      if(current_click_tune_mode == ClickTuneMode.VFOB && scroll_vfob_on_split)
                          VFOBFreq += del;
                      else 
  #endif
                      if (TDxCurrentVFO)
                          VFOBFreq += del;
                      else
                          VFOAFreq += del;
                  }
              }
              if (spacenav_flypanadapter)
              {
                  if (Math.Abs(t.Z) > 1.0)
                  {
                      val = ptbDisplayZoom.Value;
                      val += Convert.ToInt32(t.Z);
                      val = Math.Min(ptbDisplayZoom.Maximum, val);
                      val = Math.Max(ptbDisplayZoom.Minimum, val);
                      ptbDisplayZoom.Value = val;
                      ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                      //btnDisplayPanCenter_Click(this, EventArgs.Empty);
                  }
                  if (Math.Abs(t.X) > 1.0)
                  {
                      val = ptbDisplayPan.Value;
                      val += Convert.ToInt32(t.X);
                      val = Math.Min(ptbDisplayPan.Maximum, val);
                      val = Math.Max(ptbDisplayPan.Minimum, val);
                      ptbDisplayPan.Value = val;
                      CalcDisplayFreq();
                      //if(ptbDisplayPan.Focused) btnHidden.Focus();
                  }
                  if (Math.Abs(t.Y) > 1.0)
                  {
                      val = ptbFilterWidth.Value;
                      val += Convert.ToInt32(t.Y);
                      val = Math.Min(ptbFilterWidth.Maximum, val);
                      val = Math.Max(ptbFilterWidth.Minimum, val);
                      ptbFilterWidth.Value = val;
                      ptbFilterWidth_Scroll(this.ptbFilterWidth, EventArgs.Empty);
                  }
              }*/
        }

        //public void PressKeyboardButton(Keys keyCode)
        //{
        //    const int KEYEVENTF_EXTENDEDKEY = 0x1;
        //    const int KEYEVENTF_KEYUP = 0x2;

        //    Win32.keybd_event((byte)keyCode, 0x45, KEYEVENTF_EXTENDEDKEY, 0);
        //    Win32.keybd_event((byte)keyCode, 0x45, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);
        //}

        //private HiPerfTimer t9 = new HiPerfTimer();

        /*private void buttonTS1_Click(object sender, EventArgs e)
        {
            ptbRF.Value = 0;
            ptbRF_Scroll(this, EventArgs.Empty);
            Application.DoEvents();
            Thread.Sleep(1000);

            ptbRF.Value = 120;
            ptbRF_Scroll(this, EventArgs.Empty);
        }*/

        public string getVersion()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
            string version = fvi.FileVersion.Substring(0, fvi.FileVersion.LastIndexOf("."));
            return version;
        }

        private void chkTNF_CheckedChanged(object sender, EventArgs e)
        {
            // UpdateRX1Notches();
            // UpdateRX1SubNotches();
            // UpdateRX2Notches();
            // Display.TNFActive = chkTNF.Checked;
            WDSP.RXANBPSetNotchesRun(WDSP.id(0, 0), chkTNF.Checked);
            WDSP.RXANBPSetNotchesRun(WDSP.id(0, 1), chkTNF.Checked);
            WDSP.RXANBPSetNotchesRun(WDSP.id(2, 0), chkTNF.Checked);
        }

        private int default_notch_width = 100;
        //MAX_NOTCHES_IN_PASSBAND is delcared in consoole.cs, wdsp.cs, and sdr.c, [sdrexport.h]
        private const int MAX_NOTCHES_IN_PASSBAND = 9;//18;     //used to be 9
        private const int MAX_NOTCHES_INITIALLY_IN_PASSBAND = 3;//;   //used to be 3
        private void btnTNFAdd_Click(object sender, EventArgs e)
        {
            // calculate the mid-point for the filter
            int low = radio.GetDSPRX(0, 0).RXFilterLow;
            int high = radio.GetDSPRX(0, 0).RXFilterHigh;
            int midpoint = (low + high) / 2;

            if (midpoint < -9999 || midpoint > 9999)
                throw new Exception("TNF: The filter limits [" + low + "," + high + "] do not make sense");

            double vfo = VFOAFreq;
            if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6; // check for RIT

            double rf_freq = vfo + midpoint * 1e-6;

            // if there's already another notch within 100Hz, then quit now
            if (NotchList.NotchNearFreq(rf_freq, 100))
                return;

            // if there's already 3+ filters within the RF window, quit now
            if (NotchList.NotchesInBW(VFOAFreq, low, high).Count >= 3)
                return;

            NotchList.List.Add(new Notch(rf_freq, default_notch_width));

            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
        }

        private void addNotch(int thread, int subrx, uint count, double freq, double bw)
        {
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                radio.GetDSPRX(thread, subrx).SetNotchFreq(count, freq);
                radio.GetDSPRX(thread, subrx).SetNotchBW(count, bw);
                radio.GetDSPRX(thread, subrx).SetNotchOn(count, true);
            }
        }

        private void UpdateRX1Notches()
        {
            if (!chkTNF.Checked)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 0).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOAFreq;
            if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6;

            switch (rx1_dsp_mode)
            {
                case (DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case (DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = radio.GetDSPRX(0, 0).RXFilterLow - 200;
            int high = radio.GetDSPRX(0, 0).RXFilterHigh + 200;

            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 0).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to MAX_NOTCHES_IN_PASSBAND notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = Math.Abs((n.Freq - vfo)) * 1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if (audio_freq > 0)
                        addNotch(0, 0, count++, audio_freq, n.BW);
                }

                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;
            }

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 0).SetNotchOn(i, false);
            }

            //  if (!chkPower.Checked)
            //    Display.DrawBackground();
        }

        private void UpdateRX1SubNotches()
        {
            if (!chkTNF.Checked || !chkEnableMultiRX.Checked)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 1).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOBFreq;
            if (rx2_enabled) vfo = VFOASubFreq;
            if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6;

            switch (rx1_dsp_mode)
            {
                case (DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case (DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = radio.GetDSPRX(0, 1).RXFilterLow;
            int high = radio.GetDSPRX(0, 1).RXFilterHigh;

            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 1).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to 3 notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = (n.Freq - vfo) * 1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if (audio_freq > 0)
                        addNotch(0, 1, count++, audio_freq, n.BW);
                }
                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;
            }

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(0, 1).SetNotchOn(i, false);
            }

            // if (!chkPower.Checked)
            //     Display.DrawBackground();
        }

        private void UpdateRX2Notches()
        {
            if (!chkTNF.Checked || !rx2_enabled)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(1, 0).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOBFreq;
            //if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6;

            switch (rx2_dsp_mode)
            {
                case (DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case (DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = radio.GetDSPRX(1, 0).RXFilterLow - 200;
            int high = radio.GetDSPRX(1, 0).RXFilterHigh + 200;

            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(1, 0).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to 9 notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = (n.Freq - vfo) * 1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if (audio_freq > 0)
                        addNotch(1, 0, count++, audio_freq, n.BW);
                }
                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;

            }

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    radio.GetDSPRX(1, 0).SetNotchOn(i, false);
            }

            //  if (!chkPower.Checked)
            //     Display.DrawBackground();
        }

        private void ptbFMMic_Scroll(object sender, EventArgs e)
        {
            ptbFMMic.Minimum = mic_gain_min;
            ptbFMMic.Maximum = mic_gain_max;
            lblMicValFM.Text = ptbFMMic.Value.ToString();
            if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
            {
                double gain_db = (double)ptbFMMic.Value;

                if (mic_boost)
                {
                    toolTip1.SetToolTip(ptbFMMic, (ptbFMMic.Value + 20).ToString());
                }
                else if (line_in)
                {
                    toolTip1.SetToolTip(ptbFMMic, (ptbFMMic.Value + line_in_boost).ToString());
                }
                else
                {
                    toolTip1.SetToolTip(ptbFMMic, "");
                }
                Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar
            }
            // if (ptbFMMic.Focused) btnHidden.Focus();
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbFMMic.Focus();
            }
        }

        private void chkFMCTCSS_CheckedChanged(object sender, EventArgs e)
        {
            CTCSSOn = chkFMCTCSS.Checked;
        }

        private void comboFMCTCSS_SelectedIndexChanged(object sender, EventArgs e)
        {
            CTCSSFreq = double.Parse(comboFMCTCSS.Text);
        }

        private void InitCTCSS()
        {
            comboFMCTCSS.Items.Clear();
            foreach (double d in CTCSS_array)
                comboFMCTCSS.Items.Add(d.ToString("f1"));
        }

        private void InitMemoryFrontPanel()
        {
            comboFMMemory.DataSource = MemoryList.List;
            comboFMMemory.DisplayMember = "Name";
            comboFMMemory.ValueMember = "Name";
        }

        private void radFMDeviation2kHz_CheckedChanged(object sender, EventArgs e)
        {
            if (radFMDeviation2kHz.Checked)
            {
                radio.GetDSPTX(0).TXFMDeviation = 2500;
                radio.GetDSPRX(0, 0).RXFMDeviation = 2500;
                if (RX1DSPMode == DSPMode.FM)
                {
                    UpdateRX1Filters(-4000, 4000);
                    if (current_display_engine == DisplayEngine.GDI_PLUS)
                        picDisplay.Invalidate();
                }
                if (RX2DSPMode == DSPMode.FM)
                {
                    UpdateRX2Filters(-4000, 4000);
                    if (current_display_engine == DisplayEngine.GDI_PLUS)
                        picDisplay.Invalidate();
                }
                if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
                {
                    SetTXFilters(DSPMode.FM, -4000, 4000);
                }
            }
        }

        private void radFMDeviation5kHz_CheckedChanged(object sender, EventArgs e)
        {
            if (radFMDeviation5kHz.Checked)
            {
                radio.GetDSPTX(0).TXFMDeviation = 5000;
                radio.GetDSPRX(0, 0).RXFMDeviation = 5000;
                if (RX1DSPMode == DSPMode.FM)
                {
                    UpdateRX1Filters(-8000, 8000);
                    if (current_display_engine == DisplayEngine.GDI_PLUS)
                        picDisplay.Invalidate();
                }
                if (RX2DSPMode == DSPMode.FM)
                {
                    UpdateRX2Filters(-8000, 8000);
                    if (current_display_engine == DisplayEngine.GDI_PLUS)
                        picDisplay.Invalidate();
                }
                if (radio.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
                {
                    SetTXFilters(DSPMode.FM, -8000, 8000);
                }
            }
        }

        private void udFMOffset_ValueChanged(object sender, EventArgs e)
        {
            fm_tx_offset_mhz = (double)udFMOffset.Value;
        }

        private void chkFMTXHigh_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXHigh.Checked)
            {
                chkFMTXSimplex.Checked = false;
                chkFMTXLow.Checked = false;

                chkFMTXRev.Enabled = true;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.High;
            }
        }

        private void chkFMTXSimplex_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXSimplex.Checked)
            {
                chkFMTXHigh.Checked = false;
                chkFMTXLow.Checked = false;

                chkFMTXRev.Enabled = false;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.Simplex;
            }
        }

        private void chkFMTXLow_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXLow.Checked)
            {
                chkFMTXSimplex.Checked = false;
                chkFMTXHigh.Checked = false;

                chkFMTXRev.Enabled = true;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.Low;
            }
        }

        private void chkFMTXRev_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXRev.Checked)
            {
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.Low:
                        VFOAFreq -= (fm_tx_offset_mhz);
                        break;
                    case FMTXMode.High:
                        VFOAFreq += (fm_tx_offset_mhz);
                        break;
                }
            }
            else
            {
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.Low:
                        VFOAFreq += (fm_tx_offset_mhz);
                        break;
                    case FMTXMode.High:
                        VFOAFreq -= (fm_tx_offset_mhz);
                        break;
                }
            }
        }

        private void chkFMMode_Click(object sender, EventArgs e)
        {
            switch (current_fm_tx_mode)
            {
                case FMTXMode.High:
                    chkFMTXHigh.Checked = true;
                    break;

                case FMTXMode.Simplex:
                    chkFMTXSimplex.Checked = true;
                    break;

                case FMTXMode.Low:
                    chkFMTXLow.Checked = true;
                    break;
            }
        }

        private bool ctcss_on = false;
        public bool CTCSSOn
        {
            get { return ctcss_on; }
            set
            {
                ctcss_on = value;
                if (chkFMCTCSS.Checked != value)
                    chkFMCTCSS.Checked = value;

                radio.GetDSPTX(0).CTCSSFlag = chkFMCTCSS.Checked;
            }
        }

        private double ctcss_freq = 100.0;
        public double CTCSSFreq
        {
            get { return ctcss_freq; }
            set
            {
                ctcss_freq = value;
                if (comboFMCTCSS.Text != ctcss_freq.ToString("f1"))
                {
                    comboFMCTCSS.Text = ctcss_freq.ToString("f1");
                    comboFMCTCSS_SelectedIndexChanged(this, EventArgs.Empty);
                }

                radio.GetDSPTX(0).CTCSSFreqHz = value;
            }
        }

        private void mnuMemory_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed)
                memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
        }

        public void RecallMemory(MemoryRecord record)
        {
            VFOAFreq = record.RXFreq;
            RX1DSPMode = record.DSPMode;
            VFOAFreq = record.RXFreq;
            TuneStepIndex = TuneStepLookup(record.TuneStep);

            if (record.DSPMode == DSPMode.FM)
            {
                CurrentFMTXMode = record.RPTR;
                FMTXOffsetMHz = record.RPTROffset;
                CTCSSOn = record.CTCSSOn;
                CTCSSFreq = record.CTCSSFreq;
                FMDeviation_Hz = record.Deviation;
            }
            else
            {
                TXFreq = record.TXFreq;
                RX1Filter = record.RXFilter;
                if (record.RXFilter == Filter.VAR1 || record.RXFilter == Filter.VAR2)
                    UpdateRX1Filters(record.RXFilterLow, record.RXFilterHigh);
            }

            PWR = record.Power;
            VFOSplit = record.Split;
            RX1AGCMode = record.AGCMode;
            RF = record.AGCT;
        }

        private void comboFMMemory_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;
            MemoryRecord recordToRestore = new MemoryRecord((MemoryRecord)comboFMMemory.SelectedItem);
            if (!initializing)
                RecallMemory(recordToRestore);
        }

        private void btnFMMemoryUp_Click(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;
            comboFMMemory.SelectedIndex = (comboFMMemory.SelectedIndex + 1) % comboFMMemory.Items.Count;
        }

        private void btnFMMemoryDown_Click(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;
            comboFMMemory.SelectedIndex = (comboFMMemory.SelectedIndex - 1 + comboFMMemory.Items.Count) % comboFMMemory.Items.Count;
        }

        public void changeComboFMMemory(int index)
        {
            if (comboFMMemory.Items.Count == 0) return;
            if (index < 0 || index > comboFMMemory.Items.Count - 1) return;

            if (comboFMMemory.SelectedIndex != index)
            {
                comboFMMemory.SelectedIndex = index;
            }
            else // memory is already set in combobox, recall it
            {
                MemoryRecord recordToRestore = new MemoryRecord((MemoryRecord)comboFMMemory.SelectedItem);
                RecallMemory(recordToRestore);
            }
        }

        private void btnFMMemory_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed)
                memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
        }

        private void timerNotchZoom_Tick(object sender, EventArgs e)
        {
            const int TOL = 10;

            timerNotchZoom.Enabled = false;
            if (notch_drag_max_delta_x < TOL &&
                notch_drag_max_delta_y < TOL)
            {
                Display.TNFZoom = true;
                notch_zoom = true;
                Display.NotchZoomStartFreq = notch_drag_start.Freq;
            }
        }

        private void setupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SetupForm == null || SetupForm.IsDisposed)
                SetupForm = new Setup(this);
            SetupForm.Show();
            SetupForm.Focus();
            SetFocusMaster(false);
        }

        private void memoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed)
                memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
            SetFocusMaster(false);
        }

        private void waveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (WaveForm.IsDisposed)
                WaveForm = new WaveControl(this);
            WaveForm.Show();
            WaveForm.Focus();
        }

        private void CollapseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.collapsedDisplay)
            {
                this.ExpandDisplay();
                isexpanded = true;
                iscollapsed = false;
            }
            else
            {
                this.CollapseDisplay();
                iscollapsed = true;
                isexpanded = false;
            }
        }

        private void equalizerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (EQForm == null || EQForm.IsDisposed)
                EQForm = new EQForm(this);
            EQForm.Show();
            EQForm.Focus();
        }

        private void xVTRsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (XVTRForm == null || XVTRForm.IsDisposed)
                XVTRForm = new XVTRForm(this);

            XVTRForm.Show();
            XVTRForm.Focus();
        }

        private void cWXToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.LSB)
                RX1DSPMode = DSPMode.CWL;
            else if (rx1_dsp_mode == DSPMode.USB)
                RX1DSPMode = DSPMode.CWU;

            if (rx1_dsp_mode != DSPMode.CWL &&
                rx1_dsp_mode != DSPMode.CWU)
            {
                MessageBox.Show("The radio must be in CWL or CWU mode in order to open the " +
                    "CWX Control Form.",
                    "CWX Error: Wrong Mode",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            //	cw_key_mode = true;
            if (CWXForm == null || CWXForm.IsDisposed)
            {
                CWXForm = new CWX(this);
            }

            CWXForm.Show();
            CWXForm.Focus();
        }

        public void DisableSR()
        {
            chkSR.Visible = false;
            chkSR.Checked = false;
            chkSR.Enabled = false;
        }

        public void EnableSR()
        {
            chkSR.Visible = true;
            chkSR.Enabled = true;
            chkSR.Checked = true;
        }

        private String[] on_off_preamp_settings = { "0dB", "-20dB" };
        private String[] anan100d_preamp_settings = { "0dB", "-10dB", "-20dB", "-30dB" };
        //private String[] alex_preamp_settings = { "0db", "-20db", "-10dB", "-20dB", "-30dB", "-40dB", "-50dB" };
        private String[] alex_preamp_settings = { "-10db", "-20db", "-30db", "-40db", "-50db" };

        public void SetComboPreampForHPSDR()
        {
            if (comboPreamp == null)
            {
                System.Console.WriteLine("preamp is null!!");
                return;
            }

            comboPreamp.Items.Clear();

            switch (current_hpsdr_model)
            {
                case HPSDRModel.HPSDR:
                    comboPreamp.Items.AddRange(on_off_preamp_settings);
                    if (alexpresent)
                    {
                        comboPreamp.Items.AddRange(alex_preamp_settings);
                    }

                    break;
                case HPSDRModel.HERMES:
                    if (alexpresent)
                    {
                        comboPreamp.Items.AddRange(on_off_preamp_settings);
                        comboPreamp.Items.AddRange(alex_preamp_settings);
                    }
                    else
                        comboPreamp.Items.AddRange(anan100d_preamp_settings);

                    break;
                case HPSDRModel.ANAN10:
                case HPSDRModel.ANAN10E:
                    comboPreamp.Items.AddRange(anan100d_preamp_settings);
                    break;
                case HPSDRModel.ANAN100:
                case HPSDRModel.ANAN100B:
                    comboPreamp.Items.AddRange(on_off_preamp_settings);
                    comboPreamp.Items.AddRange(alex_preamp_settings);
                    break;
                case HPSDRModel.ANAN100D:
                case HPSDRModel.ANAN200D:
                    if (alexpresent)
                    {
                        comboPreamp.Items.AddRange(on_off_preamp_settings);
                        comboPreamp.Items.AddRange(alex_preamp_settings);
                    }
                    else
                        comboPreamp.Items.AddRange(anan100d_preamp_settings);
                    break;
                case HPSDRModel.ANAN7000D:
                case HPSDRModel.ANAN8000D:
                case HPSDRModel.ORIONMKII:
                    comboPreamp.Items.AddRange(anan100d_preamp_settings);
                    break;
            }

            if (comboRX2Preamp != null)
            {
                comboRX2Preamp.Items.Clear();

                if (anan100dpresent || anan200dpresent || anan7000dpresent ||
                    anan8000dpresent || orionmkiipresent)
                    comboRX2Preamp.Items.AddRange(anan100d_preamp_settings);
                else
                    comboRX2Preamp.Items.AddRange(on_off_preamp_settings);

                RX2PreampMode = rx2_preamp_by_band[(int)rx2_band];
                comboRX2Preamp_SelectedIndexChanged(this, EventArgs.Empty);
                RX2AttenuatorData = rx2_step_attenuator_by_band[(int)rx2_band];
            }

            RX1PreampMode = rx1_preamp_by_band[(int)rx1_band];
            comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
            RX1AttenuatorData = rx1_step_attenuator_by_band[(int)rx1_band];
        }

        private string[] lineinboost = new string[32];
        private bool lineinarrayfill = false;
        private void MakeLineInList()
        {
            int k = 0;
            for (double i = -34.5; i <= 12; i += 1.5)
            {
                string s = i.ToString();
                lineinboost[k] = s;
                ++k;
            }
            lineinarrayfill = true;
        }

        private readonly byte[] Penny_TLV320 = new byte[2];
        private byte[] Penny_TLV320_data = new byte[18];
        public bool SetMicGain()
        {
            if ((chkPower.Checked) && (PennyPresent || pennylanepresent))
            {
                // if (HPSDRisMetis)
                // {
                var v = mic_boost ? 1 : 0;
                NetworkIO.SetMicBoost(v);

                v = line_in ? 1 : 0;
                NetworkIO.SetLineIn(v);

                if (!lineinarrayfill) MakeLineInList();

                var lineboost = Array.IndexOf(lineinboost, line_in_boost.ToString());

                NetworkIO.SetLineBoost(lineboost);
            }

            return true;
        }

        #region Collapsible Display

        // W1CEG:  Start
        ///////////////////////////////////////////////////////////////////////////////
        // Collapsible Display                                                        //
        ///////////////////////////////////////////////////////////////////////////////

        private bool show_rx1 = true;
        public bool ShowRX1
        {
            set { this.show_rx1 = value; }
        }

        private bool show_rx2 = false;
        public bool ShowRX2
        {
            set { this.show_rx2 = value; }
        }

        private Size expandedSize = new Size(0, 0);

        private bool collapsedDisplay = false;
        public bool CollapsedDisplay
        {
            get { return this.collapsedDisplay; }
        }

        private bool showTopControls = true;
        public bool ShowTopControls
        {
            set { this.showTopControls = value; }
        }

        private bool showBandControls = true;
        public bool ShowBandControls
        {
            set { this.showBandControls = value; }
        }

        private bool showModeControls = true;
        public bool ShowModeControls
        {
            set { this.showModeControls = value; }
        }

        private void mnuCollapse_Click(object sender, EventArgs e)
        {
            if (this.collapsedDisplay)
                this.ExpandDisplay();
            else
                this.CollapseDisplay();
        }

        private void ExpandDisplay()
        {
            this.collapseToolStripMenuItem.Text = "Collapse";
            this.collapsedDisplay = false;
            rX2ToolStripMenuItem.Visible = false;
            this.filterToolStripMenuItem.Visible = false;
            this.dSPToolStripMenuItem.Visible = false;
            this.displayControlsToolStripMenuItem.Visible = false;
            this.bandToolStripMenuItem.Visible = false;
            this.modeToolStripMenuItem.Visible = false;
            int minWidth = console_basis_size.Width;
            int minHeight = (current_hpsdr_model == HPSDRModel.HPSDR) ?
                console_basis_size.Height - (panelRX2Filter.Height + 8) :
                console_basis_size.Height;

            this.Size = this.expandedSize;
            this.MinimumSize = new Size(minWidth, minHeight);
            comboMeterRXMode_SelectedIndexChanged(this, EventArgs.Empty);
            comboRX2MeterMode_SelectedIndexChanged(this, EventArgs.Empty);
            comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);

            lblModeLabel.Hide();
            lblFilterLabel.Hide();
            lblRX2ModeLabel.Hide();
            lblRX2FilterLabel.Hide();
// added G8NJJ to display Andromeda encoder settings in title bar
            this.Text = TitleBar.GetString() + TitleBarMultifunction;

            chkMUT.Show();
            radRX1Show.Hide();
            radRX2Show.Hide();
            panelPower.Show();
            panelRX2Power.Show();
            grpVFOA.Show();
            grpVFOB.Show();
            grpVFOBetween.Show();
            grpMultimeter.Show();
            panelOptions.Show();
            panelSoundControls.Show();
            chkSquelch.Show();
            ptbSquelch.Show();
            picSquelch.Show();
            panelDateTime.Show();
            panelVFO.Show();
            panelDSP.Show();
            panelDisplay2.Show();
            panelMultiRX.Show();
            panelModeSpecificCW.Show();
            panelModeSpecificPhone.Show();
            panelModeSpecificDigital.Show();
            panelModeSpecificFM.Show();
            panelFilter.Show();
            panelMode.Show();
            panelBandHF.Show();
            //w3sz added lines below
            if (this.panelBandVHF.Visible)
            {
                btnBandVHF_Click(btnBandVHF, EventArgs.Empty);
            }
            else if (this.panelBandGEN.Visible)
            {
                btnBandGEN_Click(radBandGEN, EventArgs.Empty);
            }
            else
            {
                btnBandHF_Click(btnBandHF, EventArgs.Empty);
            }

            //w3sz section ends here
            // panelBandVHF.Show();

            // chkBCI.Hide();
            lblAF2.Hide();
            lblRF2.Hide();
            lblPWR2.Hide();
            //lblModeLabel.Show();
            //lblFilterLabel.Show();
            picMultiMeterDigital.Show();
            ptbAF.Show();
            ptbRF.Show();
            ptbPWR.Show();
            ptbRX1AF.Show();
            comboPreamp.Show();
            udRX1StepAttData.Show();
            comboAGC.Show();
            comboMeterRXMode.Show();
            txtMultiText.Show();

            //RX2 Controls
            chkRX2.Show();
            lblRX2Band.Show();
            comboRX2Band.Show();
            panelRX2Mixer.Show();
            lblRX2RF.Show();
            ptbRX2RF.Show();
            chkRX2Squelch.Show();
            ptbRX2Squelch.Show();
            picRX2Squelch.Show();
            panelRX2DSP.Show();
            panelRX2Display.Show();
            panelRX2Mode.Show();
            panelRX2Filter.Show();
            grpRX2Meter.Show();
            comboRX2AGC.Show();
            comboRX2MeterMode.Show();
            picRX2Meter.Show();
            panelRX2RF.Show();
            ptbRX2AF.Show();

            if (rx2_preamp_present)
            {
                comboRX2Preamp.Show();
                udRX2StepAttData.Show();
            }
            txtRX2Meter.Show();

            int h_delta = this.Width - console_basis_size.Width;
            int v_delta = Math.Max(this.Height - console_basis_size.Height, 0);

            grpVFOA.Location = new Point(gr_VFOA_basis_location.X + (h_delta / 4), gr_VFOA_basis_location.Y);
            grpVFOB.Location = new Point(gr_VFOB_basis_location.X + h_delta - (h_delta / 4), gr_VFOB_basis_location.Y);
            grpMultimeter.Size = gr_multi_meter_size_basis;
            picMultiMeterDigital.Parent = grpMultimeter;
            picMultiMeterDigital.Size = pic_multi_meter_size_basis;
            picMultiMeterDigital.Location = pic_multi_meter_digital_basis;
            lblMultiSMeter.Parent = grpMultimeter;
            lblMultiSMeter.Location = lbl_multi_smeter_basis;
            lblMultiSMeter.Size = lbl_multi_smeter_size_basis;
            picRX2Meter.Parent = grpRX2Meter;
            picRX2Meter.Location = pic_rx2meter_basis;
            picRX2Meter.Size = pic_rx2meter_size_basis;
            lblRX2Meter.Parent = grpRX2Meter;
            lblRX2Meter.Location = lbl_rx2meter_basis;
            lblRX2Meter.Size = lbl_rx2meter_size_basis;
            if (current_meter_display_mode == MultiMeterDisplayMode.Original)
            {
                picMultiMeterDigital.Height -= lblMultiSMeter.ClientSize.Height;
                picRX2Meter.Height -= lblRX2Meter.ClientSize.Height;
            }
            lblRX2RF.Parent = panelRX2RF;
            lblRX2RF.Location = lbl_rx2_rf_basis;
            txtMultiText.Parent = grpMultimeter;
            txtMultiText.Location = txt_multi_text_basis;
            txtRX2Meter.Parent = grpRX2Meter;
            txtRX2Meter.Location = txt_rx2meter_basis;
            comboMeterRXMode.Parent = grpMultimeter;
            comboMeterRXMode.Location = combo_meter_rxmode_basis;
            comboRX2MeterMode.Location = combo_rx2meter_mode_basis;
            comboRX2MeterMode.Parent = grpRX2Meter;
            comboRX2MeterMode.Location = combo_rx2meter_mode_basis;
            comboMeterTXMode.Parent = grpMultimeter;
            comboMeterTXMode.Location = combo_meter_txmode_basis;
            //txtMultiText.Show();
            chkPower.Parent = panelPower;
            chkPower.Location = chk_power_basis;
            chkRX2.Parent = panelPower;// panelRX2Power;
            chkRX2.Location = chk_rx2_enable_basis;
            chkMON.Parent = panelOptions;
            chkMON.Location = chk_mon_basis;
            chkMUT.Parent = panelDSP;
            chkMUT.Location = chk_mut_basis;

            chkMOX.Parent = panelOptions;
            chkMOX.Location = chk_mox_basis;
            chkTUN.Parent = panelOptions;
            chkTUN.Location = chk_tun_basis;

            chkRX2SR.Parent = panelOptions;
            chkRX2SR.Location = chk_dup_basis;

            chkFWCATU.Parent = panelDisplay2;
            chkFWCATU.Location = chk_ctun_basis;

            chkX2TR.Parent = panelRX2Display;
            chkX2TR.Location = chk_x2tr_basis;

            chkVOX.Parent = panelModeSpecificPhone;
            chkVOX.Location = chk_vox_basis;

            //lblAF.Parent = panelSoundControls;
            //lblAF.Location = lbl_af_basis;
            ptbAF.Parent = panelSoundControls;
            ptbAF.Location = tb_af_basis;
            ptbRX1AF.Parent = panelSoundControls;
            ptbRX1AF.Location = tb_rx1af_basis;
            ptbRX2AF.Parent = panelSoundControls;
            ptbRX2AF.Location = tb_rx2af_basis;
            ptbPWR.Parent = panelSoundControls;
            ptbPWR.Location = tb_pwr_basis;

            ptbRF.Parent = panelSoundControls;
            ptbRF.Location = tb_rf_basis;
            ptbRX2RF.Parent = panelRX2RF;
            ptbRX2RF.Location = tb_rx2_rf_basis;

            comboAGC.Parent = panelSoundControls;
            comboAGC.Location = combo_agc_basis;
            comboRX2AGC.Parent = panelRX2DSP;
            comboRX2AGC.Location = combo_rx2agc_basis;

            comboPreamp.Parent = panelSoundControls;
            comboPreamp.Location = combo_preamp_basis;
            udRX1StepAttData.Parent = panelSoundControls;
            udRX1StepAttData.Location = ud_rx1_step_att_present_data_basis;
            comboRX2Preamp.Parent = panelRX2Power;
            comboRX2Preamp.Location = combo_rx2_preamp_basis;
            udRX2StepAttData.Parent = panelRX2Power;
            udRX2StepAttData.Location = ud_rx2_step_att_present_data_basis;

            if (rx1_step_att_present)
            {
                // udRX1StepAttData.Location = ud_rx1_step_att_present_data_basis;
                udRX1StepAttData.BringToFront();
            }
            else
            {
                //   comboPreamp.Location = combo_preamp_basis;
                comboPreamp.BringToFront();
            }

            if (rx2_step_att_present)
            {
                // udRX2StepAttData.Location = ud_rx2_step_att_present_data_basis;
                udRX2StepAttData.BringToFront();
            }
            else
            {
                //  comboRX2Preamp.Location = combo_rx2_preamp_basis;
                comboRX2Preamp.BringToFront();
            }

            comboDisplayMode.Parent = panelDisplay2;
            comboDisplayMode.Location = combo_display_mode_basis;

            //btnDisplayPanCenter.Location = new Point(btn_display_pan_center_basis.X + (h_delta), btn_display_pan_center_basis.Y + v_delta);
            //ptbDisplayPan.Size = new Size(tb_display_pan_size_basis.Width + (h_delta), tb_display_pan_size_basis.Height);
            //ptbDisplayPan.Size = tb_display_pan_size_basis;
            //btnDisplayPanCenter.Location = new Point(ptbDisplayPan.Location.X + ptbDisplayPan.Width + 4, ptbDisplayPan.Location.Y);
            radDisplayZoom4x.Location = new Point(btn_display_zoom_4x_basis.X + h_delta, btn_display_zoom_4x_basis.Y + v_delta);
            radDisplayZoom2x.Location = new Point(btn_display_zoom_2x_basis.X + h_delta, btn_display_zoom_2x_basis.Y + v_delta);
            radDisplayZoom1x.Location = new Point(btn_display_zoom_1x_basis.X + h_delta, btn_display_zoom_1x_basis.Y + v_delta);
            radDisplayZoom05.Location = new Point(btn_display_zoom_05_basis.X + h_delta, btn_display_zoom_05_basis.Y + v_delta);
            ptbDisplayZoom.Location = new Point(tb_display_zoom_basis.X + h_delta, tb_display_zoom_basis.Y + v_delta);
            txtDisplayPeakFreq.Location = new Point(txt_display_peak_freq_basis.X + h_delta, txt_display_peak_freq_basis.Y + v_delta);
            txtDisplayPeakPower.Location = new Point(txt_display_peak_power_basis.X + h_delta, txt_display_peak_power_basis.Y + v_delta);
            txtDisplayPeakOffset.Location = new Point(txt_display_peak_offset_basis.X + h_delta, txt_display_peak_offset_basis.Y + v_delta);
            lblDisplayZoom.Location = new Point(lbl_display_zoom_basis.X + h_delta, lbl_display_zoom_basis.Y + v_delta);

            panelDisplay.Location = gr_display_basis;
            panelDisplay.Size = new Size(gr_display_size_basis.Width + h_delta, gr_display_size_basis.Height + v_delta);
            picDisplay.Location = pic_display_basis;
            picDisplay.Size = new Size(pic_display_size_basis.Width + h_delta, pic_display_size_basis.Height + v_delta);
            picWaterfall.Location = pic_waterfall_basis;
            picWaterfall.Size = new Size(pic_waterfall_size_basis.Width + h_delta, pic_waterfall_size_basis.Height + v_delta);
            txtOverload.Size = new Size(txtOverload_size_basis.Width + h_delta, txtOverload_size_basis.Height);
            txtOverload.Location = new Point(txtOverload_basis.X, txtOverload_basis.Y + v_delta);
            panelDisplay2.Location = new Point(gr_display2_basis.X + (h_delta / 2), gr_display2_basis.Y + v_delta);
            panelDSP.Location = new Point(gr_dsp_basis.X + (h_delta / 2), gr_dsp_basis.Y + v_delta);

            ptbDisplayPan.Size = tb_display_pan_size_basis;
            ptbDisplayPan.Location = new Point(tb_displaypan_basis.X, tb_displaypan_basis.Y + v_delta);
            ptbDisplayZoom.Size = tb_display_zoom_size_basis;
            lblDisplayPan.Location = new Point(lbl_displaypan_basis.X, lbl_displaypan_basis.Y + v_delta);
            // ptbDisplayPan.Size = tb_display_pan_size_basis;
            btnDisplayPanCenter.Location = new Point(ptbDisplayPan.Location.X + ptbDisplayPan.Width + 4, ptbDisplayPan.Location.Y);
            txtDisplayCursorFreq.Location = new Point(txt_display_cursor_freq_basis.X, txt_display_cursor_freq_basis.Y + v_delta);
            txtDisplayCursorPower.Location = new Point(txt_display_cursor_power_basis.X, txt_display_cursor_power_basis.Y + v_delta);
            txtDisplayCursorOffset.Location = new Point(txt_display_cursor_offset_basis.X, txt_display_cursor_offset_basis.Y + v_delta);

            txtDisplayOrionMKIIPAVolts.Location = new Point(txt_display_orion_mkii_pa_volts_basis.X, txt_display_orion_mkii_pa_volts_basis.Y + v_delta);
            txtDisplayOrionMKIIBlank.Location = new Point(txt_display_orion_mkii_blank_basis.X, txt_display_orion_mkii_blank_basis.Y + v_delta);
            txtDisplayOrionMKIIPAAmps.Location = new Point(txt_display_orion_mkii_pa_amps_basis.X, txt_display_orion_mkii_pa_amps_basis.Y + v_delta);

            // :NOTE: Force update on pan control
            ptbDisplayPan.Value = ptbDisplayPan.Value;
            ptbDisplayPan_Scroll(this, EventArgs.Empty);

            // :NOTE: Force update on zoom control
            ptbDisplayZoom.Value = ptbDisplayZoom.Value;
            ptbDisplayZoom_Scroll(this, EventArgs.Empty);

            panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, gr_BandHF_basis_location.Y + (v_delta / 4));
            panelBandHF.Size = gr_BandHF_basis_size;
            radBand160.Location = rad_band160_basis;
            radBand80.Location = rad_band80_basis;
            radBand60.Location = rad_band60_basis;
            radBand40.Location = rad_band40_basis;
            radBand30.Location = rad_band30_basis;
            radBand20.Location = rad_band20_basis;
            radBand17.Location = rad_band17_basis;
            radBand15.Location = rad_band15_basis;
            radBand12.Location = rad_band12_basis;
            radBand10.Location = rad_band10_basis;
            radBand6.Location = rad_band6_basis;
            radBand2.Location = rad_band2_basis;
            radBandWWV.Location = rad_bandwwv_basis;
            radBandGEN.Location = rad_bandgen_basis;
            btnBandVHF.Location = btn_bandVHF_basis;//w3sz

            panelBandGEN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, gr_BandGEN_basis_location.Y + (v_delta / 4));
            panelBandGEN.Size = gr_BandGEN_basis_size;
            radBandGEN0.Location = rad_bandGEN0_basis;
            radBandGEN1.Location = rad_bandGEN1_basis;
            radBandGEN2.Location = rad_bandGEN2_basis;
            radBandGEN3.Location = rad_bandGEN3_basis;
            radBandGEN4.Location = rad_bandGEN4_basis;
            radBandGEN5.Location = rad_bandGEN5_basis;
            radBandGEN6.Location = rad_bandGEN6_basis;
            radBandGEN7.Location = rad_bandGEN7_basis;
            radBandGEN8.Location = rad_bandGEN8_basis;
            radBandGEN9.Location = rad_bandGEN9_basis;
            radBandGEN10.Location = rad_bandGEN10_basis;
            radBandGEN11.Location = rad_bandGEN11_basis;
            radBandGEN12.Location = rad_bandGEN12_basis;
            radBandGEN13.Location = rad_bandGEN13_basis;
            btnBandHF1.Location = btn_bandHF1_basis;

            panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, gr_BandVHF_basis_location.Y + (v_delta / 4));
            panelBandVHF.Size = gr_BandVHF_basis_size;
            radBandVHF0.Location = rad_bandVHF0_basis;
            radBandVHF1.Location = rad_bandVHF1_basis;
            radBandVHF2.Location = rad_bandVHF2_basis;
            radBandVHF3.Location = rad_bandVHF3_basis;
            radBandVHF4.Location = rad_bandVHF4_basis;
            radBandVHF5.Location = rad_bandVHF5_basis;
            radBandVHF6.Location = rad_bandVHF6_basis;
            radBandVHF7.Location = rad_bandVHF7_basis;
            radBandVHF8.Location = rad_bandVHF8_basis;
            radBandVHF9.Location = rad_bandVHF9_basis;
            radBandVHF10.Location = rad_bandVHF10_basis;
            radBandVHF11.Location = rad_bandVHF11_basis;
            radBandVHF12.Location = rad_bandVHF12_basis;
            radBandVHF13.Location = rad_bandVHF13_basis;
            btnBandHF.Location = btn_bandHF_basis;//w3sz

            panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, gr_Mode_basis_location.Y + (v_delta / 2));
            panelMode.Size = gr_Mode_basis_size;
            radModeLSB.Location = rad_mode_lsb_basis;
            radModeUSB.Location = rad_mode_usb_basis;
            radModeDSB.Location = rad_mode_dsb_basis;
            radModeCWL.Location = rad_mode_cwl_basis;
            radModeCWU.Location = rad_mode_cwu_basis;
            radModeFMN.Location = rad_mode_fmn_basis;
            radModeAM.Location = rad_mode_am_basis;
            radModeSAM.Location = rad_mode_sam_basis;
            radModeSPEC.Location = rad_mode_spec_basis;
            radModeDIGL.Location = rad_mode_digl_basis;
            radModeDIGU.Location = rad_mode_digu_basis;
            radModeDRM.Location = rad_mode_drm_basis;
        }

        public void CollapseDisplay()
        {
            // Save expanded display size
            if (!this.collapsedDisplay)
                this.expandedSize = this.Size;

            this.collapseToolStripMenuItem.Text = "Expand";
            this.collapsedDisplay = true;
            this.rX2ToolStripMenuItem.Visible = true;
            this.dSPToolStripMenuItem.Visible = true;
            this.filterToolStripMenuItem.Visible = true;
            this.displayControlsToolStripMenuItem.Visible = true;
            this.bandToolStripMenuItem.Visible = !SetupForm.chkShowBandControls.Checked;
            this.modeToolStripMenuItem.Visible = !SetupForm.chkShowModeControls.Checked;
            int minWidth = 600;
            int minHeight = 210;
            // radRX1Show_CheckedChanged(this, EventArgs.Empty);
            // radRX2Show_CheckedChanged(this, EventArgs.Empty);
            // added G8NJJ to show encoder and multifunction encoder settings in the title bar
            this.Text = TitleBar.GetString() + TitleBarMultifunction + "    " + TitleBarEncoder;

            if (this.showTopControls)
            {
                minWidth = Math.Max(minWidth, console_basis_size.Width);
                if (show_rx1)
                {
                    minHeight += grpVFOA.Height + 10;
                }
                if (show_rx2)
                {
                    minHeight += grpVFOB.Height + 10;
                }
                comboMeterRXMode_SelectedIndexChanged(this, EventArgs.Empty);
                comboRX2MeterMode_SelectedIndexChanged(this, EventArgs.Empty);
                comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
            }

            if (this.showBandControls)
            {
                minWidth = Math.Max(minWidth, radBand160.Width * 14 + this.Width - this.ClientSize.Width);
                minHeight += 5 + radBand160.Height;
            }

            if (this.showModeControls)
            {
                minWidth = Math.Max(minWidth, radModeLSB.Width * 12 + this.Width - this.ClientSize.Width);
                minHeight += 5 + radModeLSB.Height;
            }

            this.MinimumSize = new Size(minWidth, minHeight);

            panelPower.Hide();
            panelRX2Power.Hide();
            panelOptions.Hide();
            panelSoundControls.Hide();
            chkSquelch.Hide();
            ptbSquelch.Hide();
            picSquelch.Hide();
            panelDateTime.Hide();
            panelVFO.Hide();
            panelDSP.Hide();
            panelDisplay2.Hide();
            panelMultiRX.Hide();
            panelModeSpecificCW.Hide();
            panelModeSpecificPhone.Hide();
            panelModeSpecificDigital.Hide();
            panelModeSpecificFM.Hide();
            panelFilter.Hide();
            if (panelBandHF.Visible)  //w3sz added
            {
                panelBandVHF.Hide();
                panelBandGEN.Hide();
            }
            else if (panelBandVHF.Visible)
            {
                panelBandHF.Hide();
                panelBandGEN.Hide();
            }
            else
            {
                panelBandHF.Hide();
                panelBandVHF.Hide();
            }

            // chkBCI.Hide();
            grpVFOBetween.Hide();
            // grpVFOB.Hide();
            grpMultimeter.Hide();
            //RX2 controls
            //chkRX2.Hide();
            //chkRX2Preamp.Hide();
            lblRX2Band.Hide();
            comboRX2Band.Hide();
            panelRX2Mixer.Hide();
            lblRX2RF.Hide();
            //ptbRX2RF.Hide();
            chkRX2Squelch.Hide();
            ptbRX2Squelch.Hide();
            picRX2Squelch.Hide();
            panelRX2DSP.Hide();
            panelRX2Display.Hide();
            panelRX2Mode.Hide();
            panelRX2Filter.Hide();
            grpRX2Meter.Hide();
            panelRX2RF.Hide();

            if (this.showTopControls)
            {
                comboPreamp.Parent = this;
                comboRX2Preamp.Parent = this;
                udRX1StepAttData.Parent = this;
                udRX2StepAttData.Parent = this;

                if (show_rx1)
                {
                    grpVFOA.Show();
                    grpVFOB.Hide();
                    chkPower.Parent = this;
                    chkPower.Show();
                    chkRX2.Parent = this;
                    chkRX2.Show();
                    radRX1Show.Parent = this;
                    radRX1Show.Show();
                    radRX2Show.Parent = this;
                    radRX2Show.Show();
                    // grpVFOBetween.Show();
                    //grpMultimeter.Show();
                    picMultiMeterDigital.Parent = this;
                    picMultiMeterDigital.Show();
                    // picRX2Meter.Parent = this;
                    picRX2Meter.Hide();
                    txtMultiText.Parent = this;
                    txtMultiText.Show();
                    // txtRX2Meter.Parent = this;
                    txtRX2Meter.Hide();

                    chkMON.Parent = this;
                    chkMON.Show();
                    //chkMUT.Parent = this;
                    chkMUT.Hide();
                    chkMOX.Parent = this;
                    chkMOX.Show();
                    chkTUN.Parent = this;
                    chkTUN.Show();

                    chkVOX.Parent = this;
                    chkVOX.Show();

                    chkRX2SR.Parent = this;
                    chkRX2SR.Show();
                    chkX2TR.Hide();
                    chkFWCATU.Parent = this;
                    chkFWCATU.Show();

                    //lblAF2.Parent = this;
                    lblAF2.Show();
                    lblRF2.Show();
                    lblPWR2.Show();
                    // ptbAF.Parent = this;
                    ptbAF.Hide();
                    ptbRX1AF.Parent = this;
                    ptbRX1AF.Show();
                    ptbPWR.Parent = this;
                    ptbPWR.Show();
                    // ptbRX2AF.Parent = this;
                    ptbRX2AF.Hide();
                    ptbRF.Parent = this;
                    ptbRF.Show();
                    ptbRX2RF.Hide();
                    comboAGC.Parent = this;
                    comboAGC.Show();
                    // comboRX2AGC.Parent = this;
                    comboRX2AGC.Hide();

                    comboRX2Preamp.Hide();
                    udRX2StepAttData.Hide();
                    // comboPreamp.Parent = this;
                    comboPreamp.Show();
                    // udRX1StepAttData.Parent = this;
                    udRX1StepAttData.Show();

                    // lblMultiSMeter.Parent = this;
                    lblMultiSMeter.Hide();
                    //lblRX2Meter.Hide();
                    comboMeterRXMode.Parent = this;
                    comboMeterRXMode.Show();
                    //combo2RXMeterMode.Parent = this;
                    comboRX2MeterMode.Hide();
                    comboMeterTXMode.Parent = this;
                    comboMeterTXMode.Show();

                    lblModeLabel.Show();
                    lblFilterLabel.Show();
                    lblRX2ModeLabel.Show();
                    lblRX2FilterLabel.Show();

                    if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                    {
                        // current_meter_display_mode = MultiMeterDisplayMode.Edge;
                        // SetupForm.comboMeterType.Text = "Edge";
                        //picMultiMeterDigital.Hide();
                        lblMultiSMeter.Parent = this;
                        picMultiMeterDigital.SendToBack();
                        lblMultiSMeter.Show();
                        lblMultiSMeter.BringToFront();
                    }
                    /*      picMultiMeterDigital.Hide();
                          lblMultiSMeter.Show();
                      }
                      else
                      {
                          picMultiMeterDigital.Parent = this;
                          picMultiMeterDigital.Show();
                          lblMultiSMeter.Hide();
                      }*/
                }
                if (show_rx2)
                {
                    grpVFOB.Show();
                    grpVFOA.Hide();

                    chkPower.Parent = this;
                    chkPower.Show();
                    chkRX2.Parent = this;
                    chkRX2.Show();
                    radRX1Show.Parent = this;
                    radRX1Show.Show();
                    radRX2Show.Parent = this;
                    radRX2Show.Show();
                    // grpVFOBetween.Show();
                    //grpMultimeter.Show();
                    // picMultiMeterDigital.Parent = this;
                    picMultiMeterDigital.Hide();
                    picRX2Meter.Parent = this;
                    picRX2Meter.Show();
                    // txtMultiText.Parent = this;
                    txtMultiText.Hide();
                    txtRX2Meter.Parent = this;
                    txtRX2Meter.Show();

                    chkMON.Parent = this;
                    chkMON.Show();
                    //chkMUT.Parent = this;
                    chkMUT.Hide();
                    chkMOX.Parent = this;
                    chkMOX.Show();
                    chkTUN.Parent = this;
                    chkTUN.Show();

                    chkRX2SR.Parent = this;
                    chkRX2SR.Show();
                    chkFWCATU.Hide();
                    chkX2TR.Parent = this;
                    chkX2TR.Show();

                    chkVOX.Parent = this;
                    chkVOX.Show();

                    //lblAF2.Parent = this;
                    lblAF2.Show();
                    lblRF2.Show();
                    lblPWR2.Show();
                    ptbPWR.Parent = this;
                    ptbPWR.Show();
                    // ptbAF.Parent = this;
                    ptbAF.Hide();
                    // ptbRX1AF.Parent = this;
                    ptbRX1AF.Hide();
                    ptbRX2AF.Parent = this;
                    ptbRX2AF.Show();
                    //ptbRF.Parent = this;
                    ptbRF.Hide();
                    ptbRX2RF.Parent = this;
                    ptbRX2RF.Show();
                    //comboAGC.Parent = this;
                    comboAGC.Hide();
                    comboRX2AGC.Parent = this;
                    comboRX2AGC.Show();

                    if (rx2_preamp_present)
                    {
                        comboPreamp.Hide();
                        udRX1StepAttData.Hide();
                        // comboRX2Preamp.Parent = this;
                        comboRX2Preamp.Show();
                        // udRX2StepAttData.Parent = this;
                        udRX2StepAttData.Show();
                    }
                    else
                    {
                        comboRX2Preamp.Hide();
                        udRX2StepAttData.Hide();
                        // comboPreamp.Parent = this;
                        comboPreamp.Show();
                        // udRX1StepAttData.Parent = this;
                        udRX1StepAttData.Show();
                    }
                    // lblMultiSMeter.Parent = this;
                    //lblMultiSMeter.Hide();
                    lblRX2Meter.Hide();
                    // comboMeterRXMode.Parent = this;
                    comboMeterRXMode.Hide();
                    comboRX2MeterMode.Parent = this;
                    comboRX2MeterMode.Show();

                    comboMeterTXMode.Parent = this;
                    comboMeterTXMode.Show();

                    lblModeLabel.Show();
                    lblFilterLabel.Show();

                    if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                    {
                        //current_meter_display_mode = MultiMeterDisplayMode.Edge;
                        //SetupForm.comboMeterType.Text = "Edge";
                        lblRX2Meter.Parent = this;
                        picRX2Meter.SendToBack();
                        lblRX2Meter.Show();
                        lblRX2Meter.BringToFront();
                    }
                    /*      picMultiMeterDigital.Hide();
                          lblMultiSMeter.Show();
                      }
                      else
                      {
                          picMultiMeterDigital.Parent = this;
                          picMultiMeterDigital.Show();
                          lblMultiSMeter.Hide();
                      }*/
                }
            }
            else
            {
                comboDisplayMode.Show();
                //chkPower.Hide();
                grpVFOBetween.Hide();
                grpMultimeter.Hide();
                lblAF2.Hide();
                lblRF2.Hide();
                lblPWR2.Hide();
                //radRX1Show.Hide();
                // radRX2Show.Hide();
            }

            if (this.showBandControls)
            {
                if (panelBandVHF.Visible)  //w3sz added
                {
                    panelBandVHF.Show();  //w3sz added "V"
                }
                else if (panelBandHF.Visible)
                {
                    panelBandHF.Show();  //w3sz
                }
                else
                {
                    panelBandGEN.Show();
                }
            }
            else //w3sz added
            {
                panelBandVHF.Hide(); //w3sz added "V"
                panelBandHF.Hide(); //w3sz added
                panelBandGEN.Hide();
            }

            if (this.showModeControls)
                panelMode.Show();
            else
                panelMode.Hide();

            RepositionControlsForCollapsedlDisplay();

            this.Size = new Size(SetupForm.CollapsedWidth,
                SetupForm.CollapsedHeight);
        }

        private void RepositionControlsForCollapsedlDisplay()
        {
            int top = 0;
            int h_delta = this.Width - console_basis_size.Width;
            int v_delta = Math.Max(this.Height - console_basis_size.Height, 0);

            if (showTopControls)
            {
                if (show_rx1)
                {
                    top = grpVFOA.Height + 10;
                    //top = grpMultimeter.Location.Y + grpMultimeter.Height + 5;
                    //grpVFOA.Location = new Point(gr_VFOA_basis_location.X + (h_delta / 4), gr_VFOA_basis_location.Y);
                    grpVFOA.Location = new Point((this.ClientSize.Width - grpVFOA.Width) / 2, gr_VFOA_basis_location.Y);
                    //grpVFOB.Location = new Point(gr_VFOB_basis_location.X + h_delta - (h_delta / 4), gr_VFOB_basis_location.Y);
                    txtMultiText.Location = new Point(((this.ClientSize.Width - (grpVFOA.Location.X + grpVFOA.Width)) -
                        (txtMultiText.Width / 12)) * 2, grpVFOA.Location.Y + 5);
                    // picMultiMeterDigital.Location = txtMultiText.Location;
                    // picMultiMeterDigital.Location = new Point(txtMultiText.Location.X, txtMultiText.Location.Y + txtMultiText.Height + 8);
                    picMultiMeterDigital.Size = new Size(pic_multi_meter_size_basis.Width * 2, pic_multi_meter_size_basis.Height);
                    picMultiMeterDigital.Location = new Point(((this.ClientSize.Width - (grpVFOA.Location.X + grpVFOA.Width)) -
                        (picMultiMeterDigital.Width / 6)) * 2, txtMultiText.Location.Y + txtMultiText.Height + 9);
                    // picMultiMeterDigital.Size = new Size(pic_multi_meter_size_basis.Width * 2, pic_multi_meter_size_basis.Height);
                    //grpMultimeter.Size = new Size(grpMultimeter.Width, grpVFOB.Height);
                    if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                    {
                        picMultiMeterDigital.Size = new Size(pic_multi_meter_size_basis.Width * 2, pic_multi_meter_size_basis.Height - lblMultiSMeter.Height);
                        lblMultiSMeter.Size = new Size(lbl_multi_smeter_size_basis.Width * 2, lbl_multi_smeter_size_basis.Height);
                        lblMultiSMeter.Location = new Point(picMultiMeterDigital.Location.X, picMultiMeterDigital.Location.Y +
                                                            picMultiMeterDigital.Height);
                        lblMultiSMeter.Show();
                        lblMultiSMeter.BringToFront();
                    }
                    else lblMultiSMeter.Hide();

                    comboMeterRXMode.Location = new Point(txtMultiText.Location.X - comboMeterRXMode.Width - 5,
                        txtMultiText.Location.Y + 2);
                    // comboMeterTXMode.Location = new Point(comboMeterRXMode.Location.X, 
                    //     comboMeterRXMode.Location.Y + comboMeterRXMode.Height + 1);
                    comboMeterTXMode.Location = new Point(txtMultiText.Location.X + txtMultiText.Width + 5,
                        txtMultiText.Location.Y + 2);
                    chkPower.Location = new Point(30, grpVFOA.Location.Y + 2);
                    chkRX2.Location = new Point(chkPower.Location.X + chkRX2.Width + 5, chkPower.Location.Y);
                    radRX1Show.Location = new Point(chkRX2.Location.X + radRX1Show.Width + 15, chkRX2.Location.Y + 4);
                    radRX2Show.Location = new Point(radRX1Show.Location.X + radRX1Show.Width + 5, radRX1Show.Location.Y);
                    //chkMON.Location = new Point(10, chkPower.Location.Y + chkPower.Height + 5);
                    chkMON.Location = new Point(grpVFOA.Location.X - chkMON.Width - 10, grpVFOA.Location.Y + 8);
                    //chkMUT.Location = new Point(chkMON.Location.X + chkMON.Width, chkPower.Location.Y + chkPower.Height + 5);
                    chkTUN.Location = new Point(chkMON.Location.X, chkMON.Location.Y + chkMON.Height + 4);
                    chkMOX.Location = new Point(chkTUN.Location.X, chkTUN.Location.Y + chkTUN.Height + 4);
                    chkVOX.Location = new Point(chkMON.Location.X - chkVOX.Width - 10, chkMON.Location.Y);

                    chkRX2SR.Location = new Point(chkTUN.Location.X - chkRX2SR.Width - 10, chkTUN.Location.Y); //DUP
                    chkFWCATU.Location = new Point(chkMOX.Location.X - chkFWCATU.Width - 10, chkMOX.Location.Y); //CTUN

                    lblAF2.Location = new Point(5, chkPower.Location.Y + chkPower.Height + 5);
                    // ptbAF.Location = new Point(lblAF2.Location.X + lblAF2.Width, lblAF2.Location.Y);
                    ptbRX1AF.Location = new Point(lblAF2.Location.X + lblAF2.Width, lblAF2.Location.Y);
                    lblPWR2.Location = new Point(ptbRX1AF.Location.X + ptbRX1AF.Width + 2, ptbRX1AF.Location.Y);
                    ptbPWR.Location = new Point(lblPWR2.Location.X + lblPWR2.Width, lblPWR2.Location.Y);
                    //ptbAF.Location = new Point(10, chkPower.Location.Y + chkPower.Height + 2);
                    lblRF2.Location = new Point(5, lblAF2.Location.Y + lblAF2.Height + 2);
                    ptbRF.Location = new Point(lblRF2.Location.X + lblRF2.Width, ptbRX1AF.Location.Y + ptbRX1AF.Height + 2);
                    comboAGC.Location = new Point(ptbRF.Location.X + ptbRF.Width + 2, ptbRF.Location.Y + 3);
                    //chkMUT.Location = new Point(ptbAF.Location.X + ptbAF.Width + 2, ptbAF.Location.Y);

                    udRX1StepAttData.Location = new Point(comboAGC.Location.X + udRX1StepAttData.Width + 2, comboAGC.Location.Y);
                    comboPreamp.Location = new Point(comboAGC.Location.X + comboPreamp.Width + 2, comboAGC.Location.Y);

                    if (rx1_step_att_present)
                    {
                        comboPreamp.Hide();
                        udRX1StepAttData.Show();
                        //udRX1StepAttData.Location = new Point(comboAGC.Location.X + udRX1StepAttData.Width + 2, comboAGC.Location.Y);
                    }
                    else
                    {
                        udRX1StepAttData.Hide();
                        comboPreamp.Show();
                        // comboPreamp.Location = new Point(comboAGC.Location.X + comboPreamp.Width + 2, comboAGC.Location.Y);
                    }
                }
                else
                    if (show_rx2)
                    {
                        top = grpVFOB.Height + 10;
                        //top = grpMultimeter.Location.Y + grpMultimeter.Height + 5;
                        //grpVFOA.Location = new Point(gr_VFOA_basis_location.X + (h_delta / 4), gr_VFOA_basis_location.Y);
                        grpVFOB.Location = new Point((this.ClientSize.Width - grpVFOB.Width) / 2, gr_VFOB_basis_location.Y);
                        //grpVFOB.Location = new Point(gr_VFOB_basis_location.X + h_delta - (h_delta / 4), gr_VFOB_basis_location.Y);
                        txtRX2Meter.Location = new Point(((this.ClientSize.Width - (grpVFOB.Location.X + grpVFOB.Width)) -
                            (txtRX2Meter.Width / 12)) * 2, grpVFOB.Location.Y + 5);
                        // picMultiMeterDigital.Location = txtMultiText.Location;
                        // picMultiMeterDigital.Location = new Point(txtMultiText.Location.X, txtMultiText.Location.Y + txtMultiText.Height + 8);
                        picRX2Meter.Size = new Size(pic_rx2meter_size_basis.Width * 2, pic_rx2meter_size_basis.Height);
                        picRX2Meter.Location = new Point(((this.ClientSize.Width - (grpVFOB.Location.X + grpVFOB.Width)) -
                            (picRX2Meter.Width / 6)) * 2, txtRX2Meter.Location.Y + txtRX2Meter.Height + 9);
                        // picMultiMeterDigital.Size = new Size(pic_multi_meter_size_basis.Width * 2, pic_multi_meter_size_basis.Height);
                        //grpMultimeter.Size = new Size(grpMultimeter.Width, grpVFOB.Height);
                        if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                        {
                            picRX2Meter.Size = new Size(pic_rx2meter_size_basis.Width * 2, pic_rx2meter_size_basis.Height - lblRX2Meter.Height);
                            lblRX2Meter.Size = new Size(lbl_rx2meter_size_basis.Width * 2, lbl_rx2meter_size_basis.Height);
                            lblRX2Meter.Location = new Point(picRX2Meter.Location.X, picRX2Meter.Location.Y +
                                                                picRX2Meter.Height);
                            lblRX2Meter.Show();
                            lblRX2Meter.BringToFront();
                        }
                        else lblRX2Meter.Hide();

                        comboRX2MeterMode.Location = new Point(txtRX2Meter.Location.X - comboRX2MeterMode.Width - 5,
                            txtRX2Meter.Location.Y + 2);
                        // comboMeterTXMode.Location = new Point(comboMeterRXMode.Location.X, 
                        //     comboMeterRXMode.Location.Y + comboMeterRXMode.Height + 1);
                        comboMeterTXMode.Location = new Point(txtRX2Meter.Location.X + txtRX2Meter.Width + 5,
                            txtRX2Meter.Location.Y + 2);
                        chkPower.Location = new Point(30, grpVFOB.Location.Y + 2);
                        chkRX2.Location = new Point(chkPower.Location.X + chkRX2.Width + 5, chkPower.Location.Y);
                        radRX1Show.Location = new Point(chkRX2.Location.X + radRX1Show.Width + 15, chkRX2.Location.Y + 4);
                        radRX2Show.Location = new Point(radRX1Show.Location.X + radRX1Show.Width + 5, radRX1Show.Location.Y);
                        //chkMON.Location = new Point(10, chkPower.Location.Y + chkPower.Height + 5);
                        chkMON.Location = new Point(grpVFOB.Location.X - chkMON.Width - 10, grpVFOB.Location.Y + 8);
                        //chkMUT.Location = new Point(chkMON.Location.X + chkMON.Width, chkPower.Location.Y + chkPower.Height + 5);
                        chkTUN.Location = new Point(chkMON.Location.X, chkMON.Location.Y + chkMON.Height + 4);
                        chkMOX.Location = new Point(chkTUN.Location.X, chkTUN.Location.Y + chkTUN.Height + 4);
                        chkVOX.Location = new Point(chkMON.Location.X - chkVOX.Width - 10, chkMON.Location.Y);
                        chkRX2SR.Location = new Point(chkTUN.Location.X - chkRX2SR.Width - 10, chkTUN.Location.Y); //DUP
                        //  chkFWCATU.Location = new Point(chkMOX.Location.X - chkFWCATU.Width - 10, chkMOX.Location.Y); //CTUN
                        chkX2TR.Location = new Point(chkMOX.Location.X - chkX2TR.Width - 10, chkMOX.Location.Y); //RX2 CTUN
                        lblAF2.Location = new Point(5, chkPower.Location.Y + chkPower.Height + 5);
                        //ptbAF.Location = new Point(lblAF2.Location.X + lblAF2.Width, lblAF2.Location.Y); 
                        ptbRX2AF.Location = new Point(lblAF2.Location.X + lblAF2.Width, lblAF2.Location.Y);
                        //ptbAF.Location = new Point(10, chkPower.Location.Y + chkPower.Height + 2);
                        lblPWR2.Location = new Point(ptbRX2AF.Location.X + ptbRX2AF.Width + 2, ptbRX2AF.Location.Y);
                        ptbPWR.Location = new Point(lblPWR2.Location.X + lblPWR2.Width, lblPWR2.Location.Y);
                        lblRF2.Location = new Point(5, lblAF2.Location.Y + lblAF2.Height + 2);
                        ptbRX2RF.Location = new Point(lblRF2.Location.X + lblRF2.Width, ptbRX2AF.Location.Y + ptbRX2AF.Height + 2);
                        comboRX2AGC.Location = new Point(ptbRX2RF.Location.X + ptbRX2RF.Width + 2, ptbRX2RF.Location.Y + 3);
                        //chkMUT.Location = new Point(ptbAF.Location.X + ptbAF.Width + 2, ptbAF.Location.Y);
                        //comboPreamp.Location = new Point(comboRX2AGC.Location.X + comboPreamp.Width + 2, comboRX2AGC.Location.Y);

                        comboPreamp.Location = new Point(comboRX2AGC.Location.X + comboPreamp.Width + 2, comboRX2AGC.Location.Y);
                        udRX1StepAttData.Location = new Point(comboRX2AGC.Location.X + udRX1StepAttData.Width + 2, comboRX2AGC.Location.Y);
                        comboRX2Preamp.Location = new Point(comboRX2AGC.Location.X + comboRX2Preamp.Width + 2, comboRX2AGC.Location.Y);
                        udRX2StepAttData.Location = new Point(comboRX2AGC.Location.X + udRX2StepAttData.Width + 2, comboRX2AGC.Location.Y);

                        if (rx2_preamp_present)
                        {
                            if (rx2_step_att_present)
                            {
                                comboPreamp.Hide();
                                udRX1StepAttData.Hide();
                                comboRX2Preamp.Hide();
                                udRX2StepAttData.Show();
                                // udRX2StepAttData.Location = new Point(comboRX2AGC.Location.X + udRX2StepAttData.Width + 2, comboRX2AGC.Location.Y);
                            }
                            else
                            {
                                comboPreamp.Hide();
                                udRX1StepAttData.Hide();
                                udRX2StepAttData.Hide();
                                comboRX2Preamp.Show();
                                // comboRX2Preamp.Location = new Point(comboRX2AGC.Location.X + comboRX2Preamp.Width + 2, comboRX2AGC.Location.Y);
                            }
                        }
                        else
                        {
                            if (rx1_step_att_present)
                            {
                                comboPreamp.Hide();
                                comboRX2Preamp.Hide();
                                udRX2StepAttData.Hide();
                                udRX1StepAttData.Show();
                                //udRX1StepAttData.Location = new Point(comboRX2AGC.Location.X + udRX1StepAttData.Width + 2, comboRX2AGC.Location.Y);
                            }
                            else
                            {
                                udRX1StepAttData.Hide();
                                comboRX2Preamp.Hide();
                                udRX2StepAttData.Hide();
                                comboPreamp.Show();
                                // comboPreamp.Location = new Point(comboRX2AGC.Location.X + comboPreamp.Width + 2, comboRX2AGC.Location.Y);
                            }
                        }
                    }
            }

            panelDisplay.Location = new Point(0, top + 20);

            int height = this.ClientSize.Height - (top + 25);

            if (this.showBandControls)
                height -= radBand160.Height;

            if (this.showModeControls)
                height -= radModeLSB.Height;

            panelDisplay.Size = new Size(this.ClientSize.Width, height);

            picDisplay.Location = new Point(0, 0);
            picDisplay.Size = new Size(panelDisplay.Size.Width, panelDisplay.Size.Height - (txtOverload_size_basis.Height + 5 + tb_display_pan_size_basis.Height + 5));
            picWaterfall.Location = new Point(0, 0);
            picWaterfall.Size = new Size(panelDisplay.Size.Width, panelDisplay.Size.Height - (txtOverload_size_basis.Height + 5 + tb_display_pan_size_basis.Height + 5));

            top = picDisplay.Location.Y + picDisplay.Height;
            txtDisplayCursorOffset.Location = new Point(picDisplay.Location.X, top);
            txtDisplayCursorPower.Location = new Point(txtDisplayCursorOffset.Location.X + txtDisplayCursorOffset.Width, top);
            txtDisplayCursorFreq.Location = new Point(txtDisplayCursorPower.Location.X + txtDisplayCursorPower.Width, top);
            txtOverload.Location = new Point(txtDisplayCursorFreq.Location.X + txtDisplayCursorFreq.Width, top);
            txtOverload.Size = new Size(picDisplay.Width - (txtDisplayPeakOffset.Width + txtDisplayPeakPower.Width + txtDisplayPeakFreq.Width + txtDisplayCursorOffset.Width + txtDisplayCursorPower.Width + txtDisplayCursorFreq.Width), txtOverload_size_basis.Height);
            txtDisplayPeakOffset.Location = new Point(txtOverload.Location.X + txtOverload.Width, top);
            txtDisplayPeakPower.Location = new Point(txtDisplayPeakOffset.Location.X + txtDisplayPeakOffset.Width, top);
            txtDisplayPeakFreq.Location = new Point(txtDisplayPeakPower.Location.X + txtDisplayPeakPower.Width, top);

            txtDisplayOrionMKIIPAVolts.Location = new Point(picDisplay.Location.X, top);
            txtDisplayOrionMKIIPAAmps.Location = new Point(txtDisplayOrionMKIIPAVolts.Location.X + txtDisplayOrionMKIIPAVolts.Width, top);
            txtDisplayOrionMKIIBlank.Location = new Point(txtDisplayOrionMKIIPAAmps.Location.X + txtDisplayOrionMKIIPAAmps.Width, top);

            top = txtDisplayPeakOffset.Location.Y + txtDisplayPeakOffset.Height + 5;
            int dynamicWidth = picDisplay.Width - (lblDisplayPan.Width + btnDisplayPanCenter.Width + 5 +
                comboDisplayMode.Width + 5 + lblDisplayZoom.Width + radDisplayZoom05.Width * 4);

            lblDisplayPan.Location = new Point(picDisplay.Location.X, top);
            ptbDisplayPan.Location = new Point(lblDisplayPan.Location.X + lblDisplayPan.Width, top);
            ptbDisplayPan.Size = new Size(dynamicWidth / 2, tb_display_pan_size_basis.Height);
            btnDisplayPanCenter.Location = new Point(ptbDisplayPan.Location.X + ptbDisplayPan.Width, top);
            //			btnDisplayPanCenter_Click(this, EventArgs.Empty);

            // :NOTE: Force update on pan control
            ptbDisplayPan.Value = ptbDisplayPan.Value;
            ptbDisplayPan_Scroll(this, EventArgs.Empty);

            comboDisplayMode.Parent = panelDisplay;
            comboDisplayMode.Location = new Point(btnDisplayPanCenter.Location.X + btnDisplayPanCenter.Width + 5, top);

            lblDisplayZoom.Location = new Point(comboDisplayMode.Location.X + comboDisplayMode.Width + 5, top);
            ptbDisplayZoom.Location = new Point(lblDisplayZoom.Location.X + lblDisplayZoom.Width, top);
            ptbDisplayZoom.Size = new Size(dynamicWidth / 2, tb_display_zoom_size_basis.Height);

            // :NOTE: Force update on zoom control
            ptbDisplayZoom.Value = ptbDisplayZoom.Value;
            ptbDisplayZoom_Scroll(this, EventArgs.Empty);

            radDisplayZoom05.Location = new Point(ptbDisplayZoom.Location.X + ptbDisplayZoom.Width, top);
            radDisplayZoom1x.Location = new Point(radDisplayZoom05.Location.X + radDisplayZoom05.Width, top);
            radDisplayZoom2x.Location = new Point(radDisplayZoom1x.Location.X + radDisplayZoom1x.Width, top);
            radDisplayZoom4x.Location = new Point(radDisplayZoom2x.Location.X + radDisplayZoom2x.Width, top);

            top = panelDisplay.Location.Y + panelDisplay.Height;

            if (this.showBandControls)
            {
                if (panelBandVHF.Visible)  //w3sz added
                {
                    panelBandVHF.Location = new Point(this.ClientSize.Width / 2 - radBandVHF0.Width * 7, top); //w3sz added "V"
                    panelBandVHF.Size = new Size(radBandVHF0.Width * 15, radBandVHF0.Height); //w3sz added "V" 
                    radBandVHF0.Location = new Point(0, 0);//w3sz added
                    radBandVHF1.Location = new Point(radBandVHF0.Location.X + radBandVHF0.Width, 0);//w3sz added
                    radBandVHF2.Location = new Point(radBandVHF1.Location.X + radBandVHF1.Width, 0);//w3sz added
                    radBandVHF3.Location = new Point(radBandVHF2.Location.X + radBandVHF2.Width, 0);//w3sz added
                    radBandVHF4.Location = new Point(radBandVHF3.Location.X + radBandVHF3.Width, 0);//w3sz added
                    radBandVHF5.Location = new Point(radBandVHF4.Location.X + radBandVHF4.Width, 0);//w3sz added
                    radBandVHF6.Location = new Point(radBandVHF5.Location.X + radBandVHF5.Width, 0);//w3sz added
                    radBandVHF7.Location = new Point(radBandVHF6.Location.X + radBandVHF6.Width, 0);//w3sz added
                    radBandVHF8.Location = new Point(radBandVHF7.Location.X + radBandVHF7.Width, 0);//w3sz added
                    radBandVHF9.Location = new Point(radBandVHF8.Location.X + radBandVHF8.Width, 0);//w3sz added
                    radBandVHF10.Location = new Point(radBandVHF9.Location.X + radBandVHF9.Width, 0);//w3sz added
                    radBandVHF11.Location = new Point(radBandVHF10.Location.X + radBandVHF10.Width, 0);//w3sz added
                    radBandVHF12.Location = new Point(radBandVHF11.Location.X + radBandVHF11.Width, 0);//w3sz added
                    radBandVHF13.Location = new Point(radBandVHF12.Location.X + radBandVHF12.Width, 0);//w3sz added 
                    btnBandHF.Location = new Point(radBandVHF13.Location.X + radBandVHF13.Width, 0);//w3sz added
                    top = panelBandVHF.Location.Y + panelBandVHF.Height;//w3sz added "V"
                }
                else if (panelBandHF.Visible)
                {
                    panelBandHF.Location = new Point(this.ClientSize.Width / 2 - radBand160.Width * 7, top);
                    panelBandHF.Size = new Size(radBand160.Width * 15, radBand160.Height);
                    radBand160.Location = new Point(0, 0);
                    radBand80.Location = new Point(radBand160.Location.X + radBand160.Width, 0);
                    radBand60.Location = new Point(radBand80.Location.X + radBand80.Width, 0);
                    radBand40.Location = new Point(radBand60.Location.X + radBand60.Width, 0);
                    radBand30.Location = new Point(radBand40.Location.X + radBand40.Width, 0);
                    radBand20.Location = new Point(radBand30.Location.X + radBand30.Width, 0);
                    radBand17.Location = new Point(radBand20.Location.X + radBand20.Width, 0);
                    radBand15.Location = new Point(radBand17.Location.X + radBand17.Width, 0);
                    radBand12.Location = new Point(radBand15.Location.X + radBand15.Width, 0);
                    radBand10.Location = new Point(radBand12.Location.X + radBand12.Width, 0);
                    radBand6.Location = new Point(radBand10.Location.X + radBand10.Width, 0);
                    radBandWWV.Location = new Point(radBand6.Location.X + radBand2.Width, 0);
                    radBandGEN.Location = new Point(radBandWWV.Location.X + radBandWWV.Width, 0);
                    btnBandVHF.Location = new Point(radBandGEN.Location.X + radBandGEN.Width, 0);//w3sz added
                    top = panelBandHF.Location.Y + panelBandHF.Height;
                }
                else
                {
                    panelBandGEN.Location = new Point(this.ClientSize.Width / 2 - radBandGEN0.Width * 7, top);
                    panelBandGEN.Size = new Size(radBandGEN0.Width * 15, radBandGEN0.Height);
                    radBandGEN0.Location = new Point(0, 0);
                    radBandGEN1.Location = new Point(radBandGEN0.Location.X + radBandGEN0.Width, 0);
                    radBandGEN2.Location = new Point(radBandGEN1.Location.X + radBandGEN1.Width, 0);
                    radBandGEN3.Location = new Point(radBandGEN2.Location.X + radBandGEN2.Width, 0);
                    radBandGEN4.Location = new Point(radBandGEN3.Location.X + radBandGEN3.Width, 0);
                    radBandGEN5.Location = new Point(radBandGEN4.Location.X + radBandGEN4.Width, 0);
                    radBandGEN6.Location = new Point(radBandGEN5.Location.X + radBandGEN5.Width, 0);
                    radBandGEN7.Location = new Point(radBandGEN6.Location.X + radBandGEN6.Width, 0);
                    radBandGEN8.Location = new Point(radBandGEN7.Location.X + radBandGEN7.Width, 0);
                    radBandGEN9.Location = new Point(radBandGEN8.Location.X + radBandGEN8.Width, 0);
                    radBandGEN10.Location = new Point(radBandGEN9.Location.X + radBandGEN9.Width, 0);
                    radBandGEN11.Location = new Point(radBandGEN10.Location.X + radBandGEN10.Width, 0);
                    radBandGEN12.Location = new Point(radBandGEN11.Location.X + radBandGEN11.Width, 0);
                    radBandGEN13.Location = new Point(radBandGEN12.Location.X + radBandGEN12.Width, 0);
                    btnBandHF1.Location = new Point(radBandGEN13.Location.X + radBandGEN13.Width, 0);
                    top = panelBandGEN.Location.Y + panelBandGEN.Height;
                }

            }

            if (this.showModeControls)
            {
                panelMode.Location = new Point(this.ClientSize.Width / 2 - radModeLSB.Width * 6, top);
                panelMode.Size = new Size(radModeLSB.Width * 12, radModeLSB.Height);

                radModeLSB.Location = new Point(0, 0);
                radModeUSB.Location = new Point(radModeLSB.Location.X + radModeLSB.Width, 0);
                radModeDSB.Location = new Point(radModeUSB.Location.X + radModeUSB.Width, 0);
                radModeCWL.Location = new Point(radModeDSB.Location.X + radModeDSB.Width, 0);
                radModeCWU.Location = new Point(radModeCWL.Location.X + radModeCWL.Width, 0);
                radModeFMN.Location = new Point(radModeCWU.Location.X + radModeCWU.Width, 0);
                radModeAM.Location = new Point(radModeFMN.Location.X + radModeFMN.Width, 0);
                radModeSAM.Location = new Point(radModeAM.Location.X + radModeAM.Width, 0);
                radModeSPEC.Location = new Point(radModeSAM.Location.X + radModeSAM.Width, 0);
                radModeDIGL.Location = new Point(radModeSPEC.Location.X + radModeSPEC.Width, 0);
                radModeDIGU.Location = new Point(radModeDIGL.Location.X + radModeDIGL.Width, 0);
                radModeDRM.Location = new Point(radModeDIGU.Location.X + radModeDIGU.Width, 0);

                top = panelMode.Location.Y + panelMode.Height;
            }

            if (!this.showTopControls)
            {
                grpVFOA.Location = new Point(grpVFOA.Location.X, -200);
                grpVFOB.Location = new Point(grpVFOB.Location.X, -200);
                radRX1Show.Location = new Point(radRX1Show.Location.X, -200);
                radRX2Show.Location = new Point(radRX2Show.Location.X, -200);
            }
        }
        // W1CEG:  End
        #endregion Collapsible Display

        private void mnuFilter_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Name;

            switch (menu_item)
            {
                case "FilterToolStripMenuItem1":
                    radFilter1.Checked = true;
                    break;
                case "FilterToolStripMenuItem2":
                    radFilter2.Checked = true;
                    break;
                case "FilterToolStripMenuItem3":
                    radFilter3.Checked = true;
                    break;
                case "FilterToolStripMenuItem4":
                    radFilter4.Checked = true;
                    break;
                case "FilterToolStripMenuItem5":
                    radFilter5.Checked = true;
                    break;
                case "FilterToolStripMenuItem6":
                    radFilter6.Checked = true;
                    break;
                case "FilterToolStripMenuItem7":
                    radFilter7.Checked = true;
                    break;
                case "FilterToolStripMenuItem8":
                    radFilter8.Checked = true;
                    break;
                case "FilterToolStripMenuItem9":
                    radFilter9.Checked = true;
                    break;
                case "FilterToolStripMenuItem10":
                    radFilter10.Checked = true;
                    break;
            }
        }

        private void mnuFilterRX2_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Name;

            switch (menu_item)
            {
                case "kToolStripMenuItem":
                    radRX2Filter1.Checked = true;
                    break;
                case "kToolStripMenuItem1":
                    radRX2Filter2.Checked = true;
                    break;
                case "kToolStripMenuItem2":
                    radRX2Filter3.Checked = true;
                    break;
                case "kToolStripMenuItem3":
                    radRX2Filter4.Checked = true;
                    break;
                case "kToolStripMenuItem4":
                    radRX2Filter5.Checked = true;
                    break;
                case "toolStripMenuItem13":
                    radRX2Filter6.Checked = true;
                    break;
                case "toolStripMenuItem14":
                    radRX2Filter7.Checked = true;
                    break;
            }
        }

        private void mnuDSP_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            switch (menu_item)
            {
                case "NR":
                    if (chkNR.CheckState == CheckState.Unchecked || chkNR.CheckState == CheckState.Indeterminate) chkNR.CheckState = CheckState.Checked;
                    else if (chkNR.CheckState == CheckState.Checked) chkNR.CheckState = CheckState.Unchecked;
                    break;
                case "NR2":
                    if (chkNR.CheckState == CheckState.Unchecked || chkNR.CheckState == CheckState.Checked) chkNR.CheckState = CheckState.Indeterminate;
                    else if (chkNR.CheckState == CheckState.Indeterminate) chkNR.CheckState = CheckState.Unchecked;
                    break;
                case "ANF":
                    chkANF.Checked = !chkANF.Checked;
                    break;
                case "NB":
                    if (chkNB.CheckState == CheckState.Unchecked || chkNB.CheckState == CheckState.Indeterminate) chkNB.CheckState = CheckState.Checked;
                    else if (chkNB.CheckState == CheckState.Checked) chkNB.CheckState = CheckState.Unchecked;
                    break;
                case "NB2":
                    if (chkNB.CheckState == CheckState.Unchecked || chkNB.CheckState == CheckState.Checked) chkNB.CheckState = CheckState.Indeterminate;
                    else if (chkNB.CheckState == CheckState.Indeterminate) chkNB.CheckState = CheckState.Unchecked;
                    break;
                case "SNB":
                    chkDSPNB2.Checked = !chkDSPNB2.Checked;
                    break;
                case "BIN":
                    chkBIN.Checked = !chkBIN.Checked;
                    break;
                case "Multi-RX":
                    chkEnableMultiRX.Checked = !chkEnableMultiRX.Checked;
                    break;
                case "AVG":
                    chkDisplayAVG.Checked = !chkDisplayAVG.Checked;
                    break;
                case "Peak":
                    chkDisplayPeak.Checked = !chkDisplayPeak.Checked;
                    break;
            }
        }

        private void mnuDSPRX2_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            switch (menu_item)
            {
                case "NR":
                    if (chkRX2NR.CheckState == CheckState.Unchecked || chkRX2NR.CheckState == CheckState.Indeterminate) chkRX2NR.CheckState = CheckState.Checked;
                    else if (chkRX2NR.CheckState == CheckState.Checked) chkRX2NR.CheckState = CheckState.Unchecked;
                    break;
                case "NR2":
                    if (chkRX2NR.CheckState == CheckState.Unchecked || chkRX2NR.CheckState == CheckState.Checked) chkRX2NR.CheckState = CheckState.Indeterminate;
                    else if (chkRX2NR.CheckState == CheckState.Indeterminate) chkRX2NR.CheckState = CheckState.Unchecked;
                    break;
                case "ANF":
                    chkRX2ANF.Checked = !chkRX2ANF.Checked;
                    break;
                case "NB":
                    if (chkRX2NB.CheckState == CheckState.Unchecked || chkRX2NB.CheckState == CheckState.Indeterminate) chkRX2NB.CheckState = CheckState.Checked;
                    else if (chkRX2NB.CheckState == CheckState.Checked) chkRX2NB.CheckState = CheckState.Unchecked;
                    break;
                case "NB2":
                    if (chkRX2NB.CheckState == CheckState.Unchecked || chkRX2NB.CheckState == CheckState.Checked) chkRX2NB.CheckState = CheckState.Indeterminate;
                    else if (chkRX2NB.CheckState == CheckState.Indeterminate) chkRX2NB.CheckState = CheckState.Unchecked;
                    break;
                case "BIN":
                    chkRX2BIN.Checked = !chkRX2BIN.Checked;
                    break;
                case "SNB":
                    chkRX2NB2.Checked = !chkRX2NB2.Checked;
                    break;
                case "AVG":
                    chkRX2DisplayAVG.Checked = !chkRX2DisplayAVG.Checked;
                    break;
                case "Peak":
                    chkRX2DisplayPeak.Checked = !chkRX2DisplayPeak.Checked;
                    break;
            }
        }

        private void mnuBand_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            switch (menu_item)
            {
                case "160":
                    radBand160_Click(this, EventArgs.Empty);
                    break;
                case "80":
                    radBand80_Click(this, EventArgs.Empty);
                    break;
                case "60":
                    radBand60_Click(this, EventArgs.Empty);
                    break;
                case "40":
                    radBand40_Click(this, EventArgs.Empty);
                    break;
                case "30":
                    radBand30_Click(this, EventArgs.Empty);
                    break;
                case "20":
                    radBand20_Click(this, EventArgs.Empty);
                    break;
                case "17":
                    radBand17_Click(this, EventArgs.Empty);
                    break;
                case "15":
                    radBand15_Click(this, EventArgs.Empty);
                    break;
                case "12":
                    radBand12_Click(this, EventArgs.Empty);
                    break;
                case "10":
                    radBand10_Click(this, EventArgs.Empty);
                    break;
                case "6":
                    radBand6_Click(this, EventArgs.Empty);
                    break;
                case "WWV":
                    radBandWWV_Click(this, EventArgs.Empty);
                    break;
                case "GEN":
                    radBandGEN_Click(this, EventArgs.Empty);
                    break;
            }
        }

        private void mnuBandRX2_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            //if(comboRX2Band.Focused)
            //{
            bool B160 = false, B80 = false, B60 = false, B40 = false, B30 = false, B20 = false, B17 = false, B15 = false, B12 = false, B10 = false, B6 = false, BWWV = false, BGEN = false;
            string filter = "", mode = "";
            double freq = 0.0;
            bool b = false;
            bool CTUN;
            int ZoomFactor;
            double CenterFreq;
            switch (menu_item)
            {
                case "160m":
                    b = DB.GetBandStack("160M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B160 = true;
                    comboRX2Band.Text = "160m";
                    break;
                case "80m":
                    b = DB.GetBandStack("80M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B80 = true;
                    comboRX2Band.Text = "80m";
                    break;
                case "60m":
                    b = DB.GetBandStack("60M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B60 = true;
                    comboRX2Band.Text = "60m";
                    break;
                case "40m":
                    b = DB.GetBandStack("40M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B40 = true;
                    comboRX2Band.Text = "40m";
                    break;
                case "30m":
                    b = DB.GetBandStack("30M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B30 = true;
                    comboRX2Band.Text = "30m";
                    break;
                case "20m":
                    b = DB.GetBandStack("20M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B20 = true;
                    comboRX2Band.Text = "20";
                    break;
                case "17m":
                    b = DB.GetBandStack("17M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B17 = true;
                    comboRX2Band.Text = "17";
                    break;
                case "15m":
                    b = DB.GetBandStack("15M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B15 = true;
                    comboRX2Band.Text = "15";
                    break;
                case "12m":
                    b = DB.GetBandStack("12M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B12 = true;
                    comboRX2Band.Text = "12m";
                    break;
                case "10m":
                    b = DB.GetBandStack("10M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B10 = true;
                    comboRX2Band.Text = "10m";
                    break;
                case "6m":
                    b = DB.GetBandStack("6M", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    B6 = true;
                    comboRX2Band.Text = "6m";
                    break;
                case "GEN":
                    b = DB.GetBandStack("GEN", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    BGEN = true;
                    comboRX2Band.Text = "GEN";
                    break;
                case "WWV":
                    b = DB.GetBandStack("WWV", 0, out mode, out filter, out freq, out CTUN, out ZoomFactor, out CenterFreq);
                    BWWV = true;
                    comboRX2Band.Text = "WWV";
                    break;
            }

            if (b)
            {
                VFOBFreq = freq;
                RX2DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode);
                VFOBFreq = freq;
                RX2Filter = (Filter)Enum.Parse(typeof(Filter), filter);
            }

            btnHidden.Focus();

            toolStripMenuItem2.Checked = B160;
            toolStripMenuItem3.Checked = B80;
            toolStripMenuItem4.Checked = B60;
            toolStripMenuItem5.Checked = B40;
            toolStripMenuItem6.Checked = B30;
            toolStripMenuItem7.Checked = B20;
            toolStripMenuItem8.Checked = B17;
            toolStripMenuItem9.Checked = B15;
            toolStripMenuItem10.Checked = B12;
            toolStripMenuItem11.Checked = B10;
            toolStripMenuItem12.Checked = B6;
            wWVToolStripMenuItem.Checked = BWWV;
            gENToolStripMenuItem.Checked = BGEN;
        }

        private void mnuMode_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            switch (menu_item)
            {
                case "LSB":
                    radModeLSB.Checked = true;
                    break;
                case "USB":
                    radModeUSB.Checked = true;
                    break;
                case "DSB":
                    radModeDSB.Checked = true;
                    break;
                case "CWL":
                    radModeCWL.Checked = true;
                    break;
                case "CWU":
                    radModeCWU.Checked = true;
                    break;
                case "FM":
                    radModeFMN.Checked = true;
                    break;
                case "AM":
                    radModeAM.Checked = true;
                    break;
                case "SAM":
                    radModeSAM.Checked = true;
                    break;
                case "SPEC":
                    radModeSPEC.Checked = true;
                    break;
                case "DIGL":
                    radModeDIGL.Checked = true;
                    break;
                case "DIGU":
                    radModeDIGU.Checked = true;
                    break;
                case "DRM":
                    radModeDRM.Checked = true;
                    break;
            }
        }

        private void mnuModeRX2_Click(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(ToolStripMenuItem)) return;
            string menu_item = ((ToolStripMenuItem)sender).Text;

            switch (menu_item)
            {
                case "LSB":
                    radRX2ModeLSB.Checked = true;
                    break;
                case "USB":
                    radRX2ModeUSB.Checked = true;
                    break;
                case "DSB":
                    radRX2ModeDSB.Checked = true;
                    break;
                case "CWL":
                    radRX2ModeCWL.Checked = true;
                    break;
                case "CWU":
                    radRX2ModeCWU.Checked = true;
                    break;
                case "FM":
                    radRX2ModeFMN.Checked = true;
                    break;
                case "AM":
                    radRX2ModeAM.Checked = true;
                    break;
                case "SAM":
                    radRX2ModeSAM.Checked = true;
                    break;
                case "DIGL":
                    radRX2ModeDIGL.Checked = true;
                    break;
                case "DIGU":
                    radRX2ModeDIGU.Checked = true;
                    break;
                case "DRM":
                    radRX2ModeDRM.Checked = true;
                    break;
            }
        }

        private void mnuShowTopControls_Click(object sender, EventArgs e)
        {
            SetupForm.chkShowTopControls.Checked = !SetupForm.chkShowTopControls.Checked;
        }

        private void mnuShowBandControls_Click(object sender, EventArgs e)
        {
            SetupForm.chkShowBandControls.Checked = !SetupForm.chkShowBandControls.Checked;
        }

        private void mnuShowModeControls_Click(object sender, EventArgs e)
        {
            SetupForm.chkShowModeControls.Checked = !SetupForm.chkShowModeControls.Checked;
        }

        private void radBand_CheckedChanged(object sender, EventArgs e)
        {
            if (sender == null) return;
            if (sender.GetType() != typeof(RadioButtonTS)) return;
            RadioButtonTS radioBtnTS = (RadioButtonTS)sender;
            if (!radioBtnTS.Checked) return;

            bandtoolStripMenuItem1.Checked = radBand160.Checked;
            bandtoolStripMenuItem2.Checked = radBand80.Checked;
            bandtoolStripMenuItem3.Checked = radBand60.Checked;
            bandtoolStripMenuItem4.Checked = radBand40.Checked;
            bandtoolStripMenuItem5.Checked = radBand30.Checked;
            bandtoolStripMenuItem14.Checked = radBand20.Checked;
            bandtoolStripMenuItem7.Checked = radBand17.Checked;
            bandtoolStripMenuItem8.Checked = radBand15.Checked;
            bandtoolStripMenuItem9.Checked = radBand12.Checked;
            bandtoolStripMenuItem10.Checked = radBand10.Checked;
            bandtoolStripMenuItem11.Checked = radBand6.Checked;
            bandtoolStripMenuItem12.Checked = radBandWWV.Checked;
            bandtoolStripMenuItem13.Checked = radBandGEN.Checked;

            // !!!!! - G3OQD            if (!rx1_click_tune_drag && !rx2_click_tune_drag)
            // !!!!! - G3OQD                 chkFWCATU.Checked = false;
        }

        private void ptbRX0Gain_MouseEnter(object sender, EventArgs e)
        {
            // ptbRX0Gain.Size = new Size(24, 100);
        }

        private void ptbRX0Gain_MouseLeave(object sender, EventArgs e)
        {
            // ptbRX0Gain.Size = new Size(24, 52);
        }

        private void eSCToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!RX2PreampPresent) return;

            if (diversityForm == null || diversityForm.IsDisposed)
                diversityForm = new DiversityForm(this);

            diversityForm.Show();
            diversityForm.Focus();
            UpdateDiversityValues();
        }

        private void ptbRX1AF_Scroll(object sender, EventArgs e)
        {
            RX0Gain = ptbRX1AF.Value;
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX1AF.Focus();
            }
        }

        private void ptbRX2AF_Scroll(object sender, EventArgs e)
        {
            RX2Gain = ptbRX2AF.Value;
            if (sender.GetType() == typeof(PrettyTrackBar))
            {
                ptbRX2AF.Focus();
            }
        }

        private void radRX1Show_CheckedChanged(object sender, EventArgs e)
        {
            if (radRX1Show.Checked)
            {
                radRX2Show.Checked = false;
                show_rx2 = false;
                if (CollapsedDisplay)
                    CollapseDisplay();
            }
            else
            {
                radRX2Show.Checked = true;
                show_rx2 = true;
                if (CollapsedDisplay)
                    CollapseDisplay();
            }
        }

        private void radRX2Show_CheckedChanged(object sender, EventArgs e)
        {
            if (radRX2Show.Checked)
            {
                radRX1Show.Checked = false;
                show_rx1 = false;
                if (CollapsedDisplay)
                    CollapseDisplay();
            }
            else
            {
                radRX1Show.Checked = true;
                show_rx1 = true;
                if (CollapsedDisplay)
                    CollapseDisplay();
            }
        }

        private void ptbAF_DoubleClick(object sender, EventArgs e)
        {

        }

        private void ptbRX1AF_DoubleClick(object sender, EventArgs e)
        {
            if (CollapsedDisplay)
                chkMUT.Checked = !chkMUT.Checked;
        }

        private void ptbRX2AF_DoubleClick(object sender, EventArgs e)
        {
            if (CollapsedDisplay)
                chkRX2Mute.Checked = !chkRX2Mute.Checked;
        }

        private void udRX1StepAttData_ValueChanged(object sender, EventArgs e)
        {
            if (SetupForm != null)
            {
                if (mox)
                {
                    if (udRX1StepAttData.Value > 31) udRX1StepAttData.Value = 31;
                    SetupForm.ATTOnTX = (int)udRX1StepAttData.Value;
                }
                SetupForm.HermesAttenuatorData = (int)udRX1StepAttData.Value;
            }
            if (udRX1StepAttData.Focused) btnHidden.Focus();
        }

        private void udRX2StepAttData_ValueChanged(object sender, EventArgs e)
        {
            RX2AttenuatorData = (int)udRX2StepAttData.Value;
            if (udRX2StepAttData.Focused) btnHidden.Focus();
        }

        private void lblPreamp_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (current_hpsdr_model != HPSDRModel.HPSDR)
                SetupForm.HermesEnableAttenuator = !SetupForm.HermesEnableAttenuator;
        }

        private void lblRX2Preamp_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (current_hpsdr_model != HPSDRModel.HPSDR)
                SetupForm.RX2EnableAtt = !SetupForm.RX2EnableAtt;
        }

        private void picWaterfall_Resize(object sender, EventArgs e)
        {
            if (chkPower.Checked)
                pause_DisplayThread = true;

            Display.Target = picDisplay;
            switch (current_display_engine)
            {
                case (DisplayEngine.GDI_PLUS):
                    {
                        //  Thread.Sleep(100);
                        //  Display.Init();
                        // UpdateDisplay();
                        //  picDisplay.Invalidate();
                    }
                    break;
                //case (DisplayEngine.DIRECT_X):
                //    if (!booting)
                //    {
                //        Display.WaterfallTarget = picWaterfall;
                //        Display.DirectXRelease();
                //        Display.DirectXInit();
                //        //  Display.RenderDirectX();
                //    }
                // break;
            }
            pause_DisplayThread = false;
        }

        private byte n1mm_state = 0;
        public void SetFocusMaster(bool state)
        {
            if (n1mm_delay != null)
            {
                if (state)
                {
                    if (n1mm_state == 1)
                    {
                        n1mm_state = 3;
                        ToggleFocusMasterTimer();
                    }
                }
                else
                {
                    if (n1mm_state == 0)
                        n1mm_state = 1;
                    else if (n1mm_state == 3)
                    {
                        n1mm_state = 1;
                        n1mm_delay.Enabled = false;
                    }

                }
            }
        }

        private void chkFWCATU_CheckedChanged(object sender, EventArgs e)
        {
            // if (SetupForm != null) SetupForm.X2TR = chkX2TR.Checked;
            if (chkFWCATU.Checked)
            {
                bool rit_on = chkRIT.Checked;
                chkRIT.Checked = false;
                ClickTuneDisplay = chkFWCATU.Checked;
                chkRIT.Checked = rit_on;
            }
            else ClickTuneDisplay = false;

            if (chkFWCATU.Checked && chkVFOSync.Checked)
            {
                if (!chkX2TR.Checked) chkX2TR.Checked = true;
            }

            // if (chkX2TR.Checked) chkX2TR.BackColor = button_selected_color;
            // else chkX2TR.BackColor = SystemColors.Control;
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            if (stereo_diversity)
                txtVFOBFreq_LostFocus(this, EventArgs.Empty);
        }

        private void linearityToolStripMenuItem_Click(object sender, EventArgs e)
        {
            psform.Dispose();
            if (psform.IsDisposed)
                psform = new PSForm(this);
            psform.Show();
            psform.Focus();
        }

        private void RAtoolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (raForm == null || raForm.IsDisposed)
                raForm = new RAForm(this);
            raForm.Show();
            raForm.Focus();

        }

        private void SetDigiMode(int rx, string mode)
        {
            if (rx == 1)
            {
                if (rx1dm == null) rx1dm = new DigiMode();
                switch (mode)
                {
                    case "set":
                        chkNoiseGate.Checked = false;
                        chkTXEQ.Checked = false;
                        SetupForm.TXLevelerOn = false;
                        chkCPDR.Checked = false;
                        chkRXEQ.Checked = false;
                        chkANF.Checked = false;
                        //chkNR.Checked = false;
                        chkNR.CheckState = CheckState.Unchecked;
                        SetupForm.CESSB = false;
                        SetupForm.CFCEnabled = false;
                        SetupForm.PhaseRotEnabled = false;
                        break;
                    case "preset":
                        rx1dm.DEXP = chkNoiseGate.Checked;
                        rx1dm.TXEQ = chkTXEQ.Checked;
                        rx1dm.LEVELER = SetupForm.TXLevelerOn;
                        rx1dm.COMPRESSOR = chkCPDR.Checked;
                        rx1dm.RXEQ = chkRXEQ.Checked;
                        rx1dm.ANF = chkANF.Checked;
                        rx1dm.NR = chkNR.CheckState;
                        rx1dm.CESSB = SetupForm.CESSB;
                        rx1dm.CFCEnabled = SetupForm.CFCEnabled;
                        rx1dm.PhaseRotEnabled = SetupForm.PhaseRotEnabled;
                        break;
                    case "reset":
                        chkNoiseGate.Checked = rx1dm.DEXP;
                        chkTXEQ.Checked = rx1dm.TXEQ;
                        SetupForm.TXLevelerOn = rx1dm.LEVELER;
                        chkCPDR.Checked = rx1dm.COMPRESSOR;
                        chkRXEQ.Checked = rx1dm.RXEQ;
                        chkANF.Checked = rx1dm.ANF;
                        chkNR.CheckState = rx1dm.NR;
                        SetupForm.CESSB = rx1dm.CESSB;
                        SetupForm.CFCEnabled = rx1dm.CFCEnabled;
                        SetupForm.PhaseRotEnabled = rx1dm.PhaseRotEnabled;
                        break;
                }
            }

            if (rx == 2)
            {
                if (rx2dm == null) rx2dm = new DigiMode();
                switch (mode)
                {
                    case "set":
                        chkRX2ANF.Checked = false;
                        chkRX2NR.CheckState = CheckState.Unchecked;
                        break;
                    case "preset":
                        rx2dm.ANF = chkRX2ANF.Checked;
                        rx2dm.NR = chkRX2NR.CheckState;
                        break;
                    case "reset":
                        chkRX2ANF.Checked = rx2dm.ANF;
                        chkRX2NR.CheckState = rx2dm.NR;
                        break;
                }
            }
        }

        private void chkCWFWKeyer_CheckedChanged(object sender, EventArgs e)
        {
            CWFWKeyer = chkCWFWKeyer.Checked;
        }

        private void CAT2port_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {

        }

        private void chkMON_Click(object sender, EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.CWL || rx1_dsp_mode == DSPMode.CWU)
                chkCWSidetone.Checked = chkMON.Checked;
        }

        private void chkNR_CheckStateChanged(object sender, EventArgs e)
        {
            switch (chkNR.CheckState)
            {
                case CheckState.Checked: // NR
                    radio.GetDSPRX(0, 0).RXANR2Run = 0;
                    radio.GetDSPRX(0, 1).RXANR2Run = 0;
                    radio.GetDSPRX(0, 0).NoiseReduction = true;
                    radio.GetDSPRX(0, 1).NoiseReduction = true;
                    NRToolStripMenuItem.Checked = true;
                    NR2ToolStripMenuItem1.Checked = false;
                    cat_nr2_status = 0;
                    cat_nr_status = 1;
                    chkNR.Text = "NR";
                    break;
                case CheckState.Indeterminate: // NR2
                    radio.GetDSPRX(0, 0).NoiseReduction = false;
                    radio.GetDSPRX(0, 1).NoiseReduction = false;
                    radio.GetDSPRX(0, 0).RXANR2Run = 1;
                    radio.GetDSPRX(0, 1).RXANR2Run = 1;
                    NRToolStripMenuItem.Checked = false;
                    NR2ToolStripMenuItem1.Checked = true;
                    cat_nr_status = 0;
                    cat_nr2_status = 1;
                    chkNR.Text = "NR2";
                    break;
                case CheckState.Unchecked: // all off
                    radio.GetDSPRX(0, 0).NoiseReduction = false;
                    radio.GetDSPRX(0, 1).NoiseReduction = false;
                    radio.GetDSPRX(0, 0).RXANR2Run = 0;
                    radio.GetDSPRX(0, 1).RXANR2Run = 0;
                    NRToolStripMenuItem.Checked = false;
                    NR2ToolStripMenuItem1.Checked = false;
                    cat_nr_status = 0;
                    cat_nr2_status = 0;
                    chkNR.Text = "NR";
                    break;
            }
        }

        private void chkRX2NR_CheckStateChanged(object sender, EventArgs e)
        {
            switch (chkRX2NR.CheckState)
            {
                case CheckState.Checked: // NR
                    radio.GetDSPRX(1, 0).RXANR2Run = 0;
                    radio.GetDSPRX(1, 1).RXANR2Run = 0;
                    radio.GetDSPRX(1, 0).NoiseReduction = true;
                    radio.GetDSPRX(1, 1).NoiseReduction = true;
                    nR2ToolStripMenuItem.Checked = true;
                    NR2StripMenuItem2.Checked = false;
                    cat_rx2_nr2_status = 0;
                    cat_rx2_nr_status = 1;
                    chkRX2NR.Text = "NR";
                    break;
                case CheckState.Indeterminate: // NR2
                    radio.GetDSPRX(1, 0).RXANR2Run = 1;
                    radio.GetDSPRX(1, 1).RXANR2Run = 1;
                    radio.GetDSPRX(1, 0).NoiseReduction = false;
                    radio.GetDSPRX(1, 1).NoiseReduction = false;
                    nR2ToolStripMenuItem.Checked = false;
                    NR2StripMenuItem2.Checked = true;
                    cat_rx2_nr_status = 0;
                    cat_rx2_nr2_status = 1;
                    chkRX2NR.Text = "NR2";
                    break;
                case CheckState.Unchecked: // all off
                    radio.GetDSPRX(1, 0).NoiseReduction = false;
                    radio.GetDSPRX(1, 1).NoiseReduction = false;
                    radio.GetDSPRX(1, 0).RXANR2Run = 0;
                    radio.GetDSPRX(1, 1).RXANR2Run = 0;
                    nR2ToolStripMenuItem.Checked = false;
                    NR2StripMenuItem2.Checked = false;
                    cat_rx2_nr_status = 0;
                    cat_rx2_nr2_status = 0;
                    chkRX2NR.Text = "NR";
                    break;

            }
        }

        private void wBToolStripMenuItem_Click(object sender, EventArgs e)
        {
            cmaster.Getwb(0).WBdisplay.Init();
            if (current_hpsdr_hardware == HPSDRHW.HermesII)
                NetworkIO.SetWBPacketsPerFrame(8);
            else NetworkIO.SetWBPacketsPerFrame(32);
            NetworkIO.SetWBEnable(0, 1);
            cmaster.Getwb(0).WBdisplay.StartDisplay(32);
        }

        private void pIToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (path_Illustrator == null || path_Illustrator.IsDisposed)
                path_Illustrator = new Path_Illustrator(this);
            path_Illustrator.Show();
            path_Illustrator.Focus();
        }

        private void chkNB_CheckStateChanged(object sender, EventArgs e)
        {
            switch (chkNB.CheckState)
            {
                case CheckState.Checked: // NB
                    specRX.GetSpecRX(0).NB2On = false;
                    specRX.GetSpecRX(0).NBOn = true;
                    NB2ToolStripMenuItem.Checked = false;
                    NBToolStripMenuItem.Checked = true;
                    cat_nb1_status = 1;
                    cat_nb2_status = 0;
                    chkNB.Text = "NB";
                    break;
                case CheckState.Indeterminate: // NB2
                    specRX.GetSpecRX(0).NBOn = false;
                    specRX.GetSpecRX(0).NB2On = true;
                    NBToolStripMenuItem.Checked = false;
                    NB2ToolStripMenuItem.Checked = true;
                    cat_nb1_status = 0;
                    cat_nb2_status = 1;
                    chkNB.Text = "NB2";
                    break;
                case CheckState.Unchecked: // all off                    
                    specRX.GetSpecRX(0).NBOn = false;
                    specRX.GetSpecRX(0).NB2On = false;
                    NB2ToolStripMenuItem.Checked = false;
                    NBToolStripMenuItem.Checked = false;
                    cat_nb1_status = 0;
                    cat_nb2_status = 0;
                    chkNB.Text = "NB";
                    break;
            }
            cmaster.CMSetFRXNBRun(0);
            cmaster.CMSetFRXNB2Run(0);
        }

        private void chkRX2NB_CheckStateChanged(object sender, EventArgs e)
        {
            switch (chkRX2NB.CheckState)
            {
                case CheckState.Checked: // NB
                    specRX.GetSpecRX(1).NB2On = false;
                    specRX.GetSpecRX(1).NBOn = true;
                    nB2ToolStripMenuItem1.Checked = true;
                    nBRX2ToolStripMenuItem.Checked = false;
                    cat_rx2nb1_status = 1;
                    cat_rx2nb2_status = 0;
                    chkRX2NB.Text = "NB";
                    break;
                case CheckState.Indeterminate: // NB2
                    specRX.GetSpecRX(1).NBOn = false;
                    specRX.GetSpecRX(1).NB2On = true;
                    nBRX2ToolStripMenuItem.Checked = true;
                    nB2ToolStripMenuItem1.Checked = false;
                    cat_rx2nb1_status = 0;
                    cat_rx2nb2_status = 1;
                    chkRX2NB.Text = "NB2";
                    break;
                case CheckState.Unchecked: // all off                    
                    specRX.GetSpecRX(1).NBOn = false;
                    specRX.GetSpecRX(1).NB2On = false;
                    nB2ToolStripMenuItem1.Checked = false;
                    nBRX2ToolStripMenuItem.Checked = false;
                    cat_rx2nb1_status = 0;
                    cat_rx2nb2_status = 0;
                    chkRX2NB.Text = "NB";
                    break;
            }
            cmaster.CMSetFRXNBRun(1);
            cmaster.CMSetFRXNB2Run(1);
        }

        // RX2 Spectral Noise Blanker (SNB)
        private void chkRX2NB2_CheckStateChanged(object sender, EventArgs e)
        {
            if (chkRX2NB2.Checked) chkRX2NB2.BackColor = button_selected_color;
            else chkRX2NB2.BackColor = SystemColors.Control;
            WDSP.SetRXASNBARun(WDSP.id(2, 0), chkRX2NB2.Checked);
            cat_rx2snb_status = Convert.ToInt32(chkRX2NB2.Checked);
        }

        //============================================================================ 
        //============================================================================ 
        // ke9ns add Click here to start/stop TX Waterfall ID
        //============================================================================ 
        //============================================================================ 
        private void TXIDMenuItem_MouseDown(object sender, MouseEventArgs e)
        {
            /*
                        if ((!TXIDMenuItem.Checked) && (callsignTextBox.BackColor == Color.MediumSpringGreen) && (chkPower.Checked)) // cant transmit unless you have a valid callsign waterfall id wave file and Radio is ON
                        {
                            // WaveOptions.RECPLAY1 = true; // force wave into POST
                            WaveForm.RECPLAY = true;

                            Txfh = TXFilterHigh;         // save original filter size
                            TXFilterHigh = 2600;         // reduce size for text waterfall ID

                            if (chkVAC1.Checked)
                            {
                                vac1 = 1;
                                chkVAC1.Checked = false;
                            }

                            TXIDMenuItem.Text = "Creating";   // transmit will  be displayed in the wave.cs form

                            menuStrip1.Invalidate();
                            menuStrip1.Update();

                            TXIDMenuItem.Checked = true;
                        }
                        else
                        {
                            //  Debug.WriteLine("WATERFALL OFF======================");
                            WaveForm.TXIDPlay = false; // tell wave.cs not to create or send waterfall id
                            this.TXIDMenuItem.Text = "TX WaterID";

                            TXIDMenuItem.Checked = false;

                            if (Txfh > 0) TXFilterHigh = Txfh;         // put back original filter size

                            if (vac1 == 1)
                            {
                                vac1 = 0;
                                Thread.Sleep(100);
                                chkVAC1.Checked = true;

                                // Task.Delay(200);
                            }

                            chkMOX.Checked = false;

                        } // was checked when clicked
            */
        } // mousedown on TXID menu item

        //============================================================================ 
        //============================================================================ 
        // ke9ns add turn on/off peak values (bottom right side of panadapter window)
        //============================================================================ 
        //============================================================================ 
        private static int peak1 = 0;
        private void txtDisplayPeakOffset_TextChanged(object sender, EventArgs e) // ke9ns ADD toggle on/off this display
        {

            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
        }

        private void txtDisplayPeakFreq_TextChanged(object sender, EventArgs e)
        {
            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
        }

        //=========================================================
        // ke9ns add open up bandstack window when you click on the bandstack index
        private void regBox1_Click(object sender, EventArgs e)
        {
            if (StackForm == null || StackForm.IsDisposed) StackForm = new StackControl(this);
            StackForm.Show();
            StackForm.Focus();
            StackForm.WindowState = FormWindowState.Normal; // ke9ns add
        }// regBox1_Click

        // ke9ns add
        public static int bslock = 0;

        public static int BandStackLock
        {
            get { return bslock; }
            set
            {
                bslock = value;
            }
        }

        //==============================================================
        // ke9ns add  open up bandstack window when you click on the bandstack index
        private void regBox_Click(object sender, EventArgs e)
        {
            if (StackForm == null || StackForm.IsDisposed) StackForm = new StackControl(this);
            StackForm.Show();
            StackForm.Focus();
            StackForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        //=====================================================================
        // ke9ns add
        private void txtNOAA_MouseDown(object sender, MouseEventArgs e)
        {

            if (noaaON == 0)
            {
                noaaON = 1; // turn on space weather
                btnHidden.Focus();
            }
            else
            {
                noaaON = 0; // shut down thread
                suncounter = 2;
                RadioBlackout = GeoBlackout = " ";

                // txtNOAA.Text = "Space WX: OFF";
                //  txtNOAA2.Text = "Click On";
            }

        } // txtNOAA_Mousedown

        //========================================================================
        //========================================================================
        // ke9ns add

        private void checkBoxID_CheckedChanged(object sender, EventArgs e)
        {
            //    if (checkBoxID.Checked == true)
            //    {

            //        WaveForm.RECPLAY = true;

            //    }

        } //checkBoxID_CheckedChanged

        public static int suncounter = 2; // for space weather
        public static int noaaON = 0; // for space weather
        public static int SFI = 0;       // for Space weather
        public static int SN = 0;        // for Space weather
        public static int Aindex = 0;    // for Space weather
        public static int Kindex = 0;    // for Space weather
        public static string RadioBlackout = " ";    // R scale
        public static string GeoBlackout = " ";      // G scale
        public static int EISN = 0;                    // Estimated International Sunspot Number
        private string serverPath;       // for Space weather
        private string serverPath1;       // for Space weather

        public void NOAA()
        {

            Debug.WriteLine("GET NOAA=========");

            suncounter = 1;
            serverPath = "ftp://ftp.swpc.noaa.gov/pub/latest/wwv.txt";

            FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverPath);

            //  textBox1.Text += "Attempt to download Space Weather \r\n";

            request.KeepAlive = true;
            request.UsePassive = true;
            request.UseBinary = true;

            request.Method = WebRequestMethods.Ftp.DownloadFile;
            string username = "anonymous";
            string password = "guest";
            request.Credentials = new NetworkCredential(username, password);

            string noaa = null;

            try
            {
                FtpWebResponse response = (FtpWebResponse)request.GetResponse();

                Stream responseStream = response.GetResponseStream();
                StreamReader reader = new StreamReader(responseStream);
                noaa = reader.ReadToEnd();

                reader.Close();
                response.Close();
                //   Debug.WriteLine("noaa=== " + noaa);

                //   textBox1.Text += "NOAA Download complete \r\n";



                //--------------------------------------------------------------------
                if (noaa.Contains("Solar flux ")) // 
                {

                    int ind = noaa.IndexOf("Solar flux ") + 11;

                    try
                    {
                        SFI = (int)(Convert.ToDouble(noaa.Substring(ind, 3)));
                        Debug.WriteLine("SFI " + SFI);
                    }
                    catch (Exception)
                    {
                        SFI = 0;
                    }


                } // SFI

                if (noaa.Contains("A-index ")) // 
                {

                    int ind = noaa.IndexOf("A-index ") + 8;

                    try
                    {
                        Aindex = (int)(Convert.ToDouble(noaa.Substring(ind, 2)));
                        Debug.WriteLine("Aindex " + Aindex);
                    }
                    catch (Exception)
                    {
                        Aindex = 0;
                    }


                } // Aindex

                if (noaa.Contains("K-index ") && noaa.Contains(" was ")) // 
                {

                    int ind = noaa.IndexOf(" was ") + 5;

                    try
                    {
                        Kindex = (int)(Convert.ToDouble(noaa.Substring(ind, 2)));
                        Debug.WriteLine("Kindex " + Aindex);
                    }
                    catch (Exception)
                    {
                        Kindex = 0;
                    }


                } // Kindex


                if (noaa.Contains("Radio blackouts reaching the ")) // 
                {

                    int ind = noaa.IndexOf("Radio blackouts reaching the ") + 29;

                    try
                    {
                        RadioBlackout = noaa.Substring(ind, 2);
                        Debug.WriteLine("Radio Blackout " + RadioBlackout);
                    }
                    catch (Exception)
                    {
                        RadioBlackout = " ";
                    }


                } // radio blackouts
                else
                {
                    RadioBlackout = " ";
                }

                if (noaa.Contains("level occurred") && noaa.Contains("Geomagnetic storms reaching the ")) // 
                {

                    int ind = noaa.IndexOf("Geomagnetic storms reaching the ") + 32;

                    try
                    {
                        GeoBlackout = noaa.Substring(ind, 2);
                        Debug.WriteLine("Geomagnetic storms" + GeoBlackout);
                    }
                    catch (Exception)
                    {
                        GeoBlackout = " ";
                    }


                } //geo storms
                else
                {
                    GeoBlackout = " ";
                }

                if (RadioBlackout != " ")
                {
                    RadioBlackout = RadioBlackout + GeoBlackout;
                    Debug.WriteLine("radio-geo " + RadioBlackout);

                }
                else
                {
                    RadioBlackout = GeoBlackout;
                    Debug.WriteLine("geo " + RadioBlackout);
                }

            } // try
            catch (Exception)
            {
                noaaON = 0; // failure to get data
            }

            Debug.WriteLine("endof NOAA thread");


            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            // ke9ns get Estimated International Sunspot Number (EISN)


            Debug.WriteLine("GET SIDC=========");

            suncounter = 1;
            serverPath1 = "http://www.sidc.be/silso/DATA/EISN/EISN_current.txt";

            try
            {

                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(serverPath1);
                HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();

                Stream responseStream1 = webResponse.GetResponseStream();
                StreamReader streamReader1 = new StreamReader(responseStream1);

                string eisn = streamReader1.ReadToEnd();

                responseStream1.Close();
                streamReader1.Close();


                Debug.WriteLine("GET SIDC1=========" + eisn);

                int len = eisn.Length;

                Debug.WriteLine("GET SIDC2=========" + len);

                string sub1 = eisn.Substring(len - 18, 3); // get Sunspot value from end of file (newest data)

                Debug.WriteLine("GET SIDC3=========" + sub1);

                try
                {
                    EISN = Convert.ToInt16(sub1);

                }
                catch (Exception)
                {
                    EISN = 0;
                    Debug.WriteLine("Failed to detect EISN# from text file");

                }

            }
            catch (Exception)
            {
                Debug.WriteLine("Could not get SIDC EISN#");
            }

            Debug.WriteLine("endof SIDC thread");


        }


        private void radBandWWV_MouseDown(object sender, MouseEventArgs e)
        {
            bool CTUN = ClickTuneDisplay;
            int ZoomFactor = ptbDisplayZoom.Value;
            double CenterFreq = center_frequency;
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_wwv_register < 9)
                {
                    DB.AddBandStack("WWV", "SAM", "F5", 25.000000, CTUN, ZoomFactor, CenterFreq); // take current band, DSP mode, filter, and freq
                    DB.AddBandText(25.000000, 25.000000, "WWV", false);

                    UpdateBandStackRegisters();
                    UpdateBandButtonColors();
                }
            } // right click
        }

        private void autoBrightBox_MouseUp(object sender, MouseEventArgs e)
        {
            // autoBrightBox.ForeColor = Color.White;
        }

        private void ckQuickPlay_MouseUp(object sender, MouseEventArgs e)
        {


            //  ckQuickPlay.ContextMenu.Show() = false;

            // textBox1.ShortcutsEnabled = false;
        }



        //============================================================================
        // ke9ns add to determine if you want the peak db numbers to appear in the lower right of the pan display area
        private void txtDisplayPeakPower_TextChanged(object sender, EventArgs e)
        {
            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
        }

        private void lblCPUMeter_Click(object sender, EventArgs e)
        {

        }

        private void txtVFOAMSD_TextChanged(object sender, EventArgs e)
        {

        }




        //============================================================================================
        // ke9ns add everything below as part of PowerMate add one
        //================================================================================================
        // Button Push event handler
        //================================================================================================
        /*
            public void OnButtonEvent(HidDevice.PowerMate.ButtonState bs, int value, int value1, int value2)
               {

                   switch (bs)   // 2 cases UP or DOwn
                   {
                       case HidDevice.PowerMate.ButtonState.Down:
                           {
                               Trace.WriteLine(" down");
                               if (RIT == true)
                               {
                                   RITValue = 0; // reset RIT back to zero if you hit the KNOB
                               }
                               else
                               {
                                   if (setupForm.chkBoxIND.Checked == true)
                                   {
                                       if (setupForm.tune_step_index2 >= 6)
                                       {
                                           setupForm.tune_step_index2 = 3 % tune_step_list.Count;
                                           setupForm.txtWheelTune2.Text = tune_step_list[setupForm.tune_step_index2].Name;

                                       }
                                       else
                                       {
                                           setupForm.ChangeTuneStepUp2();
                                       }
                                   }
                                   else
                                   {
                                       if (tune_step_index >= 6)
                                       {
                                           tune_step_index = 3 % tune_step_list.Count;
                                           txtWheelTune.Text = tune_step_list[tune_step_index].Name;

                                       }
                                       else
                                       {
                                           ChangeTuneStepUp();
                                       }
                                   }
                               }
                           }
                           break;

                       case HidDevice.PowerMate.ButtonState.Up:
                           {
                               Trace.WriteLine("up");

                           }
                           break;
                   } // switch


               } // onbutton



               //================================================================================================
               //   LED brightness event handler (slider)
               //================================================================================================

               public void OnSliderBrightness(object sender, EventArgs e)
               {
                   TrackBar slider = sender as TrackBar;

                   if (slider != null)
                   {
                       //  LEDV = (int)slider.Value;
                       this.powerMate.LedBrightness = (byte)slider.Value; // get slider bar value to set LED


                       Trace.WriteLine(slider.Value.ToString());
                   }

               }
               */

        /*
        public static int CTUN3 = 0; // ke9ns add keep rundisplay() thread from updating pan and water too soon in CTUn mode
        public static bool CTUN = false; // ke9ns add CTUN feature ON/OFF
        public static long CTUN1_HZ = 0; // ke9ns add used in Calcdisplayfreq() to keep display from moving and allow vfoa bandpass to move across display
        public double tempVFOAFreq = 0.0; //  ke9ns add hold new vfo freq seperate from real vfoafreq to sync up display movement
        public static int UPDATEOFF = 0; // ke9ns add pan & waterfall delay while CTUN is on and your sliding across the display

        //============================================================================
        // ke9ns add CTUN=0 normal, 1=main bandpass moves (just like the sub does across the display)
        //   public static bool ctun = false;


        // ke9ns add to turn on/off CTUN feature
        private void lblDisplayPan_MouseDown(object sender, MouseEventArgs e)
        {
            if (CTUN == false)
            {
                //  CTUN1_HZ = 0;
                CTUN = true;
                lblDisplayPan.ForeColor = Color.Red;
            }
            else
            {
                //  CTUN1_HZ = 0;
                CTUN = false;
                lblDisplayPan.ForeColor = Color.White;

            }

        } // pan text from console window


        // ke9ns add  make sure to turn off CTUN if not in water, or pan or panfall modes
        private bool CTUN1
        {
            get
            {
                return CTUN;
            }
            set
            {
                CTUN = value;
                if (CTUN == true) lblDisplayPan.ForeColor = Color.Red;
                else lblDisplayPan.ForeColor = Color.White;

            }


        } // CTUN1

        //================================================================================================
        // ke9ns add  PowerMate Griffin Knob rotation value event handler
        //================================================================================================
        public void OnRotateEvent(int value1)
        {
            // Trace.WriteLine("ROTATE "+ value1);

            if (((lastvalue < 0) && (value1 > 0)) || ((lastvalue > 0) && (value1 < 0))) // if knob changes directions, reset speed counter
            {
                speed = 0;
                lastvalue = value1;
                return;
            }

            lastvalue = value1;

            if (speed < (int)SetupForm.udSpeedPM.Value)
            {

                speed++;
                return; // wait until you turn knob in 1 direction far enough to exceed speed rating you set in setup.cs
            }
            else speed = 0; // you turned knob far enough so reset speed counter


            if (CTUN == false)
            {
                //---------------------------------------------
                if (value1 < 0)
                {
                    if (RIT == true)
                    {
                        RITValue = RITValue - 1;
                    }
                    else
                    {
                        if (SetupForm.chkBoxIND.Checked == true)
                        {

                            int num_steps = -1;

                            if (vfo_char_width == 0) GetVFOCharWidth();


                            int step = CurrentTuneStepHz2;  // ke9ns add


                            VFOAFreq = SnapTune(VFOAFreq, step, num_steps);

                        }
                        else
                        {
                            Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, -120));
                        }
                    }
                }
                else // value >= 0
                {
                    if (RIT == true)
                    {
                        RITValue = RITValue + 1;
                    }
                    else
                    {
                        if (SetupForm.chkBoxIND.Checked == true)
                        {
                            int num_steps = 1;

                            if (vfo_char_width == 0) GetVFOCharWidth();

                            int step = CurrentTuneStepHz2;  // ke9ns add

                            VFOAFreq = SnapTune(VFOAFreq, step, num_steps);

                        }
                        else
                        {
                            Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, 120));
                        }
                    }
                }
            } // CTUN false
            else
            {

                if ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER) || (Display.CurrentDisplayMode == DisplayMode.PANAFALL) || (Display.CurrentDisplayMode == DisplayMode.PANASCOPE) || (Display.CurrentDisplayMode == DisplayMode.WATERFALL))
                {
                    UPDATEOFF = 2; // ke9ns let system know not to update screen for a little while pan
                }

                if (value1 < 0)
                {
                    CTUN1_HZ = CTUN1_HZ - CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq - (double)CurrentTuneStepHz / 1e6; // vfoafreq in mhz
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }
                else // value >= 0
                {

                    CTUN1_HZ = CTUN1_HZ + CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq + (double)CurrentTuneStepHz / 1e6;
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }

                //   Debug.WriteLine("CTUN="+ CTUN1_HZ);


            } // CTUN true

        } //onrotateevent

        //================================================================================================
        // rotation value to screen invoked from above
        //================================================================================================

        void SetRotateLabel()
        {
            //  this.rotationLabel.Text = currentRotationalValue.ToString();

        }
        //================================================================================================
        // rotation value to screen invoked from above
        //================================================================================================

        void SetSENDLabel()
        {

        }


        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console

        */

        public static int m_port = 0;   // ke9ns add port# 
        public static bool m_terminated = true;

        public bool HttpServer
        {

            set
            {
                httpFile.HttpServer1();
            }

        } //HttpServer


        //=========================================================================================
        //=========================================================================================
        // ke9ns add to allow TX filter on main console SSB panel
        private void udTXFilterHigh_ValueChanged(object sender, EventArgs e)
        {
            if (SetupForm != null) SetupForm.TXFilterHigh = (int)udTXFilterHigh.Value;

        }

        // ke9ns add
        private void udTXFilterLow_ValueChanged(object sender, EventArgs e)
        {
            if (SetupForm != null) SetupForm.TXFilterLow = (int)udTXFilterLow.Value;
        }

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console

        public int HTTP_PORT
        {
            get
            {
                return (int)SetupForm.udHttpPort.Value;
            }

        } // HTTP_PORT

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public int HTTP_REFRESH
        {
            get
            {
                return (int)SetupForm.udHttpRefresh.Value;
            }

        } // HTTP_REFRESH

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public string HTTP_USER
        {
            get
            {
                return SetupForm.txtHttpUser.Text;
            }

        } // HTTP_PORT


        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public string HTTP_PASS
        {
            get
            {
                return SetupForm.txtHttpPass.Text;
            }

        } // HTTP_PORT

        //=========================================================================================
        //=========================================================================================
        // ke9ns add send hygain rotor command to DDUtil via the CAT port setup in Thetis
        public string spotDDUtil_Rotor // called from SPOT.cs routine when clicking on DX SPOT
        {
            set
            {

                try
                {
                    Debug.WriteLine("DDUTIL ROTOR1:");
                    // siolisten1.SIO.put(value);   // this is the DDUtil PORT found in setup and SIOListenerIII.cs
                }
                catch { }
            }

        } // 


        double sPrev = 0.0;
        double sPrev2 = 0.0;


        //================================================================================================
        //================================================================================================
        // ke9ns add to detect single Frequecy tones in a data stream  (audio.cs routine uses for wwv)
        public int Goertzel(float[] samples, int start, int end)
        {
            sPrev = 0.0;
            sPrev2 = 0.0;

            for (int i = start; i < end; i++)   // feedback
            {
                double s = samples[i] + SpotForm.Coeff * sPrev - sPrev2;
                sPrev2 = sPrev;
                sPrev = s;
            }

            double power = (sPrev2 * sPrev2) + (sPrev * sPrev) - ((SpotForm.Coeff * sPrev) * sPrev2);  // feedforward

            return (int)power; // magnitude of frequency in question within the stream
        } //  Goertzel


        //==================================================================================
        //==================================================================================
        // ke9ns for precision mSec timer (not used at this time)
        // ke9ns add  This timer runs at the periodic rate, repeatedly and  jmps to "TimerPeriodicEventCallback" when the timer is reached
        private void setup_timer(int cwxwpm)
        {

            if (timerID != 0) // if timer is running, kill it to start over
            {
                timeKillEvent(timerID);
            }

            // (delay, resolution, proc, user, mode)
            timerID = timeSetEvent(cwxwpm, 1, timeProcPeriodic, 0, (int)TimerMode.Periodic); //  jmps to "TimerPeriodicEventCallback" when the timer is reached


            if (timerID == 0)
            {
                Debug.Fail("1Timer creation failed.");
            }

        } // setup_timer

        //==================================================================================
        //==================================================================================
        private int timerID1;

        private TimeProc timeProcPeriodic1;

        // ke9ns for precision mSec timer for TUNE Pulser
        // ke9ns add  This timer is a one shot timer for the duty cycle of the tone jmps to "TimerPeriodicEventCallback1" when the timer is reached 
        private void setup_timer1(int cwxwpm)
        {

            if (timerID1 != 0)
            {
                timeKillEvent(timerID1);
            }

            // (delay, resolution, proc, user, mode)
            timerID1 = timeSetEvent(cwxwpm, 1, timeProcPeriodic1, 0, (int)TimerMode.OneShot); //  jmps to "TimerPeriodicEventCallback1" when the timer is reached


            if (timerID1 == 0)
            {

                Debug.Fail("2Timer creation failed.");
            }

        } // setup_timer1

        //=========================================================================================
        //=========================================================================================
        // rn3kk 
        public void startHttpServer(int port)
        {
            httpServer.start(port);
        }

        //=========================================================================================
        //=========================================================================================
        // rn3kk 
        public void stopHttpServer()
        {
            httpServer.stop();
        }

        //=========================================================================================
        //=========================================================================================
        // rn3kk add method for set VFOAFreq
        public void setVFOAFreqByPixel(int pixel)
        {
            Debug.WriteLine("Receive pixel: " + pixel.ToString());
            Debug.WriteLine("Panoram width: " + picDisplay.Width.ToString());
            float x = PixelToHz(pixel);
            Debug.WriteLine("Offset x:=" + x.ToString());

            double rf_freq = VFOAFreq + (double)x * 0.0000010;

            if (rx1_dsp_mode == DSPMode.CWL)
                rf_freq += (double)cw_pitch * 0.0000010;
            else if (rx1_dsp_mode == DSPMode.CWU)
                rf_freq -= (double)cw_pitch * 0.0000010;

            long f = (long)(rf_freq * 1e6);
            int mult = CurrentTuneStepHz;
            if (f % mult > mult / 2) f += (mult - f % mult);
            else f -= f % mult;
            rf_freq = (double)f * 1e-6;
            VFOAFreq = rf_freq;
        }



        //=========================================================================================
        //=========================================================================================
        // rn3kk add method for change if mousewheell on web
        public void wheelEventOnWeb(bool direction)
        {
            if (direction)
            {
                VFOAFreq += CurrentTuneStepMHz;
            }
            else
            {
                VFOAFreq -= CurrentTuneStepMHz;
            }
        }

        // rn3kk add
        public string getVFOAFreqString()
        {
            return txtVFOAFreq.Text;
        }



        // rn3kk add
        public string getVFOBFreqString()
        {
            return txtVFOBFreq.Text;
        }


        //=============================================================================
        // ke9ns add call DB routine and delete the current freq listed in the current bandstack
        public void PurgeBandStack(int xxx, string mode, string filter, string freq)
        {

            DB.PurgeBandStack(xxx, last_band, mode, filter, freq); // call database and delete 1 bandstack entry for the current freq


        } //  PurgeBandStack (this routine is called from stack.cs)

        //=============================================================================
        // ke9ns add call DB routine and SORT the current freq listed in the current bandstack
        public void SortBandStack(int g, string mode, string filter, double freq, bool CTUN, int ZoomFactor, double CenterFreq)
        {

            DB.SortBandStack(last_band, g, mode, filter, freq, CTUN, ZoomFactor, CenterFreq);  // call database and sort bandstack entries 

        }

        //=============================================================================
        // ke9ns add call DB routine and SORT the current freq listed in the current bandstack
        public void BandStackUpdate()
        {
            UpdateBandStackRegisters();  // recheck the remaining bandstack entries 

            SetRX1BandButton(RX1Band);   // update the remaining bandstack entries

            UpdateWaterfallLevelValues();

        } // 

        //============================================================================
        //============================================================================
        //============================================================================
        // ke9ns add to allow extra control of group panels (ie rounded edges)
        public static GraphicsPath CreatePath(float x, float y, float width, float height,
                                      float radius, bool RoundTopLeft, bool RoundTopRight, bool RoundBottomRight, bool RoundBottomLeft)
        {
            float xw = x + width;
            float yh = y + height;
            float xwr = xw - radius;
            float yhr = yh - radius;
            float xr = x + radius;
            float yr = y + radius;
            float r2 = radius * 2;
            float xwr2 = xw - r2;
            float yhr2 = yh - r2;

            GraphicsPath p = new GraphicsPath();
            p.StartFigure();

            //Top Left Corner

            if (RoundTopLeft)
            {
                p.AddArc(x, y, r2, r2, 180, 90);
            }
            else
            {
                p.AddLine(x, yr, x, y);
                p.AddLine(x, y, xr, y);

            }

            //Top Edge
            p.AddLine(xr, y, xwr, y);

            //Top Right Corner

            if (RoundTopRight)
            {
                p.AddArc(xwr2, y, r2, r2, 270, 90);
            }
            else
            {
                p.AddLine(xwr, y, xw, y);
                p.AddLine(xw, y, xw, yr);
            }


            //Right Edge
            p.AddLine(xw, yr, xw, yhr);

            //Bottom Right Corner

            if (RoundBottomRight)
            {
                p.AddArc(xwr2, yhr2, r2, r2, 0, 90);
            }
            else
            {
                p.AddLine(xw, yhr, xw, yh);
                p.AddLine(xw, yh, xwr, yh);
            }


            //Bottom Edge
            p.AddLine(xwr, yh, xr, yh);

            //Bottom Left Corner           

            if (RoundBottomLeft)
            {
                p.AddArc(x, yhr2, r2, r2, 90, 90);
            }
            else
            {
                p.AddLine(xr, yh, x, yh);
                p.AddLine(x, yh, x, yhr);
            }

            //Left Edge
            p.AddLine(x, yhr, x, yr);

            p.CloseFigure();

            return p;

        } // CreatePath(float x, float y, float width, float height,  float radius, bool RoundTopLeft, bool RoundTopRight, bool RoundBottomRight, bool RoundBottomLeft)



        //=======================================================================================================
        //=======================================================================================================
        //  grpVFOA.Paint += PaintBorderlessGroupBox;
        // ke9ns add draw rounded box around groupbox (but prefer to use the grpVFOA_PAINT event instead of this)
        private void PaintBorderlessGroupBox(object sender, PaintEventArgs p)
        {
            GroupBoxTS box = (GroupBoxTS)sender;

            GraphicsPath gPath = CreatePath(0, 0, box.Width - 1, box.Height - 1, 4, true, true, true, true); //

            p.Graphics.Clear(Color.Transparent);  // box.Parent.BackColor

            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;

            p.Graphics.FillPath(new SolidBrush(Color.Transparent), gPath);
            p.Graphics.DrawPath(new Pen(Color.Green, 2.2f), gPath);

            p.Graphics.DrawString(box.Text, box.Font, Brushes.White, 8, 0);

        } // PaintBorderlessGroupBox


        public void ForcePureSignalAutoCalDisable()
        {
            chkFWCATUBypass.Checked = false;
        }

        private void chkFWCATUBypass_CheckedChanged(object sender, EventArgs e)
        {
            psform.AutoCalEnabled = chkFWCATUBypass.Checked;
        }

        public bool PureSignalEnabled
        {
            get { return chkFWCATUBypass.Checked; }
            set { chkFWCATUBypass.Checked = value; }
        }

        private void chkRxAnt_CheckedChanged(object sender, EventArgs e)
        {
            AlexAntCtrlEnabled = alex_ant_ctrl_enabled;
        }

        private void chkQSK_CheckedChanged(object sender, EventArgs e)
        {
            // enable/disable QSK
            if (chkQSK.Checked)
            {
                // turn it on
                QSKEnabled = true;
            } else
            {
                // turn it off
                QSKEnabled = false;
            }
        }
    }

    public class DigiMode
    {
        public DigiMode()
        {

        }

        public bool DEXP { get; set; }
        public bool TXEQ { get; set; }
        public bool LEVELER { get; set; }
        public bool COMPRESSOR { get; set; }
        public bool RXEQ { get; set; }
        public bool ANF { get; set; }
        public bool CESSB { get; set; }
        public CheckState NR { get; set; }
        public bool CFCEnabled { get; set; }
        public bool PhaseRotEnabled { get; set; }
    }
}